   897       pshu $ !***************************************************************************
   897       pshu $ !*
  1478      tinyu $ !*      PPP-name:JIGGERGX.PAC 
   897       pshu $ !*
   897       pshu $ !***************************************************************************
   897       pshu $ !*
   897       pshu $ !*      This procedure gathers the JIGGERGX-program source
   897       pshu $ !*      modules, assembles and compiles them and binds
   897       pshu $ !*      objectmodules together and  builds load module.
   897       pshu $ !*
   897       pshu $ !***************************************************************************
   897       pshu $ !***************************************************************************
   897       pshu $ !TNSDL_TRANSLATOR = "sdlmaf"
   943    lifsong $ !TNSDL_TRANSLATOR = "tncheckc"
   897       pshu $ TNSDL_TRANSLATOR = "tnsdlza" ! Define used TNSDL-translator version
   897       pshu $ !
   897       pshu $ ! NOTE !  FOLLOWING SWITCHES (IF USED IN MAIN PROGRAM) SHOULD BE PASSED TO
   897       pshu $ !         TNSDL-MODULE:
   897       pshu $ !              -a, -b, -d, -falign, -fptr, -fpid_size,-ftime_size,
   897       pshu $ !              -ftimer_max, -g, -h, -i, -no, -nl, -nn, -u, -w, -z
   897       pshu $ !
   897       pshu $ ! NOTE !  IN THIS EXAMPLE -a,-b,-w ARE IN USE, IN REAL LIFE THERE MIGHT BE
   897       pshu $ !         TO USE OTHER SET OF SWITCHES
   897       pshu $ !
   897       pshu $ !          -a = ANSI-C (C386A)
   897       pshu $ !          -b = BUFFER MESSAGING
   897       pshu $ !          -w = WARMING IN USE
   897       pshu $ !
   897       pshu $ ! TNSDL-TRANSLATOR PARAMETERS, USED ALSO IN SEPARATE TRANSLATED TNSDL-MODULE
   897       pshu $ !
   897       pshu $ !! TNSDL_PARAMETERS = "-a -b -u -w -fchk_a -d test_logs=F"
   897       pshu $ TNSDL_PARAMETERS = "-a -b -u -w -d test_logs=F"
   943    lifsong $
   943    lifsong $ if TEST_IMG .eqs. 1 then goto use_fill
   943    lifsong $ 	FILL_CMD = "svnfill -inf jiggergx.inf -force -pid"
   943    lifsong    	goto next
   943    lifsong $ use_fill:
   943    lifsong $ 	FILL_CMD = "fill/pid jiggergx.inf"
   943    lifsong $ next:
   943    lifsong $
   897       pshu $ ! FETCH TNSDL - dtolib headers
  1109       pshu $ svnfetch export dtolib/trunk/dtocstgx.spd@2
  1109       pshu $ svnfetch export dtolib/trunk/dtobitgx.spd@2
  1109       pshu $ svnfetch export dtolib/trunk/dtopidgx.spd@2
  1109       pshu $ svnfetch export dtolib/trunk/dtobitgx.h@2
  1109       pshu $ svnfetch export dtolib/trunk/dtopidgx.h@2
  1183   weigchen $ svnfetch icl rncstarttimeimpro
  1260   huantang $ svnfetch icl rcyseb
  1183   weigchen $ 
   897       pshu $copy c_mac:mac037b1.h *
   897       pshu $
  1104   huantang 
   897       pshu $ !
  1260   huantang $ idcombb -inlist jiggergx.in1 jiggergx.in2 jiggergx.in3 rcyseb.lst  rncstarttimeimpro.lst -
  1260   huantang    -testlist rcyseb.lst rncstarttimeimpro.lst -out jiggergx.scc -all_open
  1087   huantang $ ttranw /c/no_include jiggergx.scc
  1087   huantang $ ttranw /c/plm_incompatibility_mode /env=(jiggergx.scc) jigdatgx.spd
  1309       pshu $ ttranw /c/plm_incompatibility_mode /env=(jiggergx.scc) jigmixgx.spd
  1309       pshu $ ttranw /c/plm_incompatibility_mode /env=(jiggergx.scc) /env=(jigdatgx.spd) jigmasgx.sdt
  1309       pshu $ ttranw /c/plm_incompatibility_mode /env=(jiggergx.scc) /env=(jigdatgx.spd) jigmsggx.sdt
   897       pshu $
   897       pshu $ defs="USE_REAL_LIBS"
  1104   huantang $ cinoptb /auxe=c386a_inc /prep=jiggergx.cin jigwrkgx.c,jigdbggx.c,jigopegx.c /define=('defs)
   897       pshu $ c386a jigwrkgx.c
   897       pshu $ c386a jigopegx.c /define=('defs)
  1104   huantang $ c386a jigdbggx.c 
  1104   huantang 
  1104   huantang $ !compile and bind posix
  1104   huantang $ !Setup the environment
  1104   huantang $ setuti posix
  1104   huantang $ ccu38b /ycx=posix jigposix.c  
  1104   huantang $ create jigposix.cfv
  1104   huantang     jigposix.obj
  1104   huantang 	p_exp:ceelibgx.lib
  1104   huantang 	p_exp:poxlibgx.exp
  1104   huantang     -pl posix_write_file__r
  1104   huantang 	-pl posix_read_file__r
  1104   huantang     -pl posix_open_file__r
  1104   huantang 	-pl posix_close_file__r
  1104   huantang 	-pl posix_seek_file__r
  1104   huantang 	-pl posix_sem_init__r
  1104   huantang     -pl posix_sem_wait__r
  1104   huantang 	-pl posix_sem_post__r
  1104   huantang 	-noslf
  1104   huantang $ lnku38a -su all -linkable -oj jigposix.lnk -symap all -pr jigposix.mp1 -cf jigposix.cfv
  1104   huantang         
  1104   huantang 	
   897       pshu $ !  TNSDL - translation
   897       pshu $ ! -testlist testsack.cls
   897       pshu $ !
   897       pshu $ 'TNSDL_TRANSLATOR 'TNSDL_PARAMETERS -c jigger.mod -
   897       pshu  -x 70 -g mac037b1.h -g dtopidgx.h -g dtobitgx.h -g jiggergx.h -g mac00757.h -
  1283   chunchen  -no_wup=jighms+jigcon+jigmix -m jigwar.map -
   935   huantang  -e jigger.err -
   897       pshu  jiggergx.sdl
   897       pshu $ !  -s jiggergx.sym
   897       pshu $ ! Copy and compile TNSDL-auxiliary files
   897       pshu $ !
   897       pshu $ copy tnsdl_lib:tnsdldef.h   *                 ! COMMON DEFINITIONS
   897       pshu $ copy tnsdl_lib:tnsdldef.c   *                 ! COMMON ROUTINES
   897       pshu $ copy tnsdl_lib:tnsdlwar.c *                  ! WARMING ROUTINES
   897       pshu $ copy tnsdl_lib:tnsdlchk.c *                  ! ARRAY INDEX CHECKING ROUTINES
   897       pshu $ !
   897       pshu $ c386a tnsdldef.c       /noprint                 ! COMMON ROUTINES
   897       pshu $ c386a tnsdlwar.c      /noprint                ! WARMING ROUTINES
   897       pshu $ c386a tnsdlchk.c     /noprint
   897       pshu $ !
   897       pshu $ ! Compile and bind translator-made modules for master and hand
   897       pshu $ !
   897       pshu $ combindj jigger.mod -
   897       pshu       -cf "#ALL:/optimize=3" -
   897       pshu       -bf "#FINAL: -pl *" -
   897       pshu       -a "#MASTER:jigwrkgx.obj" -
   897       pshu       -visible "#MASTER:*" -
  1104   huantang       -m "#MASTER:jigdat" 
  1104   huantang 
   897       pshu $ !     -debug -
   897       pshu $ !       /compiler="c386a/optimize=3" -
   897       pshu $ !       /binder="bnd386/nodebug"
  1104   huantang $ 
   897       pshu $ ! Bind jiggergx
  1104   huantang 	
   897       pshu $ create jiggergx.cfv
   897       pshu         jigopegx.obj
  1104   huantang 		jigdbggx.obj
   897       pshu         p_exp:invokegx.exp
   897       pshu         p_exp:xmllibgx.exp
   897       pshu         p_exp:hmilibgx.exp
   897       pshu         p_exp:toelibgx.exp
   897       pshu         p_exp:riolibgx.exp
   897       pshu         p_exp:seklibgx.exp
   897       pshu         p_exp:dxsprl03.exp
   897       pshu         p_exp:dmxpl0gx.exp
   897       pshu         p_exp:syklib1x.exp
   897       pshu         p_exp:dtolibgx.lib
   897       pshu         p_exp:dtolib1x.lib
   897       pshu         tnsdl_lib:tnsdllib.lib
   897       pshu         C386a_inc:clibnf3c.lib
  1104   huantang     
   897       pshu $ lnku38a -su all -debug -
   897       pshu         -li -oj jiggergx.lnk -pr jiggergx.mp1 -
   897       pshu         tnsdldef.obj tnsdlwar.obj tnsdlchk.obj -
  1104   huantang         jigger.lnk jigposix.lnk -
   897       pshu         -cf jiggergx.cfv
   943    lifsong $ !
   897       pshu $
   943    lifsong $ 'FILL_CMD' "''MIDSTR"
   897       pshu $ !
   897       pshu $ ! rename jiggergx.map jig.map
   897       pshu $
   897       pshu $ tnblde jiggergx.lnk /inf=jiggergx.inf
   897       pshu $ !
   897       pshu $ !rename JIGGERGX.IMG [-]*.*                    ! LOADABLE IMG
  1399   shuyolin $ copy jiggergx.img [-]JIGGERGX.IMG
   897       pshu $ !
   897       pshu $ !! TNMAP -T JIGGERGX.386
   897       pshu $ !! copy jiggergx.map [-]
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
   897       pshu 
     2     yanzuo PROCESS jigclu
   641    lifsong   COMMENT '$Id$';
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  *
     2     yanzuo  *  Description:
     2     yanzuo  *  This is JIGGER's ALP cluster manager hand process.
     2     yanzuo  *  An ALP cluster consists of a MXU/NIS/IP-NIU unit, its co-unit
     2     yanzuo  *  (if it has one) and their tributary units (if any).
     2     yanzuo  *
     2     yanzuo  *  A cluster manager controls and executes initialization
     2     yanzuo  *  tasks related to starting of computers belonging to its cluster.
     2     yanzuo  *  It is active during system restart or individual computer restart.
     2     yanzuo  *
     2     yanzuo  *  These initialization tasks include:
     2     yanzuo  *  - directing port configuration tasks of UAMPRB
     2     yanzuo  *  - APC initialization (phases 1 and 2)
     2     yanzuo  *  - initialization of internal interfaces and VPs
     2     yanzuo  *  - creation of INMNW half-connections to MXU(s)
     2     yanzuo  *  - reporting of interfaces and VPs
     2     yanzuo  *  - warming of spare MXU/NISxP/IPxxP (in the future)
     2     yanzuo  *
     2     yanzuo  *  There is one cluster manager hand process for each ALP cluster.
     2     yanzuo  *  The hand process receives tasks from the master process
     2     yanzuo  *  and executes them one at a time. Different cluster managers
     2     yanzuo  *  work in parallel, independently of each other.
     2     yanzuo  *
     2     yanzuo  *  The master (or actually the work management module used by the
     2     yanzuo  *  master process) keeps track of pending initialization tasks
     2     yanzuo  *  and hands them out in the correct order.
     2     yanzuo  *
     2     yanzuo  *  COPYRIGHT 2004 BY NOKIA NETWORKS OY FINLAND
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     my_cluster_idx      alp_cluster_idx__t,
     2     yanzuo     manager_pid         pid,
     2     yanzuo     updater_pid         pid,
     2     yanzuo     orig_hms_forwarder  pid;
     2     yanzuo 
     2     yanzuo CONSTANT
     2     yanzuo     task_inquiry_interval__c = 199              /* 499 9999 */;
     2     yanzuo     ack_waiting_time__c      = 499              /* 12000 199 */;
  1465       pshu     ack_waiting_sd_time__c       = 499              /* alsmot 5s */;
   961    lifsong     ack_waiting_brt_conn_time__c  = 599;
   149      h10hu     spec_pt_conf_wait_time__c      = 1499;
   161     jamema     sd4_init_retry_time__c      = 20;
   161     jamema     sd4_init_retry_max__c      = 5;
   161     jamema     
  1352   weigchen     /* constants for alarm 1281: */
  1352   weigchen     port_conf_fail__c        = 0;
  1352   weigchen     apc_ig1_fail__c          = 1;
  1352   weigchen     apc_eg1_fail__c          = 2;
  1352   weigchen     intf_cre_fail__c         = 3;
  1352   weigchen     half_conn_cre_fail__c    = 4;
  1352   weigchen     cmd_blocked__c           = 5;
  1352   weigchen     piping_fail__c           = 6;
  1352   weigchen     
   495     yanzuo     apc_max_vci_bits_threshold_c = 11;
  1465       pshu     big_apc_max_vci_bits_threshold_c = 12;
  1465       pshu     FEATURE_UPGRADE_STR__C   = 'feature u'; 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo TYPE jii_update_info__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        fields    jii_fields__t;
     2     yanzuo        rec_ptr   jiifil_ptr__t;
     2     yanzuo        proc_idx  byte;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jii_update_info__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE alp1_intf_vp_params__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        subport_params  alp_ep1_t;
     2     yanzuo        max_vpi_bits    vpi_bits_t;
     2     yanzuo        max_vci_bits    vci_bits_t;
     2     yanzuo        min_vci         vci_t;
     2     yanzuo        max_vci         vci_t;
     2     yanzuo        bandwidth       cell_rate_t;
     2     yanzuo        scheduler_path  scheduler_path_t;
     2     yanzuo        /* todo: maybe get & store inmnw traf.mgmt params too */
     2     yanzuo        /* tm_params_apc   alp_tp_streams_t; */
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE alp1_intf_vp_params__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo /*******************************************************************
     2     yanzuo  * TAble for ALP units
     2     yanzuo  *******************************************************************/
     2     yanzuo TYPE apc_init_table__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 16;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( max_c ) OF
     2     yanzuo     STRUCT
     2     yanzuo        unit    unit_it_t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE apc_init_table__t;
     2     yanzuo 
    98    lifsong 
    98    lifsong TYPE ui_table__t
    98    lifsong   REPRESENTATION
    98    lifsong     ARRAY( jig_vccs_params__t_max_c ) OF unit_it_t;
    98    lifsong ENDTYPE ui_table__t;
    98    lifsong 
   571   lingshen 
   571   lingshen 
     2     yanzuo DCL
     2     yanzuo    hms_forwarder          pid,
     2     yanzuo    tm_params_dummy        alp_tp_streams_t,
   359    lifsong    upd_req_idx__pv        dword := 0,
     2     yanzuo    next_req_group         message_group_t,
   359    lifsong    mphy_request_id        dword := 0,
   359    lifsong    spi3_request_id        dword := 0,
  1062       pshu    sym_app_pre_xc_created bool;
     2     yanzuo 
     2     yanzuo DCL WITHWARMING
     2     yanzuo    g_apc_init_table       apc_init_table__t;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo    SET single_tl,
     2     yanzuo    task_inquiry_timer,
     2     yanzuo    ack_timer,
     2     yanzuo    ack_timer2,
     2     yanzuo    int_ack_timer,
    73     jamema    mphy_inq_timer,
     2     yanzuo    /* for JIGRELGX.SDL: */
     2     yanzuo    conn_del_rereq_timer( conn_id_t ),
     2     yanzuo    clean_apc_init_table( unit_it_t );
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE unit_name__r;
     2     yanzuo /*
     2     yanzuo  * Return pointer to string containing name of the given unit,
     2     yanzuo  * e.g.  A2SP-7
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  utype  unit_type_t,
     2     yanzuo     IN  uidx   unit_index_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bytepointer;
     2     yanzuo 
     2     yanzuo DCL SAVE
     2     yanzuo     namebuf  unit_whole_name_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( @namebuf(0), 0, SIZEOF( namebuf ));
     2     yanzuo   DECISION unit_print_arrange_r( utype, uidx, namebuf );
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       /* TASK strcpy( @namebuf(0), @'UNKNOWN' ); */
     2     yanzuo       TASK memcpy( @namebuf(0), bytepointer(@'UNKNOWN'), 7 );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN @namebuf(0);
     2     yanzuo ENDPROCEDURE unit_name__r;
     2     yanzuo 
     2     yanzuo PROCEDURE task_starting_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: task starting
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT      job           task_data__t,
  1054    lifsong     IN          task_started  bool,
  1054    lifsong     IN          task_result   error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec          error_t,
     2     yanzuo     job_task    bytepointer,
     2     yanzuo     unit_addr   phys_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo   DECISION job.task_code;
     2     yanzuo     (task_type__t_port_conf_c):
     2     yanzuo       TASK job_task := bytepointer(@'pconf_ph1');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_if_init_c):
     2     yanzuo       TASK job_task := bytepointer(@'if_init');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(job.params.gen.proc_idx).phys_addr;
     2     yanzuo     (task_type__t_port_conf_ph2_c):
     2     yanzuo       TASK job_task := bytepointer(@'pconf_ph2');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_if_init_ph2_c):
     2     yanzuo       TASK job_task := bytepointer(@'if_init_ph2');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(job.params.gen.proc_idx).phys_addr;
     2     yanzuo     (task_type__t_hc_create_c):
     2     yanzuo       TASK job_task := bytepointer(@'hc_create');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(job.params.gen.proc_idx).phys_addr;
     2     yanzuo     (task_type__t_apc_init_c):
     2     yanzuo       TASK job_task := bytepointer(@'apc_init');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_apc_init_ph2_c):
     2     yanzuo       TASK job_task := bytepointer(@'apc_init_ph2');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_trib_report_c):
     2     yanzuo       TASK job_task := bytepointer(@'trib_report');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(job.params.gen.proc_idx).phys_addr;
     2     yanzuo     (task_type__t_sd4_init_c):
     2     yanzuo       TASK job_task := bytepointer(@'sd4_init');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_sp_alp_warmup_c):
     2     yanzuo       TASK job_task := bytepointer(@'sp_alp_wup');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_trib_restart_c):
     2     yanzuo       TASK job_task := bytepointer(@'trib_restart');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(0).phys_addr;
     2     yanzuo     (task_type__t_rel_resources_c):
     2     yanzuo       TASK job_task := bytepointer(@'rel_resources');
     2     yanzuo       TASK unit_addr:= job.params.unit_data.procs(job.params.gen.proc_idx).phys_addr;
     2     yanzuo     (task_type__t_stop_reqs_c):
     2     yanzuo       TASK job_task := bytepointer(@'stop_reqs');
     2     yanzuo       /* Unit address is not available, let's use OMU's own address */
     2     yanzuo       TASK unit_addr:= own_unit_phys_addr;
     2     yanzuo     ELSE:
     2     yanzuo       /* Task is not known */
     2     yanzuo       RETURN;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
  1054    lifsong   DECISION task_started;
  1054    lifsong   ( T ):
  1054    lifsong      TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
  1054    lifsong           stup_writer_ptr_t(@'JIG'),
  1054    lifsong           unit_addr,
  1054    lifsong           stup_sw_layer_t_spl_c,
  1054    lifsong           stup_lib_ptr_t(
  1054    lifsong           @'EV51: comp: 0x%X, task: %s, started! '),
  1104   huantang           unit_addr, job_task );
  1104   huantang          
  1439       pshu      CALL jig_debug_log__r(jig_dbglog_msk__t_clu_task__c,T,@'JIGCLU:COMP=0x%04X,task: %s, started!'n'r',unit_addr,job_task); 
  1104   huantang      
  1054    lifsong   ELSE:
  1054    lifsong      TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
  1054    lifsong           stup_writer_ptr_t(@'JIG'),
  1054    lifsong           unit_addr,
  1054    lifsong           stup_sw_layer_t_spl_c,
  1054    lifsong           stup_lib_ptr_t(
  1054    lifsong           @'EV51: comp: 0x%X, task: %s, completed, result: 0x%X '),
  1054    lifsong           unit_addr, job_task, task_result );
  1439       pshu      CALL jig_debug_log__r(jig_dbglog_msk__t_clu_task__c,T,@'JIGCLU:COMP=0x%04X,task: %s, completed, result:0x%X 'n'r',unit_addr,job_task,task_result);
  1054    lifsong   ENDDECISION;
  1054    lifsong 
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE task_starting_log__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo PROCEDURE apc_init_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: APC phase 1 initialization
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      unit  jiifil__t,
     2     yanzuo     IN      ec    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status     error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK status:=  write_stup_log_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: APC phase 1 init, status: 0x%X, unit: %s'),
     2     yanzuo        ec, unit_name__r( unit.unit_type, unit.unit_index ) );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE apc_init_log__r;
     2     yanzuo 
     2     yanzuo PROCEDURE apc_init_ph2_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: APC phase 2 initialization
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      unit  jiifil__t,
     2     yanzuo     IN      ec    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status     error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK status:=  write_stup_log_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: APC phase 2 init, status: 0x%X, unit: %s'),
     2     yanzuo        ec, unit_name__r( unit.unit_type, unit.unit_index ) );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE apc_init_ph2_log__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE flag__r;
     2     yanzuo /*
     2     yanzuo  * Flag the given field for update by setting the specific field flag
     2     yanzuo  * in the 'fields' structure of the given update record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  update_rec   jii_update_info__t,
     2     yanzuo     IN      flag_to_set  jii_field__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK jii_fields__t_fset( update_rec.fields, flag_to_set );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE flag__r;
  1124   huantang 
    73     jamema /************************************************************************/
     2     yanzuo 
    73     jamema PROCEDURE check_mphy_info__r;
    73     jamema /*
    73     jamema  * This procedure gets the mphy number of the trib unit.
    73     jamema ************************************************************************/
    73     jamema FPAR
    73     jamema    IN         io_unit            jiifil__t,
    73     jamema    IN         alp_unit           jiifil__t,    
    73     jamema    OUT        mphy_num           byte;       
    73     jamema 
    73     jamema RETURNS
    73     jamema    error_t;
    73     jamema 
    73     jamema DCL
    73     jamema    l_status                  error_t,
    73     jamema    l_uam_pid                 pid,
    73     jamema    l_uam_attr                attr_group_t,
    73     jamema    is_app_trib                bool := F;
    73     jamema /*
    73     jamema DCL SAVE
    73     jamema    l_spi3_request_id         dword;
    73     jamema */    
    73     jamema START;
    73     jamema    DECISION get_service__r( utopia_addr_inq__c, l_uam_pid, l_uam_attr );
    73     jamema    (F):  RETURN   service_not_available_ec;
    73     jamema    ENDDECISION;
    73     jamema 
    73     jamema    DECISION alp_unit.is_app_mxu_or_eipu;
    73     jamema    ( app_mxu__c ): TASK is_app_trib := T;
    73     jamema    ENDDECISION;
    73     jamema    
    73     jamema    DECISION (is_app_trib);
    73     jamema    ( T ):
    73     jamema       TASK     spi3_request_id := spi3_request_id + 1;
    73     jamema       OUTPUT   spi3_address_inquiry_req_s(spi3_request_id, io_unit.unit_type, io_unit.unit_index)
    73     jamema                   TO l_uam_pid, SET ATTRIBUTES = l_uam_attr;
    73     jamema    ELSE:
    73     jamema       TASK     mphy_request_id := mphy_request_id + 1;
    73     jamema       OUTPUT   utopia_address_inquiry_s( mphy_request_id, io_unit.unit_type, io_unit.unit_index )
    73     jamema            TO l_uam_pid, SET ATTRIBUTES = l_uam_attr;
    73     jamema    ENDDECISION;
    73     jamema    
    73     jamema    SET ( NOW + 2*ack_waiting_time__c, mphy_inq_timer);
    73     jamema    NEXTSTATE waiting_ack;
    73     jamema 
    73     jamema STATE waiting_ack;
    73     jamema    /*For APP trib*/
    73     jamema    INPUT    spi3_address_inquiry_ack_s( request_id, spi3_amount, spi3_list );
    73     jamema                /*SPI3 address is get here*/
    73     jamema    DCL
    73     jamema       request_id           dword,
    73     jamema       spi3_amount       dword,
    73     jamema       spi3_list               spi3_list_t;
    73     jamema    DECISION (is_app_trib /= T OR request_id /= spi3_request_id); /*not corresponding*/
    73     jamema    (T): NEXTSTATE - ;
    73     jamema    ENDDECISION;
    73     jamema    RESET ( mphy_inq_timer );
    73     jamema /* UAM will return the right SPI3 count in flash boot phase..
    73     jamema    DECISION (io_unit.unit_type = unit_type_t_dmcu_c AND
    73     jamema             io_unit.fig_req_uxhwb_type = ux_hw_block_type_t_trib);
    73     jamema    ( T ):
    73     jamema       TASK spi3_amount := 1;
    73     jamema    ENDDECISION;
    73     jamema */
    73     jamema    TASK mphy_num := spi3_amount;
    73     jamema    TASK l_status:= success_ec;
  1124   huantang 
    73     jamema  
    73     jamema    RETURN l_status;
    73     jamema 
    73     jamema   /*For APC trib*/
    73     jamema   INPUT utopia_address_inquiry_ack_s( request_id,
    73     jamema         utopia_amount,
    73     jamema         utopia_list)
    73     jamema     COMMENT 'Mphy port number is received here.';
    73     jamema     DCL
    73     jamema        request_id         dword,
    73     jamema        utopia_amount   dword,
    73     jamema        utopia_list        utopia_list_t;
    73     jamema    DECISION (is_app_trib OR request_id /= mphy_request_id); /*not corresponding*/
    73     jamema    (T): NEXTSTATE - ;
    73     jamema    ENDDECISION;
    73     jamema    RESET ( mphy_inq_timer );
    73     jamema 
    73     jamema    TASK mphy_num := utopia_amount;
    73     jamema    TASK l_status:= success_ec;
  1124   huantang 
    73     jamema  
    73     jamema    RETURN l_status;
    73     jamema 
    73     jamema 
    73     jamema 
    73     jamema   INPUT mphy_inq_timer;
    73     jamema     TASK dxsyslog_r( log_type_t_text_e_c,
    73     jamema          @'JIGCLU: no response to phy address inquiry!'
    73     jamema          'object unit = %04XH, index = %XH',
    73     jamema          io_unit.unit_type, io_unit.unit_index );
    73     jamema     RETURN message_waiting_timeout_ec;
    73     jamema ENDSTATE waiting_ack;
    73     jamema ENDPROCEDURE check_mphy_info__r;
     2     yanzuo /**************************************************************************/
    73     jamema PROCEDURE check_reconfig;
    73     jamema /*
    73     jamema  * Check if unit needs to be reconfigured.
    73     jamema  **************************************************************************/
    73     jamema  FPAR
    73     jamema    IN/OUT       unit         jiifil__t,
    73     jamema    IN       alp_unit  jiifil__t,    
    73     jamema    IN/OUT  update       jii_update_info__t;
    73     jamema 
    73     jamema  DCL
    73     jamema    mphy_count            byte;
    73     jamema START;
    73     jamema     /*
    73     jamema     check if the mphy number was changed, if yes, release all the resources of the computers,
    73     jamema     after that, mphy list will be inquired again and interface will be re-configured*/
    73     jamema     /*
    73     jamema     1. MPQ unit
    73     jamema     2. mphy_number is not zero, zero means it is the first time the trib unit boots up, no need to release..
    73     jamema     3. mphy_number is changed, reconfig is needed
    73     jamema     4. no reconfig is in process
    73     jamema     */
    73     jamema 
    73     jamema     DECISION (mpqu_check__r(unit.unit_type) AND
    73     jamema               (unit.mphy_count /= 0) AND
    73     jamema               (check_mphy_info__r(unit, alp_unit, mphy_count) = success_ec) AND
  1124   huantang               (mphy_count /= unit.mphy_count ) AND
    73     jamema               (unit.reconfig_needed = F));
    73     jamema     ( T ):
  1124   huantang 
    73     jamema          TASK unit.reconfig_needed := T;
    73     jamema          CALL flag__r(update, jii_field__t_reconfig_needed_c);
    73     jamema          CALL flag__r(update, jii_field__t_release_mpqu_c);/*set flags to release all the computers of mpqu*/
    73     jamema     ENDDECISION;
    73     jamema     
    73     jamema   RETURN;
    73     jamema ENDPROCEDURE check_reconfig;
    73     jamema /**************************************************************************/
    73     jamema 
   830       pshu PROCEDURE is_if_config_needed__r;
   830       pshu FPAR
   830       pshu     IN/OUT unit      jiifil__t;
   830       pshu RETURNS 
   830       pshu     bool;
   830       pshu 
   830       pshu START;
   830       pshu     DECISION (unit.interfaces(0).intf_id = 0 OR 
   830       pshu               unit.interfaces(0).intf_id = atm_interface_id_t_unspecif_c OR
   830       pshu               unit.reconfig_needed);
   830       pshu     (T):
   830       pshu         RETURN T;
   830       pshu     (F):
   830       pshu         RETURN F;
   830       pshu     ENDDECISION;
   830       pshu 
   830       pshu ENDPROCEDURE is_if_config_needed__r;
   830       pshu 
    73     jamema /**************************************************************************/
     2     yanzuo PROCEDURE intf_flag__r;
     2     yanzuo /*
     2     yanzuo  * Flag the given field of the given interface record for update.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  update_rec   jii_update_info__t,
     2     yanzuo     IN      intf_index   byte,
     2     yanzuo     IN      flag_to_set  jii_field__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     incr  integer := 0;
     2     yanzuo 
     2     yanzuo START;
   470    lifsong 
     2     yanzuo   DECISION intf_index;
   470    lifsong     ( >= jii_interfaces__t_max_c):
   470    lifsong       TASK dxsyslog_r( log_type_t_text_e_c,
   470    lifsong          @'JIGCLU: intf_flag__r invalid if_idx: %04X',
   470    lifsong          intf_index );
   470    lifsong       RETURN;
   470    lifsong   ENDDECISION;
   470    lifsong   
   470    lifsong   DECISION intf_index;  
     2     yanzuo     ( 1 ):
     2     yanzuo       TASK incr := integer( jii_field__t_i2_exists_c ) -
     2     yanzuo            integer( jii_field__t_i1_exists_c );
     2     yanzuo     ( 2 ):
     2     yanzuo       TASK incr := integer( jii_field__t_i3_exists_c ) -
     2     yanzuo            integer( jii_field__t_i1_exists_c );
   470    lifsong     ( 3 ):
   470    lifsong       TASK incr := integer( jii_field__t_i4_exists_c ) -
   470    lifsong            integer( jii_field__t_i1_exists_c );           
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK flag_to_set := jii_field__t( integer( flag_to_set ) + incr );
     2     yanzuo   TASK jii_fields__t_fset( update_rec.fields, flag_to_set );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE intf_flag__r;
     2     yanzuo 
   604    lifsong PROCEDURE if_flag_mphy_schs_from_proc1__r;
   470    lifsong FPAR
   470    lifsong     IN/OUT  update   jii_update_info__t,
   470    lifsong     IN/OUT  unit    jiifil__t;
   470    lifsong DCL
   470    lifsong     proc_idx          hms_processor_index_t;
   470    lifsong     
   470    lifsong START;
   470    lifsong 
   470    lifsong     TASK proc_idx := 1;
   470    lifsong     WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
   470    lifsong         CALL intf_flag__r( update, unit.procs(proc_idx).interface_index,
   470    lifsong                       jii_field__t_i1_mphy_sch_c );
   470    lifsong         TASK proc_idx := proc_idx + 1;
   470    lifsong     ENDWHILE;
   604    lifsong ENDPROCEDURE if_flag_mphy_schs_from_proc1__r;
   470    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jiifil_update__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sends a JIIFIL update request to the master
     2     yanzuo  * and waits for acknowledgement.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN VIEWED  rec       jiifil__t,
     2     yanzuo     IN VIEWED  fields    jii_fields__t,
     2     yanzuo     IN         proc_idx  hms_processor_index_t;
     2     yanzuo DCL
     2     yanzuo     retry_count  byte := 2;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK upd_req_idx__pv := upd_req_idx__pv + 1;
     2     yanzuo   OUTPUT jig_update_jiifil__s ( rec, proc_idx, fields,
     2     yanzuo          upd_req_idx__pv,
     2     yanzuo          curr_timestamp__r( ),
     2     yanzuo          T ) TO updater_pid;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE wait_reply;
     2     yanzuo 
     2     yanzuo STATE wait_reply
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT jig_update_jiifil_ack__s ( ec, req_idx );
     2     yanzuo     DCL
     2     yanzuo        ec                error_t,
     2     yanzuo        req_idx           dword;
     2     yanzuo     DECISION req_idx;
     2     yanzuo       ( upd_req_idx__pv ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* wrong ack, continue waiting. */
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     DECISION retry_count;
     2     yanzuo       ( 0 ):
     2     yanzuo         RETURN;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK retry_count := dword( retry_count - 1 );
     2     yanzuo     OUTPUT jig_update_jiifil__s ( rec, proc_idx, fields,
     2     yanzuo            upd_req_idx__pv,
     2     yanzuo            curr_timestamp__r( ),
     2     yanzuo            T ) TO updater_pid;
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE wait_reply;
     2     yanzuo ENDSTATE wait_reply;
     2     yanzuo ENDPROCEDURE jiifil_update__r;
     2     yanzuo 
     2     yanzuo /*************************************************************************/
     2     yanzuo PROCEDURE set_port_stage__r;
     2     yanzuo   FPAR
     2     yanzuo    IN/OUT   unit        jiifil__t,
     2     yanzuo    IN       if_idx      byte,
     2     yanzuo    IN/OUT   port_stage  port_stage_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK port_stage := port_stage_t_s1_s2_c;
     2     yanzuo   DECISION unit.is_ip_niu;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION if_idx = 1;
     2     yanzuo         ( T ):
     2     yanzuo           /* This is IP unit's interface to IP-Engine */
     2     yanzuo           TASK port_stage := port_stage_t_ipe_c;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION unit.is_level2_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION if_idx;
     2     yanzuo         ( 1 ):
     2     yanzuo           /* This is NIP1 unit's interface NIP-->PQII */
     2     yanzuo           TASK port_stage := port_stage_t_s2_s3_c;
     2     yanzuo         ( 2 ):
     2     yanzuo           /* This is NIP1 unit's interface NIP-->MXU */
     2     yanzuo           TASK port_stage := port_stage_t_s2_s1_c;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE set_port_stage__r;
     2     yanzuo 
     2     yanzuo /***********************************************************************/
     2     yanzuo /***********************************************************************/
     2     yanzuo /* These procedures communicate with counterpart processes
     2     yanzuo * as specified in the message diagrams of the design document.
     2     yanzuo */
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_sd4_hw__r;
     2     yanzuo /*
     2     yanzuo  * SFU sd4g hw initialization
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT sfu  jiifil__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     uamprb              pid,
     2     yanzuo     fig_hdr             fig_msg_header_t,
    90    lifsong     i                   byte := 0,
   161     jamema     retry_cnt           byte := 0,
     2     yanzuo     fig_conf_succ_list  fig_cf_succ_list_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK make_pid_r( uamprb, 0xC000, 0x451, 0, 0 );
     2     yanzuo   OUTPUT fig_init_sd_ports_req_s ( sfu.hms_address, T ) TO uamprb;
  1454       hhou   SET ( NOW + ack_waiting_sd_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT sd_ports_configured_s ( fig_hdr, fig_conf_succ_list );
     2     yanzuo     DECISION ( fig_hdr.hms_address /= sfu.hms_address );
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
   161     jamema     RESET ( ack_timer );
   161     jamema 
   161     jamema     DECISION (retry_cnt < sd4_init_retry_max__c);
   161     jamema     (T):
   161     jamema        WHILE ( i < fig_conf_succ_list.nr_of_ports );
   161     jamema          DECISION ( fig_conf_succ_list.fig_conf(i).conf_status /= success_ec );
   161     jamema          ( T ):
   161     jamema               TASK retry_cnt := retry_cnt + 1;
   161     jamema               SET ( NOW + sd4_init_retry_time__c, ack_timer );
   161     jamema               NEXTSTATE send_retry;
   161     jamema          ENDDECISION;
   161     jamema          TASK i := i + 1;
   161     jamema        ENDWHILE;
   161     jamema     ENDDECISION;
     2     yanzuo     /* master to clear status bits from the configured units */
     2     yanzuo     OUTPUT INPUT TO updater_pid;
     2     yanzuo     RETURN success_ec;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     DCL status error_t := message_waiting_timeout_ec;
  1454       hhou     TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo          @'JIGCLU: init_sd4_hw__r ack_timer expired: %04X',
     2     yanzuo          status );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
   161     jamema 
   161     jamema STATE send_retry
   161     jamema   COMMENT 'retry to init sd4 ';
   161     jamema    INPUT ack_timer;
   161     jamema     OUTPUT fig_init_sd_ports_req_s ( sfu.hms_address, T ) TO uamprb;
  1454       hhou     SET ( NOW + ack_waiting_sd_time__c, ack_timer );
   161     jamema     NEXTSTATE waiting_ack;
   161     jamema ENDSTATE send_retry;
   161     jamema 
     2     yanzuo ENDPROCEDURE init_sd4_hw__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE conf_sd1g__r;
     2     yanzuo /*
     2     yanzuo  * ALP1 SD1G port initialization
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT alp_unit  jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     uamprb               pid,
     2     yanzuo     fig_conf_succ_list   fig_cf_succ_list_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK make_pid_r( uamprb, 0xC000, 0x451, 0, 0 );
     2     yanzuo   OUTPUT fig_init_sd_ports_req_s ( alp_unit.hms_address, F ) TO uamprb;
  1454       hhou   SET ( NOW + ack_waiting_sd_time__c, ack_timer ); 
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT sd_ports_configured_s ( fig_hdr, fig_conf_succ_list );
     2     yanzuo     DCL
     2     yanzuo        fig_hdr  fig_msg_header_t,
     2     yanzuo        i        byte:=0;
     2     yanzuo     DECISION ( fig_hdr.hms_address /= alp_unit.hms_address );
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     /*need check the ack status, there could be port configuration failure*/
     2     yanzuo     WHILE i < fig_conf_succ_list.nr_of_ports;
     2     yanzuo       DECISION fig_conf_succ_list.fig_conf(i).conf_status /= success_ec;
     2     yanzuo       (T):
     2     yanzuo           RETURN fig_conf_succ_list.fig_conf(i).conf_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK  i := i+1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     RETURN success_ec;
     2     yanzuo 
     2     yanzuo    /*25293ES08P&26601ES08P  if MXU restarted, then stop waiting port configure message*/
  1100   huantang    INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index, ?, ?, ? );
     2     yanzuo    DCL
     2     yanzuo       obj_unit_type           unit_type_t,
  1100   huantang       obj_unit_index          unit_index_t;
     2     yanzuo 
     2     yanzuo    DECISION (alp_unit.unit_type = obj_unit_type) AND (alp_unit.unit_index = obj_unit_index);
     2     yanzuo    (T):
     2     yanzuo       RESET ( ack_timer );
     2     yanzuo       RETURN   card_restarted_ec;
     2     yanzuo    ENDDECISION;
   567    lifsong    NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo    DCL status error_t := message_waiting_timeout_ec;
  1454       hhou     TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo          @'JIGCLU: conf_sd1g__r ack_timer expired: %04X'
     2     yanzuo          'target HMS address = %08X',
     2     yanzuo          status, alp_unit.hms_address );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE conf_sd1g__r;
     2     yanzuo 
     2     yanzuo /***************************************************************************/
     2     yanzuo PROCEDURE foward_fig_req__r;
     2     yanzuo /*
     2     yanzuo  * only foward fig_service_req_msg_s to UAM for EIPU units, not ack needed
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     IN/OUT unit  jiifil__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     fig_hdr             fig_msg_header_t,
     2     yanzuo     uamprb              pid;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK fig_hdr.hms_address   := unit.hms_address,
     2     yanzuo        fig_hdr.extended_addr := 0;
     2     yanzuo   TASK make_pid_r( uamprb, 0xC000, 0x451, 0, 0 );
     2     yanzuo   OUTPUT fig_service_req_msg_s( fig_hdr,
     2     yanzuo          unit.fig_req_uxhwb_type,
     2     yanzuo          unit.fig_req_rphase ) TO uamprb;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE foward_fig_req__r;
     2     yanzuo /***************************************************************************/
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE conf_ux__r;
     2     yanzuo /*
     2     yanzuo  * UX1 configuration
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT unit  jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     fig_hdr             fig_msg_header_t,
     2     yanzuo     uamprb              pid,
   429    lifsong     fig_conf_succ_list  fig_cf_succ_list_t,
  1423       pshu     is_sync_error       bool := F,
  1423       pshu     block_type          ux_hw_block_type_t  ;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK fig_hdr.hms_address   := unit.hms_address,
     2     yanzuo        fig_hdr.extended_addr := 0;
     2     yanzuo   TASK make_pid_r( uamprb, 0xC000, 0x451, 0, 0 );
     2     yanzuo   OUTPUT fig_service_req_msg_s( fig_hdr,
     2     yanzuo          unit.fig_req_uxhwb_type,
     2     yanzuo          unit.fig_req_rphase ) TO uamprb;
  1423       pshu   TASK  block_type := ux_hw_block_type_t(ux_hw_block_type_t_all_fpga_msk & unit.fig_req_uxhwb_type);
  1423       pshu   DECISION ( block_type = ux_hw_block_type_t_trib_3_ut OR
  1423       pshu              block_type = ux_hw_block_type_t_iw1s1a OR
  1423       pshu              block_type = ux_hw_block_type_t_tr_2_ut_2_p OR
  1423       pshu              block_type = ux_hw_block_type_t_tr_4_ut_2_p OR
  1423       pshu              block_type = ux_hw_block_type_t_trib_3_ut);
    94      h10hu   ( T ):
    94      h10hu     SET ( NOW + spec_pt_conf_wait_time__c, ack_timer );
    94      h10hu   ELSE:
   409     jamema     SET ( NOW + ack_waiting_time__c*2, ack_timer );    /*PR 45294ESPE02*/
    94      h10hu 
    94      h10hu   ENDDECISION;
    94      h10hu 
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT ux_ports_configured_s ( fig_hdr, fig_conf_succ_list );
     2     yanzuo     DCL
     2     yanzuo        fig_hdr  fig_msg_header_t,
     2     yanzuo        i          byte:=0;
     2     yanzuo     DECISION ( fig_hdr.hms_address /= unit.hms_address );
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     /*need check the ack status, there could be port configuration failure*/
     2     yanzuo     WHILE i < fig_conf_succ_list.nr_of_ports;
     2     yanzuo       DECISION fig_conf_succ_list.fig_conf(i).conf_status /= success_ec;
     2     yanzuo       (T):
   429    lifsong           DECISION fig_conf_succ_list.fig_conf(i).conf_status;
   429    lifsong           ( fatal_sync_fail_ec ):
   429    lifsong             TASK is_sync_error := T;
   429    lifsong             SET ( NOW + 10, ack_timer ); /*add a small deday to avoid lots of 1281 alarm.*/
   429    lifsong             NEXTSTATE -;
   429    lifsong           ENDDECISION;
   429    lifsong           
     2     yanzuo           RETURN fig_conf_succ_list.fig_conf(i).conf_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK  i := i+1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     RETURN success_ec;
     2     yanzuo 
     2     yanzuo    /*25293ES08P&26601ES08P  if MXU restarted, then stop waiting port configure message*/
  1100   huantang    INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index, ?, ?, ? );
     2     yanzuo    DCL
     2     yanzuo       obj_unit_type           unit_type_t,
  1100   huantang       obj_unit_index          unit_index_t;
     2     yanzuo    DECISION (unit.unit_type = obj_unit_type) AND (unit.unit_index = obj_unit_index);
     2     yanzuo    (T):
     2     yanzuo       RESET ( ack_timer );
     2     yanzuo       RETURN   card_restarted_ec;
     2     yanzuo    ENDDECISION;
   567    lifsong    NEXTSTATE -;
     2     yanzuo 
  1100   huantang    INPUT re_state_change_executed_s( obj_unit_type, obj_unit_index, ?, ?, ?, ? );
  1100   huantang    DCL
  1100   huantang       obj_unit_type           unit_type_t,
  1100   huantang       obj_unit_index          unit_index_t;
  1100   huantang    DECISION (unit.unit_type = obj_unit_type) AND (unit.unit_index = obj_unit_index);
  1100   huantang    (T):
  1100   huantang       RESET ( ack_timer );
  1100   huantang       RETURN   card_restarted_ec;
  1100   huantang    ENDDECISION;
  1100   huantang    NEXTSTATE -;
  1100   huantang    
     2     yanzuo   INPUT ack_timer;
     2     yanzuo    DCL status error_t := message_waiting_timeout_ec;
   429    lifsong     DECISION is_sync_error;
   429    lifsong     ( T ):
   429    lifsong        RETURN fatal_sync_fail_ec;
   429    lifsong     ENDDECISION;
  1454       hhou     TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo          @'JIGCLU: conf_ux__r ack_timer expired: %04X'
     2     yanzuo          'obj unit type=%X index=%d HMS addr=%X',
     2     yanzuo          status,
     2     yanzuo          unit.unit_type, unit.unit_index,
     2     yanzuo          unit.hms_address );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE conf_ux__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_internal_hms_ack__r;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo * Wait for acknowledgement which tells that the HMS hand
     2     yanzuo * has sent the message forward.
     2     yanzuo **************************************************************************/
     2     yanzuo START;
     2     yanzuo   SET ( NOW + 500, int_ack_timer );
     2     yanzuo   NEXTSTATE waiting_int_hmsack;
     2     yanzuo 
     2     yanzuo STATE waiting_int_hmsack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT hms_ack_s, int_ack_timer;
     2     yanzuo     RESET ( int_ack_timer );
     2     yanzuo     RETURN;
     2     yanzuo ENDSTATE waiting_int_hmsack;
     2     yanzuo ENDPROCEDURE get_internal_hms_ack__r;
     2     yanzuo 
   571   lingshen 
   571   lingshen 
   571   lingshen 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE set_conf_fail_alarm__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sets alarm 1281 unit_configuration_failure_a
     2     yanzuo  * if the target unit does not have any more start attempts left.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit           jiifil__t,
     2     yanzuo     IN      proc_idx       byte,
     2     yanzuo     IN      failed_service byte,
     2     yanzuo     IN      error_status   error_t;
     2     yanzuo 
     2     yanzuo DCL
   429    lifsong     obj_utype       unit_type_t,
  1222      tinyu     obj_idx         unit_index_t;
     2     yanzuo 
     2     yanzuo START;
   429    lifsong 
  1124   huantang   DECISION unit.procs(proc_idx).start_attempts_left = 0 ;
   429    lifsong     ( T ):
     2     yanzuo       /* default: set the alarm for the target unit. */
     2     yanzuo       TASK obj_utype := unit.unit_type,
     2     yanzuo            obj_idx   := unit.unit_index;
     2     yanzuo       DECISION failed_service;
     2     yanzuo         ( intf_cre_fail__c ):
     2     yanzuo           /* set interface failure alarm for the target processor. */
     2     yanzuo           TASK obj_utype := unit.procs(proc_idx).unit_type,
     2     yanzuo                obj_idx   := unit.procs(proc_idx).unit_index;
     2     yanzuo       ENDDECISION;
   429    lifsong       
     2     yanzuo       SET ( ALARM( obj_utype, obj_idx ),
     2     yanzuo           unit_configuration_failure_a( failed_service,
     2     yanzuo           error_status ));
   571   lingshen       
  1062       pshu      
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE set_conf_fail_alarm__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE find_apc_init__r;
     2     yanzuo /*
     2     yanzuo  * Find the operation concerning given unit which uses the old boot from
     2     yanzuo  * the global apc init table, OR find a free record in the table.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN      in_unit     unit_it_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_index   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK l_index := 0;
     2     yanzuo    WHILE l_index < apc_init_table__t_max_c;
     2     yanzuo       DECISION( g_apc_init_table( l_index ).unit.ttype = in_unit.ttype ) AND
     2     yanzuo               ( g_apc_init_table( l_index ).unit.index = in_unit.index );
     2     yanzuo       ( T ):
     2     yanzuo          RETURN T;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK l_index := l_index + 1;
     2     yanzuo    ENDWHILE;
     2     yanzuo 
     2     yanzuo    RETURN F;
     2     yanzuo ENDPROCEDURE find_apc_init__r;
     2     yanzuo 
     2     yanzuo /*****************************************************************************/
     2     yanzuo PROCEDURE add_apc_init__r;
     2     yanzuo /*
     2     yanzuo  * Add the record of target unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN in_unit     unit_it_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_index        dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK l_index := 0;
     2     yanzuo    WHILE l_index < apc_init_table__t_max_c;
     2     yanzuo       DECISION g_apc_init_table( l_index ).unit.ttype = unit_type_t_dcuty_c;
     2     yanzuo       ( T ):
     2     yanzuo          TASK g_apc_init_table( l_index ).unit.ttype := in_unit.ttype,
     2     yanzuo               g_apc_init_table( l_index ).unit.index := in_unit.index;
     2     yanzuo          RETURN;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK l_index := l_index + 1;
     2     yanzuo    ENDWHILE;
     2     yanzuo 
     2     yanzuo    /* Something wrong no free record found, initial the whole table and add the
     2     yanzuo       unit again. */
     2     yanzuo    TASK memset( bytepointer( @g_apc_init_table ), 0xFF, dword( SIZEOF( apc_init_table__t ) ) );
     2     yanzuo    TASK g_apc_init_table( 0 ).unit.ttype := in_unit.ttype,
     2     yanzuo         g_apc_init_table( 0 ).unit.index := in_unit.index;
     2     yanzuo 
     2     yanzuo    RETURN;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE add_apc_init__r;
     2     yanzuo 
     2     yanzuo /*****************************************************************************/
     2     yanzuo PROCEDURE clean_apc_table__r;
     2     yanzuo /*
     2     yanzuo  * Clean the record of target unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN in_unit     unit_it_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_index        dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK l_index := 0;
     2     yanzuo    WHILE l_index < apc_init_table__t_max_c;
     2     yanzuo       DECISION g_apc_init_table( l_index ).unit.ttype = in_unit.ttype AND
     2     yanzuo                g_apc_init_table( l_index ).unit.index = in_unit.index;
     2     yanzuo       ( T ):
     2     yanzuo          TASK g_apc_init_table( l_index ).unit.ttype := unit_type_t_dcuty_c,
     2     yanzuo               g_apc_init_table( l_index ).unit.index := unit_index_t_dcuty_c;
     2     yanzuo          RETURN;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK l_index := l_index + 1;
     2     yanzuo    ENDWHILE;
     2     yanzuo    RETURN;
     2     yanzuo ENDPROCEDURE clean_apc_table__r;
     2     yanzuo 
  1345    jinncao PROCEDURE update_start_att_and_set_alarm__r;
  1345    jinncao FPAR
  1345    jinncao 	IN/OUT alp_unit  jiifil__t,
  1345    jinncao 	IN code byte,
  1345    jinncao 	IN status error_t;
  1345    jinncao 	
  1345    jinncao START;
  1345    jinncao 
  1345    jinncao 	TASK alp_unit.procs( 0 ).start_attempts_left := byte(alp_unit.procs( 0 ).start_attempts_left-1);
  1345    jinncao 	DECISION (alp_unit.procs( 0 ).start_attempts_left = 0);
  1345    jinncao 	(T):
  1345    jinncao 		DECISION code;
  1345    jinncao 		(apc_ig1_fail__c):
  1345    jinncao 			TASK dxsyslog_r ( log_type_t_text_e_c,
  1345    jinncao 	                           @'JIGCLU: init apc HW failed'
  1345    jinncao 	                            'finally set 1281 alarm, step is: apc ig1'
  1345    jinncao 	                            'u_type: 0x%x, u_index: %d, status: 0x%x',
  1347    jinncao 	                            alp_unit.unit_type, alp_unit.unit_index, status);
  1345    jinncao 	        (apc_eg1_fail__c):
  1345    jinncao 	        	TASK dxsyslog_r ( log_type_t_text_e_c,
  1345    jinncao 	                           @'JIGCLU: init apc HW failed'
  1345    jinncao 	                            'finally set 1281 alarm, step is: apc eg1'
  1345    jinncao 	                            'u_type: 0x%x, u_index: %d, status: 0x%x',
  1347    jinncao 	                            alp_unit.unit_type, alp_unit.unit_index, status);
  1345    jinncao 	        ENDDECISION;
  1345    jinncao 		CALL set_conf_fail_alarm__r( alp_unit, 0, code, status );
  1345    jinncao 	ENDDECISION;
  1345    jinncao 
  1345    jinncao 	RETURN;
  1354       pshu ENDPROCEDURE update_start_att_and_set_alarm__r;
  1345    jinncao 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_apc_hw__r;
     2     yanzuo /*
     2     yanzuo  * This procedure executes the first APC initialization for the
     2     yanzuo  * target ALP1/ALP2 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT alp_unit  jiifil__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     internal_step        byte := 0,
     2     yanzuo     target               fig_msg_header_t,
     2     yanzuo     apc_ph0              apc_ph0_params_t,
     2     yanzuo     ingress_general_1    apc_ig1_t,
     2     yanzuo     egress_general_1     apc__eg1_t,
     2     yanzuo     conf_serv            pid,
     2     yanzuo     serv_attr            attr_group_t,
     2     yanzuo     old_eg1_msg_tried    byte := 0,
     2     yanzuo     ustate               unit_state_t,
     2     yanzuo     old_egress_gen       apc_eg1_t,
     2     yanzuo     target_unit          unit_it_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK target.hms_address   := alp_unit.hms_address,
     2     yanzuo        target.extended_addr := 0;
     2     yanzuo 
  1124   huantang 	DECISION get_service__r( atm_config_params__c, conf_serv, serv_attr );
  1124   huantang 	( T ):
  1124   huantang 	  TASK internal_step := 1;
  1124   huantang 	  OUTPUT get_apc_param_req_s (
  1124   huantang 	         alp_unit.unit_type,
  1124   huantang 	         alp_unit.unit_index ) TO conf_serv,
  1124   huantang 	         SET ATTRIBUTES = serv_attr;
  1124   huantang 	ELSE:
  1124   huantang 	ENDDECISION;
  1124   huantang   
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT get_apc_param_ack_s( status,
     2     yanzuo         res_unit_info.ttype, res_unit_info.index,
     2     yanzuo         apc_ph0,
     2     yanzuo         ingress_general_1,
     2     yanzuo         egress_general_1 );
     2     yanzuo     DCL
     2     yanzuo        status         error_t,
     2     yanzuo        res_unit_info  unit_it_t;
     2     yanzuo     DECISION res_unit_info.ttype /= alp_unit.unit_type OR
     2     yanzuo              res_unit_info.index /= alp_unit.unit_index;
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(
     2     yanzuo              @'JIGCLU: APC PARAM REQ FAILURE...:'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@res_unit_info),2,
     2     yanzuo              log_text_info_t(
     2     yanzuo              @'JIGCLU: ...FOR UNIT:'));
     2     yanzuo         RETURN status;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* todo: if SP-ALP unit, use the new (not yet defined) DMX message
     2     yanzuo     to do the initialization. */
     2     yanzuo     TASK internal_step           := 2,
     2     yanzuo          apc_ph0.sf_port_number  := alp_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo     OUTPUT init_apc_ig1_req_s( target, apc_ph0, ingress_general_1 )
     2     yanzuo            TO hms_forwarder;
     2     yanzuo 
     2     yanzuo     CALL get_internal_hms_ack__r();
     2     yanzuo     /* Response normally arrives after 3 seconds or so. */
     2     yanzuo     SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT init_apc_ig1_ack_s( res_hms_address, status );
     2     yanzuo     DCL
     2     yanzuo        res_hms_address   fig_msg_header_t,
     2     yanzuo        status            error_t;
     2     yanzuo 
     2     yanzuo     DECISION res_hms_address.hms_address /= target.hms_address;
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo    RESET ( ack_timer );
     2     yanzuo    DECISION status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r ( log_type_t_text_e_c,
     2     yanzuo                        @'JIGCLU: APC IG1 INIT FAILED...:'
     2     yanzuo                         'Unit: 0x%x, index: %d'
     2     yanzuo                         'Status : 0x%x',
     2     yanzuo                          alp_unit.unit_type, alp_unit.unit_index, status );
     2     yanzuo 
  1345    jinncao       CALL update_start_att_and_set_alarm__r(alp_unit, apc_ig1_fail__c, status);
     2     yanzuo       RETURN status;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     TASK internal_step := 3;
     2     yanzuo     TASK target_unit.ttype := alp_unit.unit_type,
     2     yanzuo          target_unit.index := alp_unit.unit_index;
     2     yanzuo 
     2     yanzuo     DECISION ( find_apc_init__r( target_unit ) = T ) AND
     2     yanzuo              ( unit_main_state__r ( target_unit, ustate ) = success_ec ) AND
     2     yanzuo              ( ustate = unit_state_t_te_c );
     2     yanzuo     ( T ):
     2     yanzuo        /* Send 'old' APC_initialization msg */
     2     yanzuo        TASK old_eg1_msg_tried             := old_eg1_msg_tried + 1 ;
     2     yanzuo        TASK old_egress_gen.buf__cell1     :=  egress_general_1.buf__cell1,
     2     yanzuo             old_egress_gen.cl_buf__cell1  :=  egress_general_1.cl_buf__cell1,
     2     yanzuo             old_egress_gen.cl3_dyn_bufm   :=  egress_general_1.cl3_dyn_bufm,
     2     yanzuo             old_egress_gen.spt2_mode      :=  egress_general_1.spt2_mode,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(0)(0) :=  egress_general_1.spt_dflt_gmin__cell500(0)(0) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(0)(1) :=  egress_general_1.spt_dflt_gmin__cell500(0)(1) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(0)(2) :=  egress_general_1.spt_dflt_gmin__cell500(0)(2) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(0)(3) :=  egress_general_1.spt_dflt_gmin__cell500(0)(3) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(0)(4) :=  egress_general_1.spt_dflt_gmin__cell500(0)(4) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(1)(0) :=  egress_general_1.spt_dflt_gmin__cell500(1)(0) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(1)(1) :=  egress_general_1.spt_dflt_gmin__cell500(1)(1) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(1)(2) :=  egress_general_1.spt_dflt_gmin__cell500(1)(2) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(1)(3) :=  egress_general_1.spt_dflt_gmin__cell500(1)(3) *500,
     2     yanzuo             old_egress_gen.spt_dflt_gmin__cell1(1)(4) :=  egress_general_1.spt_dflt_gmin__cell500(1)(4) *500;
     2     yanzuo 
     2     yanzuo        OUTPUT init_apc_eg1_req_s( target, old_egress_gen ) TO hms_forwarder;
     2     yanzuo 
     2     yanzuo     ELSE:
     2     yanzuo        /* Send 'normal' apc initalization msg */
     2     yanzuo        OUTPUT init_apc__eg1_req_s( target, egress_general_1 ) TO hms_forwarder;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     CALL get_internal_hms_ack__r();
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT init_apc_eg1_ack_s( res_hms_address, status );
     2     yanzuo     DCL
     2     yanzuo        res_hms_address   fig_msg_header_t,
     2     yanzuo        status            error_t;
     2     yanzuo     DECISION res_hms_address.hms_address /= target.hms_address;
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo     ( success_ec ):
     2     yanzuo #if (F)
     2     yanzuo             TASK log_data(0):=dword(target.hms_address);
     2     yanzuo             TASK file_status := add_logwriting_to_jilfil__r(
     2     yanzuo                  log_file,1,logwriter_t_jigclu__c,
     2     yanzuo                  @'1st initialization phase of APC chip done for unit(HMS-addr):',
     2     yanzuo                  log_data );
     2     yanzuo #endif
     2     yanzuo         DECISION old_eg1_msg_tried ;
     2     yanzuo         ( 2 ):
     2     yanzuo            /* Only after send the old eg1 req msg twice the unit can be
     2     yanzuo               raised to TE-EX, then clean the apc table */
     2     yanzuo            CALL clean_apc_table__r( target_unit );
     2     yanzuo            TASK old_eg1_msg_tried := 0;
     2     yanzuo         ENDDECISION;
     2     yanzuo 
     2     yanzuo     ELSE:
     2     yanzuo        DECISION ( unit_main_state__r ( target_unit, ustate ) = success_ec ) AND
     2     yanzuo                 ( ustate = unit_state_t_te_c ) AND
     2     yanzuo                 ( old_eg1_msg_tried = 0 );
     2     yanzuo        ( T ):
     2     yanzuo           /* Try again for old boot */
     2     yanzuo           TASK dxsyslog_r ( log_type_t_text_e_c,
     2     yanzuo                            @'JIGCLU: APC EG1 init failed'
     2     yanzuo                             'retrying with msg for old boots'
     2     yanzuo                             'Status: %X'
     2     yanzuo                             'Unit: 0x%X, index: %d',
     2     yanzuo                             status, target_unit.ttype, target_unit.index );
     2     yanzuo 
     2     yanzuo           CALL add_apc_init__r( target_unit );
     2     yanzuo           /* Clean the apc table if time out */
     2     yanzuo           SET ( NOW + 12000, clean_apc_init_table ( target_unit ));
     2     yanzuo 
     2     yanzuo        ELSE:
     2     yanzuo           CALL clean_apc_table__r( target_unit );
     2     yanzuo           TASK old_eg1_msg_tried := 0;
     2     yanzuo           TASK dxsyslog_r ( log_type_t_text_e_c,
     2     yanzuo                            @'JIGCLU: APC EG1 init failed'
     2     yanzuo                             'Status: %X'
     2     yanzuo                             'Unit: 0x%X, index: %d',
     2     yanzuo                             status, target_unit.ttype, target_unit.index );
     2     yanzuo 
     2     yanzuo        ENDDECISION;
     2     yanzuo 
  1345    jinncao       CALL update_start_att_and_set_alarm__r(alp_unit, apc_eg1_fail__c, status);
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RETURN status;
     2     yanzuo 
  1174    jinncao 	INPUT ack_timer;
  1174    jinncao 		DCL
  1174    jinncao 		phys         unit_address_t,
  1429       pshu 		msg_state    msg_state_t;
     2     yanzuo 
  1174    jinncao 	DECISION internal_step;
  1174    jinncao 	( 1 ):
  1174    jinncao 		TASK dxsyslog_r( log_type_t_text_e_c,
  1174    jinncao                        @'JIGCLU: NO APC_PARAM_ACK_S..'
  1174    jinncao                        'Unit type: 0x%X, unit idx: %d',
  1174    jinncao                        alp_unit.unit_type, alp_unit.unit_index);
     2     yanzuo 
  1174    jinncao 	( 2 ):
  1345    jinncao 		TASK dxsyslog_r( log_type_t_text_i_c,
  1174    jinncao 				@'JIGCLU: NO INIT_APC_IG1_ACK_S..'
  1174    jinncao 				'Unit type: 0x%X, unit idx: %d',
  1174    jinncao                        		alp_unit.unit_type, alp_unit.unit_index);
  1345    jinncao 		CALL update_start_att_and_set_alarm__r(alp_unit, apc_ig1_fail__c,  message_waiting_timeout_ec);
     2     yanzuo 
  1174    jinncao 	( 3 ):
  1174    jinncao 		DECISION ( unit_main_state__r ( target_unit, ustate ) = success_ec ) AND
  1174    jinncao 			( ustate = unit_state_t_te_c )     AND
  1174    jinncao 			( old_eg1_msg_tried = 0 )                  AND
  1174    jinncao 			( physical_address_r( alp_unit.unit_type, alp_unit.unit_index, phys) = success_ec) AND
  1174    jinncao 			( msg_state_r( phys, msg_state) = success_ec ) AND
  1174    jinncao 			( bit_and_r( msg_state, msg_state_t_postoffice_alive_c ) = msg_state_t_postoffice_alive_c );
  1174    jinncao 		( T ):
  1174    jinncao 			/* Try configuration next time with old boots */
  1174    jinncao 			CALL add_apc_init__r( target_unit );
  1174    jinncao 			SET ( NOW + 12000, clean_apc_init_table ( target_unit ) );
  1174    jinncao 			TASK dxsyslog_r( log_type_t_text_i_c,
  1174    jinncao 				@'JIGCLU: NO INIT_APC_EG1_ACK_S..'
  1174    jinncao 				'retrying with msg for old boots next time'
  1174    jinncao 				'Unit type: 0x%X, unit idx: %d',
  1174    jinncao                        		alp_unit.unit_type, alp_unit.unit_index);
     2     yanzuo 
  1174    jinncao 		ELSE:
  1174    jinncao 			TASK dxsyslog_r( log_type_t_text_e_c,
  1174    jinncao 				@'JIGCLU: EG1 req time out..'
  1174    jinncao 				'Unit type: 0x%X, unit idx: %d',
  1174    jinncao                        		alp_unit.unit_type, alp_unit.unit_index);
     2     yanzuo 
  1174    jinncao 			/* Write error log and clean apc_init_table */
  1174    jinncao 			TASK clean_apc_table__r( target_unit );
  1174    jinncao 			TASK old_eg1_msg_tried := 0 ;
  1174    jinncao 		ENDDECISION;
     2     yanzuo 
  1345    jinncao 		CALL update_start_att_and_set_alarm__r(alp_unit, apc_eg1_fail__c,  message_waiting_timeout_ec);
  1174    jinncao 	ELSE:
  1174    jinncao 		TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                          @'JIGCLU: CONFIG PARAM SERVICE NOT AVAILABLE..');
     2     yanzuo 
  1174    jinncao 	ENDDECISION;
     2     yanzuo 
  1174    jinncao 	RETURN message_waiting_timeout_ec;
  1174    jinncao 	
     2     yanzuo    /*Arthur:25293ES08P if MXU restarted, then stop waiting APC init message*/
  1100   huantang    INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index, ?, ?, ? );
     2     yanzuo    DCL
     2     yanzuo       obj_unit_type           unit_type_t,
  1100   huantang       obj_unit_index          unit_index_t;
  1100   huantang    DECISION (alp_unit.unit_type = obj_unit_type) AND (alp_unit.unit_index = obj_unit_index);
  1100   huantang    (T):
  1100   huantang       RESET ( ack_timer );
  1100   huantang       TASK alp_unit.procs( 0 ).start_attempts_left := 0;
  1100   huantang       RETURN   card_restarted_ec;
  1100   huantang    ENDDECISION;
  1100   huantang    NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    ENDSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE init_apc_hw__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alloc_interf_ids__r;
     2     yanzuo /*
     2     yanzuo  * Allocate interface ids of the object unit via master process.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit_info  jiifil__t,
     2     yanzuo     IN      mphy_number  byte;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
  1124   huantang   
     2     yanzuo     OUTPUT jig_alloc_interf_id_s( unit_info.unit_type,
     2     yanzuo                     unit_info.unit_index,
     2     yanzuo                     unit_info.procs(0).phys_addr,
     2     yanzuo                     mphy_number ) TO manager_pid;
  1124   huantang   
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT jig_alloc_interf_id_ack_s( utype, uindex,
     2     yanzuo         proc0_interface_index,
     2     yanzuo         proc1_interface_index,
     2     yanzuo         proc2_interface_index,
     2     yanzuo         proc3_interface_index,
   470    lifsong         id_1, id_2, id_3, id_4,
     2     yanzuo         status );
     2     yanzuo     DCL
     2     yanzuo        utype                 unit_type_t,
     2     yanzuo        uindex                unit_index_t,
     2     yanzuo        status                error_t,
     2     yanzuo        proc0_interface_index byte,
     2     yanzuo        proc1_interface_index byte,
     2     yanzuo        proc2_interface_index byte,
     2     yanzuo        proc3_interface_index byte,
     2     yanzuo        id_1                  atm_interface_id_t,
     2     yanzuo        id_2                  atm_interface_id_t,
   470    lifsong        id_3                  atm_interface_id_t,
   470    lifsong        id_4                  atm_interface_id_t;       
     2     yanzuo     DECISION utype /= unit_info.unit_type OR uindex /= unit_info.unit_index;
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
  1433    jinncao 
  1433    jinncao     DECISION status;
  1433    jinncao     (success_ec):
  1433    jinncao         TASK unit_info.interfaces(0).intf_id := id_1,
  1433    jinncao             unit_info.interfaces(1).intf_id := id_2,
  1433    jinncao             unit_info.interfaces(2).intf_id := id_3,
  1433    jinncao             unit_info.interfaces(3).intf_id := id_4,         
  1433    jinncao             unit_info.procs(0).interface_index := proc0_interface_index,
  1433    jinncao             unit_info.procs(1).interface_index := proc1_interface_index,
  1433    jinncao             unit_info.procs(2).interface_index := proc2_interface_index,
  1433    jinncao             unit_info.procs(3).interface_index := proc3_interface_index;
  1433    jinncao     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN unsuccessful_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE alloc_interf_ids__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo /*This procedure sorts spi3 in spi3_list, the smallest first and the biggest last*/
     2     yanzuo PROCEDURE sort_spi3_list__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN             spi3_amount    dword,
     2     yanzuo    IN/OUT      io_spi3_list      spi3_list_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     l_spi3_port_number   spi3_port_number_t,
     2     yanzuo     i,j                             dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION spi3_amount > 1;
     2     yanzuo    ( T ):
     2     yanzuo       TASK i := 1;
     2     yanzuo       WHILE i < spi3_amount;
     2     yanzuo          TASK l_spi3_port_number := io_spi3_list(i);
     2     yanzuo          TASK j := dword( i - 1 );
     2     yanzuo          WHILE l_spi3_port_number < io_spi3_list(j);
     2     yanzuo             TASK io_spi3_list(j + 1) := io_spi3_list(j);
     2     yanzuo             TASK io_spi3_list(j) := l_spi3_port_number;
     2     yanzuo             DECISION j = 0;
     2     yanzuo             ( T ):
     2     yanzuo                OUT loop;
     2     yanzuo             ENDDECISION;
     2     yanzuo             TASK j := dword( j - 1 );
     2     yanzuo          ENDWHILE loop;
     2     yanzuo          TASK i := i + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN;
     2     yanzuo ENDPROCEDURE sort_spi3_list__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE sort_utopia_list__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sorts mphys in utopia_list, the smallest first
     2     yanzuo  * and the biggest last.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      utopia_amount  dword,
     2     yanzuo     IN/OUT  utopia_list    utopia_list_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     tmp_mphy   mphy_port_number_t,
     2     yanzuo     i,j        dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION utopia_amount > 1;
     2     yanzuo     ( T ):
     2     yanzuo       TASK i := 1;
     2     yanzuo       WHILE i < utopia_amount;
     2     yanzuo         TASK tmp_mphy := utopia_list(i);
     2     yanzuo         TASK j := dword( i - 1 );
     2     yanzuo         WHILE tmp_mphy < utopia_list(j);
     2     yanzuo           TASK utopia_list(j + 1) := utopia_list(j);
     2     yanzuo           TASK utopia_list(j) := tmp_mphy;
     2     yanzuo           DECISION j = 0;
     2     yanzuo             ( T ):
     2     yanzuo               OUT loop;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK j := dword( j - 1 );
     2     yanzuo         ENDWHILE loop;
     2     yanzuo         TASK i := i + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE sort_utopia_list__r;
     2     yanzuo 
   505      h10hu 
   505      h10hu 
     2     yanzuo /************************************************************************/
     2     yanzuo 
     2     yanzuo PROCEDURE get_spi3_info__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sorts spi3_list in mphy_port, the smallest first
     2     yanzuo  * and the biggest last.
    73     jamema ************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT   io_unit          jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
  1433    jinncao    l_status                  error_t := success_ec,
     2     yanzuo    l_uam_pid                 pid,
     2     yanzuo    l_uam_attr                attr_group_t,
     2     yanzuo    i                         byte;
    73     jamema /*
     2     yanzuo DCL SAVE
     2     yanzuo    l_spi3_request_id         dword;
    73     jamema */
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION get_service__r( utopia_addr_inq__c, l_uam_pid, l_uam_attr );
     2     yanzuo    (F):  RETURN   service_not_available_ec;
     2     yanzuo    ENDDECISION;
    73     jamema    TASK  spi3_request_id := spi3_request_id + 1;
    73     jamema    OUTPUT   spi3_address_inquiry_req_s(spi3_request_id, io_unit.unit_type, io_unit.unit_index)
     2     yanzuo                   TO l_uam_pid, SET ATTRIBUTES = l_uam_attr;
     2     yanzuo    SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo    INPUT    spi3_address_inquiry_ack_s( request_id, spi3_amount, spi3_list );
     2     yanzuo                /*SPI3 address is get here*/
     2     yanzuo    DCL
     2     yanzuo       request_id           dword,
     2     yanzuo       spi3_amount       dword,
     2     yanzuo       spi3_list               spi3_list_t;
    73     jamema    DECISION request_id /= spi3_request_id; /*not corresponding*/
     2     yanzuo    (T): NEXTSTATE - ;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RESET ( ack_timer );
     2     yanzuo 
     2     yanzuo    /* Remove sort_spi3_list__rby PR 29353ES08P,
     2     yanzuo       SPI3 adresses  which are asked from UAMPRB are ascending order if  one UX link is used.
     2     yanzuo       should not sort SPI addresses asked from UAMPRB if MX1G6 is used.
     2     yanzuo       Because the first SPI address in message is for STER and other for VETGRs.
     2     yanzuo       This prevents IW1S1A PIU start up if two ux link is used. */
     2     yanzuo 
     2     yanzuo    /* TASK sort_spi3_list__r( spi3_amount, spi3_list ); */
     2     yanzuo 
    73     jamema    /* UAM will return the right SPI3 count in flash boot phase..
    73     jamema    DECISION (io_unit.unit_type = unit_type_t_dmcu_c AND
    73     jamema             io_unit.fig_req_uxhwb_type = ux_hw_block_type_t_trib);
    73     jamema    ( T ):
    73     jamema       TASK spi3_amount := 1;
    73     jamema    ENDDECISION;*/
   830       pshu    DECISION spi3_amount=0 AND is_if_config_needed__r(io_unit);
   830       pshu    (T):
   830       pshu         RETURN non_existent_if_ec;
  1433    jinncao        
   823       pshu    ENDDECISION;
   823       pshu 
     2     yanzuo    TASK i := 0;
     2     yanzuo    WHILE i < spi3_amount;
     2     yanzuo       TASK io_unit.interfaces(i).mphy_port := spi3_list(i);
     2     yanzuo       TASK i := i+1;
     2     yanzuo    ENDWHILE;
    73     jamema    WHILE i < jii_interfaces__t_max_c; /*mark all the others to be zero*/
    73     jamema       TASK io_unit.interfaces(i).mphy_port := 0;
    73     jamema       TASK i := i+1;
    73     jamema    ENDWHILE;
  1433    jinncao 	
  1309       pshu    DECISION is_if_config_needed__r(io_unit);
    73     jamema    ( T ):
     2     yanzuo         /* Allocate interface id(s) and set up
     2     yanzuo         processor-to-interface mappings. */
     2     yanzuo       TASK l_status := alloc_interf_ids__r( io_unit, spi3_amount );
     2     yanzuo    ENDDECISION;
  1433    jinncao    /*TASK l_status:= success_ec;*/
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGCLU: no response to SPI3 address inquiry!'
     2     yanzuo          'object unit = %04XH, index = %XH',
     2     yanzuo          io_unit.unit_type, io_unit.unit_index );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_spi3_info__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_mphy_info__r;
     2     yanzuo /*
     2     yanzuo  * Acquire the mphy port number(s) of the given unit in its WO-ALP1 unit.
     2     yanzuo  * With hierarchical units, this procedure is only called when
     2     yanzuo  * handling the master processor of the unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit           jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     uam_pid              pid,
     2     yanzuo     uam_attr             attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION get_service__r( utopia_addr_inq__c, uam_pid, uam_attr );
     2     yanzuo   ( F ):
     2     yanzuo     RETURN service_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK mphy_request_id := mphy_request_id + 1;
     2     yanzuo 
  1124   huantang   
  1124   huantang 	OUTPUT utopia_address_inquiry_s( mphy_request_id, unit.unit_type, unit.unit_index )
  1124   huantang 	   TO uam_pid, SET ATTRIBUTES = uam_attr;
  1124   huantang   
     2     yanzuo 
     2     yanzuo   SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT utopia_address_inquiry_ack_s( request_id,
     2     yanzuo         utopia_amount,
     2     yanzuo         utopia_list)
     2     yanzuo     COMMENT 'Mphy port number is received here.';
     2     yanzuo     DCL
     2     yanzuo        request_id         dword,
     2     yanzuo        utopia_amount   dword,
     2     yanzuo        utopia_list        utopia_list_t,
     2     yanzuo        res                error_t := success_ec,
     2     yanzuo        i                  dword;
     2     yanzuo     DECISION request_id;
     2     yanzuo       ( mphy_request_id ):
     2     yanzuo       /* ok */
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo 
   830       pshu     DECISION utopia_amount=0 AND is_if_config_needed__r(unit);
   830       pshu     (T):
   830       pshu         RETURN non_existent_if_ec;
   830       pshu     ENDDECISION;
   830       pshu     
     2     yanzuo     TASK sort_utopia_list__r( utopia_amount, utopia_list );
  1124   huantang 
     2     yanzuo     TASK i := 0;
     2     yanzuo     WHILE i < utopia_amount;
     2     yanzuo       TASK unit.interfaces(i).mphy_port := utopia_list(i);
     2     yanzuo       TASK i := i+1;
     2     yanzuo     ENDWHILE;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
    73     jamema     DECISION (unit.interfaces(0).intf_id = 0 OR
    73     jamema               unit.interfaces(0).intf_id = atm_interface_id_t_unspecif_c OR
    73     jamema               unit.reconfig_needed);
    73     jamema       ( T ):
     2     yanzuo         /* Allocate interface id(s) and set up
     2     yanzuo         processor-to-interface mappings. */
     2     yanzuo         TASK res := alloc_interf_ids__r( unit, utopia_amount );
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN res;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGCLU: no response to utopia address inquiry!'
     2     yanzuo          'object unit = %04XH, index = %XH',
     2     yanzuo          unit.unit_type, unit.unit_index );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_mphy_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_interface_params__r;
     2     yanzuo /*
     2     yanzuo  * Inquire APC interface parameters for given unit+stage from XVALUE.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN unit_type  unit_type_t,
     2     yanzuo     IN unit_index unit_index_t,
     2     yanzuo     IN port_stage port_stage_t,
     2     yanzuo     /* output parameters: */
     2     yanzuo     IN/OUT info alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     xva_pid              pid,
     2     yanzuo     xva_attr             attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( @info ), 0, SIZEOF( info ));
     2     yanzuo   DECISION get_service__r( atm_config_params__c, xva_pid, xva_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN service_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
  1124   huantang 	OUTPUT get_interface_param_req_s( unit_type, unit_index, port_stage )
  1124   huantang 	   TO xva_pid, SET ATTRIBUTES = xva_attr;
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT get_interface_param_ack_s( status, utype, uindex,
     2     yanzuo         info.subport_params,
     2     yanzuo         info.max_vpi_bits,
     2     yanzuo         info.max_vci_bits,
     2     yanzuo         info.max_vci,
     2     yanzuo         info.bandwidth,
     2     yanzuo         info.min_vci );
     2     yanzuo     DCL
     2     yanzuo        utype             unit_type_t,
     2     yanzuo        uindex            unit_index_t,
     2     yanzuo        status            error_t;
     2     yanzuo     DECISION utype = unit_type AND uindex = unit_index;
     2     yanzuo       ( T ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN status;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_interface_params__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_amd_fpga_params__r;
     2     yanzuo /*
     2     yanzuo  * Inquire AMD FPGA parameters for given unit from XVALUE.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN       in_unit_type    unit_type_t,
     2     yanzuo    IN       in_unit_index   unit_index_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_xva_pid   pid,
   216      h10hu    l_xva_attr  attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION get_service__r( atm_config_params__c, l_xva_pid, l_xva_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN service_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   OUTPUT get_amd_fpga_param_req_s( in_unit_type, in_unit_index)
     2     yanzuo            TO l_xva_pid, SET ATTRIBUTES = l_xva_attr;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT get_amd_fpga_param_ack_s(l_status,
     2     yanzuo                                  l_utype,
     2     yanzuo                                  l_uindex,
     2     yanzuo                                  l_ig_shape,
     2     yanzuo                                  l_ig_usable_channels,
     2     yanzuo                                  l_ig_max_fifo);
     2     yanzuo    DCL
     2     yanzuo       l_status                error_t,
     2     yanzuo       l_utype                 unit_type_t,
     2     yanzuo       l_uindex                unit_index_t,
     2     yanzuo       l_uam_pid               pid,
     2     yanzuo       l_uam_attr              attr_group_t,
     2     yanzuo       l_ig_shape              byte,
     2     yanzuo       l_ig_usable_channels    byte,
     2     yanzuo       l_ig_max_fifo           byte;
     2     yanzuo 
     2     yanzuo     DECISION ( l_status );
     2     yanzuo     ( /= success_ec ):
     2     yanzuo        RETURN l_status;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_utype = in_unit_type AND l_uindex = in_unit_index;
     2     yanzuo    ( F ):
     2     yanzuo       NEXTSTATE -;
     2     yanzuo    ELSE:
     2     yanzuo       RESET ( ack_timer );
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION get_service__r( utopia_addr_inq__c, l_uam_pid, l_uam_attr );
     2     yanzuo     (T):
     2     yanzuo       OUTPUT init_amd_fpga_param_ack_s ( success_ec,
     2     yanzuo                                          l_ig_shape,
     2     yanzuo                                          l_ig_usable_channels,
     2     yanzuo                                          l_ig_max_fifo)
     2     yanzuo       TO l_uam_pid, SET ATTRIBUTES = l_uam_attr;
     2     yanzuo       RETURN success_ec;
     2     yanzuo     ELSE:
     2     yanzuo       RETURN service_not_available_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_amd_fpga_params__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE intf_notify__r;
     2     yanzuo /*
     2     yanzuo  * Notify PIGPRB about new interface(s).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      if_idx       byte,
     2     yanzuo     IN      mphy_type    mphy_type_t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     pigprb_pid           pid,
     2     yanzuo     pigprb_attr          attr_group_t,
     2     yanzuo     mxu_info             unit_it_t,
     2     yanzuo     parent_fu_type       unit_it_t,
     2     yanzuo     interface_list       if_list_t,
     2     yanzuo     child_list           child_fu_list_t,
     2     yanzuo     i                    dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION get_service__r( atm_inter_notif__c, pigprb_pid, pigprb_attr );
     2     yanzuo   ( F ):
     2     yanzuo #if (test_logs)
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: atm_inter_notif__c service not available:');
     2     yanzuo #endif
     2     yanzuo     RETURN unsuccessfull_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK memset( bytepointer(@interface_list), 0, SIZEOF( interface_list ));
     2     yanzuo   TASK memset( bytepointer(@child_list), 0, SIZEOF( child_list ));
     2     yanzuo   TASK parent_fu_type.ttype := unit.unit_type,
     2     yanzuo        parent_fu_type.index := unit.unit_index;
     2     yanzuo   TASK mxu_info.ttype := alp_unit.unit_type,
     2     yanzuo        mxu_info.index := alp_unit.unit_index;
     2     yanzuo 
     2     yanzuo   TASK i := 0;
     2     yanzuo   WHILE i < if_list_t_size_c;
     2     yanzuo      TASK interface_list.interfaces(i)             := unit.interfaces(i).intf_id,
     2     yanzuo           interface_list.mphys(i).mphy_port_number := unit.interfaces(i).mphy_port,
     2     yanzuo           interface_list.mphys(i).mphy_type        := mphy_type;
     2     yanzuo     TASK i := i + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   DECISION unit.unit_type = unit.procs(0).unit_type;
     2     yanzuo     ( T ):
     2     yanzuo       TASK child_list.units(0).ttype    := unit.procs(0).unit_type,
     2     yanzuo            child_list.units(0).index    := unit.procs(0).unit_index,
     2     yanzuo            child_list.indices(0)        := unit.procs(if_idx).interface_index;
     2     yanzuo     ELSE:
     2     yanzuo        TASK i := 0;
     2     yanzuo        WHILE i < child_fu_list_t_size_c;
     2     yanzuo          TASK child_list.units(i).ttype    := unit.procs(i).unit_type,
     2     yanzuo               child_list.units(i).index    := unit.procs(i).unit_index,
     2     yanzuo               child_list.indices(i)        := unit.procs(i).interface_index;
     2     yanzuo          TASK i := i + 1;
     2     yanzuo        ENDWHILE;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   OUTPUT atm_int_inf_notif_s( msg_op_mode_t_create_c,
     2     yanzuo          parent_fu_type, interface_list,
     2     yanzuo          child_list, mxu_info )
     2     yanzuo          TO pigprb_pid, SET ATTRIBUTES = pigprb_attr;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_intf_notify_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_intf_notify_ack;
     2     yanzuo 
     2     yanzuo   INPUT atm_int_inf_notif_ack_s( parent_fu, status );
     2     yanzuo     DCL
     2     yanzuo        parent_fu         unit_it_t,
     2     yanzuo        status            error_t;
     2     yanzuo 
     2     yanzuo     DECISION (parent_fu.ttype = parent_fu_type.ttype) AND (parent_fu.index = parent_fu_type.index);
     2     yanzuo       ( T ):
     2     yanzuo       /* ok */
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo 
     2     yanzuo     /* todo: remove this when PIGPRB starts to respond to
     2     yanzuo      * re-notification requests with success_ec */
     2     yanzuo    DECISION status;
     2     yanzuo    ( if_id_exists_ec, success_ec ):
     2     yanzuo       RETURN success_ec;
     2     yanzuo    ELSE:
  1027       pshu       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                       @'JIGCLU: interf notif result: %04X'
     2     yanzuo                        'unit type    %04X'
     2     yanzuo                        'unit index   %04X'
     2     yanzuo                        'interface ID %XH'
     2     yanzuo                        , status, unit.unit_type, unit.unit_index,
     2     yanzuo                        unit.interfaces(if_idx).intf_id );
     2     yanzuo       RETURN status;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
  1029    lifsong       TASK dxsyslog_r( log_type_t_text_i_c,
   359    lifsong                       @'JIGCLU: interf notif timeout!'
   359    lifsong                        'unit type    %04X'
   359    lifsong                        'unit index   %04X'
   359    lifsong                        'interface ID %XH',
   359    lifsong                        unit.unit_type, unit.unit_index,
   359    lifsong                        unit.interfaces(if_idx).intf_id );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_intf_notify_ack;
     2     yanzuo ENDPROCEDURE intf_notify__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1222      tinyu PROCEDURE check_unit_senh_state__r;
  1222      tinyu /*
  1222      tinyu  * Get the state of the dest_unit connected to the conn 
  1222      tinyu  * return unit_state_not_available_ec if the state is SE-NH
  1222      tinyu  **************************************************************************/
  1222      tinyu FPAR
  1222      tinyu     IN other_unit             phys_address_t;
  1222      tinyu     
  1222      tinyu RETURNS   
  1222      tinyu     error_t;
  1222      tinyu     
  1222      tinyu DCL
  1222      tinyu     ec                   error_t,
  1228      tinyu     unit_addr            phys_address_t,
  1222      tinyu     ustate               unit_state_t;
  1222      tinyu 
  1222      tinyu START;
  1228      tinyu        TASK unit_addr := (other_unit &computer_t_mask_log_index_c);
  1228      tinyu        TASK ec :=  unit_state_by_phys_addr__r(unit_addr, ustate);
  1222      tinyu        DECISION ec;
  1222      tinyu        (success_ec):
  1222      tinyu               DECISION ustate = unit_state_t_senh_c;
  1222      tinyu               (T):
  1222      tinyu                    RETURN unit_state_not_available_ec;                  
  1222      tinyu                ENDDECISION;
  1222      tinyu        ENDDECISION;
  1222      tinyu        RETURN ec;
  1222      tinyu   
  1222      tinyu ENDPROCEDURE check_unit_senh_state__r;      
  1222      tinyu 
  1222      tinyu 
  1222      tinyu /**************************************************************************/
  1222      tinyu PROCEDURE sort_vcc_params__r;
  1222      tinyu /* 
  1222      tinyu * Find correct position in the result table.
  1222      tinyu * It is kept sorted by connection type (NRTs before RTs)
  1222      tinyu * and target computer type and index.
  1222      tinyu ***************************************************************************/
  1222      tinyu FPAR
  1222      tinyu     IN unit_addr              phys_address_t,
  1222      tinyu     IN n                      dword,
  1222      tinyu     IN conn_id            conn_id_t,
  1222      tinyu     IN/OUT para               jig_vccs_params__t,
  1222      tinyu     IN/OUT ui_table           ui_table__t;
  1222      tinyu     
  1222      tinyu RETURNS   
  1222      tinyu     error_t;
  1222      tinyu     
  1222      tinyu DCL
  1222      tinyu     edge_buf           edge_buf__t,
  1222      tinyu     edge_ptr           edge_ptr__t,
  1222      tinyu     other_unit         phys_address_t,
  1222      tinyu     other_ui           unit_it_t,
  1222      tinyu     serv_cat           int_serv_cat_t,
  1222      tinyu     j,pos              dword,
  1222      tinyu     ec                 error_t;
  1222      tinyu 
  1222      tinyu START;
  1222      tinyu     TASK edge_ptr  := edge_ptr__t( @edge_buf );
  1222      tinyu     TASK ec := conn_attributes_r( conn_id,
  1222      tinyu               SIZEOF( edge_buf ),
  1222      tinyu               $edge_ptr );
  1222      tinyu     DECISION ec;
  1222      tinyu     ( success_ec ):
  1407     z7zhou         DECISION ( (edge_ptr->vertex_end_list->vertex_end->
  1407     z7zhou                      vertex->vertex_attr.hms_address) =
  1407     z7zhou                    (edge_ptr->vertex_end_list->next->vertex_end->
  1407     z7zhou                      vertex->vertex_attr.hms_address) ) ;
  1407     z7zhou         (T):
  1407     z7zhou            RETURN unsuccessful_ec;
  1407     z7zhou         ENDDECISION;
  1407     z7zhou 
  1222      tinyu         TASK serv_cat   := edge_ptr->vertex_end_list->vertex_end->
  1222      tinyu                    traff_para.category;
  1222      tinyu         TASK other_unit := edge_ptr->vertex_end_list->vertex_end->
  1222      tinyu                    vertex->vertex_attr.address;
  1407     z7zhou                    
  1222      tinyu         DECISION other_unit;
  1222      tinyu         ( /= unit_addr ):
  1222      tinyu               TASK other_ui.ttype := edge_ptr->vertex_end_list->
  1222      tinyu                      vertex_end->vertex->vertex_attr.unit_type;
  1222      tinyu               TASK other_ui.index := edge_ptr->vertex_end_list->
  1222      tinyu                      vertex_end->vertex->vertex_attr.unit_index;
  1222      tinyu         ELSE:
  1222      tinyu               TASK other_unit := edge_ptr->vertex_end_list->next->
  1222      tinyu                      vertex_end->vertex->vertex_attr.address;
  1222      tinyu               TASK other_ui.ttype := edge_ptr->vertex_end_list->next->
  1222      tinyu                      vertex_end->vertex->vertex_attr.unit_type;
  1222      tinyu               TASK other_ui.index := edge_ptr->vertex_end_list->next->
  1222      tinyu                      vertex_end->vertex->vertex_attr.unit_index;
  1222      tinyu         ENDDECISION;
  1222      tinyu         
  1222      tinyu         TASK ec := check_unit_senh_state__r(other_unit);
  1222      tinyu         DECISION ec;
  1222      tinyu         (success_ec):        
  1222      tinyu            TASK pos := 0;
  1222      tinyu            
  1222      tinyu            WHILE pos < n
  1222      tinyu               AND
  1222      tinyu              ((para.vcc(pos).serv_category =
  1222      tinyu            	   int_serv_cat_t_i_nrt_mnw_c
  1222      tinyu                AND
  1222      tinyu                serv_cat /= para.vcc(pos).serv_category)
  1222      tinyu                OR
  1222      tinyu                (serv_cat = para.vcc(pos).serv_category
  1222      tinyu                AND
  1222      tinyu                (ui_table(pos).ttype < other_ui.ttype
  1222      tinyu                OR
  1222      tinyu                (ui_table(pos).ttype = other_ui.ttype
  1222      tinyu                AND
  1222      tinyu                ui_table(pos).index < other_ui.index)))
  1222      tinyu                );            
  1222      tinyu                TASK pos := pos + 1;
  1222      tinyu            ENDWHILE;
  1222      tinyu            /* shift the rest of the table up by one entry. */
  1222      tinyu            TASK j := n;
  1222      tinyu            WHILE (j > pos);
  1222      tinyu               TASK j := dword( j - 1 );
  1222      tinyu               TASK para.vcc( j+1 ) := para.vcc( j );
  1222      tinyu               TASK ui_table( j+1 ) := ui_table( j );
  1222      tinyu            ENDWHILE;
  1222      tinyu            TASK para.vcc(pos).conn_id         := conn_id,
  1222      tinyu                 para.vcc(pos).serv_category   := serv_cat,
  1222      tinyu                 para.vcc(pos).target_computer := other_unit,
  1222      tinyu                 ui_table(pos)                 := other_ui;      
  1222      tinyu         ENDDECISION;        
  1222      tinyu     ELSE:
  1222      tinyu         TASK dxsyslog_r( log_type_t_text_i_c,
  1222      tinyu                       @'JIGCLU: conn_attributes_r failed!'
  1228      tinyu                        'conn_id = %d'
  1228      tinyu                        'ec = %d',
  1228      tinyu                         conn_id,ec);
  1222      tinyu     ENDDECISION;
  1222      tinyu     
  1222      tinyu     RETURN ec;
  1222      tinyu 
  1222      tinyu   
  1222      tinyu ENDPROCEDURE sort_vcc_params__r;            
  1222      tinyu 
  1222      tinyu /**************************************************************************/
     2     yanzuo PROCEDURE collect_connections__r;
     2     yanzuo /*
     2     yanzuo  * Find out the connections of the given unit from TOELIB,
     2     yanzuo  * and then collect some additional information about each of them.
     2     yanzuo  * todo: add params array size parameter to prevent overflow errors.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      unit_addr    phys_address_t,
     2     yanzuo     IN      dest_addr    phys_address_t,
     2     yanzuo     IN/OUT  para         jig_vccs_params__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     conn_id_buf          conn_id_buf__t,
     2     yanzuo     conns_ptr            conn_list_ptr__t,
     2     yanzuo     conn_id              conn_id_t,
     2     yanzuo     ec                   error_t,
     2     yanzuo     n                    dword := 0,
  1222      tinyu     i                    dword,
     2     yanzuo     ui_table             ui_table__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /*
     2     yanzuo   * Set up the data structures required
     2     yanzuo   * by TOELIB routines.
     2     yanzuo   */
  1222      tinyu   TASK conns_ptr := conn_list_ptr__t( @conn_id_buf );
     2     yanzuo   TASK ec := connections_r ( unit_addr, dest_addr,
     2     yanzuo        SIZEOF( conn_id_buf ),
     2     yanzuo        $conns_ptr );
     2     yanzuo 
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK i := 0;
     2     yanzuo       WHILE i < conns_ptr->item_count;
     2     yanzuo         TASK conn_id := $ADDPTR( conns_ptr->connection_list, i );
   617     qinggu         DECISION conn_id < jig_limits__t_n_dsp_conns_min_c;
  1222      tinyu         ( T ): /* dsp connections be created in hc_created_dsp phase, so here not. */
  1222      tinyu            TASK ec := sort_vcc_params__r(unit_addr , n , conn_id, para , ui_table );
  1222      tinyu            DECISION ec;
  1222      tinyu            (success_ec):                     
  1222      tinyu                TASK n := n+1;
  1222      tinyu            ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK i := i + 1;
     2     yanzuo       ENDWHILE; /* end of TOELIB connection loop */
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK para.item_count := n;
  1243      tinyu   RETURN success_ec;
     2     yanzuo ENDPROCEDURE collect_connections__r;
     2     yanzuo 
    98    lifsong PROCEDURE add_master_slave_unit__r;
    98    lifsong FPAR
    98    lifsong       IN VIEWED  in_unit  jiifil__t,
    98    lifsong       IN in_proc_idx        byte,
    98    lifsong       IN/OUT comps_ptr  computer_list_ptr__t;
     2     yanzuo 
    98    lifsong DCL
    98    lifsong       is_master_unit     bool := T,
    98    lifsong       is_master_self    bool := F,
    98    lifsong       tmp_unit             unit_it_t,
   216      h10hu       unit_addr    phys_address_t;
    98    lifsong 
    98    lifsong START;
    98    lifsong 
    98    lifsong       DECISION unit_classification_r( in_unit.procs(in_proc_idx).unit_type, unit_class_t_child_in_h_c );
    98    lifsong       ( /=success_ec ):
    98    lifsong            RETURN;
    98    lifsong       ENDDECISION;
    98    lifsong       
    98    lifsong       DECISION unit_attribute_r (  in_unit.procs(in_proc_idx).unit_type,
    98    lifsong                                              in_unit.procs(in_proc_idx).unit_index,
    98    lifsong                                              unit_attribute_t_has_hms_node_c,
    98    lifsong                                              is_master_self); 
    98    lifsong       ( /= success_ec ):
    98    lifsong            RETURN;
    98    lifsong       ENDDECISION;
    98    lifsong 
    98    lifsong        DECISION get_parent_unit_r(  in_unit.procs(in_proc_idx).unit_type,
    98    lifsong                                                    in_unit.procs(in_proc_idx).unit_index,
    98    lifsong                                                    tmp_unit.ttype, 
    98    lifsong                                                    tmp_unit.index );
    98    lifsong        ( /= success_ec ):
    98    lifsong             RETURN;
    98    lifsong        ENDDECISION;
    98    lifsong        
    98    lifsong        DECISION get_first_child_unit_r( tmp_unit.ttype, tmp_unit.index, tmp_unit.ttype, tmp_unit.index);
    98    lifsong        ( /= success_ec ):
    98    lifsong            RETURN;
    98    lifsong        ENDDECISION;
    98    lifsong 
    98    lifsong        WHILE ( T );
    98    lifsong              DECISION unit_attribute_r( tmp_unit.ttype, tmp_unit.index,
    98    lifsong                                                    unit_attribute_t_has_hms_node_c, is_master_unit ); 
    98    lifsong              ( /= success_ec ):
    98    lifsong                  RETURN;
    98    lifsong              ENDDECISION;
    98    lifsong                                      
    98    lifsong              DECISION ( (is_master_self /= is_master_unit) AND tmp_unit.ttype = in_unit.procs(in_proc_idx).unit_type );
    98    lifsong              ( T ):
    98    lifsong                    DECISION physical_address_r ( tmp_unit.ttype, tmp_unit.index,unit_addr);
    98    lifsong                    ( /= success_ec ):
    98    lifsong                        RETURN;
    98    lifsong                    ENDDECISION;
    98    lifsong 
    98    lifsong                    TASK $ADDPTR( comps_ptr->computer_list, comps_ptr->item_count) := unit_addr;
    98    lifsong                    TASK comps_ptr->item_count := comps_ptr->item_count + 1;
    98    lifsong              ENDDECISION;
    98    lifsong              
    98    lifsong              DECISION get_next_peer_r( tmp_unit.ttype, tmp_unit.index,
    98    lifsong                                                           tmp_unit.ttype, tmp_unit.index );
    98    lifsong              ( /= success_ec ):
    98    lifsong                   RETURN;    
    98    lifsong              ENDDECISION;             
    98    lifsong         ENDWHILE; 
    98    lifsong 
    98    lifsong ENDPROCEDURE add_master_slave_unit__r;
    98    lifsong 
     2     yanzuo /**************************************************************************/
    98    lifsong PROCEDURE collect_high_pri_conns__r;
    98    lifsong /*
    98    lifsong  * Find out the high priority connections(center unit - leaf unit and master - slave)  of the given unit from TOELIB,
    98    lifsong  * and then collect some additional information about each of them.
    98    lifsong  * todo: add params array size parameter to prevent overflow errors.
    98    lifsong  **************************************************************************/
    98    lifsong FPAR
    98    lifsong     IN VIEWED      in_unit    jiifil__t,
    98    lifsong     IN      in_proc_idx     	byte,
    98    lifsong     IN/OUT  para         jig_vccs_params__t;
    98    lifsong 
    98    lifsong RETURNS
    98    lifsong     error_t;
    98    lifsong     
    98    lifsong DCL
    98    lifsong     conn_id_buf          conn_id_buf__t,
    98    lifsong     conns_ptr            conn_list_ptr__t,
    98    lifsong     comps_buf             computer_buf__t,
  1222      tinyu     comps_ptr             computer_list_ptr__t,    
    98    lifsong     conn_id              conn_id_t,
    98    lifsong     other_unit           phys_address_t,
  1222      tinyu     center_comp          phys_address_t,
    98    lifsong     ec                   error_t,
    98    lifsong     n                    dword := 0,
  1222      tinyu     i, j                 dword,
    98    lifsong     ui_table             ui_table__t,
   617     qinggu     size                 dword := 0,
   617     qinggu     unit_it              unit_it_t ;
    98    lifsong     
    98    lifsong START;
    98    lifsong   /*
    98    lifsong   * Set up the data structures required
    98    lifsong   * by TOELIB routines.
    98    lifsong   */
  1222      tinyu   TASK conns_ptr := conn_list_ptr__t( @conn_id_buf ),
    98    lifsong        comps_ptr :=  computer_list_ptr__t(@comps_buf);
    98    lifsong 
    98    lifsong   /* get the center units information*/
   617     qinggu   TASK size := sizeof(computer_buf__t);
    98    lifsong 
    98    lifsong 
   617     qinggu   DECISION in_unit.unit_type = unit_type_t_omu_c;
   617     qinggu   ( T ):
   617     qinggu       TASK ec := connected_computers_r ( in_unit.procs(in_proc_idx).phys_addr,
   617     qinggu                                          size, $comps_ptr) ;
   617     qinggu       DECISION ec;
   617     qinggu       ( /= success_ec ):
   617     qinggu           TASK dxsyslog_r( log_type_t_text_e_c,
   617     qinggu                  @'collect_high_pri_conns__r'
   617     qinggu                  ' connected_computers_r failed to OMU-%d, ec:%d',
   617     qinggu                  in_unit.procs(in_proc_idx).phys_addr, ec);
   617     qinggu           RETURN ec;
   617     qinggu       ENDDECISION;
    98    lifsong 
   617     qinggu       TASK i := 0, j := 0;
   617     qinggu       WHILE ( i < comps_ptr->item_count );
   617     qinggu           TASK other_unit := $ADDPTR( comps_ptr->computer_list, i );
   617     qinggu           DECISION unit_type_and_index_r(/*slice_id_t_own_slice_c,*/ other_unit, unit_it );
   617     qinggu           ( success_ec ):
   617     qinggu               DECISION unit_it.ttype;
   617     qinggu               ( unit_type_t_mxu_c, unit_type_t_sfu_c, unit_type_t_rsmu_c,
   617     qinggu                 unit_type_t_omu_c, unit_type_t_cacu_c, unit_type_t_cm_c ):
   617     qinggu                   TASK $ADDPTR( comps_ptr->computer_list, j ) := other_unit;
   617     qinggu                   TASK j := j + 1;
   617     qinggu               ENDDECISION;
   617     qinggu           ENDDECISION;
   617     qinggu           TASK i := i + 1;
   617     qinggu       ENDWHILE;
   617     qinggu       TASK comps_ptr->item_count := j;
   617     qinggu   ELSE:
   617     qinggu       TASK ec := center_nodes_r( in_unit.procs(in_proc_idx).phys_addr, size, $comps_ptr );
    98    lifsong 
    98    lifsong 
   617     qinggu       DECISION ec;
   617     qinggu       ( /= success_ec ):
   617     qinggu           RETURN ec;
   617     qinggu       ENDDECISION;
   617     qinggu 
   617     qinggu       /*get the master's information if it is slave*/
   617     qinggu 
   617     qinggu       CALL add_master_slave_unit__r(in_unit, in_proc_idx, comps_ptr);
   617     qinggu 
   617     qinggu   ENDDECISION;
    98    lifsong                        
    98    lifsong   TASK size := 0;
    98    lifsong   WHILE ( size < comps_ptr->item_count );        
    98    lifsong        TASK center_comp := $ADDPTR( comps_ptr->computer_list, size);
    98    lifsong                        
    98    lifsong        TASK ec := connections_r ( in_unit.procs(in_proc_idx).phys_addr, center_comp,
    98    lifsong                  SIZEOF( conn_id_buf ),
    98    lifsong                  $conns_ptr );
    98    lifsong 
    98    lifsong       DECISION ec;
    98    lifsong       ( /= success_ec ):
    98    lifsong          RETURN ec;
    98    lifsong       ENDDECISION;
    98    lifsong 
    98    lifsong       TASK i := 0;
    98    lifsong       WHILE i < conns_ptr->item_count;
    98    lifsong         TASK conn_id := $ADDPTR( conns_ptr->connection_list, i );
  1222      tinyu         TASK ec := sort_vcc_params__r(in_unit.procs(in_proc_idx).phys_addr , n ,  conn_id ,para, ui_table);
    98    lifsong         DECISION ec;
  1222      tinyu         (success_ec):              
  1222      tinyu              TASK n := n+1;                                          
  1222      tinyu         ENDDECISION;             
    98    lifsong         TASK i := i + 1;
    98    lifsong       ENDWHILE; /* end of TOELIB connection loop */
    98    lifsong  
    98    lifsong       TASK size := size + 1;
    98    lifsong   ENDWHILE;
    98    lifsong 
    98    lifsong   TASK para.item_count := n;
  1243      tinyu   RETURN success_ec;
    98    lifsong ENDPROCEDURE collect_high_pri_conns__r;
    98    lifsong 
    98    lifsong 
    98    lifsong /**************************************************************************/
   617     qinggu PROCEDURE collect_dsp_connections__r;
   617     qinggu /*
   617     qinggu  * Find out the connections of the given unit from TOELIB,
   617     qinggu  * and then collect some additional information about each of them.
   617     qinggu  * todo: add params array size parameter to prevent overflow errors.
   617     qinggu  **************************************************************************/
   617     qinggu FPAR
   617     qinggu     IN      unit_addr    phys_address_t,
   617     qinggu     IN      dest_addr    phys_address_t,
   617     qinggu     IN/OUT  para         jig_vccs_params__t;
   617     qinggu 
   617     qinggu RETURNS
   617     qinggu     error_t;
   617     qinggu 
   617     qinggu DCL
   617     qinggu     comps                computer_buf__t,
   617     qinggu     comp_ptr             computer_list_ptr__t,
   617     qinggu     conn_id_buf          conn_id_buf__t,
   617     qinggu     conns_ptr            conn_list_ptr__t,
   617     qinggu     conn_id              conn_id_t,
   617     qinggu     ec                   error_t,
   617     qinggu     n                    dword := 0,
  1222      tinyu     i                    dword,
   617     qinggu     ui_table             ui_table__t,
   617     qinggu     idx                  byte;
   617     qinggu 
   617     qinggu START;
   617     qinggu 
   660     qinggu   TASK para.item_count := 0;
   660     qinggu 
   617     qinggu   TASK comp_ptr := computer_list_ptr__t(@comps);
   617     qinggu   TASK ec := topo_dsp_of_comp_r ( unit_addr, sizeof(computer_buf__t), $comp_ptr );
   617     qinggu 
   617     qinggu   DECISION ( ec );
   617     qinggu     ( success_ec ):
   660     qinggu         TASK $ADDPTR( comp_ptr->computer_list, comp_ptr->item_count ) := unit_addr,
   660     qinggu              comp_ptr->item_count := comp_ptr->item_count + 1;
   617     qinggu     ( search_key_not_found_ec ):
   660     qinggu         RETURN success_ec;
   617     qinggu     ELSE:
   617     qinggu         RETURN ec;
   617     qinggu   ENDDECISION;
   617     qinggu 
   617     qinggu 
   617     qinggu   TASK idx := 0;
   617     qinggu   TASK conns_ptr := conn_list_ptr__t( @conn_id_buf );
   617     qinggu   WHILE idx < comp_ptr->item_count;
   664     qinggu     TASK ec := connections_r ( $ADDPTR( comp_ptr->computer_list, idx), dest_addr, 
   617     qinggu                                SIZEOF( conn_id_buf ), $conns_ptr );
   617     qinggu     DECISION ec;
   617     qinggu       ( success_ec ):
   617     qinggu         /*
   617     qinggu         * Set up the data structures required
   617     qinggu         * by TOELIB routines.
   617     qinggu         */
   617     qinggu 
   617     qinggu         TASK i := 0;
   617     qinggu         WHILE i < conns_ptr->item_count;
   617     qinggu             TASK conn_id := $ADDPTR( conns_ptr->connection_list, i );
   664     qinggu             DECISION conn_id >= jig_limits__t_n_dsp_conns_min_c;
   664     qinggu             ( T ):
  1222      tinyu                 TASK ec := sort_vcc_params__r($ADDPTR( comp_ptr->computer_list, idx) , n ,  conn_id , para, ui_table);
   664     qinggu                 DECISION ec;
  1222      tinyu                 (success_ec):  
  1407     z7zhou                    TASK n := n+1;
   664     qinggu                 ENDDECISION;
   617     qinggu             ENDDECISION;
   617     qinggu             TASK i := i + 1;
   617     qinggu         ENDWHILE; /* end of TOELIB connection loop */
   617     qinggu       ENDDECISION;
   617     qinggu       TASK para.item_count := n;
   617     qinggu       TASK idx := idx + 1;
   617     qinggu     ENDWHILE; /* end of comp idx loop */
   617     qinggu 
   617     qinggu     RETURN success_ec;
   617     qinggu ENDPROCEDURE collect_dsp_connections__r;
   617     qinggu 
   617     qinggu 
   617     qinggu /**************************************************************************/
     2     yanzuo PROCEDURE get_conn_resources__r;
     2     yanzuo /*
     2     yanzuo  * Find out the VCC resource data (ie. VCIs, xconn-ids, dest SFU ports)
     2     yanzuo  * for the given connections via the master process.
     2     yanzuo  * todo: add resource array size parameter to prevent overflow errors.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN         unit_addr        phys_address_t,
     2     yanzuo     IN         conn_exist_state bool,
     2     yanzuo     IN         nrt_only         bool,
     2     yanzuo     IN VIEWED  vcc_params       jig_vccs_params__t,
     2     yanzuo     IN/OUT     vcc_resources    jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo START;
  1124   huantang   
  1124   huantang 	OUTPUT jig_vcc_resource_req__s( unit_addr, conn_exist_state,
  1124   huantang 	   nrt_only, vcc_params ) TO manager_pid;
  1124   huantang   
     2     yanzuo 
     2     yanzuo   SET ( NOW + 1000, ack_timer );
     2     yanzuo   NEXTSTATE waiting;
     2     yanzuo 
     2     yanzuo STATE waiting
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT jig_vcc_resource_ack__s( status, addr, vcc_resources );
     2     yanzuo     DCL
     2     yanzuo        status            error_t,
     2     yanzuo        addr              phys_address_t;
     2     yanzuo     DECISION addr;
     2     yanzuo       ( unit_addr ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN success_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting;
     2     yanzuo ENDPROCEDURE get_conn_resources__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   223    lifsong PROCEDURE get_remote_conn_resources__r;
   223    lifsong /*
   223    lifsong  * Find out the remote end VCC resource data (ie. VCIs, xconn-ids, dest SFU ports)
   223    lifsong  **************************************************************************/
   223    lifsong FPAR
   223    lifsong     IN         unit_addr        phys_address_t,
   223    lifsong     IN         conn_exist_state bool,
   223    lifsong     IN         nrt_only         bool,    
   223    lifsong     IN VIEWED  vcc_params       jig_vccs_params__t,
   223    lifsong     IN/OUT     remote_vcc_resources    jig_remote_vccs_res__t;
   223    lifsong 
   223    lifsong RETURNS
   223    lifsong     error_t;
   223    lifsong 
   223    lifsong START;
  1124   huantang 	OUTPUT jig_remote_vcc_res_req__s( unit_addr, conn_exist_state,
  1124   huantang 	   nrt_only, vcc_params ) TO manager_pid;
   223    lifsong 
   223    lifsong   SET ( NOW + 1000, ack_timer );
   223    lifsong   NEXTSTATE waiting;
   223    lifsong 
   223    lifsong STATE waiting
   223    lifsong   COMMENT ' ';
   223    lifsong 
   223    lifsong   INPUT jig_remote_vcc_res_ack__s(addr, remote_vcc_resources );
   223    lifsong     DCL
   223    lifsong        addr              phys_address_t;
   223    lifsong     DECISION addr;
   223    lifsong       ( unit_addr ):
   223    lifsong         RESET ( ack_timer );
   223    lifsong         RETURN success_ec;
   223    lifsong     ENDDECISION;
   223    lifsong     NEXTSTATE -;
   223    lifsong 
   223    lifsong   INPUT ack_timer;
   223    lifsong     RETURN message_waiting_timeout_ec;
   223    lifsong ENDSTATE waiting;
   223    lifsong ENDPROCEDURE get_remote_conn_resources__r;
   223    lifsong 
   223    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE update_half_conn_states__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sends half-connection 'exists' state update request
     2     yanzuo  * to the master process.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     IN      unit_addr    phys_address_t,
     2     yanzuo     IN/OUT  vccs         jig_vccs_resources__t,
     2     yanzuo     IN      exist_state  bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     conns                jig_id_array__t,
     2     yanzuo     addrs                jig_id_array__t,
     2     yanzuo     xconns               jig_two_id_array__t,
     2     yanzuo     i                    dword := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   WHILE i < vccs.item_count;
     2     yanzuo     TASK conns.item(i) := vccs.res(i).conn_id,
     2     yanzuo          i := i + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK conns.n_items  := vccs.item_count,
     2     yanzuo        addrs.item(0)  := unit_addr,
     2     yanzuo        addrs.n_items  := 1,
     2     yanzuo        xconns.n_items := 0;
     2     yanzuo   OUTPUT jig_update_half_conn_states__s( conns, addrs,
     2     yanzuo          $jig_id_array_ptr__t(@xconns),
     2     yanzuo          exist_state,
     2     yanzuo          NULL, NULL, 0,0,0,0 /* dummy */
   961    lifsong          ) TO updater_pid,SET DELIVERY_RANGE = 3;
     2     yanzuo   /* todo: should we wait for ack,
     2     yanzuo   * and re-send the request if it doesn't arrive? */
     2     yanzuo   RETURN success_ec;
     2     yanzuo ENDPROCEDURE update_half_conn_states__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_app_if_vp_info__r;
     2     yanzuo /*
     2     yanzuo  Acquire needed information for creating IF&VP of APP units.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT  io_unit           jiifil__t,
     2     yanzuo    IN      in_proc_idx       byte,
   604    lifsong    IN/OUT  io_alp_unit       jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
   359    lifsong    mphy_number      byte,
     2     yanzuo    l_result               error_t := success_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
   359    lifsong    DECISION classify__r( io_unit, in_proc_idx,io_alp_unit );
     2     yanzuo    ( unit_class__t_app_trib_c ):
    73     jamema       DECISION (io_unit.interfaces(0).mphy_port = mphy_port_number_t_unspec_c OR
    73     jamema                 io_unit.reconfig_needed);
    73     jamema       ( T ):
     2     yanzuo          TASK l_result := get_spi3_info__r( io_unit );
     2     yanzuo          DECISION l_result;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             RETURN l_result;
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ENDDECISION;
   482      h10hu    ( unit_class__t_eipu_trib_c ):
   359    lifsong       TASK io_unit.interfaces(io_unit.procs(in_proc_idx).interface_index).mphy_port := mphy_port_number_t (jig_ss7u__t_ss7u_mphy_c);/*hard code for ss7u or ss7up*/
     2     yanzuo    ELSE:
     2     yanzuo       /* Calculate mphy_port for APP unit */
   359    lifsong       TASK mphy_number := 1;
     2     yanzuo       DECISION io_unit.interfaces(0).mphy_port;
     2     yanzuo       ( mphy_port_number_t_unspec_c ):
     2     yanzuo          DECISION io_unit.unit_type;
     2     yanzuo          ( unit_type_t_mxu_c ):
     2     yanzuo             TASK io_unit.interfaces(0).mphy_port := sfu_port_info_t_max_traf_cls_c * io_unit.sfu_port_number
     2     yanzuo                                                  + sfu_port_info_t_nrt_offset_c;
     2     yanzuo          ELSE:
     2     yanzuo             /* for EIPU unit */
     2     yanzuo             TASK io_unit.interfaces(0).mphy_port := sfu_port_info_t_max_traf_cls_c * io_unit.sfu_port_number
     2     yanzuo                                                  + sfu_port_info_t_nrt_offset_c;
   359    lifsong             DECISION iw8s1_unit_check__r(io_unit.unit_type);
   359    lifsong             ( T ):
   359    lifsong                TASK mphy_number := 2;
   359    lifsong             ENDDECISION;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       DECISION io_unit.interfaces(0).intf_id;
     2     yanzuo       ( 0, atm_interface_id_t_unspecif_c ):
   359    lifsong          TASK l_result := alloc_interf_ids__r( io_unit, mphy_number );
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_result;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_dword_e_c,
     2     yanzuo                       @'JIGCLU: get app info failed'
     2     yanzuo                        'Procedure: get_app_if_vp_info__r'
     2     yanzuo                        'result: 0X%X',
     2     yanzuo                        l_result );
     2     yanzuo    ENDDECISION;
     2     yanzuo 
   359    lifsong    CALL set_vpi__r( io_unit, in_proc_idx );
     2     yanzuo    TASK io_unit.procs(in_proc_idx).mphy_port :=
     2     yanzuo         io_unit.interfaces(io_unit.procs(in_proc_idx).interface_index).mphy_port;
     2     yanzuo 
     2     yanzuo    RETURN l_result;
     2     yanzuo ENDPROCEDURE get_app_if_vp_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   359    lifsong PROCEDURE get_utopia_or_spi3_info__r;
   359    lifsong /* Inquire utopia address (from UAM) and interface ids (from master)
   359    lifsong   * if they are not already known for apc_trib_unit.
   359    lifsong   * Inquire SPI3 information for app_trib_unit.
   359    lifsong  **************************************************************************/
   359    lifsong       
   359    lifsong FPAR
   359    lifsong     IN/OUT  unit           jiifil__t,
   359    lifsong     IN      proc_idx       byte,
   359    lifsong     IN/OUT  alp_unit       jiifil__t;
   359    lifsong     
   359    lifsong RETURNS 
   359    lifsong    error_t;
   359    lifsong    
   359    lifsong DCL
   359    lifsong     result               error_t := success_ec;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    DECISION classify__r( unit, proc_idx,alp_unit );
   359    lifsong    ( unit_class__t_app_trib_c, 0 ):
   359    lifsong       TASK result := get_spi3_info__r( unit );
   359    lifsong    ELSE:
   617     qinggu       TASK result := get_mphy_info__r( unit );
   359    lifsong    ENDDECISION;
   388    lifsong    RETURN result;
   359    lifsong ENDPROCEDURE get_utopia_or_spi3_info__r;
   359    lifsong 
   359    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE get_alp1_if_vp_info__r;
     2     yanzuo /*
     2     yanzuo  * Acquire the information needed to create the interface and VP
     2     yanzuo  * of the given unit in its WO-ALP1 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit           jiifil__t,
     2     yanzuo     IN      proc_idx       byte,
     2     yanzuo     IN/OUT  alp_unit       jiifil__t,
     2     yanzuo     /* output parameters: */
     2     yanzuo     IN/OUT  info           alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result               error_t := success_ec,
     2     yanzuo     mphy                 mphy_port_number_t,
     2     yanzuo     ccac_pid             pid,
   216      h10hu     ccac_attr            attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
   359    lifsong    TASK result := get_utopia_or_spi3_info__r( unit, proc_idx, alp_unit );
     2     yanzuo    DECISION result;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN result;
     2     yanzuo    ENDDECISION;
   359    lifsong    
     2     yanzuo    TASK result := get_interface_params__r(
     2     yanzuo        unit.procs( proc_idx ).unit_type,
     2     yanzuo        unit.procs( proc_idx ).unit_index,
     2     yanzuo        port_stage_t_s1_s2_c,
     2     yanzuo        info );
     2     yanzuo   DECISION result;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo            log_write_item_t(@result),1,
     2     yanzuo            log_text_info_t(
     2     yanzuo            @'JIGGER: INTERFACE PARAM REQ #1 FAILURE:'));
     2     yanzuo       RETURN result;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* get scheduler information. */
     2     yanzuo   DECISION get_service__r( central_cac__c, ccac_pid, ccac_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN service_not_available_ec;
     2     yanzuo   ENDDECISION;
   359    lifsong   
   359    lifsong   CALL set_vpi__r( unit, proc_idx );
   359    lifsong   
     2     yanzuo   TASK unit.procs(proc_idx).max_intconn_vci := vci_t( info.min_vci - 1 );
     2     yanzuo #if (F)
     2     yanzuo       DECISION unit.is_level1_alp_unit;
     2     yanzuo         ( T ):
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                @'JIGCLU: max_vci(%X,%X) set to %d',
     2     yanzuo                unit.procs(proc_idx).unit_type,
     2     yanzuo                unit.procs(proc_idx).unit_index,
     2     yanzuo                unit.procs(proc_idx).max_intconn_vci );
     2     yanzuo       ENDDECISION;
     2     yanzuo #endif
     2     yanzuo   DECISION next_req_group;
     2     yanzuo     ( >= jig_limits__t_max_msg_group_c ):
     2     yanzuo       TASK next_req_group := 0;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK next_req_group := next_req_group + 1;
     2     yanzuo   TASK ccac_attr.group_number := next_req_group;
     2     yanzuo   TASK mphy := unit.interfaces(unit.procs(proc_idx).interface_index).mphy_port;
     2     yanzuo   /* get scheduling parameters. */
     2     yanzuo 
  1124   huantang 	/* Need not send msg to KARJAA for APP unit */
  1124   huantang 	DECISION ( app_unit_check__r(unit) OR app_unit_check__r(alp_unit) );
  1124   huantang 	( F ):
  1124   huantang 		OUTPUT central_cac_cre_mapping_s(
  1124   huantang 													mphy,
  1124   huantang 													unit.procs(proc_idx).vpi,
  1124   huantang 													alp_unit.unit_type,
  1124   huantang 													alp_unit.unit_index,
  1124   huantang 													unit.procs(proc_idx).unit_type,
  1124   huantang 													unit.procs(proc_idx).unit_index,
  1124   huantang 													service_category_t_nrt_vbr_c )
  1124   huantang 													TO ccac_pid, SET ATTRIBUTES = ccac_attr
  1124   huantang 	COMMENT 'This message is used to create new subport to mphy port mapping for Agere APC chip';
  1124   huantang 	ELSE:
  1124   huantang 		TASK unit.procs(proc_idx).mphy_port := mphy;
  1124   huantang 		RETURN result;
  1124   huantang 	ENDDECISION;
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
  1349       pshu   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT central_cac_cre_mapping_ack_s( info.scheduler_path, status );
     2     yanzuo     DCL
     2     yanzuo        status            error_t;
     2     yanzuo     /* Again, a potential problem: this could be a delayed reply
     2     yanzuo     to some previous request.. */
     2     yanzuo     DECISION ARRIVED_GROUP;
     2     yanzuo       ( 0, ccac_attr.group_number ):
     2     yanzuo       /* ok.. */
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo         TASK unit.interfaces(unit.procs(proc_idx).interface_index).
     2     yanzuo              scheduler_subport := info.scheduler_path.scheduler;
     2     yanzuo         /* copy mphy+subport values to the duplicate fields in the proc data. */
     2     yanzuo         TASK unit.procs(proc_idx).mphy_port := mphy;
     2     yanzuo         TASK unit.procs(proc_idx).scheduler_subport :=
     2     yanzuo              info.scheduler_path.scheduler;
     2     yanzuo         TASK info.subport_params.sp_param.sp_number :=
     2     yanzuo              info.scheduler_path.scheduler;
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              NIL,0,
     2     yanzuo              log_text_info_t(@'JIGCLU: SUBPORT SCHEDULER NOT AVAILABLE'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@alp_unit.unit_type),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: SOURCE UNIT:'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@unit.procs(proc_idx).unit_type),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: TARGET UNIT:'));
     2     yanzuo         TASK write_to_log(log_type_t_byte_e_c,
     2     yanzuo              log_write_item_t(@mphy),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: MPHY PORT NUMBER:'));
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: RECEIVED ERROR CODE:'));
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGCLU: no response to central_cac_cre_mapping_s!'
     2     yanzuo          'object unit = %04XH, index = %XH',
     2     yanzuo          unit.procs(proc_idx).unit_type,
     2     yanzuo          unit.procs(proc_idx).unit_index );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_alp1_if_vp_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alp1_create_ifvp_hms__r;
     2     yanzuo /*
     2     yanzuo  * This procedures sends interface+VP init request to WO-ALP1 unit
     2     yanzuo  * via HMS, and waits for response.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN         alp1_hms_address hms_address_t,
     2     yanzuo     IN         mphy_port        mphy_port_number_t,
     2     yanzuo     IN VIEWED  params           alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     fig_hdr    fig_msg_header_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK fig_hdr.hms_address := alp1_hms_address,
     2     yanzuo        fig_hdr.extended_addr := 0;
     2     yanzuo   OUTPUT init_if_and_vpctp_req_s( fig_hdr,
     2     yanzuo          mphy_port,
     2     yanzuo          params.max_vpi_bits,
     2     yanzuo          params.max_vci_bits,
     2     yanzuo          params.subport_params ) TO hms_forwarder;
     2     yanzuo   CALL get_internal_hms_ack__r();
     2     yanzuo   /* 5 seconds doesn't seem to be enough in max-configuration! */
     2     yanzuo   SET ( NOW + (3*ack_waiting_time__c)/2, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT init_if_and_vpctp_ack_s( ext_hms_address, status );
     2     yanzuo     DCL
     2     yanzuo        ext_hms_address   fig_msg_header_t,
     2     yanzuo        status            error_t;
     2     yanzuo     DECISION ext_hms_address.hms_address;
     2     yanzuo       ( alp1_hms_address ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN status;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE alp1_create_ifvp_hms__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE half_xconn_ack_chk__r;
     2     yanzuo FPAR
     2     yanzuo    IN/OUT   io_vcc_idx              dword,
     2     yanzuo    IN/OUT   io_n_created            dword,
     2     yanzuo    IN/OUT   io_vcc_res              jig_vccs_resources__t,
     2     yanzuo    IN       in_alp1_hms_addr          hms_address_t,
     2     yanzuo    IN       in_resp_hms_address     fig_msg_header_t,
     2     yanzuo    IN       in_status            error_t;
     2     yanzuo 
     2     yanzuo RETURNS  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     DECISION io_vcc_idx;
     2     yanzuo       ( io_vcc_res.item_count ):
     2     yanzuo         /* dummy ack -- start from the real beginning */
     2     yanzuo         TASK io_vcc_idx := 0;
     2     yanzuo       ELSE:
     2     yanzuo         /* 'real' ack -- handle it */
     2     yanzuo         DECISION in_resp_hms_address.hms_address;
     2     yanzuo         ( /= in_alp1_hms_addr ):
     2     yanzuo            RETURN  unsuccessful_ec;
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION in_status;
     2     yanzuo           ( success_ec ):
     2     yanzuo             TASK io_vcc_res.res(io_n_created) := io_vcc_res.res(io_vcc_idx);
     2     yanzuo             TASK io_n_created := io_n_created + 1;
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK io_vcc_idx := io_vcc_idx + 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN success_ec;
     2     yanzuo ENDPROCEDURE half_xconn_ack_chk__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_xconn_ack_chk__r;
     2     yanzuo /*
     2     yanzuo  * This procedures sends xconn init request to WO-ALP1 unit
     2     yanzuo  * to BRTSEB, and waits for response.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT   io_vcc_idx              dword,
     2     yanzuo    IN/OUT   io_n_created            dword,
     2     yanzuo    IN/OUT   io_vcc_res              jig_vccs_resources__t,
     2     yanzuo    IN       in_tpi                  tpi_t,
     2     yanzuo    IN       in_resp_tpi             tpi_t,
     2     yanzuo    IN       in_status               error_t;
     2     yanzuo 
     2     yanzuo RETURNS  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     DECISION io_vcc_idx;
     2     yanzuo       ( io_vcc_res.item_count ):
     2     yanzuo         /* dummy ack -- start from the real beginning */
     2     yanzuo         TASK io_vcc_idx := 0;
     2     yanzuo       ELSE:
     2     yanzuo         /* 'real' ack -- handle it */
     2     yanzuo         DECISION in_resp_tpi.interf;
     2     yanzuo         ( /= in_tpi.interf ):
     2     yanzuo            RETURN  unsuccessful_ec;
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION in_status;
     2     yanzuo           ( success_ec ):
     2     yanzuo             TASK io_vcc_res.res(io_n_created) := io_vcc_res.res(io_vcc_idx);
     2     yanzuo             TASK io_n_created := io_n_created + 1;
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK io_vcc_idx := io_vcc_idx + 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN success_ec;
     2     yanzuo ENDPROCEDURE brt_xconn_ack_chk__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo PROCEDURE app_tm_xconn_vci_same__r;
     2     yanzuo FPAR
     2     yanzuo    IN/OUT           vcc_res            jig_vccs_resources__t,
     2     yanzuo    IN/OUT      tm_fpga_vcc_idx   dword;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo START;
     2     yanzuo     OUTPUT jig_vcc_tm_fpga_req__s(vcc_res, tm_fpga_vcc_idx) TO manager_pid;
     2     yanzuo     SET ( NOW + 1000, ack_timer );
     2     yanzuo     NEXTSTATE waiting;
     2     yanzuo 
     2     yanzuo STATE waiting
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT jig_vcc_tm_fpga_ack__s(status, vcc_res);
     2     yanzuo     DCL
     2     yanzuo        status            error_t;
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo       RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting;
     2     yanzuo ENDPROCEDURE app_tm_xconn_vci_same__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE app_create_conn_fpga_hms__r;
     2     yanzuo /*
     2     yanzuo  * This procedures create the first xconn end in TM FPGA for SYM-WO-APP-MXU.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     /* HMS and physical address of the ALP1 unit: */
     2     yanzuo    IN    in_alp1_hms_addr       hms_address_t,
     2     yanzuo 
     2     yanzuo     /* address and mphy port number of the computer where the
     2     yanzuo      * half-connection terminates (ALP1 unit or WO-OMU). */
     2     yanzuo    IN    in_endpoint_addr       phys_address_t,
     2     yanzuo    IN    in_mphy_port           mphy_port_number_t,
     2     yanzuo 
     2     yanzuo    /* computer(s) at the other end of the half-connection(s): */
     2     yanzuo    IN   in_endpoint2_addr       phys_address_t,
     2     yanzuo    IN   in_endpoint2_addr2      phys_address_t,
     2     yanzuo 
     2     yanzuo    IN   in_ingress_sel          apc_ing_stream_t,
     2     yanzuo    IN   in_egress_sel           apc_egr_stream_t,
     2     yanzuo    IN   in_conn_exist_state     bool,
    38    lifsong    IN   in_tm_fpga_xconn_needed bool,
    38    lifsong    IN   in_conn_unit            phys_address_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_vcc_params           jig_vccs_params__t,
     2     yanzuo    l_vcc_res              jig_vccs_resources__t,
     2     yanzuo    l_vcc_idx              dword,
     2     yanzuo    l_tm_fpga_vcc_idx      dword:=0,
     2     yanzuo    l_n_created            dword := 0,
     2     yanzuo    l_ec                   error_t,
     2     yanzuo    l_xconn_info           xconn_dest_info_t,
   216      h10hu    l_fig_hdr              fig_msg_header_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK l_fig_hdr.hms_address   := in_alp1_hms_addr,
     2     yanzuo         l_fig_hdr.extended_addr := 0;
     2     yanzuo    /* get info about all connections of the unit so that the master
     2     yanzuo    allocates VCIs for all of them. */
     2     yanzuo 
     2     yanzuo    /* only collect the first connection from WO-OMU to SYM-MXU */
     2     yanzuo    TASK l_ec := collect_connections__r( in_endpoint_addr,
    38    lifsong                                         in_conn_unit,
     2     yanzuo                                         l_vcc_params );
     2     yanzuo #if (test_logs)
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: collect connection first'
     2     yanzuo                         'Procedure: app_create_conn_fpga_hms__r'
     2     yanzuo                         'Unit address 0X%X'
     2     yanzuo                         ' in_conn_exist_state: %04X'
     2     yanzuo                         ' result : 0X%X',
     2     yanzuo                         in_endpoint_addr,in_conn_exist_state, l_ec );
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo    DECISION l_ec;
     2     yanzuo    ( success_ec ):
  1248      tinyu    DECISION (l_vcc_params.item_count = 0);
  1248      tinyu        (T):
  1248      tinyu             TASK dxsyslog_r( log_type_t_text_i_c,
  1248      tinyu                      @'JIGCLU: app_create_conn_fpga_hms__r'
  1248      tinyu                       'collect_connections__r item_cout =0 '
  1248      tinyu                       'in_endpoint_addr = %04X',
  1248      tinyu                       in_endpoint_addr);
  1248      tinyu                       
  1248      tinyu            RETURN error_on_conn_ec;
  1248      tinyu        ENDDECISION;
     2     yanzuo       TASK l_ec:= get_conn_resources__r( in_endpoint_addr,
     2     yanzuo                                          in_conn_exist_state, /* not-existing conns only */
     2     yanzuo                                          T, /* nRT conns only */
     2     yanzuo                                          l_vcc_params,
     2     yanzuo                                          l_vcc_res );
     2     yanzuo    ENDDECISION;
     2     yanzuo    DECISION l_ec;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                        @'JIGCLU: try to get the conn resource according to in_conn_exist_state'
     2     yanzuo                         'Procedure: app_create_conn_fpga_hms__r'
    38    lifsong                         'Unit address 0X%X, in_conn_unit 0X%X'
     2     yanzuo                         ' in_conn_exist_state: 0X%X'
     2     yanzuo                         ' item count: 0X%X'
     2     yanzuo                         ' result : 0X%X',
    38    lifsong                         in_endpoint_addr, in_conn_unit, in_conn_exist_state, l_vcc_res.item_count, l_ec );
     2     yanzuo 
     2     yanzuo       RETURN l_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo    OUTPUT app_pre_half_xconn_ack_s( l_fig_hdr, 0 ) TO SELF;
     2     yanzuo    SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo    TASK l_vcc_idx := l_vcc_res.item_count;
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo INPUT app_pre_half_xconn_ack_s( l_resp_hms_address, l_status );
     2     yanzuo    DCL
  1313       pshu 
  1313       pshu #if (test_logs)
  1313       pshu       l_vci_value_idx     dword,    
  1313       pshu #endif   
     2     yanzuo       l_resp_hms_address  fig_msg_header_t,
     2     yanzuo       l_status            error_t;
     2     yanzuo 
     2     yanzuo    TASK  l_status := half_xconn_ack_chk__r( l_vcc_idx,
     2     yanzuo                                             l_n_created,
     2     yanzuo                                             l_vcc_res,
     2     yanzuo                                             in_alp1_hms_addr,
     2     yanzuo                                             l_resp_hms_address,
     2     yanzuo                                             l_status );
     2     yanzuo    DECISION l_status = unsuccessful_ec;
   470    lifsong    (T): 
   470    lifsong       TASK dxsyslog_r( log_type_t_text_i_c,
   470    lifsong                       @'JIGCLU: half_xconn_ack_chk__r failed');
   470    lifsong       NEXTSTATE -;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RESET (ack_timer);
     2     yanzuo    /* search the next connection we need to create */
     2     yanzuo    WHILE l_vcc_idx < l_vcc_res.item_count;
     2     yanzuo       DECISION l_vcc_res.res( l_vcc_idx ).target_comp;
     2     yanzuo       ( in_endpoint2_addr,
     2     yanzuo         in_endpoint2_addr2):
     2     yanzuo          OUT search_target;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK l_vcc_idx := l_vcc_idx + 1;
     2     yanzuo    ENDWHILE search_target;
     2     yanzuo     /*VPI & VCI needs to be the same when connection between OMU-MXU goes
     2     yanzuo     through TMFPGA (VCI is in the cell header and cannot be converted by HW).
     2     yanzuo     The original idea was to use some fixed temporary VCI-value at this point (VPI is always 0).
     2     yanzuo     According to the original idea the temporary VCI values were changed to
     2     yanzuo     'normal' (= does not need to be the same) when connection was rerouted to go via SFU,
     2     yanzuo     but was rejected by AUU & FIG1 team..*/
     2     yanzuo    DECISION l_vcc_idx >= l_vcc_res.item_count;
     2     yanzuo    ( T ):
     2     yanzuo       DECISION in_tm_fpga_xconn_needed;
     2     yanzuo       (T):
     2     yanzuo          WHILE l_tm_fpga_vcc_idx < l_vcc_idx;
     2     yanzuo             DECISION l_vcc_res.res(l_tm_fpga_vcc_idx).target_comp;
     2     yanzuo             (in_endpoint2_addr):
     2     yanzuo                TASK  l_status:= app_tm_xconn_vci_same__r (l_vcc_res, l_tm_fpga_vcc_idx);
     2     yanzuo                DECISION l_status;
     2     yanzuo                (success_ec):
     2     yanzuo 
     2     yanzuo                ELSE:
     2     yanzuo                   TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                                   @'JIGCLU: TMFPGA same VCI failed: %04X',
     2     yanzuo                                     l_status);
     2     yanzuo                ENDDECISION;
     2     yanzuo                OUT search;
     2     yanzuo             ENDDECISION;
     2     yanzuo             DECISION l_tm_fpga_vcc_idx = 0;
     2     yanzuo             (T):
     2     yanzuo                TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                             @'JIGCLU: failed to reserve fixed VCI for TM FPGA XCONN'
     2     yanzuo                              'UNIT physical address: 0X%X ',
     2     yanzuo                               in_endpoint_addr);
     2     yanzuo             ENDDECISION;
     2     yanzuo             TASK l_tm_fpga_vcc_idx := l_tm_fpga_vcc_idx +1;
     2     yanzuo          ENDWHILE search;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo #if (test_logs)
     2     yanzuo       TASK l_vci_value_idx := 0;
     2     yanzuo       WHILE l_vci_value_idx <= l_n_created;
     2     yanzuo #if (test_logs)
     2     yanzuo                         TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                                   @'JIGCLU: 3 TMFPGA XCONN VCI INDEX: %04X'
     2     yanzuo                                   'VCI VALUE: %04X PHY ADDR: %04X'
     2     yanzuo                                   'l_n_created: 0X%X',
     2     yanzuo                                   l_vci_value_idx, l_vcc_res.res(l_vci_value_idx).vci, l_vcc_res.res(l_vci_value_idx).target_comp,
     2     yanzuo                                   l_n_created);
     2     yanzuo #endif
     2     yanzuo                                TASK l_vci_value_idx := l_vci_value_idx +1;
     2     yanzuo 
     2     yanzuo       ENDWHILE;
     2     yanzuo #endif
     2     yanzuo       DECISION l_n_created;
     2     yanzuo       ( > 0 ):
     2     yanzuo          TASK l_vcc_res.item_count := l_n_created;
     2     yanzuo          TASK l_status := update_half_conn_states__r( in_endpoint_addr,
     2     yanzuo                                                       l_vcc_res,
     2     yanzuo                                                       T );
     2     yanzuo #if (test_logs)
     2     yanzuo          TASK l_vci_value_idx := 0;
     2     yanzuo          WHILE l_vci_value_idx <= l_n_created;
     2     yanzuo          TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                          @'JIGCLU: 4 TMFPGA XCONN VCI INDEX: %04X'
     2     yanzuo                           'VCI VALUE: %04X PHY ADDR: %04X',
     2     yanzuo                            l_vci_value_idx, l_vcc_res.res(l_vci_value_idx).vci, l_vcc_res.res(l_vci_value_idx).target_comp);
     2     yanzuo          TASK l_vci_value_idx := l_vci_value_idx +1;
     2     yanzuo          ENDWHILE;
     2     yanzuo #endif
     2     yanzuo       ENDDECISION;
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo    TASK l_xconn_info.fabric_port   := l_vcc_res.res(l_vcc_idx).dest_fabric_port,
     2     yanzuo         l_xconn_info.remote_connid := l_vcc_res.res(l_vcc_idx).remote_xconn_id;
     2     yanzuo /*Arthur: this decision is for that JIGGER wont send request to UXMANA when for TM FPGA related xconn*/
     2     yanzuo    DECISION in_tm_fpga_xconn_needed;
     2     yanzuo    ( T ):
     2     yanzuo       OUTPUT app_pre_half_xconn_ack_s( l_fig_hdr, 0 ) TO SELF;
     2     yanzuo #if (test_logs)
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: output app_pre_half_xconn_ack_s to self'
     2     yanzuo                         'Procedure: app_create_conn_fpga_hms__r'
     2     yanzuo                         'Unit address %04X'
     2     yanzuo                         ' tm_fpga_xconn_needed: %04X'
     2     yanzuo                         ' vcc_index %04X vcc_res.item_count %04X'
     2     yanzuo                        ,in_endpoint_addr,in_tm_fpga_xconn_needed, l_vcc_idx,  l_vcc_res.item_count);
     2     yanzuo #endif
     2     yanzuo       SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo       NEXTSTATE waiting_ack;
     2     yanzuo    ENDDECISION;
     2     yanzuo    OUTPUT app_pre_half_xconn_req_s ( l_fig_hdr,
     2     yanzuo                                      in_ingress_sel,
     2     yanzuo                                      in_egress_sel,
     2     yanzuo                                      in_mphy_port,
     2     yanzuo                                      l_vcc_res.res(l_vcc_idx).vci,
     2     yanzuo                                      tp_in_topology_t_uc_c,
     2     yanzuo                                      l_vcc_res.res(l_vcc_idx).xconn_id,
     2     yanzuo                                      l_xconn_info) TO hms_forwarder;
     2     yanzuo #if (test_logs)
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: output app_pre_half_xconn_req_s to UXMANA '
     2     yanzuo                       'Procedure: app_create_conn_fpga_hms__r'
     2     yanzuo                       'Unit address %04X'
     2     yanzuo                       'tm_fpga_xconn_needed: %04X'
     2     yanzuo                       'vcc_index %04X vcc_res.item_count %04X'
     2     yanzuo                        ,in_endpoint_addr,in_tm_fpga_xconn_needed, l_vcc_idx,  l_vcc_res.item_count);
     2     yanzuo #endif
     2     yanzuo    CALL get_internal_hms_ack__r();
   903   huantang    SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE -;
     2     yanzuo 
     2     yanzuo INPUT ack_timer;
   470    lifsong    TASK dxsyslog_r( log_type_t_text_i_c,
   470    lifsong                       @'JIGCLU: app_create_conn_fpga_hms__r msg timeout!');
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE app_create_conn_fpga_hms__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
    38    lifsong PROCEDURE app_create_conn_fpga__r;
    38    lifsong /*
    38    lifsong  * This procedures create the first xconn end in TM FPGA for SYM-WO-APP-MXU.
    38    lifsong  **************************************************************************/
    38    lifsong FPAR
    38    lifsong     /* HMS and physical address of the ALP1 unit: */
    38    lifsong    IN    in_alp1_hms_addr       hms_address_t,
    38    lifsong    IN    in_alp1_phys_addr      phys_address_t,
    38    lifsong 
    38    lifsong     /* address and mphy port number of the computer where the
    38    lifsong      * half-connection terminates (ALP1 unit or WO-OMU). */
    38    lifsong    IN    in_endpoint_addr       phys_address_t,
    38    lifsong    IN    in_mphy_port           mphy_port_number_t,
    38    lifsong    IN    in_mphy_port2          mphy_port_number_t,
    38    lifsong 
    38    lifsong    /* computer(s) at the other end of the half-connection(s): */
    38    lifsong    IN   in_endpoint2_addr       phys_address_t,
    38    lifsong    IN   in_endpoint2_addr2      phys_address_t,
    38    lifsong 
    38    lifsong    IN   in_ingress_sel          apc_ing_stream_t,
    38    lifsong    IN   in_egress_sel           apc_egr_stream_t,
    38    lifsong    IN   in_conn_exist_state     bool,
    38    lifsong    IN   in_tm_fpga_xconn_needed bool;
    38    lifsong 
    38    lifsong RETURNS
    38    lifsong    error_t;
    38    lifsong 
    38    lifsong DCL
    38    lifsong    l_result               error_t,
    38    lifsong    l_status               unit_state_t;
    38    lifsong 
    38    lifsong START;
    38    lifsong    DECISION ( in_endpoint_addr = own_unit_phys_addr ); /* target unit is OMU */
    38    lifsong    ( T ):
    38    lifsong       TASK l_result := app_create_conn_fpga_hms__r( in_alp1_hms_addr,
    38    lifsong                                                     in_endpoint_addr,
    38    lifsong                                                     in_mphy_port,
    38    lifsong                                                     in_endpoint2_addr,
    38    lifsong                                                     in_endpoint2_addr2,
    38    lifsong                                                     in_ingress_sel,
    38    lifsong                                                     in_egress_sel,
    38    lifsong                                                     in_conn_exist_state,
    38    lifsong                                                     in_tm_fpga_xconn_needed,
   505      h10hu                                                     in_alp1_phys_addr);/* the conn to MUX */
    38    lifsong    ELSE:
   505      h10hu       
    38    lifsong       TASK l_result := app_create_conn_fpga_hms__r( in_alp1_hms_addr,
    38    lifsong                                                     in_endpoint_addr,
    38    lifsong                                                     in_mphy_port,
    38    lifsong                                                     in_endpoint2_addr,
    38    lifsong                                                     in_endpoint2_addr2,
    38    lifsong                                                     in_ingress_sel,
    38    lifsong                                                     in_egress_sel,
    38    lifsong                                                     in_conn_exist_state,
    38    lifsong                                                     in_tm_fpga_xconn_needed,
   505      h10hu                                                     in_endpoint2_addr);
   505      h10hu       /*if only one active center node found,no need to create connection toward standby node*/
   685    lifsong       DECISION l_result = success_ec 
   805    lifsong                        AND ( unit_state_by_phys_addr_r( in_endpoint2_addr2, l_status ) = success_ec 
   805    lifsong                                  AND ( l_status | unit_state_t_mainstate_bm_c ) /= unit_state_t_se_c)
   685    lifsong                        AND ( unit_state_by_phys_addr_r( in_alp1_phys_addr, l_status ) = success_ec 
   685    lifsong                                  AND ( l_status | unit_state_t_mainstate_bm_c ) /= unit_state_t_se_c);
   685    lifsong 	( T ):
   685    lifsong             TASK l_result := app_create_conn_fpga_hms__r( in_alp1_hms_addr,
    38    lifsong                                                        in_endpoint_addr,
    38    lifsong                                                        in_mphy_port2,
    38    lifsong                                                        in_endpoint2_addr,
    38    lifsong                                                        in_endpoint2_addr2,
    38    lifsong                                                        in_ingress_sel,
    38    lifsong                                                        in_egress_sel,
    38    lifsong                                                        in_conn_exist_state,
    38    lifsong                                                        in_tm_fpga_xconn_needed,
   505      h10hu                                                        in_endpoint2_addr2);
    38    lifsong       ENDDECISION;
    38    lifsong    ENDDECISION;
    38    lifsong 
    38    lifsong    RETURN l_result;
    38    lifsong ENDPROCEDURE app_create_conn_fpga__r;
    38    lifsong 
    38    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE alp1_create_conn_hms__r;
     2     yanzuo /*
     2     yanzuo  * This procedures sends half-connection creation request to WO-ALP1 unit
     2     yanzuo  * via HMS, and waits for response. If the creation succeeds, the
     2     yanzuo  * procedure updates half-connection state in JICFIL via the master.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     /* HMS and physical address of the ALP1 unit: */
     2     yanzuo     IN         alp1_hms_addr  hms_address_t,
     2     yanzuo 
     2     yanzuo     /* address and mphy port number of the computer where the
     2     yanzuo      * half-connection terminates (ALP1 unit or WO-OMU). */
     2     yanzuo     IN         endpoint_addr  phys_address_t,
     2     yanzuo     IN         mphy_port      mphy_port_number_t,
     2     yanzuo 
     2     yanzuo     /* computer(s) at the other end of the half-connection(s): */
     2     yanzuo     IN         endpoint2_addr phys_address_t,
     2     yanzuo     IN         endpoint2_addr2 phys_address_t,
     2     yanzuo     IN         endpoint2_addr3     phys_address_t,
     2     yanzuo 
     2     yanzuo     IN/OUT     tm_params_apc  alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     vcc_params           jig_vccs_params__t,
     2     yanzuo     vcc_res              jig_vccs_resources__t,
     2     yanzuo     vcc_idx              dword,
     2     yanzuo     n_created            dword := 0,
     2     yanzuo     ec                   error_t,
     2     yanzuo     xconn_info           xconn_dest_info_t,
     2     yanzuo     fig_hdr              fig_msg_header_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK fig_hdr.hms_address      := alp1_hms_addr,
     2     yanzuo        fig_hdr.extended_addr    := 0;
     2     yanzuo   /* get info about all connections of the unit so that the master
     2     yanzuo   allocates VCIs for all of them. */
     2     yanzuo   TASK ec := collect_connections__r( endpoint_addr,
     2     yanzuo        computer_t_any_c,
     2     yanzuo        vcc_params );
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
  1248      tinyu        DECISION (vcc_params.item_count = 0);
  1248      tinyu        (T):
  1248      tinyu             TASK dxsyslog_r( log_type_t_text_i_c,
  1248      tinyu                      @'JIGCLU: alp1_create_conn_hms__r'
  1248      tinyu                       'collect_connections__r item_cout =0 '
  1248      tinyu                       'endpoint_addr = %04X',
  1248      tinyu                       endpoint_addr);
  1248      tinyu                       
  1248      tinyu            RETURN error_on_conn_ec;
  1248      tinyu        ENDDECISION;
     2     yanzuo       TASK ec := get_conn_resources__r( endpoint_addr,
     2     yanzuo            F, /* not-existing conns only */
     2     yanzuo            T, /* nRT conns only */
     2     yanzuo            vcc_params,
     2     yanzuo            vcc_res );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       RETURN ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   OUTPUT create_predet_half_xconn_ack_s( fig_hdr, 0 ) TO SELF;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   TASK vcc_idx := vcc_res.item_count;
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT create_predet_half_xconn_ack_s( resp_hms_address, status );
     2     yanzuo     DCL
     2     yanzuo        resp_hms_address  fig_msg_header_t,
     2     yanzuo        status            error_t;
     2     yanzuo 
     2     yanzuo    TASK  status := half_xconn_ack_chk__r( vcc_idx,
     2     yanzuo                                           n_created,
     2     yanzuo                                           vcc_res,
     2     yanzuo                                           alp1_hms_addr,
     2     yanzuo                                           resp_hms_address,
     2     yanzuo                                           status);
     2     yanzuo    DECISION status = unsuccessful_ec;
     2     yanzuo    (T): NEXTSTATE -;
     2     yanzuo    ENDDECISION;
  1027       pshu    RESET (ack_timer);
     2     yanzuo 
     2     yanzuo     /* search the next connection we need to create */
     2     yanzuo     WHILE vcc_idx < vcc_res.item_count;
     2     yanzuo       DECISION vcc_res.res( vcc_idx ).target_comp;
     2     yanzuo         ( endpoint2_addr,
     2     yanzuo         endpoint2_addr2,
     2     yanzuo         endpoint2_addr3):
     2     yanzuo           OUT search_target;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK vcc_idx := vcc_idx + 1;
     2     yanzuo     ENDWHILE search_target;
     2     yanzuo     DECISION vcc_idx >= vcc_res.item_count;
     2     yanzuo       ( T ):
     2     yanzuo         DECISION n_created;
     2     yanzuo           ( > 0 ):
     2     yanzuo             TASK vcc_res.item_count := n_created;
     2     yanzuo             TASK status := update_half_conn_states__r( endpoint_addr,
     2     yanzuo                  vcc_res,
     2     yanzuo                  T );
     2     yanzuo         ENDDECISION;
     2     yanzuo         RETURN status;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK xconn_info.fabric_port   := vcc_res.res(vcc_idx).dest_fabric_port,
     2     yanzuo          xconn_info.remote_connid := vcc_res.res(vcc_idx).remote_xconn_id;
     2     yanzuo     /* ------- Some extra inits copied from A4.1 JIGGER version: */
     2     yanzuo     TASK tm_params_apc.gen_ing_stream.epd_ppd_info.epd := T,
     2     yanzuo          tm_params_apc.gen_ing_stream.epd_ppd_info.ppd := T,
     2     yanzuo          tm_params_apc.gen_egr_stream.epd_ppd_info.epd := T,
     2     yanzuo          tm_params_apc.gen_egr_stream.epd_ppd_info.ppd := T;
     2     yanzuo     DECISION tm_params_apc.ingress_sel;
     2     yanzuo       ( apc_ing_stream_t_cl1_c ):
     2     yanzuo         TASK tm_params_apc.ing_stream.cl1.dest_fabric_port_number :=
     2     yanzuo              xconn_info.fabric_port;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* ------- end of extra inits */
     2     yanzuo     OUTPUT create_predet_half_xconn_req_s (
     2     yanzuo            fig_hdr,
     2     yanzuo            tm_params_apc.ingress_sel,
     2     yanzuo            tm_params_apc.egress_sel,
     2     yanzuo            mphy_port,
     2     yanzuo            vcc_res.res(vcc_idx).vci,
     2     yanzuo            tp_in_topology_t_uc_c,
     2     yanzuo            vcc_res.res(vcc_idx).xconn_id,
     2     yanzuo            xconn_info,
     2     yanzuo 
     2     yanzuo            tm_params_apc.gen_ing_stream,
     2     yanzuo            tm_params_apc.gen_egr_stream,
     2     yanzuo            tm_params_apc.egr_subport,
     2     yanzuo 
     2     yanzuo            tm_params_apc.ing_stream.cl0,
     2     yanzuo            tm_params_apc.ing_stream.cl1,
     2     yanzuo            tm_params_apc.ing_stream.cl234,
     2     yanzuo 
     2     yanzuo            tm_params_apc.egr_stream.spt1_cl0,
     2     yanzuo            tm_params_apc.egr_stream.spt1_cl1,
     2     yanzuo            tm_params_apc.egr_stream.spt1_cl234,
     2     yanzuo            tm_params_apc.egr_stream.spt2s,
     2     yanzuo            tm_params_apc.egr_stream.spt2n ) TO hms_forwarder;
     2     yanzuo 
     2     yanzuo     CALL get_internal_hms_ack__r();
  1006       pshu     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE alp1_create_conn_hms__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo PROCEDURE setup_fpga_if_vp_hc__r;
     2     yanzuo FPAR
     2     yanzuo    IN/OUT      io_target         jiifil__t,
     2     yanzuo    IN/OUT      io_alp_unit       jiifil__t,
     2     yanzuo    IN          in_exit_xconn     bool,
     2     yanzuo    IN          in_tm_fpga_xconn_needed  bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_tm_params                   alp_tp_streams_t,
     2     yanzuo    l_result                      error_t,
     2     yanzuo    l_endpoint, l_endpoint2       phys_address_t,
    38    lifsong    l_mphy_port                   mphy_port_number_t,
   106      h10hu    l_mphy_port2                  mphy_port_number_t,
   106      h10hu    l_if_vp_params               alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo START;
   958   huantang 
   958   huantang    /* Don't use for APP unit*/
   958   huantang    TASK memset ( bytepointer(@l_tm_params),0,SIZEOF(alp_tp_streams_t));
   958   huantang    
     2     yanzuo    TASK l_result := get_app_if_vp_info__r( io_target,
     2     yanzuo                                            0,
   604    lifsong                                            io_alp_unit );
     2     yanzuo 
     2     yanzuo    /* No need to notify PIG again for the exist IF when recreate the xconn in phase 2 */
     2     yanzuo    DECISION ( l_result = success_ec AND in_exit_xconn = F );
     2     yanzuo    ( T ):
     2     yanzuo       TASK l_result := intf_notify__r( io_target,
     2     yanzuo                                        0,
     2     yanzuo                                        mphy_type_t_mxu_c,
     2     yanzuo                                        io_alp_unit );
     2     yanzuo    ENDDECISION;
     2     yanzuo    /* Create half-connection towards OMU via HMS */
     2     yanzuo 
     2     yanzuo /*Arthur commented for integration io_target.fpga_needed AND */
     2     yanzuo /* Don't need to get AMD param for OMU unit */
     2     yanzuo    DECISION ( l_result = success_ec AND io_target.fpga_needed );
     2     yanzuo    ( T ):
     2     yanzuo       TASK  l_result:=get_amd_fpga_params__r( io_target.procs(0).unit_type,
     2     yanzuo                                               io_target.procs(0).unit_index);
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_result;
   106      h10hu    ( /= success_ec ):
   106      h10hu       RETURN l_result;
   106      h10hu    ENDDECISION;
     2     yanzuo 
   106      h10hu    /* get the interface and VP parameters from XVALUE */
   106      h10hu    TASK l_result := get_interface_params__r( io_target.procs(0).unit_type, io_target.procs(0).unit_index,
   106      h10hu                                              port_stage_t_s1_s2_c, l_if_vp_params );
   106      h10hu    DECISION l_result;
   106      h10hu    ( /= success_ec ):
   106      h10hu       RETURN l_result;
   106      h10hu    ENDDECISION;
   106      h10hu 
   106      h10hu    TASK io_target.procs(0).max_intconn_vci := vci_t( l_if_vp_params.min_vci - 1 );    
   106      h10hu 
   106      h10hu    /* Turn on 'vp_reporting_needed' flag so that the upper level
   106      h10hu    knows that interface and VP were created successfully,
   106      h10hu    and if the operation fails, the error occurred when
   106      h10hu    trying to create half-connections over HMS.
   106      h10hu    This flag is not updated to JIIFIL if the rest of the
   106      h10hu    operation fails. */
   106      h10hu    TASK io_target.procs(0).vp_reporting_needed := T;
   106      h10hu    DECISION io_target.procs(0).phys_addr;
   106      h10hu    ( own_unit_phys_addr ):
   106      h10hu        /* creating half-conn from WO-OMU towards WO-SYM-MXU */
   106      h10hu       TASK l_endpoint  := io_alp_unit.procs(0).phys_addr,
   106      h10hu            l_endpoint2 := l_endpoint;
   106      h10hu    ELSE:
   505      h10hu        /* creating half-conn from a WO-ALP1 unit towards center node
   106      h10hu        (or from core unit towards OMU, when old_whisky enabled) */
   505      h10hu       TASK l_result:= get_center_node_addr__r(io_target.procs(0).phys_addr,l_endpoint,l_endpoint2);
   505      h10hu       DECISION l_result;
   505      h10hu       ( /=success_ec ):
  1029    lifsong          TASK dxsyslog_r( log_type_t_text_e_c,
   505      h10hu                      @'JIGCLU: get_center_node_addr__r fail'
   505      h10hu                      'error 0x%lX,target unit 0x%lX',
   505      h10hu                      l_result,io_target.procs(0).phys_addr);
   505      h10hu          RETURN l_result;                
   505      h10hu       ENDDECISION;  
   505      h10hu       
   106      h10hu    ENDDECISION;
   106      h10hu 
   106      h10hu    DECISION io_target.sym_mxu_flag ;
   106      h10hu    ( T ):
   684   huantang       TASK l_mphy_port  := io_target.interfaces(0).mphy_port;
   685    lifsong       /*avoid creating hc to SP OMU because OMU-SYM int_conn_swo_notif not done yet */
   685    lifsong       TASK l_endpoint2 := computer_t_phys_not_defined_c; 
   106      h10hu    ELSE:
   585      h10hu       DECISION jigclu_find_app_spi3__r( l_endpoint, l_mphy_port );
   106      h10hu       ( F ):
   106      h10hu          RETURN unsuccessful_ec;
     2     yanzuo       ENDDECISION;
   585      h10hu       DECISION jigclu_find_app_spi3__r( l_endpoint2, l_mphy_port2 );
   106      h10hu       ( F ):
   106      h10hu          TASK l_mphy_port2 := l_mphy_port;
   106      h10hu       ENDDECISION;
   106      h10hu    ENDDECISION;
     2     yanzuo 
   106      h10hu    TASK l_result := app_create_conn_fpga__r( io_alp_unit.hms_address,
   106      h10hu                                                  io_alp_unit.procs(0).phys_addr,
   106      h10hu                                                  io_target.procs(0).phys_addr,
   106      h10hu                                                  l_mphy_port/*io_target.interfaces(0).mphy_port*/,
   106      h10hu                                                  l_mphy_port2,
   106      h10hu                                                  l_endpoint,
   106      h10hu                                                  l_endpoint2,
   106      h10hu                                                  l_tm_params.ingress_sel,
   106      h10hu                                                  l_tm_params.egress_sel,
   106      h10hu                                                  in_exit_xconn, in_tm_fpga_xconn_needed);/* Tilly: the message should be sent to UXMANA */
     2     yanzuo    RETURN l_result;
     2     yanzuo ENDPROCEDURE setup_fpga_if_vp_hc__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE setup_alp1_if_vp_hc__r;
     2     yanzuo /*
     2     yanzuo  * This procedure initializes interface and VP in WO-ALP1 unit
     2     yanzuo  * and creates a half-connection towards WO-OMU.
     2     yanzuo  * Generally 'target' and 'alp_unit' specify the same WO-ALP1 unit.
     2     yanzuo  * The only exception is the following combination:
     2     yanzuo  *    target=WO-OMU + alp_unit=WO-SYM-MXU
     2     yanzuo  *
     2     yanzuo  * All communication with the WO-ALP1 unit goes via UXMANA (ie. HMS).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  target       jiifil__t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     intf_vp_params       alp1_intf_vp_params__t,
     2     yanzuo     tm_params            alp_tp_streams_t,
     2     yanzuo     result               error_t,
     2     yanzuo     endpoint, endpoint2,endpoint3, l_phy_addr  phys_address_t,
     2     yanzuo     l_unit_idx           unit_index_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK result := get_alp1_if_vp_info__r( target, 0,
     2     yanzuo        alp_unit, intf_vp_params );
     2     yanzuo   /* Acquire APC tm params for the half-connection: */
     2     yanzuo   DECISION result;
     2     yanzuo   ( success_ec ):
  1222      tinyu       TASK result := get_traf_manag_params__r( 
     2     yanzuo            target.procs(0).unit_index,
     2     yanzuo            target.procs(0).vpi,
     2     yanzuo            target.procs(0).mphy_port,
     2     yanzuo            alp_unit.unit_type,
     2     yanzuo            alp_unit.unit_index,
     2     yanzuo            tm_params, tm_params_dummy );
  1433    jinncao   ELSE:
  1433    jinncao   	RETURN result;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Initialize interface and VP via HMS */
     2     yanzuo   DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK result := alp1_create_ifvp_hms__r( alp_unit.hms_address,
     2     yanzuo            target.procs(0).mphy_port,
     2     yanzuo            intf_vp_params );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo       /* Notify PIGPRB immediately. */
     2     yanzuo      TASK result := intf_notify__r(
     2     yanzuo                       target, 0,
     2     yanzuo                       mphy_type_t_mxu_c,
     2     yanzuo                       alp_unit );
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   /* Create half-connection towards OMU via HMS */
     2     yanzuo   DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo       /* Turn on 'vp_reporting_needed' flag so that the upper level
     2     yanzuo       knows that interface and VP were created successfully,
     2     yanzuo       and if the operation fails, the error occurred when
     2     yanzuo       trying to create half-connections over HMS.
     2     yanzuo       This flag is not updated to JIIFIL if the rest of the
     2     yanzuo       operation fails. */
     2     yanzuo       TASK target.procs(0).vp_reporting_needed := T;
     2     yanzuo       DECISION target.procs(0).phys_addr;
     2     yanzuo         ( own_unit_phys_addr ):
     2     yanzuo           /* creating half-conn from WO-OMU towards WO-SYM-MXU */
     2     yanzuo           TASK endpoint  := alp_unit.procs(0).phys_addr,
     2     yanzuo                endpoint2 := endpoint;
     2     yanzuo       	 /*Find SP-OMU connected WO-MXU*/
     2     yanzuo       	 TASK endpoint3 := endpoint2;
     2     yanzuo       	 TASK l_unit_idx := target.unit_index^1;
     2     yanzuo       	 DECISION jigclu_find_unit__r( target.unit_type, l_unit_idx,l_phy_addr);
     2     yanzuo 	   	 (T):
     2     yanzuo 	   	 TASK   endpoint3 := l_phy_addr;
     2     yanzuo #if (test_logs) /* (test_logs_on) */
     2     yanzuo                 TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: setup_alp1_if_vp_hc__r'
     2     yanzuo                      'SPMXU PHY ADDR = %04X',
     2     yanzuo                      endpoint3 );
     2     yanzuo #endif
     2     yanzuo       	 ENDDECISION;
     2     yanzuo         ELSE:
     2     yanzuo           /* creating half-conn from a WO-ALP1 unit towards OMU
     2     yanzuo           (or from core unit towards OMU, when old_whisky enabled) */
     2     yanzuo           TASK endpoint  := own_unit_phys_addr;
     2     yanzuo           /* for non-MXU unit, create connections towards both OMUs */
     2     yanzuo           DECISION target.unit_type;
     2     yanzuo             ( unit_type_t_mxu_c ):
  1420       pshu               TASK endpoint2 := own_unit_phys_addr ^ 1;
     2     yanzuo             ELSE:
     2     yanzuo               TASK endpoint2 := own_unit_phys_addr ^ 1;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK result := alp1_create_conn_hms__r( alp_unit.hms_address,
     2     yanzuo            target.procs(0).phys_addr,
     2     yanzuo            target.procs(0).mphy_port,
     2     yanzuo            endpoint, endpoint2, endpoint3,
     2     yanzuo            tm_params );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN result;
     2     yanzuo ENDPROCEDURE setup_alp1_if_vp_hc__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init_alp1__r;
     2     yanzuo /*
     2     yanzuo  * Init internal interface in ALP1 unit via HMS.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  omu_rec      jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result                 error_t,
     2     yanzuo     omu_ec                 error_t := unsuccessful_ec,
     2     yanzuo     alp_update             jii_fields__t,
     2     yanzuo     omu_update             jii_fields__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    CALL jii_fields__t_init_r( omu_update );
     2     yanzuo 
     2     yanzuo    DECISION app_unit_check__r( alp_unit );
     2     yanzuo    ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                       @'JIGCLU: APP unit go to setup_fpga_if_vp_hc__r'
     2     yanzuo                        'Procedure : if_init_alp1__r '
     2     yanzuo                        'Unit type : 0X%X '
   223    lifsong                        'Unit index: 0X%X'
   223    lifsong                        'sym_mxu_flag: 0X%X'
   223    lifsong                        'is_wo_unit: 0X%X',
   223    lifsong                         alp_unit.unit_type, alp_unit.unit_index,
   223    lifsong                         alp_unit.sym_mxu_flag,
   223    lifsong                         alp_unit.is_wo_unit);
     2     yanzuo #endif
     2     yanzuo       DECISION ( alp_unit.sym_mxu_flag AND alp_unit.is_wo_unit );
     2     yanzuo       ( T ):
     2     yanzuo          TASK alp_unit.tm_fpga_xconn_needed := T;
     2     yanzuo          TASK jii_fields__t_fset( alp_update, jii_field__t_tm_fpga_xconn_c );
     2     yanzuo          CALL jiifil_update__r( alp_unit, alp_update, 0 );
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* Tilly: set F to send out app_pre_s msg */
     2     yanzuo       TASK result := setup_fpga_if_vp_hc__r( alp_unit, alp_unit, F, F );
     2     yanzuo #if (test_logs)
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                       @'JIGCLU: setup fpga for alp unit'
     2     yanzuo                        'Procedure  : if_init_alp1__r'
     2     yanzuo                        'Unit type  : 0X%X '
     2     yanzuo                        'Unit index : 0X%X'
     2     yanzuo                        'sym_mxu_flag: 0X%X'
     2     yanzuo                        'result: 0X%X',
     2     yanzuo                        alp_unit.unit_type, alp_unit.unit_index,
     2     yanzuo                        alp_unit.sym_mxu_flag, result);
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo       DECISION ( result = success_ec AND alp_unit.sym_mxu_flag );
     2     yanzuo       ( T ): /* SYM-WO-APP-MXU */
     2     yanzuo          TASK omu_rec.tm_fpga_xconn_needed := T;
     2     yanzuo          /* Tilly: no apc, no need to use this flag */
     2     yanzuo          CALL jigdat_set_global__r( jig_var_id__t_sym_apc_init_done, 1 );
     2     yanzuo 
     2     yanzuo          TASK jii_fields__t_fset( omu_update, jii_field__t_tm_fpga_xconn_c );
     2     yanzuo 
     2     yanzuo          TASK omu_ec := setup_fpga_if_vp_hc__r( omu_rec, alp_unit, F, T );
     2     yanzuo #if (test_logs)
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                           @'JIGCLU: setup fpga for omu unit'
     2     yanzuo                            'Procedure : if_init_alp1__r '
     2     yanzuo                            'Unit type : 0X%X '
     2     yanzuo                            'Unit index: 0X%X'
   223    lifsong                            'omu_ec: 0X%X',
     2     yanzuo                            omu_rec.unit_type, omu_rec.unit_index,
   223    lifsong                            omu_ec);
     2     yanzuo #endif
     2     yanzuo          DECISION omu_ec;
     2     yanzuo          ( success_ec ):
     2     yanzuo             /* internal interface has not been created. */
     2     yanzuo             TASK omu_rec.interfaces(0).intf_exists := F;
     2     yanzuo             TASK omu_rec.interfaces(0).intf_reporting_needed := F;
     2     yanzuo             TASK omu_rec.interfaces(0).intf_reported := F;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_exists_c );
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_rep_need_c );
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_reported_c );
     2     yanzuo             TASK omu_rec.procs(0).vp_reporting_needed := F;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_vp_rep_need_c );
     2     yanzuo             TASK omu_rec.procs(0).vp_reported := F;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_vp_reported_c );
   361    lifsong             TASK sym_app_pre_xc_created := F;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo 
     2     yanzuo       /* For the other general units */
     2     yanzuo       TASK result := setup_alp1_if_vp_hc__r( alp_unit, alp_unit );
     2     yanzuo 
     2     yanzuo       DECISION result = success_ec AND
     2     yanzuo                alp_unit.cluster_idx = omu_rec.cluster_idx;
     2     yanzuo       ( T ):
     2     yanzuo          TASK omu_ec := setup_alp1_if_vp_hc__r( omu_rec, alp_unit );
     2     yanzuo          /* if OMU interface+VP creation succeeded, update OMU
     2     yanzuo          information in JIIFIL: */
     2     yanzuo          DECISION omu_ec;
     2     yanzuo          ( success_ec ):
     2     yanzuo             /* internal interface has been created. */
     2     yanzuo             TASK omu_rec.interfaces(0).intf_exists := T;
     2     yanzuo             TASK omu_rec.interfaces(0).intf_reporting_needed := T;
     2     yanzuo             TASK omu_rec.interfaces(0).intf_reported := F;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_exists_c );
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_rep_need_c );
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_i1_reported_c );
     2     yanzuo             TASK omu_rec.procs(0).vp_reporting_needed := T;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_vp_rep_need_c );
     2     yanzuo             TASK omu_rec.procs(0).vp_reported := F;
     2     yanzuo             TASK jii_fields__t_fset( omu_update, jii_field__t_vp_reported_c );
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION omu_ec;
     2     yanzuo    ( success_ec ):
     2     yanzuo       /* update the JIIFIL record of active OMU: */
     2     yanzuo       TASK omu_rec.procs(0).half_conns_needed := T;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_hc_need_c );
     2     yanzuo       TASK omu_rec.port_conf_needed := F;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_pconf_need_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_pconf_ts_c );
     2     yanzuo       TASK omu_rec.port_conf_ph2_needed := F;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_pconf2_need_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_pconf2_ts_c );
     2     yanzuo       TASK omu_rec.port_conf_completed := T;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_pconf_compl_c );
     2     yanzuo       TASK omu_rec.fpga_needed := F;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_fpga_need_c );
     2     yanzuo       TASK omu_rec.procs(0).if_init_needed := F;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_if_init_need_c );
     2     yanzuo       TASK omu_rec.procs(0).if_init_ph2_needed := T;
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_if_init2_need_c );
     2     yanzuo       /* these fields were set during interface/vp creation: */
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_vpi_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_mphy_port_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_subport_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_maxintvci_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_if_init_ts_c );
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_if_init2_ts_c );
     2     yanzuo 
     2     yanzuo       /* mphy and scheduler subport data in interfaces(0) modified. */
     2     yanzuo       TASK jii_fields__t_fset( omu_update, jii_field__t_i1_mphy_sch_c );
     2     yanzuo       CALL jiifil_update__r( omu_rec, omu_update, 0 );
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo    /* if OMU interface+VP creation succeeded, update OMU
     2     yanzuo     information in JIIFIL: */
     2     yanzuo   RETURN result;
     2     yanzuo ENDPROCEDURE if_init_alp1__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_crt_interface__r;
     2     yanzuo /*
   359    lifsong  * Create interface via RS3PRB/KREIVI/RSKPRB
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN  in_unit         jiifil__t,
     2     yanzuo    IN  in_brtpid       pid,
     2     yanzuo    IN  in_if_idx       byte,
     2     yanzuo    IN  in_if_vp_params alp1_intf_vp_params__t, /*in_vpi_bits   vpi_bits_t,*/
     2     yanzuo    IN  in_path_info    half_cconn_phy_info_t;
     2     yanzuo 
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
  1081    jinncao    l_update_list     update_list_t,
  1089    jinncao    l_is_sym_mxu_app    bool;
  1081    jinncao    
     2     yanzuo START;
     2     yanzuo    DECISION in_unit.unit_type /= unit_type_t_nip1_c;
     2     yanzuo    ( T ):
     2     yanzuo        TASK memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
  1089    jinncao        TASK l_is_sym_mxu_app := F;
  1081    jinncao        
  1081    jinncao        DECISION jii_is_sym_mxu_app__r() AND
  1081    jinncao                 get_pid_family_r(in_brtpid) = kreivi_p;
  1081    jinncao        ( T ):
  1089    jinncao            TASK l_is_sym_mxu_app := T;
  1081    jinncao        ENDDECISION;
  1089    jinncao 
  1089    jinncao        TASK in_path_info.is_app_sym_mxu := l_is_sym_mxu_app;
  1081    jinncao        
     2     yanzuo        OUTPUT atm_interf_phy_create_req_s ( in_unit.interfaces(in_if_idx).intf_id,
     2     yanzuo                                             atm_interface_type_t_intern_c,
     2     yanzuo                                             in_if_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                             in_if_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                             in_if_vp_params.max_vpi_bits,
  1089    jinncao                                             atm_cre_state_t_new_object_c,
     2     yanzuo                                             in_path_info,
     2     yanzuo                                             l_update_list ) TO in_brtpid ;
   368     jamema        SET ( NOW + (10*ack_waiting_time__c)/5, ack_timer );
     2     yanzuo        NEXTSTATE wait_reply;
     2     yanzuo    ELSE:
   120    lifsong        SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo        NEXTSTATE delay_out;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo STATE delay_out;
     2     yanzuo INPUT ack_timer;
     2     yanzuo    TASK memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo 
     2     yanzuo    OUTPUT atm_interf_phy_create_req_s ( in_unit.interfaces(in_if_idx).intf_id,
     2     yanzuo                                         atm_interface_type_t_intern_c,
     2     yanzuo                                         in_if_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                         in_if_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                         in_if_vp_params.max_vpi_bits,
     2     yanzuo                                         atm_cre_state_t_new_object_c,
     2     yanzuo                                         in_path_info,
     2     yanzuo                                         l_update_list ) TO in_brtpid ;
     2     yanzuo    SET ( NOW + (7*ack_waiting_time__c)/5, ack_timer );
     2     yanzuo    NEXTSTATE wait_reply;
     2     yanzuo ENDSTATE delay_out;
     2     yanzuo 
     2     yanzuo STATE wait_reply;
     2     yanzuo INPUT atm_interf_phy_create_ack_s(interf_id,
     2     yanzuo                                      status);
     2     yanzuo    DCL
     2     yanzuo       interf_id   atm_interface_id_t,
     2     yanzuo       status      error_t;
     2     yanzuo    RESET (ack_timer);
     2     yanzuo 
     2     yanzuo    DECISION status;
     2     yanzuo    ( cmd_blocked_ec ):
     2     yanzuo       SET ( ALARM( in_path_info.fu_data(1).fu_type, in_path_info.fu_data(1).fu_index ),
     2     yanzuo                    unit_configuration_failure_a( cmd_blocked__c,
     2     yanzuo                    status));
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION status;
   773   huantang    (success_ec):
   773   huantang    /*Do nothing*/
   773   huantang    (cmd_ignored_ec):
   773   huantang       TASK dxsyslog_r( log_type_t_text_i_c,
   773   huantang                          @'JIGCLU     : atm phy interface is being released!'
   773   huantang                           'Procedure  : brt_crt_interface__r '
   773   huantang                           'Unit type  : 0X%X '
   773   huantang                           'Unit index : 0X%X'
   773   huantang                           'Status     : 0X%X',
   773   huantang                            in_unit.unit_type, in_unit.unit_index, status);
   773   huantang       TASK delay(100);
   773   huantang    (key_already_exists_ec):
   773   huantang       TASK dxsyslog_r( log_type_t_text_i_c,
   773   huantang                          @'JIGCLU     : atm phy interface has already been existed!'
   773   huantang                           'Procedure  : brt_crt_interface__r '
   773   huantang                           'Unit type  : 0X%X '
   773   huantang                           'Unit index : 0X%X'
   773   huantang                           'Status     : 0X%X',
   773   huantang                            in_unit.unit_type, in_unit.unit_index, status);
   773   huantang       TASK status := success_ec; /*PR 29774ESPE01*/
   773   huantang    
   773   huantang    
   773   huantang    ELSE:
   773   huantang        TASK dxsyslog_r( log_type_t_text_e_c,
   368     jamema                          @'JIGCLU     : atm_interf_phy_create_req_s failed'
   368     jamema                           'Procedure  : brt_crt_interface__r '
   368     jamema                           'Unit type  : 0X%X '
   368     jamema                           'Unit index : 0X%X'
   368     jamema                           'Status     : 0X%X',
   368     jamema                            in_unit.unit_type, in_unit.unit_index, status);
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN status;
     2     yanzuo 
  1100   huantang    INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index, ?, ?, ? );
   593    lifsong    DCL
   593    lifsong       obj_unit_type           unit_type_t,
  1100   huantang       obj_unit_index          unit_index_t;
   593    lifsong    DECISION (in_unit.unit_type = obj_unit_type) AND (in_unit.unit_index = obj_unit_index);
   593    lifsong    (T):
   593    lifsong       RESET ( ack_timer );
   593    lifsong       TASK in_unit.procs( 0 ).start_attempts_left := 0;
   593    lifsong       RETURN   card_restarted_ec;
   593    lifsong    ENDDECISION;
  1100   huantang    NEXTSTATE -;
   593    lifsong 
     2     yanzuo    INPUT ack_timer;
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                    @'JIGCLU     : atm_interf_phy_create_req_s ack_timer expired'
     2     yanzuo                     'Procedure  : brt_crt_interface__r '
     2     yanzuo                     'Unit type  : 0X%X '
     2     yanzuo                     'Unit index : 0X%X',
     2     yanzuo                      in_unit.unit_type, in_unit.unit_index);
     2     yanzuo 
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE wait_reply;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE brt_crt_interface__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_traf_params__r;
     2     yanzuo /*
     2     yanzuo  * Init traffic parameter structure with unspecified values.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  ing_traf     traf_conf_para_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ing_traf.quality               := atm_qos_t_undefined_c,
     2     yanzuo        ing_traf.category              := service_category_t_undefined_c,
     2     yanzuo        ing_traf.traf_param.pcr01      := cell_rate_t_unspecified_c,
     2     yanzuo        ing_traf.traf_param.scr01      := cell_rate_t_unspecified_c,
     2     yanzuo        ing_traf.traf_param.cdvt_pcr01 := cdvt_t_unspecified_c,
     2     yanzuo        ing_traf.traf_param.cdvt_scr01 := cdvt_t_unspecified_c,
     2     yanzuo        ing_traf.traf_param.bt01       := ibt_t_unspecified_c,
     2     yanzuo        ing_traf.frame_disc_epd        := abled_flag_t_disabled_c,
     2     yanzuo        ing_traf.frame_disc_ppd        := abled_flag_t_disabled_c;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE init_traf_params__r;
     2     yanzuo 
  1465       pshu 
  1465       pshu PROCEDURE is_cdsp_dh_feature_upgrade__r; 
  1465       pshu FPAR
  1465       pshu 	IN      unit_type  unit_type_t,
  1465       pshu 	IN      unit_index unit_index_t;
  1465       pshu RETURNS bool;
  1465       pshu 
  1465       pshu DCL
  1465       pshu     piu_data   piu_data_lib_a_t;
  1465       pshu START;
  1465       pshu     DECISION get_piu_data_by_fu__r(unit_type,unit_index, piu_data); 
  1465       pshu     (T):
  1465       pshu          RETURN (strncmp (char_ptr_t (@piu_data.upper_level_data), 
  1465       pshu                           char_ptr_t (@FEATURE_UPGRADE_STR__C), SIZEOF(piu_data.upper_level_data)) = 0);
  1465       pshu     ELSE:
  1465       pshu         RETURN F;
  1465       pshu     ENDDECISION;
  1465       pshu ENDPROCEDURE is_cdsp_dh_feature_upgrade__r;
  1465       pshu 
  1465       pshu PROCEDURE is_cdsp_dh_capacity_upgrade__r;
  1465       pshu FPAR
  1465       pshu 	IN      unit_type  unit_type_t,
  1465       pshu 	IN      unit_index unit_index_t;
  1465       pshu RETURNS bool;
  1465       pshu 
  1465       pshu START;
  1465       pshu    DECISION is_ne_rnc__r() AND get_ne_type__r() /= 3 AND get_ne_cap_upgrade__r()=1;
  1465       pshu    ( T ):
  1465       pshu       RETURN T;
  1465       pshu    ENDDECISION;
  1465       pshu    RETURN F;
  1465       pshu 
  1465       pshu ENDPROCEDURE is_cdsp_dh_capacity_upgrade__r;
  1465       pshu 
  1465       pshu 
  1465       pshu PROCEDURE hardcode_is_need_big_vci_bits_in_apc;
  1465       pshu FPAR 
  1465       pshu     IN VIEWED jii_unit   jiifil__t,
  1465       pshu     IN        proc_index byte;
  1465       pshu RETURNS bool;
  1465       pshu 
  1465       pshu START;
  1465       pshu     DECISION jii_unit.procs(proc_index).unit_type = unit_type_t_vetgr_c  OR
  1465       pshu              jii_unit.procs(proc_index).unit_type = unit_type_t_ster_c;
  1465       pshu     (T):
  1465       pshu         RETURN T;
  1465       pshu     ENDDECISION;
  1465       pshu 
  1465       pshu     DECISION jii_unit.procs(proc_index).unit_type = unit_type_t_dmpg_c AND 
  1465       pshu              is_cdsp_dh__r(jii_unit.unit_type,jii_unit.unit_index);
  1465       pshu     (T):
  1465       pshu         DECISION is_cdsp_dh_feature_upgrade__r(jii_unit.unit_type,jii_unit.unit_index) OR 
  1465       pshu                  is_cdsp_dh_capacity_upgrade__r(jii_unit.unit_type,jii_unit.unit_index);
  1465       pshu         (T):
  1465       pshu             RETURN T;
  1465       pshu         ENDDECISION;
  1465       pshu     ENDDECISION;
  1465       pshu 
  1465       pshu     RETURN F;
  1465       pshu 
  1465       pshu ENDPROCEDURE hardcode_is_need_big_vci_bits_in_apc;
  1465       pshu 
   989    lifsong /**************************************************************************/
   989    lifsong PROCEDURE hardcode_for_apc_vci_bits__r;
   989    lifsong /* 
   989    lifsong   1. For PR 30393ESPE01
   989    lifsong   max vci bits increased for vci forwarding, but memory of lookup table on APC MXU is overflow,
   989    lifsong   so the max vci bits can't over 11 on APC MXU, here hardcode to the threshold,
   989    lifsong   it's only happened in MGW with APC MXU 
   857     z7zhou 
   989    lifsong   2. For 46707ESPE01 , if trib unit is VETGR, we need to hardcode as 12 to suuport more than full configuration,
   989    lifsong    see PR attached mail for technical detail
  1465       pshu 
  1465       pshu   3.104953ESPE02 	IP subnet create failed  
   989    lifsong */
   989    lifsong FPAR
  1465       pshu     IN VIEWED jii_unit  jiifil__t,
  1465       pshu     IN        proc_idx  byte,    
   989    lifsong     IN max_vci_bits_from_atp vci_bits_t,
   989    lifsong     IN/OUT inw_vci_bits vci_bits_t,
   989    lifsong     IN/OUT outw_vci_bits vci_bits_t;
   989    lifsong DCL 
   989    lifsong     hardcode_limit vci_bits_t := apc_max_vci_bits_threshold_c;
   989    lifsong     
   989    lifsong START;
   989    lifsong 
  1465       pshu   DECISION hardcode_is_need_big_vci_bits_in_apc(jii_unit,proc_idx);
   989    lifsong   ( T ):
  1465       pshu     TASK hardcode_limit := big_apc_max_vci_bits_threshold_c;
   989    lifsong   ENDDECISION;
   989    lifsong 
   989    lifsong   DECISION max_vci_bits_from_atp > hardcode_limit;
   989    lifsong   ( T ):
   989    lifsong     TASK inw_vci_bits := hardcode_limit,
   989    lifsong          outw_vci_bits := hardcode_limit;         
   989    lifsong   ENDDECISION;
   989    lifsong 
   989    lifsong ENDPROCEDURE hardcode_for_apc_vci_bits__r;
   989    lifsong 
   857     z7zhou /*************************************************************************/
   857     z7zhou PROCEDURE whisky_crt_vp__r;
   857     z7zhou /*
   857     z7zhou   *Create vp via whisky 
   857     z7zhou   *************************************************************************/
   857     z7zhou FPAR
   857     z7zhou    IN VIEWED     tributary    		 jiifil__t,
   857     z7zhou    IN                  proc_idx            hms_processor_index_t,
   857     z7zhou    IN VIEWED     alp_unit       	 jiifil__t,
   857     z7zhou    IN VIEWED     intf_vp_params  alp1_intf_vp_params__t;
   857     z7zhou 
   857     z7zhou RETURNS
   857     z7zhou     error_t;
   857     z7zhou 
   857     z7zhou DCL
   857     z7zhou 
   857     z7zhou     status              error_t,
   857     z7zhou     intf_index          byte,
   857     z7zhou     hms_address         fig_msg_header_t,
   857     z7zhou     vpctp_conf_outw     vpctp_setup_req_t,
   857     z7zhou     vpctp_conf_inw      vpctp_setup_req_t,
   857     z7zhou     ack_count           bool := F,
   857     z7zhou     whisky              pid,
   857     z7zhou     whisky_sp           pid;
   857     z7zhou 
   857     z7zhou 
   857     z7zhou 
   857     z7zhou START;
   857     z7zhou  TASK intf_index := tributary.procs(proc_idx).interface_index;
   857     z7zhou   
   857     z7zhou   TASK hms_address.hms_address := tributary.hms_address,
   857     z7zhou                hms_address.extended_addr := 0;
   857     z7zhou                
   857     z7zhou   TASK vpctp_conf_outw.request_mode := request_mode_t_create_c,
   857     z7zhou        vpctp_conf_outw.mphy_port_number := tributary.interfaces(intf_index).mphy_port,
   857     z7zhou        vpctp_conf_outw.vpi := tributary.procs(proc_idx).vpi,
   857     z7zhou        vpctp_conf_outw.vci_bits := intf_vp_params.max_vci_bits,
   857     z7zhou        vpctp_conf_outw.oam_conf.segment_ep := end_point_t_not_in_segment_c;
   857     z7zhou        
   857     z7zhou   TASK vpctp_conf_inw.request_mode := request_mode_t_inactive_c,
   857     z7zhou        vpctp_conf_inw.mphy_port_number := tributary.interfaces(intf_index).mphy_port,
   857     z7zhou        vpctp_conf_inw.vpi := tributary.procs(proc_idx).vpi,
   857     z7zhou        vpctp_conf_inw.vci_bits := intf_vp_params.max_vci_bits,
   857     z7zhou        vpctp_conf_inw.oam_conf.segment_ep := end_point_t_not_in_segment_c;
   857     z7zhou 
  1465       pshu   TASK hardcode_for_apc_vci_bits__r(tributary,proc_idx, 
  1465       pshu                                     intf_vp_params.max_vci_bits, 
  1465       pshu                                     vpctp_conf_inw.vci_bits, 
  1465       pshu                                     vpctp_conf_outw.vci_bits);
   857     z7zhou   
   857     z7zhou   TASK make_pid_r( whisky, alp_unit.procs(0).phys_addr, whisky_p, 0, 0 );
  1124   huantang     
  1124   huantang   OUTPUT vpctp_setup_s ( hms_address, vpctp_conf_outw, vpctp_conf_inw ) TO whisky;
   857     z7zhou 
   857     z7zhou   SET ( NOW + ack_waiting_time__c, ack_timer );
   857     z7zhou   NEXTSTATE waiting_ack;
   857     z7zhou 
   857     z7zhou STATE waiting_ack
   857     z7zhou   COMMENT ' ';
   857     z7zhou 
   857     z7zhou   INPUT vpctp_setup_ack_s ( hms_address, status, vpctp_conf_outw, vpctp_conf_inw );
   857     z7zhou     DECISION ( vpctp_conf_outw.mphy_port_number = tributary.interfaces(intf_index).mphy_port );
   857     z7zhou       ( F ):
   857     z7zhou #if (test_logs) /* (test_logs_on) */
   857     z7zhou             TASK dxsyslog_r( log_type_t_text_t_c,
   857     z7zhou                  @'JIGCLU: wrong vpctp_setup_ack_s: %04X'
   857     z7zhou                  'intf = %04X mphy_port_nr = %04X',
   857     z7zhou                  status,
   857     z7zhou                  tributary.interfaces(intf_index).intf_id,
   857     z7zhou                  tributary.interfaces(intf_index).mphy_port );
   857     z7zhou #endif
   857     z7zhou         NEXTSTATE -;      
  1233    jinncao       ELSE:
   857     z7zhou #if (test_logs) /* (test_logs_on) */        
   857     z7zhou         DECISION ( status /= success_ec );
   857     z7zhou           ( T ):
   857     z7zhou                 TASK dxsyslog_r( log_type_t_text_t_c,
   857     z7zhou                      @'JIGCLU: vpctp_setup_s failed: %04X'
   857     z7zhou                      'hms_address = %04X intf = %04X',
   857     z7zhou                      status,
   857     z7zhou                      tributary.hms_address,
   857     z7zhou                      tributary.interfaces(intf_index).intf_id );
   857     z7zhou         ENDDECISION;
   857     z7zhou #endif        
  1233    jinncao 	DECISION ack_count;
  1233    jinncao 	(F):
  1233    jinncao 		RESET(ack_timer);
  1233    jinncao 	ELSE:
  1233    jinncao 		RESET(ack_timer2);
  1233    jinncao 	ENDDECISION;
   857     z7zhou     ENDDECISION;
  1233    jinncao     
   857     z7zhou     DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
   857     z7zhou       ( T ):
   857     z7zhou         TASK make_pid_r( whisky_sp, alp_unit.co_alp_unit_phys_addr, whisky_p, 0, 0 );
  1124   huantang         OUTPUT vpctp_setup_s ( hms_address, vpctp_conf_outw, vpctp_conf_inw ) TO whisky_sp;
   857     z7zhou         SET ( NOW + ack_waiting_time__c, ack_timer2 );
   857     z7zhou         TASK ack_count := T;
   857     z7zhou         NEXTSTATE -;
   857     z7zhou       ELSE: /* second ack or no co_alp_unit_updated, return status */
   857     z7zhou         RETURN status;
   857     z7zhou     ENDDECISION;
   857     z7zhou 
   857     z7zhou   INPUT ack_timer;
   857     z7zhou #if (test_logs)
   857     z7zhou         TASK status := message_waiting_timeout_ec;
   857     z7zhou         TASK dxsyslog_r( log_type_t_text_t_c,
   857     z7zhou              @'JIGCLU: if_init_apc_trib__r ack_timer expired: %04X'
   857     z7zhou              'unit type=%XH index=%d proc_idx=%d',
   857     z7zhou              status,
   857     z7zhou              tributary.unit_type, tributary.unit_index,
   857     z7zhou              proc_idx );
   857     z7zhou #endif
   857     z7zhou     RETURN message_waiting_timeout_ec;
   857     z7zhou 
   857     z7zhou   INPUT ack_timer2;
   857     z7zhou #if (test_logs)
   857     z7zhou         TASK status := message_waiting_timeout_ec;
   857     z7zhou         TASK dxsyslog_r( log_type_t_text_t_c,
   857     z7zhou              @'JIGCLU: if_init_apc_trib__r ack_timer2 expired: %04X'
   857     z7zhou              'unit type=%XH index=%d proc_idx=%d',
   857     z7zhou              status,
   857     z7zhou              tributary.unit_type, tributary.unit_index,
   857     z7zhou              proc_idx );
   857     z7zhou #endif
   857     z7zhou     RETURN message_waiting_timeout_ec;
   857     z7zhou ENDSTATE waiting_ack;
   857     z7zhou    
   857     z7zhou 
   857     z7zhou ENDPROCEDURE whisky_crt_vp__r;
   857     z7zhou 
   857     z7zhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_crt_vp__r;
     2     yanzuo /*
   359    lifsong  * Create vp via RS3PRB/KREIVI/RSKPRB
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN  in_unit          jiifil__t,
     2     yanzuo    IN  in_brtpid        pid,
     2     yanzuo    IN  in_proc_idx      byte,
     2     yanzuo    IN  in_if_vp_params  alp1_intf_vp_params__t,
     2     yanzuo    IN  in_path_info     half_cconn_phy_info_t;
     2     yanzuo 
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_if_idx          byte,
     2     yanzuo    l_tpi             tpi_t,
     2     yanzuo    l_create_state    atm_cre_state_t := atm_cre_state_t_new_object_c,
     2     yanzuo    l_f_unit          unit_it_t,
     2     yanzuo    l_traf_para       traf_conf_para_t,
     2     yanzuo    l_update_list     update_list_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo    TASK l_if_idx := in_unit.procs(in_proc_idx).interface_index;
     2     yanzuo 
     2     yanzuo    TASK l_tpi.level  := tpi_level_t_vp_c,
     2     yanzuo         l_tpi.interf := in_unit.interfaces(l_if_idx).intf_id,
     2     yanzuo         l_tpi.vpi    := in_unit.procs(in_proc_idx).vpi,
     2     yanzuo         l_tpi.vci    := vci_t_unspecified_c;
     2     yanzuo 
     2     yanzuo    TASK l_f_unit.ttype := in_unit.procs(in_proc_idx).unit_type,
     2     yanzuo         l_f_unit.index := in_unit.procs(in_proc_idx).unit_index;
     2     yanzuo 
     2     yanzuo    CALL init_traf_params__r( l_traf_para );
     2     yanzuo    DECISION in_unit.unit_type = unit_type_t_nip1_c;
     2     yanzuo    (T):
     2     yanzuo       TASK  l_create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    OUTPUT atm_vpltp_phy_create_req_s ( l_tpi,
     2     yanzuo                                        l_f_unit,
     2     yanzuo                                        in_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo                                        l_traf_para,
     2     yanzuo                                        l_traf_para,
     2     yanzuo                                        end_point_t_not_in_segment_c,
     2     yanzuo                                        traffic_shaping_t (.
     2     yanzuo                                        shaping_option_t_none_c,
     2     yanzuo                                        shaping_option_t_none_c .),
     2     yanzuo                                        in_if_vp_params.max_vci_bits,
     2     yanzuo                                        in_if_vp_params.scheduler_path,
     2     yanzuo                                        l_create_state,
     2     yanzuo                                        in_path_info, l_update_list ) TO in_brtpid;
   361    lifsong    SET ( NOW + (14*ack_waiting_time__c)/5, ack_timer ); /*double the timer for PR 43218ESPE02: 1281 UNIT IS RESTARTED BECAUSE OF CONFIGURATION FAILURE*/
     2     yanzuo   NEXTSTATE wait_reply;
     2     yanzuo 
     2     yanzuo STATE wait_reply;
     2     yanzuo INPUT atm_vpltp_phy_create_ack_s( l_tpi,
     2     yanzuo                                   l_status);
     2     yanzuo    DCL
     2     yanzuo       l_status    error_t;
     2     yanzuo    RESET (ack_timer);
     2     yanzuo    DECISION l_status;
   361    lifsong    (success_ec):
   361    lifsong    (key_already_exists_ec):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
   361    lifsong                       @'JIGCLU     : atm_vpltp_phy_create_req_s tpi overwritten!!'
   361    lifsong                        'Procedure  : brt_crt_vp__r '
   361    lifsong                        'Unit type  : 0X%X '
   361    lifsong                        'Unit index : 0X%X'
   361    lifsong                        'TPI        : 0X%X, 0X%X, 0X%X, 0X%X,'
   361    lifsong                        'Status     : 0X%X',
   361    lifsong                         in_unit.unit_type, in_unit.unit_index,
   361    lifsong                         l_tpi.level, l_tpi.interf, l_tpi.vpi, l_tpi.vci,
   361    lifsong                         l_status);
   361    lifsong       TASK l_status := success_ec;
   361    lifsong    ELSE:
   361    lifsong       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                       @'JIGCLU     : atm_vpltp_phy_create_req_s failed'
     2     yanzuo                        'Procedure  : brt_crt_vp__r '
     2     yanzuo                        'Unit type  : 0X%X '
     2     yanzuo                        'Unit index : 0X%X'
     2     yanzuo                        'TPI        : 0X%X, 0X%X, 0X%X, 0X%X,'
     2     yanzuo                        'Status     : 0X%X',
     2     yanzuo                         in_unit.unit_type, in_unit.unit_index,
     2     yanzuo                         l_tpi.level, l_tpi.interf, l_tpi.vpi, l_tpi.vci,
     2     yanzuo                         l_status);
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo INPUT ack_timer;
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                    @'JIGCLU     : atm_vpltp_phy_create_req_s ack_timer expired'
     2     yanzuo                     'Procedure  : brt_crt_vp__r '
     2     yanzuo                     'Unit type  : 0X%X '
     2     yanzuo                     'Unit index : 0X%X',
     2     yanzuo                      in_unit.unit_type, in_unit.unit_index);
     2     yanzuo 
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE wait_reply;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE brt_crt_vp__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_crt_xconn__r;
     2     yanzuo /*
     2     yanzuo  * Create internal xcross connection via RS3PRB/KREIVI
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN       in_unit     jiifil__t,
     2     yanzuo    IN/OUT   io_brtpid   pid,
     2     yanzuo    IN       in_proc_idx byte,
     2     yanzuo 
     2     yanzuo     /* address and mphy port number of the computer where the
     2     yanzuo      * half-connection terminates (ALP1 unit or WO-OMU). */
     2     yanzuo    IN in_endpoint_addr        phys_address_t,
     2     yanzuo 
     2     yanzuo    /* computer(s) at the other end of the half-connection(s): */
     2     yanzuo    IN in_endpoint2_addr       phys_address_t,
     2     yanzuo    IN in_endpoint2_addr2      phys_address_t,
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    IN in_conn_exist_state     bool,
     2     yanzuo    IN in_path_info            half_cconn_phy_info_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_update_list          update_list_t,
     2     yanzuo    l_own_unit             unit_it_t,
     2     yanzuo    l_vcc_params           jig_vccs_params__t,
     2     yanzuo    l_vcc_res              jig_vccs_resources__t,
     2     yanzuo    l_vcc_idx              dword,
     2     yanzuo    l_n_created            dword := 0,
     2     yanzuo    l_ec                   error_t,
     2     yanzuo    l_dest_conn_info       xconn_dest_info_t,
     2     yanzuo    l_tpi                  tpi_t,
     2     yanzuo    l_traf_para            atm_aal2_traf_para_t,
     2     yanzuo    l_computer             computer_t,
     2     yanzuo    l_phys_to_log          phys_to_logical_address_t,
     2     yanzuo    l_if_idx               byte,
     2     yanzuo    l_range                byte := 0; /* WO only */
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo 
     2     yanzuo    TASK l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
     2     yanzuo         l_traf_para.para.intern.ing.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo         l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
     2     yanzuo         l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo         l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.egr.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo         l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
     2     yanzuo         l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo         l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo 
     2     yanzuo    TASK l_own_unit.ttype := in_unit.unit_type,
     2     yanzuo         l_own_unit.index := in_unit.unit_index;
     2     yanzuo 
     2     yanzuo    TASK l_ec := collect_connections__r( in_endpoint_addr,
     2     yanzuo                                         computer_t_any_c,
     2     yanzuo                                         l_vcc_params );
     2     yanzuo    DECISION l_ec;
     2     yanzuo    ( success_ec ):
  1248      tinyu    DECISION (l_vcc_params.item_count = 0);
  1248      tinyu        (T):
  1248      tinyu            TASK dxsyslog_r( log_type_t_text_i_c,
  1248      tinyu                      @'JIGCLU: brt_crt_xconn__r'
  1248      tinyu                       'collect_connections__r item_cout =0 '
  1248      tinyu                       'in_endpoint_addr = %04X',
  1248      tinyu                       in_endpoint_addr);
  1248      tinyu                       
  1248      tinyu            RETURN error_on_conn_ec;
  1248      tinyu        ENDDECISION;
     2     yanzuo       TASK l_ec:= get_conn_resources__r( in_endpoint_addr,
     2     yanzuo                                          in_conn_exist_state, /* not-existing conns only */
     2     yanzuo                                          T, /* nRT conns only */
     2     yanzuo                                          l_vcc_params,
     2     yanzuo                                          l_vcc_res );
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_ec;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN l_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* Notify to WO-RS3PRB after SP-APP-MXU is up. */
     2     yanzuo    DECISION ( app_mxu_unit_check__r( in_unit ) AND
     2     yanzuo               in_unit.is_wo_unit = F );
     2     yanzuo    ( T ):
     2     yanzuo       TASK l_computer := get_pid_computer_r( io_brtpid );
     2     yanzuo       TASK l_range := 3; /* WO + SP */
     2     yanzuo       DECISION ( computer_t_is_logical_r (l_computer) );
     2     yanzuo       ( F ): /* Not Logical Address */
     2     yanzuo          DECISION( computer_t_is_physical_r (l_computer) );
     2     yanzuo          ( T ): /* Physical Addr */
     2     yanzuo             TASK l_phys_to_log.phys_addr := l_computer;
     2     yanzuo             TASK l_ec := phys_to_logical_address_r( l_phys_to_log );
     2     yanzuo             DECISION( l_ec /= success_ec );
     2     yanzuo             (T): /* Invalid logical address */
     2     yanzuo                RETURN l_ec;
     2     yanzuo             ENDDECISION;
     2     yanzuo             /* Set to logical addr */
     2     yanzuo             TASK set_pid_computer_r (io_brtpid,
     2     yanzuo                                      l_phys_to_log.logl_addr);
     2     yanzuo 
     2     yanzuo          ELSE: /* Relative Addr, convert to logical addr */
     2     yanzuo             TASK PID_CONVERT_FAR (io_brtpid);
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    OUTPUT int_half_xc_create_ack_s( l_tpi, l_ec) TO SELF;
     2     yanzuo    SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo    TASK l_vcc_idx := l_vcc_res.item_count;
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo INPUT int_half_xc_create_ack_s( l_resp_tpi, l_status);
     2     yanzuo    DCL
     2     yanzuo       l_resp_tpi  tpi_t,
     2     yanzuo       l_status    error_t;
     2     yanzuo 
     2     yanzuo    TASK  l_status := brt_xconn_ack_chk__r( l_vcc_idx,
     2     yanzuo                                            l_n_created,
     2     yanzuo                                            l_vcc_res,
     2     yanzuo                                            l_tpi,
     2     yanzuo                                            l_resp_tpi,
     2     yanzuo                                            l_status );
     2     yanzuo    DECISION l_status = unsuccessful_ec;
     2     yanzuo    (T): NEXTSTATE -;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RESET (ack_timer);
     2     yanzuo     /* search the next connection we need to create */
     2     yanzuo     WHILE l_vcc_idx < l_vcc_res.item_count;
     2     yanzuo       DECISION l_vcc_res.res( l_vcc_idx ).target_comp;
     2     yanzuo         ( in_endpoint2_addr,
     2     yanzuo         in_endpoint2_addr2):
     2     yanzuo           OUT search_target;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK l_vcc_idx := l_vcc_idx + 1;
     2     yanzuo     ENDWHILE search_target;
     2     yanzuo     DECISION l_vcc_idx >= l_vcc_res.item_count;
     2     yanzuo       ( T ):
     2     yanzuo         DECISION l_n_created;
     2     yanzuo           ( > 0 ):
     2     yanzuo             TASK l_vcc_res.item_count := l_n_created;
     2     yanzuo             TASK l_status := update_half_conn_states__r( in_endpoint_addr,
     2     yanzuo                                                          l_vcc_res,
     2     yanzuo                                                          T );
     2     yanzuo         ENDDECISION;
     2     yanzuo         RETURN l_status;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     TASK l_dest_conn_info.fabric_port   := l_vcc_res.res(l_vcc_idx).dest_fabric_port,
     2     yanzuo          l_dest_conn_info.remote_connid := l_vcc_res.res(l_vcc_idx).remote_xconn_id;
     2     yanzuo 
     2     yanzuo   	 TASK l_if_idx     := in_unit.procs(in_proc_idx).interface_index;
     2     yanzuo 
     2     yanzuo     TASK l_tpi.level  := tpi_level_t_vc_c,
     2     yanzuo          l_tpi.interf := in_unit.interfaces(l_if_idx).intf_id,
     2     yanzuo          l_tpi.vpi    := in_unit.procs(in_proc_idx).vpi,
     2     yanzuo          l_tpi.vci    := l_vcc_res.res(l_vcc_idx).vci;
     2     yanzuo 
     2     yanzuo     OUTPUT int_half_xc_create_req_s ( l_tpi, l_vcc_res.res(l_vcc_idx).xconn_id,
     2     yanzuo                                       l_dest_conn_info,
     2     yanzuo                                       atm_cre_state_t_new_object_c,
     2     yanzuo                                       atm_usage_tag_t_ic_ud_c,
     2     yanzuo                                       l_traf_para,
     2     yanzuo                                       end_point_t_not_in_segment_c,
     2     yanzuo                                       traffic_shaping_t (.
     2     yanzuo                                       shaping_option_t_none_c,
     2     yanzuo                                       shaping_option_t_none_c .),
     2     yanzuo                                       abled_flag_t_disabled_c,
     2     yanzuo                                       abled_flag_t_disabled_c,
     2     yanzuo                                       abled_flag_t_enabled_c,
     2     yanzuo                                       cdvt_t_unspecified_c,
     2     yanzuo                                       rm_owner_id_t_unspecified_c,
     2     yanzuo                                       in_path_info,
     2     yanzuo                                       l_update_list ) TO io_brtpid, SET DELIVERY_RANGE = l_range ;
     2     yanzuo     SET ( NOW + (6*ack_waiting_time__c)/5, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE brt_crt_xconn__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init_trib2__r;
     2     yanzuo /*
     2     yanzuo  * Initialize interface in the ALP1 unit(s) for the given tributary
     2     yanzuo  * or SP-ALP1 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  tributary   jiifil__t,
     2     yanzuo     IN/OUT  proc_idx    hms_processor_index_t,
     2     yanzuo     IN/OUT  alp_unit    jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     res                  error_t,
     2     yanzuo     status               error_t,
     2     yanzuo     if_idx               byte,
     2     yanzuo     intf_vp_params       alp1_intf_vp_params__t,
     2     yanzuo     req_par              interface_setup_req_t,
     2     yanzuo     sp_params            alp_ep1_t,
     2     yanzuo     sp_params2           alp_ep2_t,
     2     yanzuo     hms_address          fig_msg_header_t,
     2     yanzuo     vphy_map_data        virtual_phy_config_t,
     2     yanzuo     ack_count            bool := F,
     2     yanzuo     whisky               pid,
     2     yanzuo     whisky_sp            pid,
     2     yanzuo     xvalue_pid           pid,
     2     yanzuo     serv_attr            attr_group_t,
     2     yanzuo     apc_ep2              apc_ep2_t,
     2     yanzuo     apc_ep2_sp1          apc_ep2_sp1_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK res := get_alp1_if_vp_info__r( tributary, proc_idx,
     2     yanzuo        alp_unit, intf_vp_params );
   118    lifsong        
   118    lifsong   DECISION res /= success_ec;
   118    lifsong   ( T ):
   118    lifsong     RETURN res;       
   118    lifsong   ENDDECISION;
   118    lifsong   
     2     yanzuo   TASK if_idx := tributary.procs(proc_idx).interface_index;
     2     yanzuo   TASK req_par.request_mode := request_mode_t_create_c,
     2     yanzuo        req_par.mphy_port_number := tributary.interfaces(if_idx).mphy_port,
     2     yanzuo        req_par.atm_interface_type := atm_interface_type_t_intern_c,
     2     yanzuo        req_par.vpi_bits := intf_vp_params.max_vpi_bits;
     2     yanzuo   TASK make_pid_r( whisky, alp_unit.procs(0).phys_addr, whisky_p, 0, 0 );
   118    lifsong   
  1124   huantang   OUTPUT interface_setup_s ( req_par ) TO whisky;
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT interface_setup_ack_s ( status, req_par );
     2     yanzuo     DECISION ( req_par.mphy_port_number = tributary.interfaces(if_idx).mphy_port );
   216      h10hu       ( F ):
   216      h10hu #if (test_logs) /* (test_logs_on) */
   216      h10hu             TASK dxsyslog_r( log_type_t_text_t_c,
   216      h10hu                  @'JIGCLU: wrong interface_setup_ack_s: %04X'
   216      h10hu                  'intf = %04X mphy_port_nr = %04X',
   216      h10hu                  status,
   216      h10hu                  tributary.interfaces(if_idx).intf_id,
   216      h10hu                  tributary.interfaces(if_idx).mphy_port );
   216      h10hu #endif
  1233    jinncao         NEXTSTATE -;            
   216      h10hu       ELSE:
  1233    jinncao #if (test_logs) /* (test_logs_on) */
     2     yanzuo         DECISION ( status /= success_ec );
     2     yanzuo           ( T ):
   216      h10hu 
     2     yanzuo                 TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: interface_setup_s failed: %04X'
     2     yanzuo                      'intf = %04X',
     2     yanzuo                      status,
     2     yanzuo                      tributary.procs(proc_idx).interface_index );
     2     yanzuo         ENDDECISION;
   216      h10hu #endif        
  1233    jinncao 	DECISION ack_count;
  1233    jinncao 	(F):
  1233    jinncao 		RESET(ack_timer);
  1233    jinncao 	ELSE:
  1233    jinncao 		RESET(ack_timer2);
  1233    jinncao 	ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
     2     yanzuo       ( T ):
     2     yanzuo         TASK make_pid_r( whisky_sp, alp_unit.co_alp_unit_phys_addr, whisky_p, 0, 0 );
     2     yanzuo 
  1124   huantang 		  OUTPUT interface_setup_s ( req_par ) TO whisky_sp; /* to SP */
     2     yanzuo 
     2     yanzuo         SET ( NOW + ack_waiting_time__c, ack_timer2 );
     2     yanzuo         TASK ack_count := T;
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK sp_params.sp_param.sp_number        := tributary.interfaces(if_idx).scheduler_subport,
     2     yanzuo          sp_params.sp_param.excess_bw_enable := intf_vp_params.subport_params.sp_param.excess_bw_enable,
     2     yanzuo          sp_params.sp_param.rate__cellps1    := intf_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo          sp_params.sp_param.cl3_gmax__cell1  := intf_vp_params.subport_params.sp_param.cl3_gmax__cell1;
     2     yanzuo 
  1124   huantang     OUTPUT alp_init_sp_ph1_s ( sp_params ) TO whisky;
     2     yanzuo 
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     TASK ack_count := F;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT alp_init_sp_ph1_ack_s ( status, sp_params );
  1233    jinncao 	DECISION ( sp_params.sp_param.sp_number = tributary.interfaces(if_idx).scheduler_subport );
  1233    jinncao 	( F ):
   216      h10hu #if (test_logs) /* (test_logs_on) */
  1233    jinncao 		TASK dxsyslog_r( log_type_t_text_t_c,
  1233    jinncao 			@'JIGCLU: wrong alp_init_sp_ph1_ack_s: %04X'
  1233    jinncao 			'subport = %04X',
  1233    jinncao 			status,
  1233    jinncao 			tributary.interfaces(if_idx).scheduler_subport );
   216      h10hu #endif
  1233    jinncao 		NEXTSTATE -;      
  1233    jinncao 	ELSE:
  1233    jinncao #if (test_logs) /* (test_logs_on) */       
  1233    jinncao 		DECISION ( status /= success_ec );
  1233    jinncao 		( T ):
  1233    jinncao 			TASK dxsyslog_r( log_type_t_text_t_c,
  1233    jinncao 				@'JIGCLU: alp_init_sp_ph1_s failed: %04X'
  1233    jinncao 				'intf = %04X',
  1233    jinncao 				status,
  1233    jinncao 				tributary.interfaces(if_idx).intf_id );
  1233    jinncao 		ENDDECISION;
   216      h10hu #endif        
  1233    jinncao 		DECISION ack_count;
  1233    jinncao 		(F):
  1233    jinncao 			RESET(ack_timer);
  1233    jinncao 		ELSE:
  1233    jinncao 			RESET(ack_timer2);
  1233    jinncao 		ENDDECISION;
  1233    jinncao 	ENDDECISION;
  1233    jinncao 	
     2     yanzuo     DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
     2     yanzuo       ( T ):
  1124   huantang         OUTPUT alp_init_sp_ph1_s ( sp_params ) TO whisky_sp; /* to SP */
     2     yanzuo         SET ( NOW + ack_waiting_time__c, ack_timer2 );
     2     yanzuo         TASK ack_count := T;
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION get_service__r( atm_config_params__c, xvalue_pid, serv_attr );
     2     yanzuo       ( F ):
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo              @'JIGCLU: failed to find service atm_config_params: %04X',
     2     yanzuo              xvalue_pid );
     2     yanzuo         RETURN unsuccessfull_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1124   huantang     OUTPUT get_cac_apc_port_param_req_s ( tributary.procs(proc_idx).unit_type,
     2     yanzuo              tributary.procs(proc_idx).unit_index,
     2     yanzuo              port_stage_t_s1_s2_c )
     2     yanzuo              TO xvalue_pid, SET ATTRIBUTES = serv_attr;
     2     yanzuo 
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT get_cac_apc_port_param_ack_s ( status, ?, ?, ?, apc_ep2_sp1, apc_ep2, ?, ?, ? );
   216      h10hu #if (test_logs) /* (test_logs_on) */  
     2     yanzuo     DECISION ( status /= success_ec );
     2     yanzuo       ( T ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                  @'JIGCLU: get_cac_apc_port_param_req_s failed: %04X'
     2     yanzuo                  'unit type = %04X index = %04X',
     2     yanzuo                  status,
     2     yanzuo                  tributary.procs(proc_idx).unit_type,
     2     yanzuo                  tributary.procs(proc_idx).unit_index );
     2     yanzuo     ENDDECISION;
   216      h10hu #endif    
  1233    jinncao     RESET(ack_timer);
     2     yanzuo     TASK apc_ep2.sp_number := tributary.interfaces(if_idx).scheduler_subport;
     2     yanzuo     TASK sp_params2.sp_param := apc_ep2,
     2     yanzuo          sp_params2.sp1_param  := apc_ep2_sp1;
     2     yanzuo     DECISION ( alp_unit.co_alp_unit_updated = T );
     2     yanzuo       ( T ):
  1124   huantang         OUTPUT alp_init_sp_ph2_s ( sp_params2, F ) TO whisky; /* to WO */
     2     yanzuo         SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo         TASK ack_count := F;
     2     yanzuo       ELSE:
  1124   huantang         OUTPUT alp_init_sp_ph2_s ( sp_params2, T ) TO whisky; /* to WO */
     2     yanzuo        SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT alp_init_sp_ph2_ack_s ( status, sp_params2 );
     2     yanzuo     DECISION ( sp_params.sp_param.sp_number = tributary.interfaces(if_idx).scheduler_subport );
   216      h10hu       ( F ):
   216      h10hu #if (test_logs) /* (test_logs_on) */
   216      h10hu             TASK dxsyslog_r( log_type_t_text_t_c,
   216      h10hu                  @'JIGCLU: wrong alp_init_sp_ph2_ack_s: %04X'
   216      h10hu                  'subport = %04X',
   216      h10hu                  status,
   216      h10hu                  tributary.interfaces(if_idx).scheduler_subport );
   216      h10hu #endif
  1233    jinncao         NEXTSTATE -;            
   216      h10hu       ELSE:
  1233    jinncao #if (test_logs) /* (test_logs_on) */  
     2     yanzuo         DECISION ( status /= success_ec );
     2     yanzuo           ( T ):
     2     yanzuo                 TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: alp_init_sp_ph2_s failed: %04X'
     2     yanzuo                      'intf = %04X',
     2     yanzuo                      status,
     2     yanzuo                      tributary.interfaces(if_idx).intf_id );
     2     yanzuo         ENDDECISION;
  1233    jinncao         DECISION ack_count;
  1233    jinncao         (F):
  1233    jinncao         	RESET(ack_timer);
  1233    jinncao         ELSE:
  1233    jinncao         	RESET(ack_timer2);
  1233    jinncao         ENDDECISION;
   216      h10hu #endif        
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
     2     yanzuo       ( T ):
  1124   huantang        OUTPUT alp_init_sp_ph2_s ( sp_params2, T ) TO whisky_sp; /* to SP */
     2     yanzuo        SET ( NOW + ack_waiting_time__c, ack_timer2 );
     2     yanzuo        TASK ack_count := T;
     2     yanzuo        NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK hms_address.hms_address := tributary.hms_address,
     2     yanzuo          hms_address.extended_addr := 0;
     2     yanzuo     TASK vphy_map_data.request_mode := request_mode_t_create_c,
     2     yanzuo          vphy_map_data.subport := tributary.interfaces(if_idx).scheduler_subport,
     2     yanzuo          vphy_map_data.mphy_port := tributary.interfaces(if_idx).mphy_port;
  1124   huantang     OUTPUT alp_map_virtual_phy_s ( hms_address, vphy_map_data ) TO whisky; /* to WO */
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     TASK ack_count := F;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT alp_map_virtual_phy_ack_s ( hms_address, status, vphy_map_data );
     2     yanzuo     DECISION ( vphy_map_data.mphy_port = tributary.interfaces(if_idx).mphy_port );
   216      h10hu       ( F ):
   216      h10hu #if (test_logs) /* (test_logs_on) */
   216      h10hu             TASK dxsyslog_r( log_type_t_text_t_c,
   216      h10hu                  @'JIGCLU: wrong alp_map_virtual_phy_ack_s: %04X'
   216      h10hu                  'mphy_port = %04X',
   216      h10hu                  status,
   216      h10hu                  tributary.interfaces(if_idx).mphy_port );
   216      h10hu #endif
   216      h10hu         NEXTSTATE -;         
  1233    jinncao        
  1233    jinncao       ELSE:    
  1233    jinncao #if (test_logs) /* (test_logs_on) */  
     2     yanzuo         DECISION ( status /= success_ec );
     2     yanzuo           ( T ):
     2     yanzuo                 TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGCLU: alp_map_virtual_phy_s failed: %04X'
     2     yanzuo                      'intf = %04X',
     2     yanzuo                      status,
     2     yanzuo                      tributary.interfaces(if_idx).intf_id );
     2     yanzuo         ENDDECISION;
   216      h10hu #endif     
  1233    jinncao 	DECISION ack_count;
  1233    jinncao 	(F):
  1233    jinncao 		RESET(ack_timer);
  1233    jinncao 	ELSE:
  1233    jinncao 		RESET(ack_timer2);
  1233    jinncao 	ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
     2     yanzuo       ( T ):
  1124   huantang        OUTPUT alp_map_virtual_phy_s ( hms_address, vphy_map_data ) TO whisky_sp; /* to SP */
     2     yanzuo        SET ( NOW + ack_waiting_time__c, ack_timer2 );
     2     yanzuo        TASK ack_count := T;
     2     yanzuo        NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
  1137   huantang   INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index, ?, ?, ? );
  1137   huantang    DCL
  1137   huantang       obj_unit_type           unit_type_t,
  1137   huantang       obj_unit_index          unit_index_t;
  1137   huantang    DECISION (alp_unit.unit_type = obj_unit_type) AND (alp_unit.unit_index = obj_unit_index);
  1137   huantang    (T):
  1137   huantang       RESET ( ack_timer );
  1137   huantang       RETURN   card_restarted_ec;
  1137   huantang    ENDDECISION;
  1137   huantang    NEXTSTATE -;
  1137   huantang 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo #if (test_logs)
     2     yanzuo         TASK status := message_waiting_timeout_ec;
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo              @'JIGCLU: if_init_trib2__r ack_timer expired: %04X'
     2     yanzuo              'unit type=%XH index=%d proc_idx=%d',
     2     yanzuo              status,
     2     yanzuo              tributary.unit_type, tributary.unit_index,
     2     yanzuo              proc_idx );
     2     yanzuo #endif
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer2;
     2     yanzuo #if (test_logs)
     2     yanzuo         TASK status := message_waiting_timeout_ec;
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo              @'JIGCLU: if_init_trib2__r ack_timer2 expired: %04X'
     2     yanzuo              , status );
     2     yanzuo #endif
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE if_init_trib2__r;
     2     yanzuo 
   857     z7zhou 
   857     z7zhou PROCEDURE is_vp_creation_needed__r;
   857     z7zhou 
   857     z7zhou FPAR 
   857     z7zhou     IN VIEWED   tributary      jiifil__t,
   857     z7zhou     IN                proc_idx    hms_processor_index_t;
   857     z7zhou     
   857     z7zhou RETURNS
   857     z7zhou     bool;
   857     z7zhou 
   857     z7zhou  DCL 
   857     z7zhou      l_proc_idx           dword := 0;
   857     z7zhou 
   857     z7zhou START;
   857     z7zhou       WHILE l_proc_idx < child_fu_list_t_size_c;
   857     z7zhou           DECISION tributary.procs(l_proc_idx).interface_index = tributary.procs(proc_idx).interface_index AND
   857     z7zhou                    tributary.procs(l_proc_idx).vpi = tributary.procs(proc_idx).vpi AND
   857     z7zhou                    tributary.procs(l_proc_idx).vp_exists = T;
   857     z7zhou           ( T ):
   857     z7zhou               RETURN F;
   857     z7zhou           ENDDECISION;
   857     z7zhou           TASK l_proc_idx := l_proc_idx + 1;
   857     z7zhou       ENDWHILE;
   857     z7zhou 
   857     z7zhou       RETURN  T;
   857     z7zhou 
   857     z7zhou ENDPROCEDURE is_vp_creation_needed__r;
   857     z7zhou 
   857     z7zhou 
     2     yanzuo /**************************************************************************/
   857     z7zhou PROCEDURE if_init_apc_trib__r;
     2     yanzuo /*
     2     yanzuo  * Initialize interface (if needed) and VP in the ALP1 unit(s) for the
     2     yanzuo  * given tributary or SP-ALP1 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  tributary    jiifil__t,
     2     yanzuo     IN      proc_idx     hms_processor_index_t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
   857     z7zhou     status                 error_t,
     2     yanzuo     intf_index          byte,
   857     z7zhou     intf_vp_params      alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo START;
   857     z7zhou   TASK status := get_alp1_if_vp_info__r( tributary, proc_idx,
     2     yanzuo        alp_unit, intf_vp_params );
   118    lifsong        
   857     z7zhou   DECISION status /= success_ec;
   118    lifsong   ( T ):
   857     z7zhou     RETURN status; 
   118    lifsong   ENDDECISION;    
   118    lifsong   
     2     yanzuo   /* if NOT interface(0).exits then call init_*/
     2     yanzuo   TASK intf_index := tributary.procs(proc_idx).interface_index;
     2     yanzuo   DECISION ( tributary.interfaces(intf_index).intf_exists );
     2     yanzuo     ( F ):
   857     z7zhou       TASK status := if_init_trib2__r( tributary, proc_idx, alp_unit );
   857     z7zhou       DECISION status;
     2     yanzuo         ( success_ec ):
     2     yanzuo           /* if many interfaces and this was not the first one,
     2     yanzuo              no need to notify PIGPRB */
     2     yanzuo           DECISION proc_idx > 0;
     2     yanzuo             ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo                   TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: if already notified to PIGPRB : %04X'
   857     z7zhou                        , status );
     2     yanzuo #endif
     2     yanzuo             ELSE:
   470    lifsong               /* ..and store 2nd, 3rd and 4th interface mphy info in JIIFIL (this will
   470    lifsong                  also write scheduler subport, but it will get overwritten
   470    lifsong                  later when the 2nd interface is actually created). */
   604    lifsong               CALL if_flag_mphy_schs_from_proc1__r(update, tributary);
     2     yanzuo               /* Notify PIGPRB immediately. */
   857     z7zhou               TASK status := intf_notify__r( tributary, intf_index,
     2     yanzuo                                           mphy_type_t_mxu_c,
   470    lifsong                                           alp_unit );              
   857     z7zhou               DECISION status;
     2     yanzuo                 ( /= success_ec ):
     2     yanzuo                   TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                        @'JIGCLU: Interface notifying failed: %04X'
     2     yanzuo                        'unit type = %04X index = %04X intf = %04X',
   857     z7zhou                        status,
     2     yanzuo                        tributary.unit_type,
     2     yanzuo                        tributary.unit_index,
     2     yanzuo                        tributary.interfaces(intf_index).intf_id );
   857     z7zhou                   RETURN status;
     2     yanzuo               ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo         ELSE:
     2     yanzuo #if (test_logs)
     2     yanzuo               TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                    @'JIGCLU: if_init_trib2__r not success : %04X'r'n'
   857     z7zhou                    , status );
     2     yanzuo #endif
   857     z7zhou           RETURN status;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
   480     yanzuo 
     2     yanzuo 
   857     z7zhou   DECISION (status = success_ec AND tributary.procs(proc_idx).vp_exists = F);
   857     z7zhou    ( T ):
   857     z7zhou          
   857     z7zhou        DECISION is_vp_creation_needed__r(tributary, proc_idx);
   857     z7zhou       ( T ):
   857     z7zhou          TASK status := whisky_crt_vp__r( tributary, proc_idx, alp_unit,  intf_vp_params);
   857     z7zhou           DECISION status;
   857     z7zhou           ( /= success_ec ):
   857     z7zhou              RETURN status;
   857     z7zhou           ENDDECISION;
   857     z7zhou              
   857     z7zhou           TASK tributary.procs(proc_idx).vp_exists           := T;
   857     z7zhou           TASK tributary.procs(proc_idx).vp_reporting_needed := T;
   857     z7zhou           TASK tributary.procs(proc_idx).vp_reported         := F;
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_exists_c);
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_rep_need_c );
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_reported_c );
   857     z7zhou       ELSE:
   857     z7zhou           TASK tributary.procs(proc_idx).vp_exists           := T;
   857     z7zhou           TASK tributary.procs(proc_idx).vp_reporting_needed := F;
   857     z7zhou           TASK tributary.procs(proc_idx).vp_reported         := T;
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_exists_c);
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_rep_need_c );
   857     z7zhou           CALL flag__r( update, jii_field__t_vp_reported_c );   
   857     z7zhou        ENDDECISION;
     2     yanzuo 
   857     z7zhou        TASK update.rec_ptr := @tributary;    
   857     z7zhou               
   857     z7zhou   ENDDECISION;
     2     yanzuo 
   857     z7zhou   RETURN status;
   857     z7zhou   
     2     yanzuo 
   857     z7zhou ENDPROCEDURE if_init_apc_trib__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init_app_trib__r;
     2     yanzuo /*
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  io_tributary         jiifil__t,
     2     yanzuo     IN      in_proc_idx          hms_processor_index_t,
     2     yanzuo     IN/OUT  io_alp_unit          jiifil__t,
     2     yanzuo     IN/OUT  io_update            jii_update_info__t;
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_brtpid             pid,
     2     yanzuo    l_if_idx             byte,
     2     yanzuo    l_path_info          half_cconn_phy_info_t,
     2     yanzuo    l_if_vp_params       alp1_intf_vp_params__t,
     2     yanzuo    l_status             error_t,
   890    lifsong    l_update             jii_fields__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo #if (test_logs)
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                    @'JIGCLU: try to create if for app_trib unit'
     2     yanzuo                     'Procedure: if_init_app_trib__r'
     2     yanzuo                     'unit = %04X %d '
     2     yanzuo                     'alp_unit = %04X %d',
     2     yanzuo                      io_tributary.procs(in_proc_idx).unit_type,
     2     yanzuo                      io_tributary.procs(in_proc_idx).unit_index,
     2     yanzuo                      io_alp_unit.unit_type, io_alp_unit.unit_index );
     2     yanzuo #endif
     2     yanzuo    CALL jii_fields__t_init_r( l_update );
   605   huantang    
     2     yanzuo 
     2     yanzuo 	DECISION app_unit_check__r(io_tributary);
     2     yanzuo 	(T):
     2     yanzuo 		CALL	get_brt_pid__r(io_tributary.unit_type, io_tributary.procs(in_proc_idx).phys_addr,l_brtpid);
     2     yanzuo 	ELSE:
     2     yanzuo 		CALL	get_brt_pid__r(io_alp_unit.unit_type, io_alp_unit.procs(0).phys_addr,l_brtpid);
     2     yanzuo 	ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* If RS3PRB is not ready to create IF + VP, return failure */
     2     yanzuo    /*rulitao: this decision is changed from io_tributary to io_alp_unit*/
     2     yanzuo    DECISION ( io_alp_unit.ready_for_reporting );
     2     yanzuo    ( /= T ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo    ENDDECISION;
   359    lifsong    
     2     yanzuo    TASK l_status := get_app_if_vp_info__r( io_tributary,
     2     yanzuo                                            in_proc_idx,
   604    lifsong                                            io_alp_unit );
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* get the interface and VP parameters from XVALUE */
     2     yanzuo    TASK l_status := get_interface_params__r( io_tributary.procs( in_proc_idx ).unit_type, io_tributary.procs( in_proc_idx ).unit_index,
     2     yanzuo                                              port_stage_t_s1_s2_c, l_if_vp_params );
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
   106      h10hu    DECISION app_unit_check__r(io_tributary);
   106      h10hu    ( F ):
   106      h10hu        TASK io_tributary.procs(in_proc_idx).max_intconn_vci := vci_t( l_if_vp_params.min_vci - 1 );
   106      h10hu        CALL flag__r( io_update, jii_field__t_maxintvci_c );         
   106      h10hu    ENDDECISION;
   106      h10hu       
     2     yanzuo    CALL get_path_info__r( io_tributary, io_alp_unit, in_proc_idx, l_path_info );
     2     yanzuo 
   605   huantang    TASK l_if_idx := io_tributary.procs(in_proc_idx).interface_index;
   605   huantang 
     2     yanzuo    DECISION (io_tributary.interfaces(l_if_idx).intf_exists = F) OR (eipu_unit_check__r(io_tributary));
     2     yanzuo    ( T ):
     2     yanzuo       TASK l_status := brt_crt_interface__r( io_tributary, l_brtpid, l_if_idx, l_if_vp_params, l_path_info);
     2     yanzuo       DECISION l_status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo          RETURN l_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       TASK io_tributary.interfaces(l_if_idx).intf_exists           := T;
     2     yanzuo       TASK io_tributary.interfaces(l_if_idx).intf_reporting_needed := T;
     2     yanzuo       TASK io_tributary.interfaces(l_if_idx).intf_reported         := F;
     2     yanzuo       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_mphy_sch_c );
     2     yanzuo       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_exists_c );
     2     yanzuo       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_rep_need_c );
     2     yanzuo       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_reported_c );
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    CALL get_path_info__r( io_tributary, io_alp_unit, in_proc_idx, l_path_info );
     2     yanzuo 
     2     yanzuo    DECISION (l_status = success_ec AND io_tributary.procs(in_proc_idx).vp_exists = F);
     2     yanzuo    ( T ):
   857     z7zhou       
   857     z7zhou       DECISION is_vp_creation_needed__r(io_tributary, in_proc_idx);
     2     yanzuo       ( T ):
     2     yanzuo           TASK l_status := brt_crt_vp__r( io_tributary, l_brtpid, in_proc_idx, l_if_vp_params, l_path_info );
     2     yanzuo           DECISION l_status;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo              RETURN l_status;
     2     yanzuo           ENDDECISION;
   359    lifsong           
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_exists           := T;
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_reporting_needed := T;
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_reported         := F;
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_exists_c);
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_rep_need_c );
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_reported_c );
     2     yanzuo       ELSE:
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_exists           := T;
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_reporting_needed := F;
     2     yanzuo           TASK io_tributary.procs(in_proc_idx).vp_reported         := T;
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_exists_c);
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_rep_need_c );
     2     yanzuo           CALL flag__r( io_update, jii_field__t_vp_reported_c );
     2     yanzuo       ENDDECISION;
   857     z7zhou     
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( success_ec ):
     2     yanzuo     /* if many interfaces and this was not the first one,
     2     yanzuo        no need to notify PIGPRB */
     2     yanzuo       DECISION in_proc_idx > 0;
     2     yanzuo       ( T ):
     2     yanzuo       ELSE:
   470    lifsong          /* ..and store 2nd, 3rd and 4th interface mphy info in JIIFIL (this will
   470    lifsong               also write scheduler subport, but it will get overwritten
   470    lifsong               later when the 2nd interface is actually created). */ 
   604    lifsong          CALL if_flag_mphy_schs_from_proc1__r(io_update, io_tributary);   
     2     yanzuo          /* Notify PIGPRB immediately. */
     2     yanzuo          TASK l_status := intf_notify__r( io_tributary, l_if_idx,
     2     yanzuo                                           mphy_type_t_mxu_c,
   470    lifsong                                           io_alp_unit );         
     2     yanzuo          DECISION l_status;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                             @'JIGCLU: Interface notifying failed: %04X'
     2     yanzuo                              'unit type = %04X index = %04X intf = %04X',
     2     yanzuo                               l_status,
     2     yanzuo                               io_tributary.unit_type,
     2     yanzuo                               io_tributary.unit_index,
     2     yanzuo                               io_tributary.interfaces(l_if_idx).intf_id );
     2     yanzuo             RETURN l_status;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE if_init_app_trib__r;
     2     yanzuo 
   359    lifsong 
     2     yanzuo /**************************************************************************/
   359    lifsong PROCEDURE if_init_ss7u__r;
   359    lifsong /*
   359    lifsong  *
   359    lifsong  **************************************************************************/
   359    lifsong FPAR
   359    lifsong     IN/OUT  io_iwset               jiifil__t,
   359    lifsong     IN          in_proc_idx          hms_processor_index_t,
   359    lifsong     IN/OUT  io_update            jii_update_info__t;
   359    lifsong RETURNS error_t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong    l_brtpid             pid,
   359    lifsong    l_if_idx             byte,
   359    lifsong    l_path_info          half_cconn_phy_info_t,
   359    lifsong    l_if_vp_params       alp1_intf_vp_params__t,
   359    lifsong    l_status             error_t,
   390    lifsong    l_update             jii_fields__t;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    CALL jii_fields__t_init_r( l_update );
   605   huantang    
   359    lifsong 
   359    lifsong    /*for SS7U, the interface is created to the NPU. it is different from common tributary units which creates interface in WO-MXU*/
   359    lifsong    CALL get_brt_pid__r(io_iwset.unit_type, io_iwset.procs(0).phys_addr,l_brtpid);
   359    lifsong 
   359    lifsong    DECISION ( io_iwset.ready_for_reporting );
   359    lifsong    ( /= T ):
   359    lifsong       RETURN unsuccessful_ec;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    TASK l_status := get_app_if_vp_info__r( io_iwset,
   359    lifsong                                            in_proc_idx,
   604    lifsong                                            io_iwset );
   359    lifsong    DECISION l_status;
   359    lifsong    ( /= success_ec ):
   359    lifsong       RETURN l_status;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    /* get the interface and VP parameters from XVALUE */
   359    lifsong    TASK l_status := get_interface_params__r( io_iwset.procs( in_proc_idx ).unit_type, io_iwset.procs( in_proc_idx ).unit_index,
   359    lifsong                                              port_stage_t_s1_s2_c, l_if_vp_params );
   359    lifsong    DECISION l_status;
   359    lifsong    ( /= success_ec ):
   359    lifsong       RETURN l_status;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong 
   359    lifsong    TASK io_iwset.procs(in_proc_idx).max_intconn_vci := vci_t( l_if_vp_params.min_vci - 1 );
   359    lifsong    CALL flag__r( io_update, jii_field__t_maxintvci_c );         
   359    lifsong       
   359    lifsong    CALL get_path_info__r( io_iwset, io_iwset, in_proc_idx, l_path_info );
   359    lifsong 
   605   huantang    TASK l_if_idx := io_iwset.procs(in_proc_idx).interface_index;
   605   huantang    
   359    lifsong    DECISION (io_iwset.interfaces(l_if_idx).intf_exists = F);
   359    lifsong    ( T ):
   359    lifsong       TASK l_status := brt_crt_interface__r( io_iwset, l_brtpid, l_if_idx, l_if_vp_params, l_path_info);
   359    lifsong       DECISION l_status;
   359    lifsong       ( /= success_ec ):
   359    lifsong          RETURN l_status;
   359    lifsong       ENDDECISION;
   359    lifsong 
   359    lifsong       TASK io_iwset.interfaces(l_if_idx).intf_exists           := T;
   359    lifsong       TASK io_iwset.interfaces(l_if_idx).intf_reporting_needed := T;
   359    lifsong       TASK io_iwset.interfaces(l_if_idx).intf_reported         := F;
   359    lifsong       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_mphy_sch_c );
   359    lifsong       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_exists_c );
   359    lifsong       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_rep_need_c );
   359    lifsong       CALL intf_flag__r( io_update, l_if_idx, jii_field__t_i1_reported_c );
   359    lifsong       TASK io_update.rec_ptr := @io_iwset;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    CALL get_path_info__r( io_iwset, io_iwset, in_proc_idx, l_path_info );
   359    lifsong 
   359    lifsong    DECISION (l_status = success_ec AND io_iwset.procs(in_proc_idx).vp_exists = F);
   359    lifsong    ( T ):
   857     z7zhou         
   359    lifsong       TASK l_status := brt_crt_vp__r( io_iwset, l_brtpid, in_proc_idx, l_if_vp_params, l_path_info );
   359    lifsong       DECISION l_status;
   359    lifsong       ( /= success_ec ):
   359    lifsong           RETURN l_status;
   359    lifsong       ENDDECISION;    
   857     z7zhou 
   359    lifsong       TASK io_iwset.procs(in_proc_idx).vp_exists           := T;
   359    lifsong       TASK io_iwset.procs(in_proc_idx).vp_reporting_needed := T;
   359    lifsong       TASK io_iwset.procs(in_proc_idx).vp_reported         := F;
   359    lifsong       CALL flag__r( io_update, jii_field__t_vp_exists_c);
   359    lifsong       CALL flag__r( io_update, jii_field__t_vp_rep_need_c );
   359    lifsong       CALL flag__r( io_update, jii_field__t_vp_reported_c );
   359    lifsong       
   359    lifsong       TASK io_update.rec_ptr := @io_iwset;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    DECISION l_status;
   359    lifsong    ( success_ec ):
   359    lifsong       CALL intf_flag__r( io_update, l_if_idx + 1,
   359    lifsong                             jii_field__t_i1_mphy_sch_c );
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    RETURN l_status;
   359    lifsong 
   359    lifsong ENDPROCEDURE if_init_ss7u__r;
   359    lifsong 
   359    lifsong 
   359    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE get_alp2_if_vp_info__r;
     2     yanzuo /*
     2     yanzuo  * Acquire the information needed to create the interface and VP
     2     yanzuo  * of the given unit in its WO-ALP1 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit           jiifil__t,
     2     yanzuo     IN      proc_idx       byte,
     2     yanzuo     IN/OUT  alp_unit       jiifil__t,
     2     yanzuo     IN      port_stage     port_stage_t,
     2     yanzuo     IN      cac_knows      bool,
     2     yanzuo     /* output parameters: */
     2     yanzuo     IN/OUT  info           alp1_intf_vp_params__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result               error_t,
     2     yanzuo     mphy                 mphy_port_number_t,
     2     yanzuo     ccac_pid             pid,
     2     yanzuo     ccac_attr            attr_group_t,
     2     yanzuo     target_unit          unit_it_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK result := get_interface_params__r(
     2     yanzuo        unit.procs( 0 ).unit_type,
     2     yanzuo        unit.procs( 0 ).unit_index,
     2     yanzuo        port_stage,
     2     yanzuo        info );
     2     yanzuo   DECISION result;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo            log_write_item_t(@result),1,
     2     yanzuo            log_text_info_t(
     2     yanzuo            @'JIGGER: INTERFACE PARAM REQ #1 FAILURE:'));
     2     yanzuo       RETURN result;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION unit.is_ip_niu;
     2     yanzuo     ( T ):
     2     yanzuo       TASK target_unit.ttype := unit_type_t_any_type_c,
     2     yanzuo            target_unit.index := unit_index_t_any_index_c;
     2     yanzuo     ELSE:
     2     yanzuo       TASK target_unit.ttype := unit.procs(0).unit_type,
     2     yanzuo            target_unit.index := unit.procs(0).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION cac_knows;
     2     yanzuo     (F):
     2     yanzuo       /* Cac does not know subport scheduler for this IF */
     2     yanzuo       RETURN result;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* get scheduler information. */
     2     yanzuo   DECISION get_service__r( central_cac__c, ccac_pid, ccac_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN service_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK mphy := unit.interfaces(1).mphy_port;
     2     yanzuo   /* get scheduling parameters. */
     2     yanzuo 
  1124   huantang 	DECISION app_unit_check__r( unit ) OR app_unit_check__r(alp_unit);
  1124   huantang 		 ( F ):
  1124   huantang 		OUTPUT central_cac_cre_mapping_s(
  1124   huantang 	       mphy,
  1124   huantang 	       unit.procs(0).vpi,
  1124   huantang 	       alp_unit.unit_type,
  1124   huantang 	       alp_unit.unit_index,
  1124   huantang 	       target_unit.ttype,
  1124   huantang 	       target_unit.index,
  1124   huantang 	       service_category_t_nrt_vbr_c )
  1124   huantang 	       TO ccac_pid, SET ATTRIBUTES = ccac_attr
  1124   huantang 		COMMENT 'This message is used to create new subport to mphy port mapping for Agere APC chip';
  1124   huantang 	ELSE:
  1124   huantang 		RETURN result;
  1124   huantang 	ENDDECISION;
     2     yanzuo 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
  1349       pshu   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
  1349       pshu   INPUT ack_timer;
  1349       pshu     RESET ( ack_timer );
  1349       pshu     RETURN message_waiting_timeout_ec;
     2     yanzuo 
     2     yanzuo   INPUT central_cac_cre_mapping_ack_s( info.scheduler_path, status );
     2     yanzuo     DCL
     2     yanzuo        status            error_t;
     2     yanzuo     /* Again, a potential problem: this could be a delayed reply
     2     yanzuo     to some previous request.. */
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo         /*
     2     yanzuo         TASK unit.interfaces(unit.procs(proc_idx).interface_index).
     2     yanzuo         scheduler_subport := info.scheduler_path.scheduler;
     2     yanzuo         */
     2     yanzuo         TASK info.subport_params.sp_param.sp_number :=
     2     yanzuo              info.scheduler_path.scheduler;
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              NIL,0,
     2     yanzuo              log_text_info_t(@'JIGCLU: SUBPORT SCHEDULER NOT AVAILABLE'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@alp_unit.unit_type),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: SOURCE UNIT:'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@unit.procs(proc_idx).unit_type),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: TARGET UNIT:'));
     2     yanzuo         TASK write_to_log(log_type_t_byte_e_c,
     2     yanzuo              log_write_item_t(@mphy),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: MPHY PORT NUMBER:'));
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: RECEIVED ERROR CODE:'));
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_alp2_if_vp_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alp2_extra_if_init__r;
     2     yanzuo /*
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo  FPAR
     2     yanzuo     IN/OUT  nip1    jiifil__t,
     2     yanzuo     IN/OUT  alp1    jiifil__t,
     2     yanzuo     IN/OUT  update  jii_update_info__t;
     2     yanzuo   RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo   ret             error_t,
     2     yanzuo   mphy_port       mphy_port_number_t,
  1012    lifsong   intf_vp_params  alp1_intf_vp_params__t,
  1012    lifsong   update_fields   jii_fields__t;
     2     yanzuo 
     2     yanzuo START;
  1012    lifsong 
  1012    lifsong   CALL jii_fields__t_init_r( update_fields );
  1012    lifsong   TASK jii_fields__t_fset( update_fields, jii_field__t_mphy_port_c );
  1012    lifsong   TASK jii_fields__t_fset( update_fields, jii_field__t_subport_c );
  1012    lifsong 
     2     yanzuo   /* Initialize first port B (NIP-->MXU) */
     2     yanzuo   TASK ret := get_alp2_if_vp_info__r( nip1, 0,
     2     yanzuo        alp1, port_stage_t_s2_s1_c, F, intf_vp_params );
     2     yanzuo   TASK nip1.interfaces(2).scheduler_subport := jig_nip_ipe__t_nip_b_sch_c;
  1012    lifsong   TASK nip1.procs(2).scheduler_subport := nip1.interfaces(2).scheduler_subport;
     2     yanzuo   TASK intf_vp_params.subport_params.sp_param.sp_number :=
     2     yanzuo        nip1.interfaces(2).scheduler_subport;
     2     yanzuo   TASK nip1.interfaces(2).support_added                 := T;
     2     yanzuo   TASK nip1.interfaces(2).mphy_port := mphy_port_number_t (jig_nip_ipe__t_nip_b_mphy_c);
  1012    lifsong   TASK nip1.procs(2).mphy_port := nip1.interfaces(2).mphy_port;
  1012    lifsong 
     2     yanzuo   /* Initialize interface via HMS (IF_setup_r, alp_init_sp_ph1_r, alp_map_virtual_phy_r,
     2     yanzuo   this does not initialize VP)  */
     2     yanzuo   DECISION ret;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK ret := alp1_create_ifvp_hms__r( nip1.hms_address,
     2     yanzuo            nip1.interfaces(2).mphy_port,
     2     yanzuo            intf_vp_params );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ret;
     2     yanzuo     ( success_ec ):
     2     yanzuo       /* Notify PIGPRB immediately. */
     2     yanzuo       TASK ret := intf_notify__r( nip1, 2, mphy_type_t_towards_mxu_c, alp1 );
     2     yanzuo       DECISION ret;
     2     yanzuo       ( success_ec ):
     2     yanzuo          TASK nip1.interfaces(2).intf_exists := T;
     2     yanzuo          CALL flag__r( update, jii_field__t_i3_mphy_sch_c );
     2     yanzuo          CALL flag__r( update, jii_field__t_i3_exists_c );
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   /* Initialize port A (NIP-->PQII) */
     2     yanzuo   TASK mphy_port                    := mphy_port_number_t (jig_nip_ipe__t_nip_a_mphy_c);
     2     yanzuo   TASK nip1.interfaces(1).mphy_port := mphy_port;
  1012    lifsong   TASK nip1.procs(1).mphy_port := nip1.interfaces(1).mphy_port;
  1012    lifsong   
   118    lifsong   DECISION ret;
   118    lifsong     ( success_ec ):  
   118    lifsong         TASK ret := get_alp2_if_vp_info__r( nip1, 1,
   118    lifsong                                             nip1, port_stage_t_s2_s3_c,
   118    lifsong                                             T, intf_vp_params );
   118    lifsong   ENDDECISION;       
     2     yanzuo   /* Set subport scheduler */
     2     yanzuo   TASK nip1.interfaces(1).scheduler_subport := intf_vp_params.scheduler_path.scheduler;
  1012    lifsong   TASK nip1.procs(1).scheduler_subport := nip1.interfaces(1).scheduler_subport;  
     2     yanzuo   TASK nip1.interfaces(1).support_added     := T;
     2     yanzuo   /* Initialize interface via HMS (IF_setup_r, alp_init_sp_ph1_r, alp_map_virtual_phy_r,
     2     yanzuo   this does not initialize VP)  */
     2     yanzuo   DECISION ret;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK ret := alp1_create_ifvp_hms__r( nip1.hms_address,
     2     yanzuo            nip1.interfaces(1).mphy_port,
     2     yanzuo            intf_vp_params );
     2     yanzuo       DECISION ret;
     2     yanzuo         ( success_ec ):
     2     yanzuo           /* Notify PIGPRB immediately. */
     2     yanzuo           TASK ret := intf_notify__r( nip1, 1, mphy_type_t_towards_pq2_c, alp1 );
     2     yanzuo           DECISION ret;
     2     yanzuo             ( success_ec ):
     2     yanzuo               TASK nip1.interfaces(1).intf_exists := T;
     2     yanzuo               TASK nip1.interfaces(1).intf_reporting_needed := T;
     2     yanzuo               TASK nip1.interfaces(1).intf_reported := F;
     2     yanzuo               CALL flag__r( update, jii_field__t_i2_mphy_sch_c );
     2     yanzuo               CALL flag__r( update, jii_field__t_i2_exists_c );
     2     yanzuo               CALL flag__r( update, jii_field__t_i2_rep_need_c );
     2     yanzuo               CALL flag__r( update, jii_field__t_i2_reported_c );
  1012    lifsong               CALL jiifil_update__r( nip1, update_fields, 1);
  1012    lifsong               CALL jiifil_update__r( nip1, update_fields, 2 );              
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ret;
     2     yanzuo ENDPROCEDURE alp2_extra_if_init__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo /*************************************************************************/
     2     yanzuo PROCEDURE dword_le_32__r;
     2     yanzuo  FPAR
     2     yanzuo    IN    dw     dword;
     2     yanzuo  RETURNS dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN ((dw >> 24) & (0xFF)) | ((dw & 0xFF) << 24) | ((dw & 0xFF00) <<8) | ((dw >> 8) & 0xFF00);
     2     yanzuo ENDPROCEDURE dword_le_32__r;
     2     yanzuo 
     2     yanzuo PROCEDURE to_chorus_nat;
     2     yanzuo  FPAR
     2     yanzuo    IN/OUT stream     alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo TYPE padded_apc_rate_pres__t
     2     yanzuo  REPRESENTATION
     2     yanzuo   STRUCT
     2     yanzuo    i_integer  dword; /* 4 */
     2     yanzuo    f_fraction byte;  /* 1 */
     2     yanzuo    dymmy1     byte;  /* 1 */
     2     yanzuo    dummy2     word;  /* 2 */
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE padded_apc_rate_pres__t;
     2     yanzuo 
     2     yanzuo TYPE padded_ing_str_cl234__t
     2     yanzuo  REPRESENTATION
     2     yanzuo   STRUCT
     2     yanzuo    cl__GTS_rate__pres    padded_apc_rate_pres__t;
     2     yanzuo    cl__EBS_wght          dword;
     2     yanzuo    str__wght             dword;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE padded_ing_str_cl234__t;
     2     yanzuo 
     2     yanzuo TYPE padded_egr_str_spt2s__t
     2     yanzuo  REPRESENTATION
     2     yanzuo   STRUCT
     2     yanzuo    cl__SPS_rate__pres    padded_apc_rate_pres__t;
     2     yanzuo    str__wght             dword;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE padded_egr_str_spt2s__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo   ing_str      padded_ing_str_cl234__t,
     2     yanzuo   egr_str      padded_egr_str_spt2s__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ing_str.cl__GTS_rate__pres.i_integer := dword_le_32__r(stream.ing_stream.cl234.cl__GTS_rate__pres.i_integer),
     2     yanzuo        ing_str.cl__GTS_rate__pres.f_fraction:= stream.ing_stream.cl234.cl__GTS_rate__pres.f_fraction,
     2     yanzuo        ing_str.cl__EBS_wght                 := dword_le_32__r(stream.ing_stream.cl234.cl__EBS_wght),
     2     yanzuo        ing_str.str__wght                    := dword_le_32__r(stream.ing_stream.cl234.str__wght);
     2     yanzuo   TASK egr_str.cl__SPS_rate__pres.i_integer := dword_le_32__r(stream.egr_stream.spt2s.cl__SPS_rate__pres.i_integer),
     2     yanzuo        egr_str.cl__SPS_rate__pres.f_fraction:=                stream.egr_stream.spt2s.cl__SPS_rate__pres.f_fraction,
     2     yanzuo        egr_str.str__wght                     := dword_le_32__r(stream.egr_stream.spt2s.str__wght);
     2     yanzuo   TASK memcpy(bytepointer (@stream.ing_stream.cl234), bytepointer (@ing_str), SIZEOF(padded_ing_str_cl234__t));
     2     yanzuo   TASK memcpy(bytepointer (@stream.egr_stream.spt2s), bytepointer (@egr_str), SIZEOF(padded_egr_str_spt2s__t));
     2     yanzuo ENDPROCEDURE to_chorus_nat;
     2     yanzuo 
     2     yanzuo PROCEDURE alp2_hconn_operation__r;
     2     yanzuo FPAR
     2     yanzuo     IN  alp2_hms_addr    hms_address_t,
     2     yanzuo     IN  alp2_unit_type   unit_type_t,
     2     yanzuo     IN  alp2_unit_index  unit_index_t,
     2     yanzuo     IN  req_mode         request_mode_t,
     2     yanzuo     IN  outw_mphy        mphy_port_number_t,
     2     yanzuo     IN  inw_mphy         mphy_port_number_t,
     2     yanzuo     IN  vpi              vpi_t,
     2     yanzuo     IN  vci              vci_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     alp2_fig_hdr         fig_msg_header_t,
     2     yanzuo     ec                   error_t,
     2     yanzuo     vci_outw             vci_t,
     2     yanzuo     tp_outw              tp_config_par_t,
     2     yanzuo     tp_inw               tp_config_par_t,
     2     yanzuo     tm_params_egr        alp_tp_streams_t,
     2     yanzuo     tm_params_ing        alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Get NIP1 internal APC traffic mgmt params ready. */
  1222      tinyu   TASK ec := get_traf_manag_params__r(
     2     yanzuo        alp2_unit_index,
     2     yanzuo        vpi,
     2     yanzuo        outw_mphy,
     2     yanzuo        alp2_unit_type,
     2     yanzuo        alp2_unit_index,
     2     yanzuo        tm_params_egr,
     2     yanzuo        tm_params_ing);
     2     yanzuo   DECISION ec;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       RETURN ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* prepare constant parts */
     2     yanzuo   TASK alp2_fig_hdr.hms_address   := alp2_hms_addr,
     2     yanzuo        alp2_fig_hdr.extended_addr := 0;
     2     yanzuo   TASK tm_params_egr.mport      := outw_mphy,
     2     yanzuo        tm_params_egr.ing_able   := abled_flag_t_enabled_c,
     2     yanzuo        tm_params_egr.egr_able   := abled_flag_t_enabled_c,
     2     yanzuo        tm_params_egr.local_conn_id := xconn_id_t_unspecified_c,
     2     yanzuo        tm_params_egr.gen_ing_stream.epd_ppd_info.epd := T,
     2     yanzuo        tm_params_egr.gen_ing_stream.epd_ppd_info.ppd := T,
     2     yanzuo        tm_params_egr.gen_egr_stream.epd_ppd_info.epd := T,
     2     yanzuo        tm_params_egr.gen_egr_stream.epd_ppd_info.ppd := T;
     2     yanzuo   TASK tm_params_ing.mport              := inw_mphy,
     2     yanzuo        tm_params_ing.ing_able           := abled_flag_t_enabled_c,
     2     yanzuo        tm_params_ing.egr_able           := abled_flag_t_enabled_c,
     2     yanzuo        tm_params_ing.local_conn_id      := xconn_id_t_unspecified_c,
     2     yanzuo        tm_params_ing.gen_ing_stream.epd_ppd_info.epd := T,
     2     yanzuo        tm_params_ing.gen_ing_stream.epd_ppd_info.ppd := T,
     2     yanzuo        tm_params_ing.gen_egr_stream.epd_ppd_info.epd := T,
     2     yanzuo        tm_params_ing.gen_egr_stream.epd_ppd_info.ppd := T;
     2     yanzuo   /* workaround for KARJAA bug with scheduling subport parameter */
     2     yanzuo   DECISION ( jig_nip_ipe__t_nip_b_sch_c /= 31 ) AND
     2     yanzuo            ( tm_params_ing.egr_subport.sp__id = 31 );
     2     yanzuo     ( T ):
     2     yanzuo       TASK tm_params_ing.egr_subport.sp__id := jig_nip_ipe__t_nip_b_sch_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Create/delete VCIs to NIP1's APC */
     2     yanzuo   TASK tp_outw.request_mode              := req_mode,
     2     yanzuo        tp_outw.mport                     := outw_mphy,
     2     yanzuo        tp_outw.vpi                       := vpi,
     2     yanzuo        tp_outw.vci                       := vci,
     2     yanzuo        tp_outw.tp_in_topology            := tp_in_topology_t_uc_c,
     2     yanzuo        tp_outw.local_conn_id             := xconn_id_t_unspecified_c,
     2     yanzuo        tp_outw.xconn_info.fabric_port    := fabric_port_number_t_unspec_c,
     2     yanzuo        tp_outw.xconn_info.remote_connid  := xconn_id_t_unspecified_c,
     2     yanzuo        tp_outw.oam_conf.segment_ep       := end_point_t_not_in_segment_c,
     2     yanzuo        tp_outw.tp_config_mode            := tp_config_mode_t_vc_c,
     2     yanzuo        tp_outw.policing.monitor_mode     := abled_flag_t_disabled_c,
     2     yanzuo        tp_outw.policing.bucket_a.mode    := alp_pol_conf_t_disable_pol_c,
     2     yanzuo        tp_outw.policing.bucket_b.mode    := alp_pol_conf_t_disable_pol_c,
     2     yanzuo        tp_inw.request_mode               := req_mode,
     2     yanzuo        tp_inw.mport                      := inw_mphy,
     2     yanzuo        tp_inw.vpi                        := vpi,
     2     yanzuo        tp_inw.vci                        := vci,
     2     yanzuo        tp_inw.tp_in_topology             := tp_in_topology_t_uc_c,
     2     yanzuo        tp_inw.local_conn_id              := xconn_id_t_unspecified_c,
     2     yanzuo        tp_inw.xconn_info.fabric_port     := fabric_port_number_t_unspec_c,
     2     yanzuo        tp_inw.xconn_info.remote_connid   := xconn_id_t_unspecified_c,
     2     yanzuo        tp_inw.oam_conf.segment_ep        := end_point_t_not_in_segment_c,
     2     yanzuo        tp_inw.tp_config_mode             := tp_config_mode_t_vc_c,
     2     yanzuo        tp_inw.policing.monitor_mode      := abled_flag_t_disabled_c,
     2     yanzuo        tp_inw.policing.bucket_a.mode     := alp_pol_conf_t_disable_pol_c,
     2     yanzuo        tp_inw.policing.bucket_b.mode     := alp_pol_conf_t_disable_pol_c;
     2     yanzuo 
  1124   huantang   OUTPUT alp_config_tp_s( alp2_fig_hdr, tp_outw, tp_inw ) TO hms_forwarder;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_hms_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_hms_ack;
     2     yanzuo   SAVE alp_config_tp_ack_s, alp_config_stream_ack_s;
     2     yanzuo 
     2     yanzuo   INPUT hms_ack_s;
     2     yanzuo     NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_hms_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT alp_config_tp_ack_s ( fig_h2, ec, ?, ?, vci_outw, ?, ?, ? );
     2     yanzuo     DCL
     2     yanzuo        fig_h2  fig_msg_header_t;
     2     yanzuo     DECISION ( fig_h2.hms_address /= alp2_fig_hdr.hms_address ) OR
     2     yanzuo              ( vci_outw /= tp_outw.vci );
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION (ec /= success_ec) OR (req_mode /= request_mode_t_create_c);
     2     yanzuo       ( T ):
     2     yanzuo         DECISION ec;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                  @'JIGDAT: alp_config_tp_s failed: %04X'
     2     yanzuo                  'hms_address = %04X, op = %d, vci = %02X',
     2     yanzuo                  ec, alp2_fig_hdr.hms_address, req_mode, vci );
     2     yanzuo         ENDDECISION;
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo         RETURN ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* Create cross connection to NIP1 APC */
     2     yanzuo     TASK tm_params_egr.vci := vci,
     2     yanzuo          tm_params_ing.vci := vci;
     2     yanzuo     /* Convert to chorus byte order & alignment */
     2     yanzuo     CALL to_chorus_nat(tm_params_egr);
     2     yanzuo     CALL to_chorus_nat(tm_params_ing);
     2     yanzuo 
  1124   huantang     OUTPUT alp_config_stream_s(alp2_fig_hdr,
     2     yanzuo              tm_params_egr, tm_params_ing) TO hms_forwarder;
     2     yanzuo     NEXTSTATE waiting_hms_ack;
     2     yanzuo 
     2     yanzuo   INPUT alp_config_stream_ack_s(?,ec,?,?,vci_outw,?,?,?);
     2     yanzuo     DECISION vci_outw;
     2     yanzuo       ( /= vci ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     RETURN ec;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE alp2_hconn_operation__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE nip_brt_xconn_create__r;
     2     yanzuo /*
     2     yanzuo  * Batch create nrt internal xcross connection via RS3PRB/KREIVI,
     2     yanzuo  for SP-APP unit, the xconn request will sent to WO-APP unit too
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN          in_unit                 jiifil__t,
     2     yanzuo    IN/OUT  io_brtpid          pid,
     2     yanzuo    IN       in_path_info               half_cconn_phy_info_t,
     2     yanzuo    IN       in_one_vcc_res    jig_one_vcc_resources__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_update_list                    update_list_t,
     2     yanzuo    l_ec                             error_t,
     2     yanzuo    l_dest_conn_info              xconn_dest_info_t,
     2     yanzuo    l_tpi                            tpi_t,
     2     yanzuo    l_traf_para                      atm_aal2_traf_para_t,
     2     yanzuo    l_create_state                atm_cre_state_t;
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    TASK  l_tpi.level  := tpi_level_t_vc_c,
     2     yanzuo          l_tpi.interf := in_unit.interfaces(0).intf_id,
     2     yanzuo          l_tpi.vpi    := in_unit.procs(0).vpi,
     2     yanzuo          l_tpi.vci    := in_one_vcc_res.vci;
     2     yanzuo 
     2     yanzuo    TASK  l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
     2     yanzuo          l_traf_para.para.intern.ing.category                  := in_one_vcc_res.serv_category,
     2     yanzuo          l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
     2     yanzuo          l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo          l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.egr.category                  := in_one_vcc_res.serv_category,
     2     yanzuo          l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
     2     yanzuo          l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo          l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    TASK  memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo    TASK  l_dest_conn_info.fabric_port   := in_one_vcc_res.dest_fabric_port,
     2     yanzuo          l_dest_conn_info.remote_connid := in_one_vcc_res.remote_xconn_id;
     2     yanzuo    TASK  l_create_state := atm_cre_state_t_new_object_c;
     2     yanzuo 
     2     yanzuo    OUTPUT   int_half_xc_create_req_s ( l_tpi,
     2     yanzuo                                  in_one_vcc_res.xconn_id,
     2     yanzuo                                                 l_dest_conn_info,
     2     yanzuo                                                 l_create_state,
     2     yanzuo                                                 atm_usage_tag_t_ic_ud_c,
     2     yanzuo                                                 l_traf_para,
     2     yanzuo                                                 end_point_t_not_in_segment_c,
     2     yanzuo                                                 traffic_shaping_t (.
     2     yanzuo                                                 shaping_option_t_none_c,
     2     yanzuo                                                 shaping_option_t_none_c .),
     2     yanzuo                                                 abled_flag_t_disabled_c,
     2     yanzuo                                                 abled_flag_t_disabled_c,
     2     yanzuo                                                 abled_flag_t_enabled_c,
     2     yanzuo                                                 cdvt_t_unspecified_c,
     2     yanzuo                                                 rm_owner_id_t_unspecified_c,
     2     yanzuo                                                 in_path_info,
     2     yanzuo                                                 l_update_list ) TO io_brtpid;
     2     yanzuo    SET ( NOW + (6*ack_waiting_time__c)/5, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo    INPUT int_half_xc_create_ack_s( l_tpi,l_ec);
     2     yanzuo    RESET (ack_timer);
     2     yanzuo    RETURN l_ec;
     2     yanzuo 
     2     yanzuo INPUT ack_timer;
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE nip_brt_xconn_create__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alp2_create_conn_hms__r;
     2     yanzuo /*
     2     yanzuo  * This procedures sends half-connection creation request to ALP2 unit
     2     yanzuo  * via DMX, and waits for response. If the creation succeeds, the
     2     yanzuo  * procedure updates half-connection state in JICFIL via the master.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     /* address and mphy port number of the ALP2 unit. */
     2     yanzuo     IN      alp2_addr      phys_address_t,
     2     yanzuo 
     2     yanzuo     /* computers at the other end of the half-connections: */
     2     yanzuo     IN      endpoint1_addr phys_address_t,
     2     yanzuo     IN      endpoint2_addr phys_address_t,
     2     yanzuo 
     2     yanzuo     IN/OUT  nip1           jiifil__t,
     2     yanzuo     IN/OUT  alp1           jiifil__t;
     2     yanzuo 
     2     yanzuo    /* IN/OUT     tm_params_apc  alp_tp_streams_t; */
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     vcc_params           jig_vccs_params__t,
     2     yanzuo     vcc_res              jig_vccs_resources__t,
     2     yanzuo     vcc_idx              dword := 0,
     2     yanzuo     n_created_hconns     dword := 0,
     2     yanzuo     ec                   error_t,
    96      h10hu     con_state_ec         error_t,
     2     yanzuo     hconns               vc_half_conn_array_t,
     2     yanzuo     tm_params_apc        alp_tp_streams_t,
     2     yanzuo     l_path_info   		half_cconn_phy_info_t,
     2     yanzuo     l_brtpid      			pid;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* get info about all connections of the unit so that the master
     2     yanzuo   allocates VCIs for all of them. */
     2     yanzuo   TASK ec := collect_connections__r( alp2_addr,
     2     yanzuo        computer_t_any_c,
     2     yanzuo        vcc_params );
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
  1248      tinyu        DECISION (vcc_params.item_count = 0);
  1248      tinyu        (T):
  1248      tinyu           TASK dxsyslog_r( log_type_t_text_i_c,
  1248      tinyu                      @'JIGCLU: alp2_create_conn_hms__r'
  1248      tinyu                       'collect_connections__r item_cout =0 '
  1248      tinyu                       'alp2_addr = %04X',
  1248      tinyu                       alp2_addr);
  1248      tinyu                       
  1248      tinyu            RETURN error_on_conn_ec;
  1248      tinyu        ENDDECISION;
     2     yanzuo       TASK ec := get_conn_resources__r( alp2_addr,
     2     yanzuo            F, /* not-existing conns only */
     2     yanzuo            T, /* nRT conns only */
     2     yanzuo            vcc_params,
     2     yanzuo            vcc_res );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       /* Get ALP1 APC traffic management parameters ready. */
     2     yanzuo       DECISION app_unit_check__r( alp1 );
     2     yanzuo       (F):
  1222      tinyu          TASK ec := get_traf_manag_params__r(
     2     yanzuo               nip1.unit_index,
     2     yanzuo               nip1.procs(0).vpi,
     2     yanzuo               nip1.interfaces(0).mphy_port,
     2     yanzuo               alp1.unit_type,
     2     yanzuo               alp1.unit_index,
     2     yanzuo               tm_params_apc,
     2     yanzuo               tm_params_dummy);
     2     yanzuo          /* ------- Some extra inits copied from A4.1 JIGGER version: */
     2     yanzuo          TASK tm_params_apc.gen_ing_stream.epd_ppd_info.epd := T,
     2     yanzuo               tm_params_apc.gen_ing_stream.epd_ppd_info.ppd := T,
     2     yanzuo               tm_params_apc.gen_egr_stream.epd_ppd_info.epd := T,
     2     yanzuo               tm_params_apc.gen_egr_stream.epd_ppd_info.ppd := T;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       RETURN ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* find the one or two connections to be created. */
     2     yanzuo   TASK vcc_idx := 0;
     2     yanzuo   WHILE vcc_idx < vcc_res.item_count;
     2     yanzuo     DECISION vcc_res.res( vcc_idx ).target_comp;
     2     yanzuo       ( endpoint1_addr,
     2     yanzuo       endpoint2_addr ):
     2     yanzuo         TASK ec := alp2_hconn_operation__r(
     2     yanzuo              nip1.hms_address,
     2     yanzuo              nip1.unit_type,
     2     yanzuo              nip1.unit_index,
     2     yanzuo              request_mode_t_create_c,
     2     yanzuo              nip1.interfaces(1).mphy_port,
     2     yanzuo              nip1.interfaces(2).mphy_port,
     2     yanzuo              nip1.procs(0).vpi,
     2     yanzuo              vcc_res.res(vcc_idx).vci);
     2     yanzuo         DECISION ec;
     2     yanzuo           ( success_ec ):
     2     yanzuo             DECISION app_unit_check__r( alp1 );
     2     yanzuo             (F):/*nip connect to APC MXU*/
     2     yanzuo                /* create half-connection in the MXU where the NIP1 is cabled */
     2     yanzuo                DECISION tm_params_apc.ingress_sel;
     2     yanzuo                  ( apc_ing_stream_t_cl1_c ):
     2     yanzuo                    TASK tm_params_apc.ing_stream.cl1.dest_fabric_port_number :=
     2     yanzuo                         vcc_res.res(vcc_idx).dest_fabric_port;
     2     yanzuo                ENDDECISION;
     2     yanzuo                TASK hconns.item_count            := 1,
     2     yanzuo                     hconns.item(0).vci           := vcc_res.res(vcc_idx).vci,
     2     yanzuo                     hconns.item(0).local_conn_id := vcc_res.res(vcc_idx).xconn_id,
     2     yanzuo                     hconns.item(0).xconn_info.fabric_port := vcc_res.res(vcc_idx).dest_fabric_port,
     2     yanzuo                     hconns.item(0).xconn_info.remote_connid := vcc_res.res(vcc_idx).remote_xconn_id;
     2     yanzuo                TASK ec := hconns_operation__r(alp1.procs(0).phys_addr,
     2     yanzuo                     alp1.co_alp_unit_phys_addr,
     2     yanzuo                     alp1.co_alp_unit_updated,
     2     yanzuo                     request_mode_t_create_c,
     2     yanzuo                     nip1.procs(0).mphy_port,
     2     yanzuo                     nip1.procs(0).vpi,
     2     yanzuo                     hconns,
     2     yanzuo                     tm_params_apc);
     2     yanzuo                DECISION ec;
     2     yanzuo                  ( success_ec ):
     2     yanzuo                    DECISION n_created_hconns;
     2     yanzuo                      ( < vcc_idx ):
     2     yanzuo                        TASK vcc_res.res( n_created_hconns ) :=
     2     yanzuo                             vcc_res.res( vcc_idx );
     2     yanzuo                    ENDDECISION;
     2     yanzuo                    TASK n_created_hconns := n_created_hconns + 1;
     2     yanzuo                ENDDECISION;
     2     yanzuo             ELSE:/*nip connect to APP MXU*/
     2     yanzuo                CALL	get_brt_pid__r(alp1.unit_type, alp1.procs(0).phys_addr,l_brtpid);
     2     yanzuo                CALL  get_path_info__r( nip1, alp1, 0, l_path_info );
     2     yanzuo 		         TASK ec := nip_brt_xconn_create__r (	nip1,
     2     yanzuo    													   	l_brtpid,
     2     yanzuo    													   	l_path_info,
     2     yanzuo    													   	vcc_res.res(vcc_idx));
     2     yanzuo                DECISION ec;
     2     yanzuo                ( success_ec ):
     2     yanzuo                    DECISION n_created_hconns;
     2     yanzuo                      ( < vcc_idx ):
     2     yanzuo                        TASK vcc_res.res( n_created_hconns ) :=
     2     yanzuo                             vcc_res.res( vcc_idx );
     2     yanzuo                    ENDDECISION;
     2     yanzuo                    TASK n_created_hconns := n_created_hconns + 1;
     2     yanzuo                ELSE:
     2     yanzuo                   OUT  search;
     2     yanzuo                ENDDECISION;
     2     yanzuo             ENDDECISION;
     2     yanzuo         ELSE:
    96      h10hu             OUT  search;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK vcc_idx := vcc_idx + 1;
     2     yanzuo   ENDWHILE search;
     2     yanzuo   DECISION n_created_hconns;
     2     yanzuo     ( > 0 ):
     2     yanzuo       TASK vcc_res.item_count := n_created_hconns;
    96      h10hu       /*update connection status if only there is connection created on MXU so that later it could be correctly released when needed*/
    96      h10hu       TASK con_state_ec := update_half_conn_states__r( alp2_addr,
     2     yanzuo            vcc_res,
     2     yanzuo            T );
    96      h10hu       DECISION ( ec = success_ec );
    96      h10hu       ( T ):
    96      h10hu            RETURN con_state_ec;
    96      h10hu       ENDDECISION;      
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE alp2_create_conn_hms__r;
     2     yanzuo 
     2     yanzuo /******************************************************************/
     2     yanzuo PROCEDURE cre_nip1_vpi_conn__r;
     2     yanzuo   FPAR
     2     yanzuo     IN/OUT nip1             jiifil__t,
     2     yanzuo     IN/OUT alp1             jiifil__t,
     2     yanzuo     IN     intf_vp_params   alp1_intf_vp_params__t;
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status              error_t,
     2     yanzuo     vpctp_conf_outw     vpctp_setup_req_t,
     2     yanzuo     vpctp_conf_inw      vpctp_setup_req_t,
     2     yanzuo     dummy_serv_attr     attr_group_t,
     2     yanzuo     hms_address         fig_msg_header_t,
   216      h10hu     hms_forwarder        pid;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK hms_address.hms_address := nip1.hms_address,
     2     yanzuo        hms_address.extended_addr := 0;
     2     yanzuo   TASK vpctp_conf_outw.request_mode := request_mode_t_create_c,
     2     yanzuo        vpctp_conf_outw.mphy_port_number := nip1.interfaces(1).mphy_port,
     2     yanzuo        vpctp_conf_outw.vpi := nip1.procs(0).vpi,
     2     yanzuo        vpctp_conf_outw.vci_bits := intf_vp_params.max_vci_bits,
     2     yanzuo        vpctp_conf_outw.oam_conf.segment_ep := end_point_t_not_in_segment_c;
     2     yanzuo   TASK vpctp_conf_inw.request_mode := request_mode_t_create_c,
     2     yanzuo        vpctp_conf_inw.mphy_port_number := nip1.interfaces(2).mphy_port,
     2     yanzuo        vpctp_conf_inw.vpi := nip1.procs(0).vpi,
     2     yanzuo        vpctp_conf_inw.vci_bits := intf_vp_params.max_vci_bits,
     2     yanzuo        vpctp_conf_inw.oam_conf.segment_ep := end_point_t_not_in_segment_c;
     2     yanzuo   DECISION get_service__r( hms_forwarding__c, hms_forwarder,
     2     yanzuo            dummy_serv_attr );
     2     yanzuo     ( F ):
     2     yanzuo       TASK hms_forwarder := orig_hms_forwarder;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
  1124   huantang   OUTPUT vpctp_setup_s ( hms_address, vpctp_conf_outw, vpctp_conf_inw ) TO hms_forwarder;
  1124   huantang 
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT vpctp_setup_ack_s ( hms_address, status, vpctp_conf_outw, vpctp_conf_inw );
     2     yanzuo     DECISION ( vpctp_conf_outw.mphy_port_number = nip1.interfaces(1).mphy_port );
     2     yanzuo       ( T ):
     2     yanzuo         DECISION ( status /= success_ec );
     2     yanzuo           ( T ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                  @'JIGCLU: vpctp_setup_s failed: %04X'
     2     yanzuo                  'hms_address = %04X intf = %04X',
     2     yanzuo                  status,
     2     yanzuo                  nip1.hms_address,
     2     yanzuo                  nip1.interfaces(1).intf_id );
     2     yanzuo             RETURN status;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK status := alp2_create_conn_hms__r(nip1.procs(0).phys_addr,
     2     yanzuo          own_unit_phys_addr,
     2     yanzuo          own_unit_phys_addr ^ 1,
     2     yanzuo          nip1,
     2     yanzuo          alp1);
    96      h10hu     RESET ( ack_timer );
     2     yanzuo     RETURN status;
    96      h10hu     
    96      h10hu   INPUT ack_timer;
    96      h10hu     RETURN message_waiting_timeout_ec;
    96      h10hu   
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE cre_nip1_vpi_conn__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_xconn_remove__r;
     2     yanzuo /*
     2     yanzuo   * Remove nrt internal xcross connection via RS3PRB/KREIVI, called by CLUSTER hand
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1177      myang    IN VIEWED  in_unit        jiifil__t,
    73     jamema    IN/OUT   io_brtpid      pid,
    73     jamema    IN 		in_path_info   half_cconn_phy_info_t,
    73     jamema    IN     	in_one_vcc_res jig_one_vcc_resources__t,
    73     jamema    IN       proc_idx       byte;
     2     yanzuo RETURNS
    73     jamema    error_t;
     2     yanzuo 
     2     yanzuo DCL
    73     jamema    l_update_list           update_list_t,
    73     jamema    l_ec                    error_t,
    73     jamema    l_dest_conn_info        xconn_dest_info_t,
    73     jamema    l_tpi                   tpi_t,
   216      h10hu    l_traf_para             atm_aal2_traf_para_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
    73     jamema       TASK  l_tpi.level  := tpi_level_t_vc_c,
    73     jamema             l_tpi.interf := in_unit.interfaces(in_unit.procs(proc_idx).interface_index).intf_id,
    73     jamema             l_tpi.vpi    := in_unit.procs(proc_idx).vpi,
    73     jamema             l_tpi.vci    := in_one_vcc_res.vci;
     2     yanzuo 
    73     jamema       TASK  l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
    73     jamema             l_traf_para.para.intern.ing.category                  := in_one_vcc_res.serv_category,
    73     jamema             l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
    73     jamema             l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
    73     jamema             l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
    73     jamema             l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
    73     jamema             l_traf_para.para.intern.egr.category                  := in_one_vcc_res.serv_category,
    73     jamema             l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
    73     jamema             l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
    73     jamema             l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
    73     jamema             l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 	TASK 	memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo 	TASK 	l_dest_conn_info.fabric_port   := in_one_vcc_res.dest_fabric_port,
     2     yanzuo        		l_dest_conn_info.remote_connid := in_one_vcc_res.remote_xconn_id;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 	OUTPUT 	int_half_xc_release_req_s (	l_tpi,
     2     yanzuo 											in_one_vcc_res.xconn_id,
     2     yanzuo                                      	 			l_dest_conn_info,
     2     yanzuo                                       				l_traf_para,
     2     yanzuo                                       				cdvt_t_unspecified_c,
     2     yanzuo                                       				atm_usage_tag_t_ic_ud_c,
     2     yanzuo                                       				atm_cre_state_t_new_object_c,
     2     yanzuo                                       				in_path_info,
     2     yanzuo                                       				l_update_list ) TO io_brtpid;
   961    lifsong         SET ( NOW + ack_waiting_brt_conn_time__c, ack_timer ); 
     2     yanzuo         NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo 	INPUT int_half_xc_release_ack_s( l_tpi, l_ec);
     2     yanzuo 	RESET (ack_timer);
     2     yanzuo 	RETURN l_ec;
  1015    lifsong 
  1015    lifsong 	INPUT hand_supervision_msg_s;
  1015    lifsong     OUTPUT hand_supervision_ack_s TO SENDER,
  1015    lifsong              SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
  1015    lifsong       NEXTSTATE -;
  1015    lifsong       	
     2     yanzuo INPUT ack_timer;
     2     yanzuo 	RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE brt_xconn_remove__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init_alp2__r;
     2     yanzuo /*
     2     yanzuo  * Initialize NIP1 interface + VP + half-connection(s) to OMU(s).
     2     yanzuo  * This is quite complicated because it requires actions both in
     2     yanzuo  * MXU(s) and in the NIP1.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  alp2_unit    jiifil__t,
     2     yanzuo     IN/OUT  alp1_unit    jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     res                  error_t,
     2     yanzuo     intf_vp_params       alp1_intf_vp_params__t,
     2     yanzuo     dummy_byte           byte := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Get interface ids (3) and mphy (for MXU) & subport (for MXU) */
     2     yanzuo   /* TODO: If IVBEER changes VPI 0 to VPI X then we have subport
     2     yanzuo   scheduler mapped wrongly...
     2     yanzuo   */
     2     yanzuo   TASK res := get_alp1_if_vp_info__r( alp2_unit, 0,
     2     yanzuo        alp1_unit, intf_vp_params );
   118    lifsong   DECISION res /= success_ec;
   118    lifsong   ( T ):
   118    lifsong     RETURN res;
   118    lifsong   ENDDECISION;    
     2     yanzuo   /* Create MXU interface if not exists */
     2     yanzuo   DECISION app_unit_check__r( alp1_unit );
     2     yanzuo   (T):
     2     yanzuo      TASK res := if_init_app_trib__r ( alp2_unit, dummy_byte, alp1_unit, update );
     2     yanzuo   ELSE:
     2     yanzuo   	TASK res := if_init_trib2__r( alp2_unit, dummy_byte, alp1_unit );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION res /= success_ec;
     2     yanzuo     (T):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: If_init_trib2__r failed: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            res,
     2     yanzuo            alp2_unit.procs(0).unit_type,
     2     yanzuo            alp2_unit.procs(0).unit_index );
     2     yanzuo       RETURN res;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Report MXU IF to PIGPRB */
     2     yanzuo   TASK res := intf_notify__r( alp2_unit, 0, mphy_type_t_mxu_c, alp1_unit );
     2     yanzuo   DECISION res /= success_ec;
     2     yanzuo     (T):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: trib2 intf_notify__r failed: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            res,
     2     yanzuo            alp2_unit.procs(0).unit_type,
     2     yanzuo            alp2_unit.procs(0).unit_index );
     2     yanzuo       RETURN res;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Create MXU VPI if not exists */
     2     yanzuo   DECISION app_unit_check__r( alp1_unit );
   857     z7zhou   (F):  TASK res := whisky_crt_vp__r(alp2_unit, 0, alp1_unit, intf_vp_params);
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION res /= success_ec;
     2     yanzuo     (T):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: trib2 create_vpi_via_dmx__r failed: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            res,
     2     yanzuo            alp2_unit.procs(0).unit_type,
     2     yanzuo            alp2_unit.procs(0).unit_index );
     2     yanzuo       RETURN res;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* INIT NIP1 A & B interfaces */
     2     yanzuo   TASK res := alp2_extra_if_init__r(alp2_unit, alp1_unit, update);
     2     yanzuo   DECISION res /= success_ec;
     2     yanzuo     (T):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: trib2 alp2_extra_if_init__r failed: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            res,
     2     yanzuo            alp2_unit.procs(0).unit_type,
     2     yanzuo            alp2_unit.procs(0).unit_index );
     2     yanzuo       RETURN res;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Create VPIs for NIP APC, both at the same time */
     2     yanzuo   TASK res := cre_nip1_vpi_conn__r(alp2_unit, alp1_unit, intf_vp_params);
     2     yanzuo   DECISION res /= success_ec;
     2     yanzuo     (T):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: Cre_nip1_vpi_conn failed: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            res,
     2     yanzuo            alp2_unit.procs(0).unit_type,
     2     yanzuo            alp2_unit.procs(0).unit_index );
     2     yanzuo       RETURN res;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN success_ec;
     2     yanzuo ENDPROCEDURE if_init_alp2__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_send_params__r;
     2     yanzuo /*
     2     yanzuo  * Get and send ATM interface parameters to the target unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  tributary    jiifil__t,
     2     yanzuo     IN      proc_idx     hms_processor_index_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     fig_hdr              fig_msg_header_t,
     2     yanzuo     status               error_t,
     2     yanzuo     utype                unit_type_t,
     2     yanzuo     uindex               unit_index_t,
     2     yanzuo     serv_pid             pid,
     2     yanzuo     serv_attr            attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* see JIGMASGX.SDL:
     2     yanzuo   mssar_params__r, pqsar_params__r */
     2     yanzuo   DECISION get_service__r( atm_config_params__c, serv_pid, serv_attr );
     2     yanzuo   ( F ):
     2     yanzuo       RETURN unsuccessfull_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK fig_hdr.hms_address   := tributary.hms_address,
     2     yanzuo        fig_hdr.extended_addr := proc_idx;
     2     yanzuo 
     2     yanzuo   DECISION tributary.procs(proc_idx).has_pqsar;
     2     yanzuo   ( T ):
     2     yanzuo      OUTPUT get_pqii_param_req_s( tributary.procs(proc_idx).unit_type,
     2     yanzuo                                   tributary.procs(proc_idx).unit_index )
     2     yanzuo                                   TO serv_pid, SET ATTRIBUTES = serv_attr;
     2     yanzuo   ELSE:
     2     yanzuo      OUTPUT get_mssar_param_req_s( tributary.procs(proc_idx).unit_type,
     2     yanzuo                                    tributary.procs(proc_idx).unit_index )
     2     yanzuo                                    TO serv_pid, SET ATTRIBUTES = serv_attr;
     2     yanzuo   ENDDECISION;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE wait_for_params;
     2     yanzuo 
     2     yanzuo STATE wait_for_params
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK status := message_waiting_timeout_ec;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGCLU: Interface param req failure: %04X'
     2     yanzuo          '  unit type  %04X'
     2     yanzuo          '  unit index %04X',
     2     yanzuo          status,
     2     yanzuo          tributary.procs(proc_idx).unit_type,
     2     yanzuo          tributary.procs(proc_idx).unit_index );
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT get_mssar_param_ack_s( status, utype, uindex, mssar_params );
     2     yanzuo     DCL
     2     yanzuo        mssar_params        mssar_gg1_t,
     2     yanzuo        l_target_unit       unit_it_t,
     2     yanzuo        l_unit_state        unit_state_t;
     2     yanzuo 
     2     yanzuo     DECISION utype = tributary.procs(proc_idx).unit_type
     2     yanzuo              AND
     2     yanzuo              uindex = tributary.procs(proc_idx).unit_index;
     2     yanzuo     ( F ):
     2     yanzuo        NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo 
   468     jamema     DECISION status;
   468     jamema     (/=success_ec):
   468     jamema       RETURN status;
   468     jamema     ENDDECISION;
   468     jamema 
     2     yanzuo     TASK l_target_unit.ttype := tributary.procs(proc_idx).unit_type,
     2     yanzuo          l_target_unit.index := tributary.procs(proc_idx).unit_index;
     2     yanzuo 
     2     yanzuo     DECISION ((unit_main_state__r(l_target_unit, l_unit_state)=success_ec)AND
     2     yanzuo               (l_unit_state = unit_state_t_te_c));
     2     yanzuo     (T):
     2     yanzuo        TASK mssar_params.peer_fb_queue_size := 256;/*Added since 1.37-0*/
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     OUTPUT res_mssar_int_if_param_ack_s( fig_hdr, success_ec,
     2     yanzuo            mssar_params ) TO hms_forwarder;
     2     yanzuo 
     2     yanzuo     CALL get_internal_hms_ack__r();
     2     yanzuo     RETURN success_ec;
     2     yanzuo 
     2     yanzuo   INPUT get_pqii_param_ack_s( status, utype, uindex,
     2     yanzuo         pqsar_params, ?, max_vpi_bits, vpi_mask, vci_mask );
     2     yanzuo     DCL
     2     yanzuo        pqsar_params      pqsar_gg1_t,
     2     yanzuo        max_vpi_bits      vpi_bits_t,
     2     yanzuo        vpi_mask          vpi_t,
     2     yanzuo        vci_mask          vci_t;
     2     yanzuo     DECISION utype = tributary.procs(proc_idx).unit_type
     2     yanzuo              AND
     2     yanzuo              uindex = tributary.procs(proc_idx).unit_index;
     2     yanzuo       ( F ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo 
   468     jamema     DECISION status;
   468     jamema     (/=success_ec):
   468     jamema       RETURN status;
   468     jamema     ENDDECISION;
   468     jamema 
     2     yanzuo     /*Hardcode max_vpi_bits value with the requirments comes from CR16906*/
     2     yanzuo     DECISION proc_idx = 0;
     2     yanzuo     (T):
     2     yanzuo       DECISION   tributary.fig_req_rphase = fig_reset_phase_t_cho_flash_c;
     2     yanzuo       (T):
     2     yanzuo          TASK  max_vpi_bits := 2;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr1_min_rate_cellps1 := pqsar_params.sched_table_info.line_rate_rate__cellps1/pqsar_params.sched_table_info.sch_table_CPS/10;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr2_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr3_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr4_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr5_min_rate_cellps1 := 0;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr6_min_rate_cellps1 := 0;         
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       DECISION  tributary.procs(proc_idx).boot_loading;
     2     yanzuo       (T):
     2     yanzuo          TASK  max_vpi_bits := 2;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr1_min_rate_cellps1 := pqsar_params.sched_table_info.line_rate_rate__cellps1/pqsar_params.sched_table_info.sch_table_CPS/10;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr2_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr3_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr4_min_rate_cellps1 := pqsar_params.sched_table_info.pr1_min_rate_cellps1;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr5_min_rate_cellps1 := 0;
    82    lifsong          TASK  pqsar_params.sched_table_info.pr6_min_rate_cellps1 := 0;         
     2     yanzuo       ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
   759     yanzuo     /* for BigVCC
   759     yanzuo        DMPG xconn and DSP xconn, the vci mask should be 0xFFF,
   759     yanzuo        while 0x3FFC for others */
   759     yanzuo     DECISION ( rx_bigvcc_enabled__r() ) AND
   759     yanzuo              ( tributary.procs(proc_idx).unit_type = unit_type_t_dmpg_c );
   759     yanzuo     ( T ):
   759     yanzuo         TASK vci_mask := vci_mask >> 2;
   759     yanzuo     ENDDECISION;
   759     yanzuo 
     2     yanzuo /*In CR16942, DRIVER need different interface in flash boot and disk boot, this change
     2     yanzuo brings JIGGER has different version between A5&A6*/
     2     yanzuo     DECISION ((proc_idx = 0) AND (tributary.fig_req_rphase = fig_reset_phase_t_cho_flash_c))   OR
     2     yanzuo              ((proc_idx /= 0) AND tributary.procs(proc_idx).boot_loading);
     2     yanzuo     (T):
     2     yanzuo          OUTPUT res_pqii_int_if_param_ack_s( fig_hdr,
     2     yanzuo                                              success_ec,
     2     yanzuo                                              pqsar_params,
     2     yanzuo                                              max_vpi_bits ) TO hms_forwarder;
     2     yanzuo     ELSE:
     2     yanzuo          OUTPUT res_pq_mask_int_if_param_ack_s (fig_hdr,
     2     yanzuo                                                 success_ec,
     2     yanzuo                                                 pqsar_params,
     2     yanzuo                                                 vpi_mask,
     2     yanzuo                                                 vci_mask )  TO hms_forwarder;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     CALL get_internal_hms_ack__r();
     2     yanzuo 
     2     yanzuo     RETURN status;
     2     yanzuo ENDSTATE wait_for_params;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE if_send_params__r;
     2     yanzuo 
     2     yanzuo /******************************************************************************
     2     yanzuo This procedure get the parameters needed to initialize the APC in served unit.
     2     yanzuo The parameters are read from the XML files by XVALUE program block.
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE get_apc_ph2_params__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  alp_unit          jiifil__t, /* input parameter */
     2     yanzuo     IN      proc_idx          byte,
     2     yanzuo     /* output parameters: */
     2     yanzuo     IN/OUT  ingress_general_2 apc_ig2_t,
     2     yanzuo     IN/OUT  egress_general_2  apc_eg2_t,
     2     yanzuo     IN/OUT  alp_ep2           alp_ep2_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status     error_t,
     2     yanzuo     serv_pid   pid,
     2     yanzuo     serv_attr  attr_group_t,
     2     yanzuo     if_idx     byte,
     2     yanzuo     req_unit   unit_it_t,
     2     yanzuo     port_stage port_stage_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK if_idx := alp_unit.procs(proc_idx).interface_index;
     2     yanzuo   DECISION alp_unit.is_level2_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       TASK req_unit.ttype := alp_unit.procs(0).unit_type;
     2     yanzuo       TASK req_unit.index := alp_unit.procs(0).unit_index;
     2     yanzuo     ELSE:
     2     yanzuo       TASK req_unit.ttype := alp_unit.procs(proc_idx).unit_type;
     2     yanzuo       TASK req_unit.index := alp_unit.procs(proc_idx).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL set_port_stage__r(alp_unit, if_idx, port_stage);
     2     yanzuo   DECISION get_service__r( atm_config_params__c, serv_pid, serv_attr );
     2     yanzuo   ( F ):
     2     yanzuo     RETURN unsuccessfull_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
  1124   huantang   OUTPUT get_apc_param_ph2_req_s( req_unit.ttype,
  1124   huantang 	   req_unit.index,
  1124   huantang 	   port_stage )
  1124   huantang 	   TO serv_pid, SET ATTRIBUTES = serv_attr;
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT get_apc_param_ph2_ack_s( status,
     2     yanzuo         res_unit_info.ttype, res_unit_info.index,
     2     yanzuo         ingress_general_2,
     2     yanzuo         egress_general_2,
     2     yanzuo         alp_ep2 );
     2     yanzuo     DCL
     2     yanzuo        res_unit_info     unit_it_t;
     2     yanzuo     DECISION res_unit_info.ttype = req_unit.ttype AND
     2     yanzuo              res_unit_info.index = req_unit.index;
     2     yanzuo       ( T ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo        TASK alp_ep2.sp_param.sp_number :=
     2     yanzuo                 alp_unit.interfaces(if_idx).scheduler_subport;
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: PH2 APC PARAM REQ FAILURE...:'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@req_unit.ttype),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: ...FOR UNIT:'));
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
     2     yanzuo          log_text_info_t(@'JIGCLU: NO APC_PARAM_PH2_ACK_S...'));
     2     yanzuo     TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo          log_write_item_t(@req_unit.ttype),2,
     2     yanzuo          log_text_info_t(@'JIGCLU: ...FOR UNIT:'));
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_apc_ph2_params__r;
     2     yanzuo 
     2     yanzuo /******************************************************************************
     2     yanzuo This procedure initializes the general part of the APCs 2nd phase in served
     2     yanzuo unit(MXU,NISx,NIP1). This procedure uses parameters which are read from the
     2     yanzuo XML files through XVALUE in get_apc_ph2_params__r procedure.
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE init_apc_ph2_gen__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  alp_unit         jiifil__t,
     2     yanzuo     IN      ingress_general2 apc_ig2_t,
     2     yanzuo     IN      egress_general2  apc_eg2_t,
     2     yanzuo     IN      apc_mgr_pid      pid,
     2     yanzuo     IN/OUT  set_alarm        bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
   216      h10hu     gen_params  alp_gen2_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK set_alarm              := F,
     2     yanzuo        gen_params.ingress_gen := ingress_general2,
     2     yanzuo        gen_params.egress_gen  := egress_general2;
     2     yanzuo   /* send initialization command with physical address so that
     2     yanzuo   WHISKY responds only to the original sender computer. */
     2     yanzuo   TASK set_pid_computer_r( apc_mgr_pid, alp_unit.procs(0).phys_addr );
  1124   huantang   OUTPUT alp_init_apc_gen_ph2_s( gen_params ) TO apc_mgr_pid;
     2     yanzuo 
     2     yanzuo   SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT alp_init_apc_gen_ph2_ack_s( status, ? );
     2     yanzuo     DCL
     2     yanzuo        status error_t;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo #if (F)
     2     yanzuo             TASK log_data(0):=dword(unit_hms_addr.hms_address),
     2     yanzuo                  log_data(1):=dword(unit_hms_addr.extended_addr);
     2     yanzuo             TASK file_status:=add_logwriting_to_jilfil__r(log_file,1,logwriter_t_jigha2__c,
     2     yanzuo                  @'General part of the APC 2nd init phase done for unit(HMS-addr):',log_data);
     2     yanzuo #endif
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: GENERAL APC PH2 FAILED:'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@alp_unit.unit_type),2,
     2     yanzuo              log_text_info_t(@'JIGCLU: IN UNIT:'));
     2     yanzuo         TASK set_alarm := T;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
     2     yanzuo          log_text_info_t(@'JIGCLU: NO APC_GEN_PH2_ACK_S...'));
     2     yanzuo     TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo          log_write_item_t(@alp_unit.unit_type),2,
     2     yanzuo          log_text_info_t(@'JIGCLU: FROM WHISKY IN UNIT:'));
     2     yanzuo     TASK set_alarm := T;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE init_apc_ph2_gen__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_apc_hw_ph2__r;
     2     yanzuo /*
     2     yanzuo  * APC 2nd phase initialization, as requested by WHISKY
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT alp_unit  jiifil__t,
     2     yanzuo     IN     apc_mgr   pid;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result               error_t,
     2     yanzuo     set_alarm            bool := F,
     2     yanzuo     ingress_gen2         apc_ig2_t,
     2     yanzuo     egress_gen2          apc_eg2_t,
     2     yanzuo     alp_ep2              alp_ep2_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK result := get_apc_ph2_params__r( alp_unit,
     2     yanzuo        0,
     2     yanzuo        ingress_gen2,
     2     yanzuo        egress_gen2,
     2     yanzuo        alp_ep2 );
     2     yanzuo   DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK result := init_apc_ph2_gen__r( alp_unit,
     2     yanzuo            ingress_gen2,
     2     yanzuo            egress_gen2,
     2     yanzuo            apc_mgr,
     2     yanzuo            set_alarm );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN result;
     2     yanzuo ENDPROCEDURE init_apc_hw_ph2__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE port_conf__r;
     2     yanzuo /* port configuration
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
    73     jamema     IN      alp_unit     jiifil__t,    
     2     yanzuo     IN/OUT  update       jii_update_info__t;
  1054    lifsong 
  1054    lifsong RETURNS
  1054    lifsong     error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
   359    lifsong     ustate               unit_state_t,
  1488    shuocao     dummy_proc_idx byte := 0,
  1488    shuocao     rxsprb_pid        pid;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* This task has three sub-cases:
     2     yanzuo    * WO-ALP unit
     2     yanzuo    * - ask UAM to configure SD1G
     2     yanzuo    * - ask UAM to configure UX20/UX1
     2     yanzuo    * normal tributary/NIP1
     2     yanzuo    * - ask UAM to configure UX20/UX1
     2     yanzuo    */
     2     yanzuo 
     2     yanzuo   /* if unit has been separated after it sent port config request,
     2     yanzuo      skip it. UAMPRB will not respond if target unit is separated. */
  1062       pshu 
     2     yanzuo   DECISION unit_state_r( unit.unit_type, unit.unit_index,
     2     yanzuo                          ustate ) = success_ec
     2     yanzuo            AND
     2     yanzuo            ((ustate | unit_state_t_mainstate_bm_c) = unit_state_t_se_c
     2     yanzuo             OR
     2     yanzuo             (ustate | unit_state_t_mainstate_bm_c) = unit_state_t_tr_c);
     2     yanzuo     ( T ):
     2     yanzuo       TASK ec := success_ec;
     2     yanzuo 
     2     yanzuo    ELSE:
  1486    shuocao       DECISION ( unit_classification_r( unit.unit_type, unit_class_t_dmx_c ) = success_ec );
  1486    shuocao       (T):
  1486    shuocao         TASK make_pid_r( rxsprb_pid, own_unit_phys_addr, rxsprb_p,
  1486    shuocao                      process_id_t_master_c, focus_t_zero_c );
  1486    shuocao         OUTPUT jig_start_port_conf__s(unit.unit_type,unit.unit_index) to rxsprb_pid;
  1486    shuocao       ENDDECISION;
  1486    shuocao 
   359    lifsong       DECISION ( classify__r( unit, dummy_proc_idx, unit ) = unit_class__t_alp1_c AND
     2     yanzuo                  unit.cluster_idx = jii_sym_mxu_cluster__r() AND
     2     yanzuo                  unit.is_wo_unit = T );
     2     yanzuo       ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo          TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                           @'JIGCLU: is SYM-MXU unit'
     2     yanzuo                            'Procedure : port_conf__r 0X%X ',
     2     yanzuo                            unit.unit_type );
     2     yanzuo #endif
     2     yanzuo          TASK unit.sym_mxu_flag := T;
     2     yanzuo          CALL flag__r( update, jii_field__t_sym_mxu_c );
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo 
   359    lifsong       DECISION ( ( classify__r( unit, dummy_proc_idx, unit ) = unit_class__t_alp1_c OR
   359    lifsong                     classify__r( unit, dummy_proc_idx, unit ) = unit_class__t_sp_app_c ) AND
     2     yanzuo                  (( app_mxu_unit_check__r( unit ) = F OR unit.sym_mxu_flag = F ) OR
     2     yanzuo                   unit.fig_req_rphase = fig_reset_phase_t_unspec_c)/*if warm restart, all ALP1 unit should take SD port configuration*/ );
     2     yanzuo       ( T ):
     2     yanzuo         /* Skip sd port configuration for SYM-WO-APP-MXU in flash boot phase 1*/
     2     yanzuo          TASK ec := conf_sd1g__r( unit );
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       DECISION ( ec = success_ec );
     2     yanzuo       ( T ):
     2     yanzuo          DECISION eipu_unit_check__r( unit );
     2     yanzuo          (T):
    73     jamema                   /*If eipu,  just foward fig req, not ack needed, because eipu doesnt has UX hardware*/
    73     jamema                CALL foward_fig_req__r( unit );
     2     yanzuo          ELSE:
    73     jamema                TASK ec := conf_ux__r( unit );
     2     yanzuo #if (test_logs)
    73     jamema                TASK dxsyslog_r( log_type_t_text_t_c,
    73     jamema                              @'JIGCLU: after conf_ux__r'
    73     jamema                               'Procedure : port_conf__r 0X%X ',
    73     jamema                               unit.unit_type );
     2     yanzuo #endif
    73     jamema                DECISION(ec);
    73     jamema                ( success_ec ):
    73     jamema                   CALL check_reconfig(unit,alp_unit, update);
    73     jamema                ENDDECISION;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo    ( success_ec ):
     2     yanzuo       TASK unit.port_conf_needed := F;
     2     yanzuo       CALL flag__r( update, jii_field__t_pconf_need_c );
     2     yanzuo       TASK unit.port_conf_completed := T;
     2     yanzuo       CALL flag__r( update, jii_field__t_pconf_compl_c );
     2     yanzuo       CALL flag__r( update, jii_field__t_pconf_ts_c );
     2     yanzuo       /* a SP/TE ALP1 unit may have sd4_init_needed flag still set
     2     yanzuo          -- we can clear it here */
     2     yanzuo       TASK unit.sd4_init_needed := F;
     2     yanzuo       CALL flag__r( update, jii_field__t_sd4_init_need_c );
     2     yanzuo       /* Update the fields with new data */
     2     yanzuo       TASK update.rec_ptr := @unit;
     2     yanzuo     ELSE:
   742   huantang       
     2     yanzuo       /* Indicate port configuration failure. */
     2     yanzuo       DECISION ec;
     2     yanzuo       (card_restarted_ec):
   733    lifsong          TASK unit.port_conf_needed := F;
   742   huantang          CALL flag__r( update, jii_field__t_pconf_need_c );
   742   huantang          TASK update.rec_ptr := @unit;
  1062       pshu                  
  1465       pshu          TASK dxsyslog_r( log_type_t_text_i_c,
  1523       pshu          @'JIGCLU: Port configuration failure '
  1523       pshu          'because of unit restart'
  1523       pshu          ' Unit Type: %4X Unit Index: %4X',
     2     yanzuo          unit.unit_type, unit.unit_index);
     2     yanzuo       ELSE:
     2     yanzuo          CALL set_conf_fail_alarm__r( unit, 0, port_conf_fail__c, ec );
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       DECISION unit.procs(0).start_attempts_left;
     2     yanzuo        ( 0 ):
   742   huantang 
   742   huantang          TASK unit.port_conf_needed := F;
   742   huantang          CALL flag__r( update, jii_field__t_pconf_need_c );   
     2     yanzuo           /* Master may have re-initialized start_attempts_left field
     2     yanzuo              during the last attempt -- reset the counter to 0
   742   huantang              to prevent immediate retry */        
   742   huantang          CALL flag__r( update, jii_field__t_start_att_c );
   742   huantang          TASK update.rec_ptr := @unit,
   742   huantang                   update.proc_idx := 0;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
  1054    lifsong   
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE port_conf__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE setup_md_fpga_by_brt__r;
     2     yanzuo /*
     2     yanzuo  * create IF/VP/CONN to PQIII for APP unit by service provided by BRTSEB
   359    lifsong  This function is called only for SYM_MXU. 
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT  io_unit      jiifil__t,
     2     yanzuo    IN/OUT  io_alp_unit  jiifil__t,
     2     yanzuo    IN      in_proc_idx  byte;
     2     yanzuo 
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_brtpid          pid,
     2     yanzuo    l_status          error_t,
     2     yanzuo    l_if_idx          byte,
     2     yanzuo    l_path_info       half_cconn_phy_info_t,
     2     yanzuo    l_if_vp_params    alp1_intf_vp_params__t,
     2     yanzuo    l_omu_update      jii_fields__t,
     2     yanzuo    l_endpoint        phys_address_t,
     2     yanzuo    l_endpoint2       phys_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    CALL jii_fields__t_init_r( l_omu_update );
     2     yanzuo    CALL get_path_info__r( io_unit, io_alp_unit, in_proc_idx, l_path_info );
     2     yanzuo 
   359    lifsong    CALL get_brt_pid__r(io_alp_unit.unit_type, io_alp_unit.procs(0).phys_addr,l_brtpid);
     2     yanzuo 
     2     yanzuo    /* If RS3PRB is not ready to create IF + VP, return failure */
     2     yanzuo    DECISION ( io_alp_unit.ready_for_reporting );
     2     yanzuo    ( /= T ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    TASK l_if_idx := io_unit.procs(in_proc_idx).interface_index;
     2     yanzuo 
     2     yanzuo    DECISION io_unit.interfaces(l_if_idx).intf_id;
     2     yanzuo    ( 0, atm_interface_id_t_unspecif_c ):
     2     yanzuo         /* Allocate interface id(s) and set up
     2     yanzuo         processor-to-interface mappings. */
     2     yanzuo       TASK l_status := alloc_interf_ids__r( io_unit, 1 );
     2     yanzuo       DECISION l_status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo          RETURN l_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* get the interface and VP parameters from XVALUE */
     2     yanzuo    TASK l_status := get_interface_params__r( io_unit.procs( in_proc_idx ).unit_type, io_unit.procs( in_proc_idx ).unit_index,
     2     yanzuo                                              port_stage_t_s1_s2_c, l_if_vp_params );
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo    /* Create IF for OMU */
     2     yanzuo    DECISION io_unit.interfaces(l_if_idx).intf_exists;
     2     yanzuo    ( F ):
     2     yanzuo   /*    CALL get_path_info__r( io_unit, io_alp_unit, in_proc_idx, l_path_info );*/
     2     yanzuo       TASK l_status := brt_crt_interface__r(io_unit, l_brtpid, l_if_idx, l_if_vp_params, l_path_info);
     2     yanzuo       DECISION l_status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo          RETURN l_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK io_unit.interfaces(l_if_idx).intf_exists           := T;
     2     yanzuo       TASK io_unit.interfaces(l_if_idx).intf_reporting_needed := T;
     2     yanzuo       TASK io_unit.interfaces(l_if_idx).intf_reported         := F;
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_i1_exists_c );
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_i1_rep_need_c );
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_i1_reported_c );
     2     yanzuo       CALL jiifil_update__r( io_unit, l_omu_update, in_proc_idx );
     2     yanzuo       CALL jiifil_update__r( io_unit, l_omu_update, 1 );
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION (l_status = success_ec AND io_unit.procs(in_proc_idx).vp_exists = F);
     2     yanzuo    ( T ):
     2     yanzuo       TASK l_status := brt_crt_vp__r( io_unit, l_brtpid, in_proc_idx, l_if_vp_params, l_path_info );
     2     yanzuo       DECISION l_status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo          RETURN l_status;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK io_unit.procs(in_proc_idx).vp_exists := T;
     2     yanzuo       TASK io_unit.procs(in_proc_idx).vp_reporting_needed := T;
     2     yanzuo       TASK io_unit.procs(in_proc_idx).vp_reported         := F;
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_vp_exists_c );
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_vp_rep_need_c );
     2     yanzuo       TASK jii_fields__t_fset( l_omu_update, jii_field__t_vp_reported_c );
     2     yanzuo       CALL jiifil_update__r( io_unit, l_omu_update, in_proc_idx );
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* Send the MD FPGA params to UAMPRB */
     2     yanzuo    DECISION io_unit.fpga_needed;
     2     yanzuo    (T):
     2     yanzuo       TASK l_status:= get_amd_fpga_params__r( io_unit.procs(in_proc_idx).unit_type,
     2     yanzuo                                               io_unit.procs(in_proc_idx).unit_index);
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( success_ec ):
     2     yanzuo       /* Turn on 'vp_reporting_needed' flag so that the upper level
     2     yanzuo       knows that interface and VP were created successfully,
     2     yanzuo       and if the operation fails, the error occurred when
     2     yanzuo       trying to create half-connections over HMS.
     2     yanzuo       This flag is not updated to JIIFIL if the rest of the
     2     yanzuo       operation fails. */
     2     yanzuo       TASK io_unit.procs(in_proc_idx).vp_reporting_needed := T;
     2     yanzuo       DECISION io_unit.procs(in_proc_idx).phys_addr;
     2     yanzuo       ( own_unit_phys_addr ):
     2     yanzuo           /* creating half-conn from WO-OMU towards WO-SYM-MXU */
     2     yanzuo          TASK l_endpoint  := io_alp_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo               l_endpoint2 := l_endpoint;
     2     yanzuo       ELSE:
     2     yanzuo           /* creating half-conn from a WO-ALP1 unit towards OMU
     2     yanzuo           (or from core unit towards OMU, when old_whisky enabled) */
     2     yanzuo          TASK l_endpoint  := own_unit_phys_addr;
     2     yanzuo           /* for non-MXU unit, create connections towards both OMUs */
     2     yanzuo          DECISION io_unit.unit_type;
     2     yanzuo          ( unit_type_t_mxu_c ):
     2     yanzuo             TASK l_endpoint2 := l_endpoint;
     2     yanzuo          ELSE:
     2     yanzuo             TASK l_endpoint2 := own_unit_phys_addr ^ 1;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* Create the first xconn which is created in phase 1 already. */
     2     yanzuo    TASK l_status := brt_crt_xconn__r( io_unit,
     2     yanzuo                                       l_brtpid,
     2     yanzuo                                       in_proc_idx,
     2     yanzuo                                       io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo                                       l_endpoint,
     2     yanzuo                                       l_endpoint2,
     2     yanzuo                                       T,
     2     yanzuo                                       l_path_info);
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       RETURN l_status;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo #if (test_logs)
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                    @'JIGCLU   : create xconn for OMU '
     2     yanzuo                     'Procedure: setup_md_fpga_by_brt__r '
     2     yanzuo                     'unit: 0X%X-0X%X , alp unit: 0X%X-0X%X',
     2     yanzuo                      io_unit.unit_type, io_unit.unit_index,
     2     yanzuo                      io_alp_unit.unit_type, io_alp_unit.unit_index);
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    DECISION ( app_mxu_unit_check__r ( io_unit ) AND
     2     yanzuo               io_unit.is_wo_unit = F );
     2     yanzuo    ( T ):
     2     yanzuo       CALL	get_brt_pid__r(io_unit.unit_type, io_unit.co_alp_unit_phys_addr,l_brtpid);
     2     yanzuo       /* Notify all the half xconn in WO MXU ( PQIII <-> APP ) to RS3PRB in SP MXU */
     2     yanzuo       TASK l_status := brt_crt_xconn__r( io_alp_unit,
     2     yanzuo                                          l_brtpid,
     2     yanzuo                                          in_proc_idx,
     2     yanzuo                                          io_alp_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo                                          l_endpoint,
     2     yanzuo                                          l_endpoint2,
     2     yanzuo                                          T,
     2     yanzuo                                          l_path_info);
     2     yanzuo 
     2     yanzuo    ENDDECISION;
   359    lifsong 
     2     yanzuo   RETURN l_status;
     2     yanzuo ENDPROCEDURE setup_md_fpga_by_brt__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE notify_switch_over__r;
     2     yanzuo /*
     2     yanzuo  * Notify UAMPRB to switchover the connection between OMU and SYM-MXU to via SFU.
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_uam_pid    pid,
     2     yanzuo    l_uam_attr   attr_group_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION get_service__r( utopia_addr_inq__c, l_uam_pid, l_uam_attr );
     2     yanzuo    ( F ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                       @'JIGCLU     : fig_conn_switchover service is not available '
     2     yanzuo                        'Procedure  : notify_switch_over__r ');
     2     yanzuo 
     2     yanzuo 
     2     yanzuo       RETURN  service_not_available_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    OUTPUT int_conn_swo_notif_s TO l_uam_pid;
     2     yanzuo    SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE wait_reply;
     2     yanzuo 
     2     yanzuo STATE wait_reply;
     2     yanzuo    INPUT int_conn_swo_notif_ack_s( l_status );
     2     yanzuo    DCL
     2     yanzuo       l_status    error_t;
     2     yanzuo    RESET ( ack_timer );
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                       @'JIGCLU     : int_conn_swo_notif_ack_s failed'
     2     yanzuo                        'Procedure  : notify_switch_over__r '
     2     yanzuo                        'Status     : 0X%X',
     2     yanzuo                         l_status);
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo    INPUT ack_timer;
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                    @'JIGCLU     : int_conn_swo_notif_ack_s ack_timer expired'
     2     yanzuo                     'Procedure  : notify_switch_over__r ');
     2     yanzuo 
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE wait_reply;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE notify_switch_over__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init_app_ph2__r;
     2     yanzuo /* This routine creates TM FPGA xconn to PQIII for SYM-MXU again and MD FPGA
     2     yanzuo    xconn to PQIII for other APP MXU in phase 2 for APP unit
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT  io_alp_unit    jiifil__t,
     2     yanzuo    IN/OUT io_omu_unit  jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_result      error_t := success_ec,
     2     yanzuo    l_omu_rec     jiifil__t,
   216      h10hu     l_omu_update  jii_fields__t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo #if (test_logs)
     2     yanzuo    TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                    @'JIGCLU: enter phase 2 creation '
     2     yanzuo                     'Procedure: if_init_app_ph2__r'
     2     yanzuo                     'ALP unit type: 0X%X, ALP unit index: 0X%X '
     2     yanzuo                     'OMU unit type: 0X%X, OMU unit index : 0X%X'
     2     yanzuo                     'sym_mxu_flag: 0X%X fpga needed: 0X%X',
     2     yanzuo                     io_alp_unit.unit_type, io_alp_unit.unit_index,
     2     yanzuo                     io_omu_unit.unit_type, io_omu_unit.unit_index,
     2     yanzuo                     io_alp_unit.sym_mxu_flag,
     2     yanzuo                     io_alp_unit.fpga_needed );
     2     yanzuo #endif
     2     yanzuo    /* recreate TM FPGA xconn to POIII for SYM-WO-APP-MXU */
     2     yanzuo    DECISION ( io_alp_unit.sym_mxu_flag );
     2     yanzuo    ( T ):
     2     yanzuo       DECISION ( io_alp_unit.fpga_needed);
     2     yanzuo       ( T ):
     2     yanzuo          TASK  l_result:= get_amd_fpga_params__r( io_alp_unit.procs(0).unit_type,
     2     yanzuo                                                   io_alp_unit.procs(0).unit_index);
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       DECISION l_result;
     2     yanzuo       ( success_ec ):
     2     yanzuo             /*vp_reporting_needed flag has been set in phase 1 */
     2     yanzuo          TASK io_alp_unit.procs(0).vp_reporting_needed := T;
     2     yanzuo 
     2     yanzuo          /* Recreate TM FPGA xconn again, set F to send out app_pre_s out  */
     2     yanzuo           TASK l_result := setup_fpga_if_vp_hc__r( io_alp_unit, io_alp_unit , T, F );
     2     yanzuo          DECISION l_result;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             RETURN l_result;
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          TASK l_omu_rec.tm_fpga_xconn_needed := T;
     2     yanzuo          TASK jii_fields__t_fset( l_omu_update, jii_field__t_tm_fpga_xconn_c );
     2     yanzuo          /* Create for OMU, set T not to send out app_pre msg */
     2     yanzuo          TASK l_result := setup_fpga_if_vp_hc__r( io_omu_unit, io_alp_unit, T, T );
     2     yanzuo          DECISION l_result;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                             @'JIGCLU     : recreat TM FPGA for omu unit failed'
     2     yanzuo                              'Procedure  : if_init_app_ph2__r '
     2     yanzuo                              'Unit type  : 0X%X '
     2     yanzuo                              'Unit index : 0X%X'
     2     yanzuo                              'result: 0X%X',
     2     yanzuo                              io_omu_unit.unit_type, io_omu_unit.unit_index,
     2     yanzuo                              l_result);
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo       /* Create the xconn for MD FPGA, set F to send out real app_pre msg */
     2     yanzuo       TASK l_result := setup_fpga_if_vp_hc__r( io_alp_unit, io_alp_unit , T, F );
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN l_result;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE if_init_app_ph2__r;
     2     yanzuo 
  1137   huantang PROCEDURE clear_update_flag__r;
  1137   huantang FPAR
  1137   huantang 	IN/OUT  unit      jiifil__t,
  1137   huantang 	IN      proc_idx  byte,
  1137   huantang 	IN/OUT  update    jii_update_info__t;
  1137   huantang START;
     2     yanzuo 
  1137   huantang 	TASK unit.procs(proc_idx).start_attempts_left := 0;
  1137   huantang 	/* cancel any updates we may already have flagged */
  1137   huantang 	TASK jii_fields__t_init_r( update.fields );
  1137   huantang 
  1137   huantang 	/* zero the start_attempts_left in JIIFIL in case master
  1137   huantang 	 has modified it after the current task was started */
  1137   huantang 	TASK flag__r( update, jii_field__t_start_att_c );
  1137   huantang 	TASK update.rec_ptr  := @unit,
  1137   huantang 	     update.proc_idx := proc_idx;
  1137   huantang 
  1137   huantang ENDPROCEDURE clear_update_flag__r;
  1137   huantang 
  1137   huantang 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE if_init__r;
     2     yanzuo /*
     2     yanzuo  * This routine initializes internal interface and VP for the
     2     yanzuo  * target computer, or just sends interface parameters, depending
     2     yanzuo  * on whether the VP already exists.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit      jiifil__t,
     2     yanzuo     IN      proc_idx  byte,
     2     yanzuo     IN/OUT  alp_unit  jiifil__t,
     2     yanzuo     IN      phase     byte,
     2     yanzuo     IN/OUT  update    jii_update_info__t;
     2     yanzuo 
  1054    lifsong RETURNS
  1054    lifsong     error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     ustate               unit_state_t,
     2     yanzuo     create_vp_need       bool,
     2     yanzuo     if_idx               byte;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    /* if interface and VP already exist, skip their creation. */
     2     yanzuo    TASK create_vp_need := (unit.procs(proc_idx).vp_reported = F) AND
     2     yanzuo                      (unit.procs(proc_idx).vp_reporting_needed = F);
     2     yanzuo    DECISION create_vp_need AND
     2     yanzuo             unit_state_by_phys_addr_r( unit.procs(proc_idx).phys_addr,
     2     yanzuo             ustate ) = success_ec AND
     2     yanzuo             (ustate | unit_state_t_mainstate_bm_c) = unit_state_t_se_c;
     2     yanzuo    ( T ):
     2     yanzuo       TASK create_vp_need := F;
     2     yanzuo    ENDDECISION;
     2     yanzuo    DECISION create_vp_need;
     2     yanzuo    ( T ):
   359    lifsong       DECISION classify__r( unit, proc_idx, alp_unit );
     2     yanzuo       ( unit_class__t_alp1_c ):
     2     yanzuo           /* This function creates one or two interfaces and VPs
     2     yanzuo           * and two half-connections.
     2     yanzuo           * It should update the half-connections to JICFIL.
     2     yanzuo           * If the MXU is SYM-MXU, the procedure should also
     2     yanzuo           * update the following fields in JIIFIL record of active OMU:
     2     yanzuo           * - half_conns_needed := T
     2     yanzuo           * - if_init_completed := T
     2     yanzuo           * - vp_reporting_needed := T
     2     yanzuo           * - vpi := 0
     2     yanzuo           * - utopia_address
     2     yanzuo           * - subport
     2     yanzuo           */
     2     yanzuo          TASK ec := if_init_alp1__r( unit,    /* this is the ALP1 unit */
     2     yanzuo                                      alp_unit /* this is WO-OMU!! */ );
     2     yanzuo       ( unit_class__t_alp2_c ):
     2     yanzuo           /* This function must also create one or two
     2     yanzuo             ATM connections via HMS, and update JICFIL.
     2     yanzuo             Now NIP unit can not be connected to APP MUX */
     2     yanzuo          TASK ec := if_init_alp2__r( unit, alp_unit, update );
     2     yanzuo          DECISION ec = success_ec;
     2     yanzuo          ( T ):
     2     yanzuo             TASK unit.procs(proc_idx).half_conns_needed := F;
     2     yanzuo             CALL flag__r( update, jii_field__t_hc_need_c );
     2     yanzuo             TASK unit.procs(proc_idx).half_conns_created := T;
     2     yanzuo             CALL flag__r( update, jii_field__t_hc_created_c );
     2     yanzuo          ENDDECISION;
     2     yanzuo       ( unit_class__t_sp_app_c ):
     2     yanzuo          /* For SP-APP-MXU + SP-EIPU unit */
     2     yanzuo          /* SP APP unit create the xconn to itself, because it has no connection
     2     yanzuo          to his WO APP unit */
     2     yanzuo          TASK ec := setup_fpga_if_vp_hc__r( unit, unit, F, F );
     2     yanzuo          /*Arthur: with this the xconn on OMU part can be created when UNIT is added to configuration*/
     2     yanzuo  /*        DECISION ec = success_ec AND
     2     yanzuo                    ( unit.procs( proc_idx ).half_conns_created = F );
     2     yanzuo          ( T ):
     2     yanzuo             TASK unit.procs( proc_idx ).half_conns_needed := T;
     2     yanzuo             CALL flag__r( update, jii_field__t_hc_need_c );
     2     yanzuo          ENDDECISION;*/
     2     yanzuo #if (test_logs)
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: for sp app in if_init__r!'
     2     yanzuo                        'unit = %04X %d  status = %04X',
     2     yanzuo                        unit.procs(proc_idx).unit_type,
     2     yanzuo                        unit.procs(proc_idx).unit_index,
     2     yanzuo                        ec );
     2     yanzuo #endif
     2     yanzuo       ( unit_class__t_app_trib_c ):
     2     yanzuo          /* For trib unit connected to APP-MXU unit */
     2     yanzuo          TASK ec := if_init_app_trib__r ( unit, proc_idx, alp_unit, update );
   773   huantang          
   773   huantang             DECISION ( ec /= success_ec ) AND ( ec /= cmd_ignored_ec );
   773   huantang             (T):
   773   huantang                TASK dxsyslog_r( log_type_t_text_e_c,
   773   huantang                     @'JIGCLU: if_init_app_trib__r failed!'
   773   huantang                     'unit = %04X %d  status = %04X',
   773   huantang                     unit.procs(proc_idx).unit_type,
   773   huantang                     unit.procs(proc_idx).unit_index,
   773   huantang                     ec );
   773   huantang             ENDDECISION;
   773   huantang             
     2     yanzuo          DECISION ec = success_ec AND
     2     yanzuo                   ( unit.procs( proc_idx ).half_conns_created = F );
     2     yanzuo          ( T ):
     2     yanzuo             CALL flag__r( update, jii_field__t_if_init2_ts_c );
     2     yanzuo             TASK unit.procs(proc_idx).if_init_ph2_needed := F;
     2     yanzuo             CALL flag__r( update, jii_field__t_if_init2_need_c );
     2     yanzuo             TASK unit.procs(proc_idx).if_init_completed := T;
     2     yanzuo             CALL flag__r( update, jii_field__t_if_init_compl_c );
     2     yanzuo             TASK unit.procs( proc_idx ).half_conns_needed := T;
     2     yanzuo             CALL flag__r( update, jii_field__t_hc_need_c );
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ( unit_class__t_apc_trib_c ):
     2     yanzuo          /* For trib unit connected to APC-MXU unit */
   857     z7zhou          TASK ec := if_init_apc_trib__r( unit, proc_idx, alp_unit, update );
  1137   huantang          DECISION ec /= success_ec AND ec /= card_restarted_ec ;
  1137   huantang          ( T ):
  1465       pshu             TASK dxsyslog_r( log_type_t_text_i_c,
   857     z7zhou                        @'JIGCLU: if_init_apc_trib__r failed!'
     2     yanzuo                        'unit = %04X %d  status = %04X',
     2     yanzuo                        unit.procs(proc_idx).unit_type,
     2     yanzuo                        unit.procs(proc_idx).unit_index,
     2     yanzuo                        ec );
     2     yanzuo          ENDDECISION;
     2     yanzuo          /* Request half-connection creation if not done yet. */
     2     yanzuo          DECISION ec = success_ec AND
     2     yanzuo                    ( unit.procs( proc_idx ).half_conns_created = F );
     2     yanzuo          ( T ):
     2     yanzuo             TASK unit.procs( proc_idx ).half_conns_needed := T;
     2     yanzuo             CALL flag__r( update, jii_field__t_hc_need_c );
     2     yanzuo          ENDDECISION;
   482      h10hu       ( unit_class__t_eipu_trib_c ):
   359    lifsong           TASK ec := if_init_ss7u__r ( unit, proc_idx, update );
   359    lifsong           DECISION ec;
   359    lifsong                 ( /= success_ec ):
   359    lifsong                    TASK dxsyslog_r( log_type_t_text_e_c,
   359    lifsong                        @'JIGCLU: if_init_ss7u__r failed!'
   359    lifsong                        'unit = %04X %d  status = %04X',
   359    lifsong                        unit.procs(proc_idx).unit_type,
   359    lifsong                        unit.procs(proc_idx).unit_index,
   359    lifsong                        ec );
   359    lifsong          ENDDECISION;
   359    lifsong          DECISION ec = success_ec AND
   359    lifsong                   ( unit.procs( proc_idx ).half_conns_created = F );
   359    lifsong          ( T ):
   359    lifsong             CALL flag__r( update, jii_field__t_if_init2_ts_c );
   359    lifsong             TASK unit.procs(proc_idx).if_init_ph2_needed := F;
   359    lifsong             CALL flag__r( update, jii_field__t_if_init2_need_c );
   359    lifsong             TASK unit.procs(proc_idx).if_init_completed := T;
   359    lifsong             CALL flag__r( update, jii_field__t_if_init_compl_c );
   359    lifsong             TASK unit.procs( proc_idx ).half_conns_needed := T;
   359    lifsong             CALL flag__r( update, jii_field__t_hc_need_c );
   359    lifsong          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       /* if VP creation succeeded, mark the fields which
     2     yanzuo       need to be updated in JIIFIL: */
     2     yanzuo       DECISION ec;
     2     yanzuo         ( success_ec ):
     2     yanzuo           /* if interface did not exist, mark it as existing */
     2     yanzuo           TASK if_idx := unit.procs(proc_idx).interface_index;
     2     yanzuo           DECISION unit.interfaces(if_idx).intf_exists;
     2     yanzuo           ( F ):
     2     yanzuo               TASK unit.interfaces(if_idx).intf_exists := T;
     2     yanzuo               TASK unit.interfaces(if_idx).intf_reporting_needed := T;
     2     yanzuo               TASK unit.interfaces(if_idx).intf_reported := F;
     2     yanzuo               CALL intf_flag__r( update, if_idx, jii_field__t_i1_mphy_sch_c );
     2     yanzuo               CALL intf_flag__r( update, if_idx, jii_field__t_i1_exists_c );
     2     yanzuo               CALL intf_flag__r( update, if_idx, jii_field__t_i1_rep_need_c );
     2     yanzuo               CALL intf_flag__r( update, if_idx, jii_field__t_i1_reported_c );
     2     yanzuo           ENDDECISION;
     2     yanzuo 
     2     yanzuo           CALL flag__r( update, jii_field__t_vpi_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_maxintvci_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_mphy_port_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_subport_c );
   857     z7zhou           
     2     yanzuo           TASK unit.procs(proc_idx).vp_exists := T;
     2     yanzuo           TASK unit.procs(proc_idx).vp_reporting_needed := T;
   857     z7zhou           TASK unit.procs(proc_idx).vp_reported := F ;
   857     z7zhou           
     2     yanzuo           CALL flag__r( update, jii_field__t_vp_exists_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_vp_rep_need_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_vp_reported_c );
  1137   huantang 
  1137   huantang        ( card_restarted_ec ):
  1137   huantang 			 
  1137   huantang 			 CALL clear_update_flag__r(unit,proc_idx,update);
  1137   huantang 			 RETURN success_ec;
     2     yanzuo      ENDDECISION;
     2     yanzuo 
     2     yanzuo      /* Send interface parameters if nothing went wrong in
     2     yanzuo      interface/VP creation. */
     2     yanzuo      DECISION ec;
     2     yanzuo      ( success_ec ):
     2     yanzuo         TASK ec := if_send_params__r( unit, proc_idx );
     2     yanzuo          DECISION ec;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo              TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                @'JIGCLU: if_send_params__r failed after create VP!'
     2     yanzuo                'unit = %04X %d  status = %04X',
     2     yanzuo                unit.procs(proc_idx).unit_type,
     2     yanzuo                unit.procs(proc_idx).unit_index,
     2     yanzuo                ec );
     2     yanzuo          ENDDECISION;
     2     yanzuo      ENDDECISION;
     2     yanzuo 
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   DECISION ( create_vp_need = F ) AND ( phase = 1 );
     2     yanzuo   ( T ):
     2     yanzuo      TASK ec := if_send_params__r( unit, proc_idx );
     2     yanzuo      DECISION ec;
     2     yanzuo      ( /= success_ec ):
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                @'JIGCLU: if_send_params__r failed in phase 1'
     2     yanzuo                 '        without create VP!'
     2     yanzuo                'unit = %04X %d  status = %04X',
     2     yanzuo                unit.procs(proc_idx).unit_type,
     2     yanzuo                unit.procs(proc_idx).unit_index,
     2     yanzuo                ec );
     2     yanzuo      ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   DECISION ec;
     2     yanzuo   ( success_ec ):
     2     yanzuo       /* Done, now set up JIIFIL record update (or the rest of it):
     2     yanzuo       * set if_init_needed off
     2     yanzuo       * set if_init_completed on
     2     yanzuo       */
     2     yanzuo 
     2     yanzuo       /* todo: updating of intf_exists, support added,
     2     yanzuo       * intf_reporting_needed, intf_reported fields */
     2     yanzuo 
     2     yanzuo       DECISION phase;
     2     yanzuo       ( 2 ):
     2     yanzuo 
   890    lifsong          DECISION app_unit_check__r( unit ) AND ( NOT ss7u_unit_check__r(unit.procs(proc_idx).unit_type) );
     2     yanzuo          ( T ):
     2     yanzuo              /* Try to create TM FPGA xconn to PQIII again in phase 2 for SYM-APP-MXU unit
     2     yanzuo                         and eipu unit */
     2     yanzuo             TASK ec := if_init_app_ph2__r ( unit, alp_unit /* WO-OMU */);
     2     yanzuo             TASK update.rec_ptr := @unit;
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          CALL flag__r( update, jii_field__t_if_init2_ts_c );
     2     yanzuo          TASK unit.procs(proc_idx).if_init_ph2_needed := F;
     2     yanzuo          CALL flag__r( update, jii_field__t_if_init2_need_c );
     2     yanzuo          TASK unit.procs(proc_idx).if_init_completed := T;
     2     yanzuo 
     2     yanzuo          TASK ec := if_send_params__r( unit, proc_idx);
     2     yanzuo          DECISION ec;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                               @'JIGCLU: if_send_params__r failed!'
     2     yanzuo                                'unit = %04X %d  status = %04X',
     2     yanzuo                                unit.procs(proc_idx).unit_type,
     2     yanzuo                                unit.procs(proc_idx).unit_index,
     2     yanzuo                                ec );
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ELSE:
     2     yanzuo          CALL flag__r( update, jii_field__t_if_init_ts_c );
     2     yanzuo          TASK unit.procs(proc_idx).if_init_needed := F;
     2     yanzuo          CALL flag__r( update, jii_field__t_if_init_need_c );
     2     yanzuo          /* if we did phase 1 interface init with disk boot,
     2     yanzuo          * interface initialization is complete. */
     2     yanzuo          TASK unit.procs(proc_idx).if_init_completed :=
     2     yanzuo                NOT unit.procs(proc_idx).boot_loading;
     2     yanzuo       ENDDECISION;
     2     yanzuo       CALL flag__r( update, jii_field__t_if_init_compl_c );
     2     yanzuo       /* Update from the parameter record */
     2     yanzuo       TASK update.rec_ptr  := @unit,
     2     yanzuo            update.proc_idx := proc_idx;
     2     yanzuo     ELSE:
     2     yanzuo       DECISION unit.procs(proc_idx).vp_reporting_needed;
     2     yanzuo         ( F ):
     2     yanzuo           CALL set_conf_fail_alarm__r( unit, proc_idx,
     2     yanzuo                intf_cre_fail__c, ec );
     2     yanzuo         ELSE:
     2     yanzuo           CALL set_conf_fail_alarm__r( unit, proc_idx,
     2     yanzuo                half_conn_cre_fail__c, ec );
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       DECISION unit.procs(proc_idx).start_attempts_left;
     2     yanzuo        ( 0 ):
  1137   huantang           CALL clear_update_flag__r(unit,proc_idx,update);
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
  1054    lifsong   
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE if_init__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE report_interface__r;
     2     yanzuo /*
     2     yanzuo  * Report interface via RBROKE
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT unit         jiifil__t,
     2     yanzuo     IN     proc_idx     byte,
     2     yanzuo     IN/OUT alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     if_idx               byte,
     2     yanzuo     status               error_t,
     2     yanzuo     rbroke_pid           pid,
     2     yanzuo     rbroke_attr          attr_group_t,
     2     yanzuo     intf_vp_params       alp1_intf_vp_params__t,
     2     yanzuo     interface_id         atm_interface_id_t,
     2     yanzuo     interf_type          atm_interface_type_t,
     2     yanzuo     mxu_info             unit_it_t,
     2     yanzuo     create_state         atm_cre_state_t,
     2     yanzuo     req_unit             unit_it_t,
     2     yanzuo     port_stage           port_stage_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* find the first processor using the target interface. */
     2     yanzuo   TASK if_idx := unit.procs(proc_idx).interface_index;
     2     yanzuo 
   359    lifsong   DECISION unit.is_level2_alp_unit OR unit.is_ip_niu;
     2     yanzuo   ( T ):
     2     yanzuo       TASK req_unit.ttype := unit.procs(0).unit_type;
     2     yanzuo       TASK req_unit.index := unit.procs(0).unit_index;
     2     yanzuo   ELSE:
     2     yanzuo       TASK req_unit.ttype := unit.procs(proc_idx).unit_type;
     2     yanzuo       TASK req_unit.index := unit.procs(proc_idx).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c;
     2     yanzuo 
     2     yanzuo   DECISION (( unit.is_ip_niu AND proc_idx = 1));
     2     yanzuo   ( T ):
     2     yanzuo       /* APC-IPE interface must be created to hardware */
     2     yanzuo       /* VPP interface of NPGE/NPS1 must be created also */
     2     yanzuo       TASK create_state := atm_cre_state_t_new_object_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo 
   359    lifsong   DECISION ( eipu_unit_check__r( unit ) );
     2     yanzuo   ( T ):
     2     yanzuo       /* NP unit's PQIII IF does not notify to KREIVI again, how about APP MXU PQIII IF ?*/
     2     yanzuo       TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +atm_cre_state_t_cac_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   /* APP MXU's PQIII interface need to be created in HW again. Checked with Zhang Bei, interface is not needed to report*/
     2     yanzuo   DECISION app_mxu_unit_check__r ( unit );
     2     yanzuo   ( T ):
     2     yanzuo      TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c + atm_cre_state_t_cac_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Tributary unit interface is created by RS3PRB already. */
     2     yanzuo   DECISION ( app_mxu_unit_check__r(alp_unit) AND app_mxu_unit_check__r( unit ) = F AND
     2     yanzuo              NOT (unit.unit_type=unit_type_t_nip1_c AND if_idx=1) );
     2     yanzuo   (T):
     2     yanzuo      TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +atm_cre_state_t_cac_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   DECISION unit.procs(proc_idx).unit_type;
     2     yanzuo   /* Need to report VPP usage VP for non-NPQU */
     2     yanzuo   ( unit_type_t_a2sp_c, unit_type_t_dmpg_c, unit_type_t_tpg_c,
     2     yanzuo     unit_type_t_etgr_c, unit_type_t_vetgr_c, unit_type_t_ster_c):
     2     yanzuo      TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +
     2     yanzuo                           atm_cre_state_t_mpqu_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   CALL set_port_stage__r(unit, unit.procs(proc_idx).interface_index, port_stage);
     2     yanzuo   TASK status := get_interface_params__r( req_unit.ttype,
     2     yanzuo        req_unit.index,
     2     yanzuo        port_stage,
     2     yanzuo        intf_vp_params );
     2     yanzuo   DECISION ( status /= success_ec );
     2     yanzuo     ( T ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGCLU: Interface param req failure: %04X'
     2     yanzuo            '  unit type  %04X'
     2     yanzuo            '  unit index %04X',
     2     yanzuo            status,
     2     yanzuo            unit.procs(proc_idx).unit_type,
     2     yanzuo            unit.procs(proc_idx).unit_index );
     2     yanzuo       RETURN status; /* get_interface_param_ack_s NOK - write to log */
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION get_service__r( atm_res_broker__c, rbroke_pid, rbroke_attr );
     2     yanzuo   ( F ):
     2     yanzuo     RETURN unsuccessful_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK interface_id := unit.interfaces(if_idx).intf_id;
     2     yanzuo   TASK interf_type := atm_interface_type_t_intern_c;
   359    lifsong   
   359    lifsong   TASK get_alp_unit_for_brt__r( mxu_info, alp_unit );
     2     yanzuo 
     2     yanzuo /* When reporting interface for ipe_c interface in IPNIU or tow_mxu_c or mxu_c interface in NIP1, egress bw
     2     yanzuo value should be used to both ingress and egress fields. Perhaps egress values should be used even for tow_pqii interface
     2     yanzuo In NIP1
     2     yanzuo    if_idx(0) = port_stage_t_s1_s2_c(mxu_c)
     2     yanzuo    if_idx(1) = port_stage_t_s2_s3_c(tow_pqii)
     2     yanzuo    if_idx(2) = port_stage_t_s2_s1_c (tow_mxu) (this is never reported)
     2     yanzuo 
     2     yanzuo In IP-NIU
     2     yanzuo 
     2     yanzuo    if_idx(0) = port_stage_t_s1_s2_c(mxu_c)
     2     yanzuo    if_idx(1) = port_stage_t_ipe_c  (ipe_c) */
     2     yanzuo    DECISION ((unit.is_level2_alp_unit AND if_idx=0) OR
     2     yanzuo             (unit.is_ip_niu AND if_idx=1));
     2     yanzuo    (T):
     2     yanzuo       OUTPUT atm_interf_create_req_s(  interface_id,
     2     yanzuo                                        interf_type,
     2     yanzuo                                        mxu_info,
     2     yanzuo                                        intf_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                        intf_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                        intf_vp_params.max_vpi_bits,
     2     yanzuo                                        intf_vp_params.max_vci_bits,
     2     yanzuo                                        create_state ) TO rbroke_pid,
     2     yanzuo                                        SET ATTRIBUTES = rbroke_attr;
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo       OUTPUT atm_interf_create_req_s(  interface_id,
     2     yanzuo                                        interf_type,
     2     yanzuo                                        mxu_info,
     2     yanzuo                                        intf_vp_params.bandwidth,
     2     yanzuo                                        intf_vp_params.subport_params.sp_param.rate__cellps1,
     2     yanzuo                                        intf_vp_params.max_vpi_bits,
     2     yanzuo                                        intf_vp_params.max_vci_bits,
     2     yanzuo                                        create_state ) TO rbroke_pid,
     2     yanzuo                                        SET ATTRIBUTES = rbroke_attr;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
  1363       pshu   /* RBR timer is 15 seconds + 2.5s for name service synchronize */
  1363       pshu   SET ( NOW + 7*ack_waiting_time__c/2, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT atm_interf_create_ack_s ( interface_id, status );
     2     yanzuo     DECISION ( interface_id = unit.interfaces(if_idx).intf_id );
     2     yanzuo       ( T ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo       ( if_id_exists_ec ):
     2     yanzuo          /* ok */
     2     yanzuo        TASK status := success_ec;
     2     yanzuo       ELSE:
     2     yanzuo         /* RBROKE often returns NOT_READY_EC on the first attempt
     2     yanzuo         -- do not write log about that */
  1472       pshu         DECISION ( status /= not_ready_ec AND 
  1472       pshu                    status /= warm_up_in_progress_ec AND 
  1472       pshu                    status /= rbr_exec_saved_rel_reqs_ec)OR
     2     yanzuo                  unit.procs(proc_idx).start_attempts_left < 2;
     2     yanzuo           ( T ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                  @'JIGCLU: Interface create req failure: %04X'
     2     yanzuo                  ' interface ID=%04XH, unit type=%04X idx=%d'
     2     yanzuo                  , status, interface_id,
     2     yanzuo                  unit.procs(proc_idx).unit_type,
     2     yanzuo                  unit.procs(proc_idx).unit_index );
    62     yanzuo             DECISION status = no_free_bandwidth_ec;
    62     yanzuo             ( T ):
    62     yanzuo                 CALL set_conf_fail_alarm__r( unit, proc_idx, intf_cre_fail__c, status );
    62     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK status := message_waiting_timeout_ec;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
  1337    jinncao          @'JIGCLU: report_interface__r ack_timer expired: 0x%x'
  1337    jinncao          'if id:0x%x, unit type: 0x%x, unit index:%d'
  1337    jinncao          , status,  
  1337    jinncao          interface_id,unit.procs(proc_idx).unit_type,unit.procs(proc_idx).unit_index);
     2     yanzuo     RETURN status;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE report_interface__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE report_vp__r;
     2     yanzuo /*
     2     yanzuo  * Report VP via RBROKE
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit        jiifil__t,
     2     yanzuo     IN      proc_idx    byte,
     2     yanzuo     IN/OUT  alp_unit    jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
  1410      tinyu     status               error_t := success_ec,
     2     yanzuo     if_idx               byte,
     2     yanzuo     rbroke_pid           pid,
     2     yanzuo     rbroke_attr          attr_group_t,
     2     yanzuo     tpi                  tpi_t,
     2     yanzuo     alp                  unit_it_t,
     2     yanzuo     f_unit               unit_it_t,
     2     yanzuo     traf_para            traf_conf_para_t,
     2     yanzuo     intf_vp_params       alp1_intf_vp_params__t,
     2     yanzuo     create_state         atm_cre_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION mpqu_check__r(unit.unit_type) AND
     2     yanzuo             (
     2     yanzuo             (unit.procs(0).vp_reported = T AND unit.procs(proc_idx).interface_index = unit.procs(0).interface_index ) OR
     2     yanzuo             (unit.procs(1).vp_reported = T AND unit.procs(proc_idx).interface_index = unit.procs(1).interface_index ) OR
     2     yanzuo             (unit.procs(2).vp_reported = T AND unit.procs(proc_idx).interface_index = unit.procs(2).interface_index ) OR
     2     yanzuo             (unit.procs(3).vp_reported = T AND unit.procs(proc_idx).interface_index = unit.procs(3).interface_index )
     2     yanzuo             );
     2     yanzuo    (T):
     2     yanzuo       RETURN success_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo   CALL init_traf_params__r( traf_para );
     2     yanzuo   TASK if_idx := unit.procs(proc_idx).interface_index;
     2     yanzuo   TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c;
     2     yanzuo   DECISION unit.is_level2_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION proc_idx;
     2     yanzuo         ( 0 ): /* MXU -NIP */
     2     yanzuo           TASK status := get_interface_params__r(unit.procs(0).unit_type,
     2     yanzuo                unit.procs(0).unit_index,
     2     yanzuo                port_stage_t_s1_s2_c,
     2     yanzuo                intf_vp_params);
     2     yanzuo           TASK intf_vp_params.scheduler_path.scheduler := unit.interfaces(0).scheduler_subport;
     2     yanzuo           TASK intf_vp_params.scheduler_path.pre_configured := T;
     2     yanzuo         ( 1 ): /* NIP1 --> PQ2 */
     2     yanzuo           TASK status := get_interface_params__r(unit.procs(0).unit_type,
     2     yanzuo                unit.procs(0).unit_index,
     2     yanzuo                port_stage_t_s2_s3_c,
     2     yanzuo                intf_vp_params);
     2     yanzuo           TASK intf_vp_params.scheduler_path.scheduler := unit.interfaces(1).scheduler_subport;
     2     yanzuo           TASK intf_vp_params.scheduler_path.pre_configured := T;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK f_unit.ttype := unit.procs(0).unit_type,
     2     yanzuo            f_unit.index := unit.procs(0).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION unit.is_ip_niu;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION proc_idx;
     2     yanzuo         (0): /* IPNIU --> PQII */
     2     yanzuo           TASK status := get_alp1_if_vp_info__r( unit, proc_idx, alp_unit, intf_vp_params );
   118    lifsong           DECISION status /= success_ec;
   118    lifsong           ( T ):
   118    lifsong             RETURN status;
   118    lifsong           ENDDECISION;    
     2     yanzuo         (1): /* IPNIU --> IPE */
     2     yanzuo           TASK unit.interfaces(1).mphy_port := jig_nip_ipe__t_ipe_mphy_c;
     2     yanzuo           TASK create_state := atm_cre_state_t_new_object_c;
     2     yanzuo           TASK status := get_alp2_if_vp_info__r(unit, 1, unit, port_stage_t_ipe_c, F, intf_vp_params);
   118    lifsong           DECISION status /= success_ec;
   118    lifsong           ( T ):
   118    lifsong             RETURN status;
   118    lifsong           ENDDECISION;    
     2     yanzuo           TASK intf_vp_params.scheduler_path.pre_configured := F;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK f_unit.ttype := unit.procs(0).unit_type,
     2     yanzuo            f_unit.index := unit.procs(0).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo DECISION (app_unit_check__r( alp_unit ) AND
     2     yanzuo           NOT (unit.unit_type=unit_type_t_nip1_c AND if_idx=1) );
     2     yanzuo (T):
     2     yanzuo 	TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +atm_cre_state_t_cac_c;
     2     yanzuo ENDDECISION;
     2     yanzuo 
     2     yanzuo   DECISION unit.procs(proc_idx).unit_type;
     2     yanzuo   /* Need to report VPP usage VP for non-NPQU */
     2     yanzuo   ( unit_type_t_a2sp_c, unit_type_t_dmpg_c, unit_type_t_tpg_c,
     2     yanzuo     unit_type_t_etgr_c, unit_type_t_vetgr_c, unit_type_t_ster_c):
     2     yanzuo      TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +
     2     yanzuo                           atm_cre_state_t_mpqu_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   /* Reprot VP, for APP unit, PQIII related dont need cac */
   359    lifsong    DECISION eipu_unit_check__r( unit );
     2     yanzuo    ( T ):
     2     yanzuo       TASK  status := get_alp1_if_vp_info__r( unit, proc_idx, alp_unit, intf_vp_params );
   118    lifsong       DECISION status /= success_ec;
   118    lifsong       ( T ):
   118    lifsong         RETURN status;
   118    lifsong       ENDDECISION;         
     2     yanzuo       TASK  f_unit.ttype := unit.procs(0).unit_type,
     2     yanzuo             f_unit.index := unit.procs(0).unit_index;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
   359    lifsong    DECISION app_unit_check__r( unit );
     2     yanzuo 	(T):
     2     yanzuo       TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_hw_c +atm_cre_state_t_cac_c;
     2     yanzuo 	ENDDECISION;
     2     yanzuo 	
     2     yanzuo    DECISION NOT unit.is_level2_alp_unit
   359    lifsong                  AND NOT unit.is_ip_niu
   359    lifsong                  AND NOT eipu_unit_check__r( unit );
     2     yanzuo     ( T ):
     2     yanzuo       TASK status := get_alp1_if_vp_info__r( unit, proc_idx, alp_unit, intf_vp_params );
   118    lifsong       DECISION status /= success_ec;
   118    lifsong       ( T ):
   118    lifsong          RETURN status;
   118    lifsong       ENDDECISION;               
     2     yanzuo       TASK f_unit.ttype := unit.procs(proc_idx).unit_type,
     2     yanzuo            f_unit.index := unit.procs(proc_idx).unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ( status /= success_ec );
     2     yanzuo     ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                @'JIGCLU: Interface param req failure: %04X'
     2     yanzuo                '  unit type  %04X'
     2     yanzuo                '  unit index %04X',
     2     yanzuo                status,
     2     yanzuo                unit.procs(proc_idx).unit_type,
     2     yanzuo                unit.procs(proc_idx).unit_index );
     2     yanzuo #endif
     2     yanzuo       RETURN status; /* get_interface_param_ack_s NOK - write to log */
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION get_service__r( atm_res_broker__c, rbroke_pid, rbroke_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK tpi.level := tpi_level_t_vp_c,
     2     yanzuo        tpi.interf := unit.interfaces(if_idx).intf_id,
     2     yanzuo        tpi.vpi := unit.procs(proc_idx).vpi,
     2     yanzuo        tpi.vci := vci_t_unspecified_c;
   359    lifsong   TASK get_alp_unit_for_brt__r( alp, alp_unit );
     2     yanzuo 
     2     yanzuo   OUTPUT atm_vpltp_create_req_s ( tpi, atm_interface_type_t_intern_c,
     2     yanzuo          alp,
     2     yanzuo          f_unit,
     2     yanzuo          b_level_t_vc_c,
     2     yanzuo          traf_para, traf_para,
     2     yanzuo          end_point_t_not_in_segment_c,
     2     yanzuo          traffic_shaping_t (.
     2     yanzuo          shaping_option_t_none_c,
     2     yanzuo          shaping_option_t_none_c .),
     2     yanzuo          intf_vp_params.max_vci_bits,
     2     yanzuo          intf_vp_params.min_vci,
     2     yanzuo          intf_vp_params.max_vci,
     2     yanzuo          intf_vp_params.scheduler_path,
     2     yanzuo          create_state
     2     yanzuo          ) TO rbroke_pid,
     2     yanzuo          SET ATTRIBUTES = rbroke_attr;
     2     yanzuo   SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT atm_vpltp_create_ack_s ( rec_tp, rec_alp, status );
     2     yanzuo   DCL
     2     yanzuo       rec_tp    tpi_t,
     2     yanzuo       rec_alp   unit_it_t;
     2     yanzuo     DECISION ( tpi.interf = rec_tp.interf AND
     2     yanzuo              tpi.vpi = rec_tp.vpi AND
     2     yanzuo              tpi.vci = rec_tp.vci AND
     2     yanzuo              alp.ttype = rec_alp.ttype AND
     2     yanzuo              alp.index = rec_alp.index );
     2     yanzuo       ( T ):
     2     yanzuo         RESET ( ack_timer );
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION status;
   958   huantang       ( vpltp_exists_ec , vpi_already_exists_ec, vp_id_already_exists_ec ):
     2     yanzuo         TASK status := success_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( status /= success_ec );
     2     yanzuo       ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                  @'JIGCLU: vpltp create req failure: %04X'
     2     yanzuo                  ' interface ID %XH'
     2     yanzuo                  ' vpi %04X'
     2     yanzuo                  ' vci %04X'
     2     yanzuo                  , status, tpi.interf, tpi.vpi, tpi.vci );
     2     yanzuo #endif
     2     yanzuo         RETURN status; /* atm_vpltp_create_req_s NOK - write to log */
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo #if (test_logs)
     2     yanzuo         TASK status := message_waiting_timeout_ec;
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo              @'JIGCLU: report_vp__r ack_timer expired: %04X'
     2     yanzuo              ' interface ID %XH'
     2     yanzuo              ' vpi %04X'
     2     yanzuo              ' vci %04X'
     2     yanzuo              , status, tpi.interf, tpi.vpi, tpi.vci );
     2     yanzuo #endif
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE report_vp__r;
     2     yanzuo 
     2     yanzuo PROCEDURE port_conf_ph2__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit  jiifil__t,
    73     jamema     IN      alp_unit  jiifil__t,    
     2     yanzuo     IN/OUT  update  jii_update_info__t;
  1054    lifsong 
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong     
     2     yanzuo DCL
     2     yanzuo     ec  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo      DECISION ( app_mxu_unit_check__r( unit ) = T AND
     2     yanzuo                        unit.sym_mxu_flag = T );
     2     yanzuo      ( T ):
     2     yanzuo         /* Do sd port configuration for SYM-WO-APP-MXU in phase 2*/
  1354       pshu            TASK ec := conf_sd1g__r( unit );
  1354       pshu 	      DECISION ec;
  1354       pshu 	      ( /= success_ec ):
  1354       pshu 	         TASK dxsyslog_r( log_type_t_text_e_c,
  1354       pshu 	                         @'JIGCLU: fail to configure SD port for SYM-WO-APP-MXU'
  1354       pshu 	                          'Procedure: port_conf_ph2__r'
  1354       pshu 	                          'Status: 0X%X'
  1354       pshu 	                          'Unit type: 0X%04X'
  1354       pshu 	                          'Unit index: 0X%04X',
  1354       pshu 	                           ec, unit.unit_type, unit.unit_index );
  1379       pshu 	         RETURN ec;
  1354       pshu 	      ENDDECISION;
  1354       pshu      ENDDECISION;
     2     yanzuo 
     2     yanzuo      TASK ec := conf_ux__r( unit );
     2     yanzuo      DECISION ec;
     2     yanzuo      ( success_ec ):
     2     yanzuo         /* set port_conf_ph2_needed off
     2     yanzuo          * set port_conf_ph2_timestamp */
    73     jamema         CALL check_reconfig(unit,alp_unit,update);
     2     yanzuo         TASK unit.port_conf_ph2_needed := F;
     2     yanzuo         CALL flag__r( update, jii_field__t_pconf2_need_c );
     2     yanzuo         CALL flag__r( update, jii_field__t_pconf2_ts_c );
     2     yanzuo         /* Update the fields with new data */
     2     yanzuo         TASK update.rec_ptr := @unit;
  1354       pshu      ELSE:
  1354       pshu         DECISION ec;
  1354       pshu         (card_restarted_ec):
  1365       pshu            TASK unit.port_conf_ph2_needed := F;
  1365       pshu            CALL flag__r( update, jii_field__t_pconf2_need_c );
  1354       pshu            TASK update.rec_ptr := @unit;
  1354       pshu                  
  1465       pshu            TASK dxsyslog_r( log_type_t_text_i_c,
  1523       pshu            @'JIGCLU: Port configuration 2 failure '
  1523       pshu            'because of unit restart'
  1354       pshu            'Unit Type: %4X Unit Index: %4X',
  1354       pshu            unit.unit_type, unit.unit_index);
  1354       pshu         ELSE:
  1354       pshu             CALL set_conf_fail_alarm__r( unit, 0, port_conf_fail__c, ec );
  1354       pshu         ENDDECISION;
  1354       pshu 
  1354       pshu         DECISION unit.procs(0).start_attempts_left;
  1354       pshu         ( 0 ):
  1354       pshu 
  1376   shuyolin            TASK unit.port_conf_ph2_needed := F;
  1371   shuyolin            CALL flag__r( update, jii_field__t_pconf2_need_c );   
  1354       pshu            CALL flag__r( update, jii_field__t_start_att_c );
  1354       pshu            TASK update.rec_ptr := @unit,
  1354       pshu                      update.proc_idx := 0;
  1354       pshu          
  1354       pshu         ENDDECISION;
     2     yanzuo      ENDDECISION;
  1054    lifsong      
  1054    lifsong    RETURN ec;
     2     yanzuo ENDPROCEDURE port_conf_ph2__r;
     2     yanzuo 
     2     yanzuo /***********************************************************************/
     2     yanzuo /* Creation of NRT half-connections.                                   */
     2     yanzuo /***********************************************************************/
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE batch_halfconn_requests__r;
     2     yanzuo /*
     2     yanzuo  * This procedure sends one or more requests to WHISKY to create
     2     yanzuo  * the given half-connections in the target ALP unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      proc_idx     hms_processor_index_t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  vccs         jig_vccs_resources__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     i, n                 dword,
     2     yanzuo     result               error_t,
     2     yanzuo     tm_params            alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* todo: store tm params to JIIFIL record during if init,
     2     yanzuo   and use them here */
     2     yanzuo   TASK result := get_traf_manag_params__r(
     2     yanzuo        unit.procs( proc_idx ).unit_index,
     2     yanzuo        unit.procs( proc_idx ).vpi,
     2     yanzuo        unit.procs( proc_idx ).mphy_port,
     2     yanzuo        alp_unit.unit_type,
     2     yanzuo        alp_unit.unit_index,
     2     yanzuo        tm_params,
     2     yanzuo        tm_params_dummy );
     2     yanzuo   TASK i := 0, n := 0;
     2     yanzuo   WHILE i < vccs.item_count;
     2     yanzuo     TASK n := n + 1,
     2     yanzuo          i := i + 1;
     2     yanzuo     DECISION n;
     2     yanzuo       ( vc_half_conn_array_t_size_c ):
     2     yanzuo         /* max number of half-conns in WHISKY list request */
     2     yanzuo         TASK n := create_halfconns_in_hw__r( alp_unit.procs(0).phys_addr,
     2     yanzuo              alp_unit.co_alp_unit_phys_addr,
     2     yanzuo              alp_unit.co_alp_unit_updated,
     2     yanzuo              tm_params,
     2     yanzuo              unit.procs(proc_idx).vpi,
     2     yanzuo              unit.procs(proc_idx).mphy_port,
     2     yanzuo              n, vccs, dword(i - n) );
     2     yanzuo         TASK n := 0;
     2     yanzuo         TASK delay( 2 );
     2     yanzuo     ENDDECISION;
     2     yanzuo   ENDWHILE;
     2     yanzuo   DECISION n;
     2     yanzuo     ( /= 0 ):
     2     yanzuo       TASK n := create_halfconns_in_hw__r( alp_unit.procs(0).phys_addr,
     2     yanzuo            alp_unit.co_alp_unit_phys_addr,
     2     yanzuo            alp_unit.co_alp_unit_updated,
     2     yanzuo            tm_params,
     2     yanzuo            unit.procs(proc_idx).vpi,
     2     yanzuo            unit.procs(proc_idx).mphy_port,
     2     yanzuo            n, vccs, dword(i - n) );
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* compact the id list by removing connections which
     2     yanzuo   could not be created. */
     2     yanzuo   TASK i := 0, n := 0;
     2     yanzuo   WHILE i < vccs.item_count;
     2     yanzuo     DECISION vccs.res(i).conn_id;
     2     yanzuo       ( /= conn_id_t_undefined_c ):
     2     yanzuo         DECISION n < i;
     2     yanzuo           ( T ):
     2     yanzuo             TASK vccs.res(n) := vccs.res(i);
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK n := n + 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK i := i + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK vccs.item_count := n;
     2     yanzuo #if (T)
     2     yanzuo     /* return success_ec even if some half-connections
     2     yanzuo     could not be created. */
     2     yanzuo #else
     2     yanzuo       DECISION n < i;
     2     yanzuo         ( T ):
     2     yanzuo           /* some of the connections could not be created. */
  1177      myang           RETURN xconn_creation_failed_ec;
     2     yanzuo       ENDDECISION;
     2     yanzuo #endif
     2     yanzuo   RETURN success_ec;
     2     yanzuo ENDPROCEDURE batch_halfconn_requests__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1177      myang PROCEDURE brt_batch_xcon_batch_msgs_create__r;
     2     yanzuo /*
  1177      myang  * This procedure sends batch msg requests to RS3PRB to create
     2     yanzuo  * the given half-connections in the target ALP unit.
     2     yanzuo  **************************************************************************/
  1177      myang  
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  	io_unit			jiifil__t,
     2     yanzuo     IN/OUT   	io_brtpid   		pid,
     2     yanzuo     IN         in_proc_idx    byte,
     2     yanzuo     IN/OUT  	io_vccs         	jig_vccs_resources__t,
     2     yanzuo     IN			in_path_info	half_cconn_phy_info_t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
  1178      myang     i, n, l_start_offset        dword,
  1178      myang     app_half_conns                app_half_conn_array_t,
     2     yanzuo     l_result             error_t;
     2     yanzuo 
     2     yanzuo START;
  1178      myang       TASK  memset( bytepointer( @app_half_conns ), 0, SIZEOF( app_half_conns ));
  1178      myang       TASK i := 0, n := 0;
  1178      myang       WHILE i < io_vccs.item_count;	         
  1178      myang             TASK app_half_conns.item(n).tpi.level  := tpi_level_t_vc_c,
  1178      myang                   app_half_conns.item(n).tpi.interf := io_unit.interfaces(io_unit.procs(in_proc_idx).interface_index).intf_id,
  1178      myang                   app_half_conns.item(n).tpi.vpi    := io_unit.procs(in_proc_idx).vpi,
  1178      myang                   app_half_conns.item(n).tpi.vci    := io_vccs.res(i).vci;
  1178      myang             TASK app_half_conns.item(n).local_conn_id  := io_vccs.res(i).xconn_id; 
  1178      myang             TASK app_half_conns.item(n).xconn_dest.fabric_port := io_vccs.res(i).dest_fabric_port,
  1178      myang                   app_half_conns.item(n).xconn_dest.remote_connid := io_vccs.res(i).remote_xconn_id,
  1178      myang                   app_half_conns.item(n).ing_category := io_vccs.res(i).serv_category,
  1178      myang                   app_half_conns.item(n).egr_category := io_vccs.res(i).serv_category,
  1178      myang                   app_half_conns.item(n).status := unsuccessful_ec;
  1178      myang             TASK n := n + 1;
  1178      myang             TASK i := i + 1;            
  1178      myang             DECISION n;
  1178      myang                   ( app_half_conn_array_t_size_c ):
  1178      myang                   TASK  app_half_conns.item_count := n;
  1178      myang                   TASK  l_start_offset := dword(i - n );
  1178      myang                   /* max number of batch connection creation request */                  
  1178      myang                   TASK  l_result := brt_xconns_create__r( io_brtpid,
  1178      myang                                                                                     app_half_conns,
  1178      myang                                                                                     io_vccs,
  1178      myang                                                                                     in_path_info,
  1178      myang                                                                                     l_start_offset);
  1178      myang                   TASK n := 0;
  1178      myang             ENDDECISION;
  1178      myang       ENDWHILE;
  1178      myang       DECISION n;
  1178      myang             ( /= 0 ):
  1178      myang             TASK  app_half_conns.item_count := n;
  1178      myang             TASK	  l_start_offset :=dword(i  - n );
  1178      myang             TASK l_result := brt_xconns_create__r( io_brtpid,
  1178      myang                                                                    app_half_conns,
  1178      myang                                                                    io_vccs,
  1178      myang                                                                    in_path_info,
  1178      myang                                                                    l_start_offset);
  1178      myang       ENDDECISION;
  1178      myang       RETURN success_ec;
  1222      tinyu ENDPROCEDURE brt_batch_xcon_batch_msgs_create__r;
     2     yanzuo 
  1177      myang PROCEDURE brt_batch_xcon_single_msgs_create__r;
  1177      myang /*
  1177      myang  * This procedure sends batch msg requests to otherPRB to create
  1177      myang  * the given half-connections in the target ALP unit.
  1177      myang  **************************************************************************/
     2     yanzuo 
  1177      myang FPAR
  1177      myang     IN/OUT  	io_unit			jiifil__t,
  1177      myang     IN/OUT   	io_brtpid   		pid,
  1177      myang     IN         in_proc_idx    byte,
  1177      myang     IN/OUT  	io_vccs         	jig_vccs_resources__t,
  1177      myang     IN			in_path_info	half_cconn_phy_info_t;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang DCL
  1177      myang     i              dword,
  1177      myang     l_if_idx             byte,
  1177      myang     l_result             error_t,
  1177      myang     l_tpi                tpi_t;
  1177      myang     
  1177      myang START;
  1177      myang      TASK i := 0;
  1177      myang      WHILE i < io_vccs.item_count;
  1177      myang           TASK l_if_idx     := io_unit.procs(in_proc_idx).interface_index;
  1177      myang           TASK l_tpi.level  := tpi_level_t_vc_c,
  1177      myang           l_tpi.interf := io_unit.interfaces(l_if_idx).intf_id,
  1177      myang           l_tpi.vpi    := io_unit.procs(in_proc_idx).vpi,
  1177      myang           l_tpi.vci    := io_vccs.res(i).vci;
  1177      myang 	  TASK l_result := brt_xconn_create__r (io_brtpid,
  1177      myang    									 l_tpi,
  1177      myang    									 in_path_info,
  1177      myang    									 io_vccs.res(i));
  1177      myang           DECISION l_result;
  1177      myang           (/= success_ec):
  1177      myang                   TASK io_vccs.res(i).conn_id := conn_id_t_undefined_c;
  1177      myang 	  ENDDECISION;
  1177      myang           TASK i := i + 1;
  1177      myang      ENDWHILE;
  1177      myang      RETURN success_ec;
  1222      tinyu ENDPROCEDURE brt_batch_xcon_single_msgs_create__r;
  1177      myang 
  1177      myang /**************************************************************************/
  1177      myang PROCEDURE brt_batch_xcon_batch_msgs_remove__r;
  1177      myang /*
  1177      myang  * This procedure sends one or more requests to RS3PRB to remove
  1177      myang  * the given half-connections in the target ALP unit.
  1177      myang  **************************************************************************/
  1177      myang 
  1177      myang FPAR
  1177      myang     IN VIEWED  	in_unit			jiifil__t,
  1177      myang     IN/OUT   	io_brtpid   		pid,
  1177      myang     IN         in_proc_idx    byte,
  1177      myang     IN/OUT  	io_vccs         	jig_vccs_resources__t,
  1177      myang     IN			in_path_info	half_cconn_phy_info_t;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang DCL
  1178      myang     i, n, l_start_offset              dword,
  1178      myang     app_half_conns                app_half_conn_array_t,
  1177      myang     l_result             error_t:= success_ec;
  1177      myang START;
  1177      myang 
  1178      myang       TASK  memset( bytepointer( @app_half_conns ), 0, SIZEOF( app_half_conns ));
  1178      myang       TASK i := 0, n := 0;
  1178      myang       WHILE i < io_vccs.item_count;
  1178      myang             TASK app_half_conns.item(n).tpi.level  := tpi_level_t_vc_c,
  1178      myang                    app_half_conns.item(n).tpi.interf := in_unit.interfaces(in_unit.procs(in_proc_idx).interface_index).intf_id,
  1178      myang                    app_half_conns.item(n).tpi.vpi    := in_unit.procs(in_proc_idx).vpi,
  1178      myang                    app_half_conns.item(n).tpi.vci    := io_vccs.res(i).vci;
  1177      myang 
  1178      myang             TASK app_half_conns.item(n).local_conn_id  := io_vccs.res(i).xconn_id; 
  1178      myang             TASK app_half_conns.item(n).xconn_dest.fabric_port := io_vccs.res(i).dest_fabric_port,
  1178      myang                    app_half_conns.item(n).xconn_dest.remote_connid := io_vccs.res(i).remote_xconn_id,
  1178      myang                    app_half_conns.item(n).ing_category := io_vccs.res(i).serv_category,
  1178      myang                    app_half_conns.item(n).egr_category := io_vccs.res(i).serv_category,
  1178      myang                    app_half_conns.item(n).status := unsuccessful_ec;
  1178      myang             TASK n := n + 1;
  1178      myang             TASK i := i + 1;
  1178      myang 			
  1178      myang             DECISION n;
  1178      myang             ( app_half_conn_array_t_size_c ):
  1178      myang                   TASK  app_half_conns.item_count := n;
  1178      myang                   TASK  l_start_offset := dword(i - n );
  1178      myang                   /* max number of batch connection deletion request */
  1178      myang                   TASK l_result := brt_xconns_remove__r( io_brtpid,
  1178      myang                                                                                     app_half_conns,
  1178      myang                                                                                     io_vccs,
  1178      myang                                                                                     in_path_info,
  1178      myang                                                                                     l_start_offset);
  1178      myang                   TASK n := 0;
  1178      myang             ENDDECISION;
  1178      myang       ENDWHILE;
  1178      myang       
  1178      myang       DECISION n;
  1178      myang       ( /= 0 ):	        
  1178      myang             TASK  app_half_conns.item_count := n;
  1178      myang             TASK  l_start_offset :=dword(i  - n );
  1178      myang             TASK  l_result := brt_xconns_remove__r( io_brtpid,
  1178      myang                                                                                app_half_conns,
  1178      myang                                                                                io_vccs,
  1178      myang                                                                                in_path_info,
  1178      myang                                                                                l_start_offset);
  1178      myang       ENDDECISION;
  1177      myang 
  1177      myang      TASK i := 0, n := 0;
  1177      myang      WHILE i < io_vccs.item_count;
  1177      myang           DECISION io_vccs.res(i).conn_id;
  1177      myang 	   ( /= conn_id_t_undefined_c ):
  1177      myang 	      DECISION n < i;
  1177      myang 	      ( T ):
  1177      myang 	           TASK io_vccs.res(n) := io_vccs.res(i);
  1177      myang 	      ENDDECISION;
  1177      myang 	      TASK n := n + 1;
  1177      myang 	  ENDDECISION;
  1177      myang 	  TASK i := i + 1;
  1177      myang      ENDWHILE;
  1177      myang      TASK io_vccs.item_count := n;
  1177      myang 
  1177      myang      DECISION n < i;
  1177      myang      ( T ):
  1177      myang           RETURN xconn_creation_failed_ec;
  1177      myang      ENDDECISION;
  1177      myang 
  1177      myang      RETURN success_ec;
  1177      myang 
  1222      tinyu ENDPROCEDURE brt_batch_xcon_batch_msgs_remove__r;
  1177      myang 
  1177      myang /**************************************************************************/
  1177      myang PROCEDURE brt_batch_xcon_single_msgs_remove__r;
  1177      myang /*
  1177      myang  * This procedure sends one or more requests to RS3PRB to remove
  1177      myang  * the given half-connections in the target ALP unit.
  1177      myang  **************************************************************************/
  1177      myang FPAR
  1177      myang     IN VIEWED  	in_unit			jiifil__t,
  1177      myang     IN/OUT   	io_brtpid   		pid,
  1177      myang     IN         in_proc_idx    byte,
  1177      myang     IN/OUT  	io_vccs         	jig_vccs_resources__t,
  1177      myang     IN			in_path_info	half_cconn_phy_info_t;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang DCL
  1177      myang     i                     dword,
  1177      myang     l_result             error_t:= success_ec;
  1177      myang 
  1177      myang START;
  1177      myang 	   TASK i := 0;
  1177      myang    	   WHILE i < io_vccs.item_count;
  1177      myang #if (test_logs)
  1177      myang 		TASK dxsyslog_r( log_type_t_text_t_c,
  1177      myang 			@'brt_remove_nrt_conns__r 1'
  1177      myang 			' vci %03X conn_id %08X xconn_id %03X'
  1313       pshu 			'remote_xconn_id %04X dest_fab_port=%02X',
  1177      myang 			io_vccs.res(0).vci,
  1177      myang 			io_vccs.res(0).conn_id,
  1177      myang 			io_vccs.res(0).xconn_id,
  1177      myang 			io_vccs.res(0).remote_xconn_id,
  1313       pshu 			io_vccs.res(0).dest_fabric_port);
     2     yanzuo #endif
  1177      myang 			DECISION  io_vccs.res(i).vci /= 0;
  1177      myang 			( T ):
  1177      myang 	                	TASK l_result := brt_xconn_remove__r ( in_unit,
  1177      myang 	                        			io_brtpid,
  1177      myang 	                        			in_path_info,
  1177      myang 	                        			io_vccs.res(i),
  1177      myang 	                        			in_proc_idx);
  1177      myang 	                         DECISION l_result;
  1177      myang 	                         (success_ec):
  1177      myang 	                         
  1177      myang 	                         (brt_app_in_warming_ec):
  1177      myang 	                           OUT nrt_conn_del;
  1177      myang 	                         ELSE:
  1177      myang 	                       	   TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang 	                                                       @'JIGCLU: brt_xconn_remove__r1'
  1177      myang 	                                                       ' Status: %4X'
  1177      myang 	                                                       ' vci %03X conn_id %08X xconn_id %03X'
  1177      myang 	                                                       'remote_xconn_id %04X dest_fab_port=%02X',
  1177      myang 	                                                       l_result,
  1177      myang 	                                                       io_vccs.res(i).vci,
  1177      myang 	                                                       io_vccs.res(i).conn_id,
  1177      myang 	                                                       io_vccs.res(i).xconn_id,
  1177      myang 	                                                       io_vccs.res(i).remote_xconn_id,
  1177      myang 	                                                       io_vccs.res(i).dest_fabric_port);
  1177      myang 	                            OUT nrt_conn_del;
  1177      myang 	                         ENDDECISION;
  1177      myang 			ENDDECISION;	
  1177      myang 	                TASK i := i + 1;
  1177      myang 	       	ENDWHILE nrt_conn_del;
  1177      myang 
  1177      myang                  RETURN l_result;
  1177      myang 
  1222      tinyu ENDPROCEDURE brt_batch_xcon_single_msgs_remove__r;
  1177      myang 
  1177      myang /**************************************************************************/
  1177      myang PROCEDURE brt_batch_xcon_create__r;
  1177      myang /*
  1177      myang  * This procedure sends one or more requests to RS3PRB or KREIVI to create
  1177      myang  * the given half-connections in the target ALP unit.
  1177      myang  **************************************************************************/
  1177      myang FPAR
  1177      myang     IN/OUT  	io_unit			jiifil__t,
  1177      myang     IN/OUT   	io_brtpid   		pid,
  1177      myang     IN         in_proc_idx    byte,
  1177      myang     IN/OUT  	io_vccs         	jig_vccs_resources__t,
  1177      myang     IN			in_path_info	half_cconn_phy_info_t;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang DCL
  1177      myang     i, n              dword,
  1177      myang     l_result             error_t;
  1177      myang START;
  1177      myang      DECISION (get_pid_family_r(io_brtpid) = rs3prb_p);
  1177      myang      (T):
  1177      myang           TASK l_result:=brt_batch_xcon_batch_msgs_create__r(io_unit,
  1177      myang                                                                                                     io_brtpid,
  1177      myang                                                                                                     in_proc_idx,
  1177      myang                                                                                                     io_vccs,
  1177      myang                                                                                                     in_path_info);
  1177      myang     ELSE:
  1177      myang           TASK l_result:=brt_batch_xcon_single_msgs_create__r(io_unit,
  1177      myang                                                                                                     io_brtpid,
  1177      myang                                                                                                     in_proc_idx,
  1177      myang                                                                                                     io_vccs,
  1177      myang                                                                                                     in_path_info);    
  1177      myang     ENDDECISION;
  1177      myang     
  1177      myang      /* compact the id list by removing connections which could not be created. */
  1177      myang      TASK i := 0, n := 0;
  1177      myang      WHILE i < io_vccs.item_count;
  1177      myang           DECISION io_vccs.res(i).conn_id;
  1177      myang                ( /= conn_id_t_undefined_c ):
  1177      myang                DECISION n < i;
  1177      myang                ( T ):
  1177      myang                     TASK io_vccs.res(n) := io_vccs.res(i);
  1177      myang                ENDDECISION;
  1177      myang                TASK n := n + 1;
  1177      myang           ENDDECISION;	
  1177      myang           TASK i := i + 1;
  1177      myang       ENDWHILE;
  1177      myang       TASK io_vccs.item_count := n;
  1177      myang      RETURN success_ec;
     2     yanzuo ENDPROCEDURE brt_batch_xcon_create__r;
     2     yanzuo 
  1177      myang /**************************************************************************/
  1177      myang PROCEDURE brt_batch_xcon_remove__r;
  1177      myang /*
  1177      myang  * This procedure sends one or more requests to RS3PRB or KREIVI to remove
  1177      myang  * the given half-connections in the target ALP unit.
  1177      myang  **************************************************************************/
  1177      myang FPAR
  1177      myang     IN VIEWED  	in_unit			jiifil__t,
  1177      myang     IN/OUT   	io_brtpid   		pid,
  1177      myang     IN         in_proc_idx    byte,
  1177      myang     IN/OUT  	io_vccs         	jig_vccs_resources__t,
  1177      myang     IN			in_path_info	half_cconn_phy_info_t;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang DCL
  1222      tinyu     l_result      error_t:= success_ec;
  1177      myang START;
  1177      myang      DECISION (get_pid_family_r(io_brtpid) = rs3prb_p);
  1177      myang      (T):
  1177      myang           TASK l_result:=brt_batch_xcon_batch_msgs_remove__r(in_unit,
  1177      myang                                                                                                     io_brtpid,
  1177      myang                                                                                                     in_proc_idx,
  1177      myang                                                                                                     io_vccs,
  1177      myang                                                                                                     in_path_info);
  1177      myang       ELSE:
  1177      myang           TASK l_result:=brt_batch_xcon_single_msgs_remove__r(in_unit,
  1177      myang                                                                                                     io_brtpid,
  1177      myang                                                                                                     in_proc_idx,
  1177      myang                                                                                                     io_vccs,
  1177      myang                                                                                                     in_path_info);
  1177      myang 
  1177      myang       ENDDECISION;
  1177      myang       DECISION l_result;
  1410      tinyu       (/=success_ec):
  1410      tinyu            TASK io_vccs.item_count := 0;
  1177      myang       ENDDECISION;
  1177      myang                  
  1177      myang       RETURN l_result;
  1177      myang 
  1177      myang ENDPROCEDURE brt_batch_xcon_remove__r;
  1177      myang 
     2     yanzuo /******************************************************************************
     2     yanzuo This procedure initializes the ALP second set in served unit(MXU,NISx,NIP1).
     2     yanzuo This procedure uses parameters which are read from the XML files through XVALUE
     2     yanzuo in get_apc_params__r procedure.
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE init_alp_sp_ph2__r;
     2     yanzuo FPAR
     2     yanzuo     IN      alp_ep2         alp_ep2_t,
     2     yanzuo     IN      apc_manager_pid pid,
     2     yanzuo     IN      target_addr     computer_t,
     2     yanzuo     IN/OUT  set_alarm       bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK set_alarm := F;
     2     yanzuo   TASK set_pid_computer_r( apc_manager_pid, target_addr );
     2     yanzuo 
  1124   huantang   OUTPUT alp_init_sp_ph2_s( alp_ep2, T ) TO apc_manager_pid;
  1124   huantang 
     2     yanzuo   SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT alp_init_sp_ph2_ack_s( status, res_alp_ep2 );
     2     yanzuo     DCL
     2     yanzuo        res_alp_ep2       alp_ep2_t,
     2     yanzuo        status            error_t;
     2     yanzuo     DECISION ( alp_ep2.sp_param.sp_number /=
     2     yanzuo              res_alp_ep2.sp_param.sp_number )
     2     yanzuo              OR
     2     yanzuo              ( get_pid_computer_r( SENDER ) /=
     2     yanzuo              get_pid_computer_r( apc_manager_pid ));
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: INIT OF APC PH2 FAILED:'));
     2     yanzuo         TASK write_to_log(log_type_t_byte_e_c,
     2     yanzuo              log_write_item_t(@alp_ep2.sp_param.sp_number),1,
     2     yanzuo              log_text_info_t(@'JIGCLU:...FOR SUBPORT:'));
     2     yanzuo         TASK set_alarm := T;
     2     yanzuo     ENDDECISION;
     2     yanzuo #if (F)
     2     yanzuo         TASK log_data(0):=dword(unit_hms_addr.hms_address),
     2     yanzuo              log_data(1):=dword(unit_hms_addr.extended_addr);
     2     yanzuo         TASK file_status:=add_logwriting_to_jilfil__r(log_file,1,logwriter_t_JIGCLU__c,
     2     yanzuo              @'Init of schedulers and buffers for egress subport done for unit(HMS-addr):',
     2     yanzuo              log_data);
     2     yanzuo #endif
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
     2     yanzuo          log_text_info_t(@'JIGCLU: NO ALP_INIT_SP_PH2_ACK_S...'));
     2     yanzuo     TASK write_to_log(log_type_t_byte_e_c,
     2     yanzuo          log_write_item_t(@alp_ep2.sp_param.sp_number),1,
     2     yanzuo          log_text_info_t(@'JIGCLU:...FOR SUBPORT:'));
     2     yanzuo     TASK set_alarm := T;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE init_alp_sp_ph2__r;
     2     yanzuo 
     2     yanzuo /******************************************************************************
     2     yanzuo This procedure sends the subport parameters of the given unit to WHISKY in
     2     yanzuo active MXU.
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE send_subport_params__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  target_unit     jiifil__t,
     2     yanzuo     IN/OUT  target_proc     byte,
     2     yanzuo     IN/OUT  alp_unit        jiifil__t,
     2     yanzuo     IN      apc_mgr_pid     pid;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ingress_general2     apc_ig2_t,
     2     yanzuo     egress_general2      apc_eg2_t,
     2     yanzuo     alp_ep2              alp_ep2_t,
     2     yanzuo     result               error_t,
     2     yanzuo     alp1_target          computer_t,
     2     yanzuo     set_alarm            bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Check whether the support needs to be added for this unit. */
     2     yanzuo   /* todo: we probably need to do this to each and every unit
     2     yanzuo   * since we don't create interfaces and VPs via RBROKE
     2     yanzuo   * anymore. */
     2     yanzuo 
     2     yanzuo   /* A4.2: JIGGER sends phase 2 init messages when creating
     2     yanzuo   tributary/SP-ALP1 interfaces so it only has to send
     2     yanzuo   phase 2 parameters for WO-OMU and WO-ALP1 units. */
     2     yanzuo   DECISION ( target_unit.is_level1_alp_unit AND
     2     yanzuo            target_unit.is_wo_unit ) OR
     2     yanzuo            ( target_unit.procs(0).phys_addr = own_unit_phys_addr ) OR
     2     yanzuo            ( target_unit.is_level2_alp_unit );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN success_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Inquire phase 2 parameters from XVALUE. */
     2     yanzuo   TASK result := get_apc_ph2_params__r( target_unit,
     2     yanzuo        target_proc,
     2     yanzuo        ingress_general2,
     2     yanzuo        egress_general2,
     2     yanzuo        alp_ep2 );
     2     yanzuo   DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION alp_unit.co_alp_unit_updated;
     2     yanzuo         ( T ):
     2     yanzuo           /* Do the SP unit first, then the WO. */
     2     yanzuo           TASK alp1_target := alp_unit.co_alp_unit_phys_addr;
     2     yanzuo         ELSE:
     2     yanzuo           TASK alp1_target := alp_unit.procs(0).phys_addr;
     2     yanzuo       ENDDECISION;
     2     yanzuo       WHILE T;
     2     yanzuo         TASK result := init_alp_sp_ph2__r( alp_ep2, apc_mgr_pid,
     2     yanzuo              alp1_target, set_alarm );
     2     yanzuo         DECISION result;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION alp1_target = alp_unit.procs(0).phys_addr;
     2     yanzuo           ( T ):
     2     yanzuo             OUT alp1_pair__loop;
     2     yanzuo           ELSE:
     2     yanzuo             TASK alp1_target := alp_unit.procs(0).phys_addr;
     2     yanzuo         ENDDECISION;
     2     yanzuo       ENDWHILE alp1_pair__loop;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN result;
     2     yanzuo ENDPROCEDURE send_subport_params__r;
     2     yanzuo 
     2     yanzuo /******************************************************************************
     2     yanzuo * Create half-connections of the starting computer to its ALP1 unit(s).
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE hc_crt_for_apc__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      proc_idx     byte,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN      apc_mgr_pid  pid,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     sp_ph2_status        error_t,
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     if_idx               byte,
     2     yanzuo     vccs                 jig_vccs_params_ptr__t,
     2     yanzuo     vcc_resources        jig_vccs_resources_ptr__t,
     2     yanzuo     pah                  ptr_and_handle_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo   /* allocate buffer for param and result structures */
     2     yanzuo   DECISION allocate_buffer_r( SIZEOF( $vccs ) +
     2     yanzuo            SIZEOF( $vcc_resources ),
     2     yanzuo            0,
     2     yanzuo            pah );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN buffer_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK vccs := jig_vccs_params_ptr__t( pah.use_ptr.ptr );
     2     yanzuo   TASK vcc_resources := jig_vccs_resources_ptr__t( ADDPTR( vccs, 1 ));
     2     yanzuo   /* see if we need to send APC subport parameters */
     2     yanzuo   TASK if_idx := unit.procs(proc_idx).interface_index;
     2     yanzuo   TASK sp_ph2_status := not_done_ec;
     2     yanzuo   DECISION unit.interfaces( if_idx ).support_added;
     2     yanzuo     ( F ):
     2     yanzuo       /* add support for realtime connections */
     2     yanzuo       TASK sp_ph2_status := send_subport_params__r( unit, proc_idx,
     2     yanzuo            alp_unit,
     2     yanzuo            apc_mgr_pid );
     2     yanzuo       TASK ec := sp_ph2_status;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
   216      h10hu         DECISION need_diff_priority_nrt_conns__r(unit.unit_type);
    98    lifsong         ( F ): 
   617     qinggu              TASK ec := collect_connections__r( unit.procs(proc_idx).phys_addr,
   617     qinggu                                                            computer_t_any_c,
   617     qinggu                                                            $vccs );
    98    lifsong        ELSE:
    98    lifsong            DECISION unit.procs(proc_idx).half_conns_needed;
   617     qinggu              ( T ):
   617     qinggu                TASK ec := collect_high_pri_conns__r( unit, proc_idx,$vccs );
   617     qinggu            ENDDECISION;
   617     qinggu 
   617     qinggu            DECISION unit.procs(proc_idx).half_conns_ph2_needed;
   617     qinggu              ( T ):
   617     qinggu                TASK ec := collect_connections__r( 
   617     qinggu                             unit.procs(proc_idx).phys_addr,
   617     qinggu                             computer_t_any_c,
   617     qinggu                             $vccs );
   617     qinggu            ENDDECISION;
   617     qinggu 
   617     qinggu            DECISION unit.procs(proc_idx).half_conns_dsp_needed;
   617     qinggu              ( T ):
   617     qinggu                TASK ec := collect_dsp_connections__r( 
   617     qinggu                             unit.procs(proc_idx).phys_addr,
   617     qinggu                             computer_t_any_c,
   617     qinggu                             $vccs );
   617     qinggu            ENDDECISION;
   617     qinggu         ENDDECISION;    
     2     yanzuo   ENDDECISION;
    98    lifsong   
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK ec := get_conn_resources__r( unit.procs(proc_idx).phys_addr,
     2     yanzuo            F, /* not-existing conns only */
     2     yanzuo            T, /* nRT conns only */
     2     yanzuo            $vccs,
     2     yanzuo            $vcc_resources );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ( ec = success_ec ) AND ( vcc_resources->item_count > 0 );
     2     yanzuo     ( T ):
     2     yanzuo       TASK ec := batch_halfconn_requests__r( unit,
     2     yanzuo            proc_idx,
     2     yanzuo            alp_unit,
     2     yanzuo            $vcc_resources );
     2     yanzuo       DECISION ( ec = success_ec ) AND
     2     yanzuo                ( vcc_resources->item_count > 0 );
     2     yanzuo         ( T ):
     2     yanzuo           TASK ec := update_half_conn_states__r (
     2     yanzuo                unit.procs(proc_idx).phys_addr,
     2     yanzuo                $vcc_resources,
     2     yanzuo                T );
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION sp_ph2_status;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK unit.interfaces(if_idx).support_added := T;
     2     yanzuo       DECISION if_idx;
     2     yanzuo         ( 0 ):
     2     yanzuo           CALL flag__r( update, jii_field__t_i1_sup_added_c );
     2     yanzuo         ( 1 ):
     2     yanzuo           CALL flag__r( update, jii_field__t_i2_sup_added_c );
     2     yanzuo         ( 2 ):
     2     yanzuo           CALL flag__r( update, jii_field__t_i3_sup_added_c );
   470    lifsong         ( 3 ):
   470    lifsong           CALL flag__r( update, jii_field__t_i4_sup_added_c );          
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* Update the above fields with new data */
     2     yanzuo       TASK update.rec_ptr := @unit;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK free_buffer_r( pah.use_handle.handle );
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE hc_crt_for_apc__r;
     2     yanzuo 
     2     yanzuo /*****************************************************************************/
     2     yanzuo PROCEDURE hc_crt_for_app__r;
     2     yanzuo /*
     2     yanzuo This procedure create XCONN for APP units and the units connected to APP MXU through.
     2     yanzuo Some diffrence with hc_crt_for_apc__r routine is for APP units, the xconn created to WO-UNITs need
     2     yanzuo to create again in SP-UNITs, and the xconn created to SP-UNITs need to create again in WO-UNITs
     2     yanzuo  *****************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo    IN/OUT  io_unit       	jiifil__t,
     2     yanzuo    IN      in_proc_idx     	byte,
     2     yanzuo    IN/OUT  io_alp_unit   	jiifil__t,
     2     yanzuo    IN/OUT  io_update     jii_update_info__t;
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_unit_brtpid      	pid,
     2     yanzuo    l_co_unit_brtpid		pid,
     2     yanzuo    l_xc_status          error_t:=success_ec,
  1410      tinyu    l_status      			error_t :=success_ec,
     2     yanzuo    l_path_info   			half_cconn_phy_info_t,
     2     yanzuo    l_if_idx          	byte,
     2     yanzuo    l_vccs            	jig_vccs_params_ptr__t,
     2     yanzuo    l_vcc_resources   	jig_vccs_resources_ptr__t,
   559    lifsong    l_pah             	ptr_and_handle_t,
   559    lifsong    wo_alp_unit_phy_addr phys_address_t,
   559    lifsong    wo_io_unit_phy_addr  phys_address_t,
   559    lifsong    is_app        bool,
   559    lifsong    target_unit   jiifil__t,
   559    lifsong    alp_unit      jiifil__t;
   559    lifsong 	
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo   /* allocate buffer for param and result structures */
     2     yanzuo   DECISION allocate_buffer_r( SIZEOF( $l_vccs ) + SIZEOF( $l_vcc_resources ), 0, l_pah );
     2     yanzuo   ( F ):
     2     yanzuo      RETURN buffer_not_available_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   /*Arthur: if NP unit, need create IF for PQIII again*/
   359    lifsong   DECISION eipu_unit_check__r(io_unit) AND in_proc_idx = 0;
     2     yanzuo   (T):
     2     yanzuo   	  TASK l_status := if_init_app_trib__r ( io_unit, in_proc_idx, io_alp_unit, io_update );
     2     yanzuo   	  DECISION l_status;
     2     yanzuo   	  ( /= success_ec ):
     2     yanzuo   	  		TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo   		   RETURN l_status;
     2     yanzuo   	  ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   	TASK l_vccs := jig_vccs_params_ptr__t( l_pah.use_ptr.ptr );
     2     yanzuo   	TASK l_vcc_resources := jig_vccs_resources_ptr__t( ADDPTR( l_vccs, 1 ));
     2     yanzuo 
   359    lifsong   /*Ru Litao: For all APP-units, io_unit is APP-units*/
   359    lifsong   DECISION classify__r( io_unit, in_proc_idx, io_alp_unit );
   359    lifsong   ( unit_class__t_app_trib_c ):
     2     yanzuo 		CALL	get_brt_pid__r(io_alp_unit.unit_type, io_alp_unit.procs(0).phys_addr,l_unit_brtpid);
   359    lifsong 	ELSE: /*ss7u unit is included here also*/
     2     yanzuo 		CALL	get_brt_pid__r(io_unit.unit_type, io_unit.procs(0).phys_addr,l_unit_brtpid);
     2     yanzuo 	ENDDECISION;
     2     yanzuo 
     2     yanzuo 	/*Ru Litao: The sequence should be:
     2     yanzuo      For WO-APP, just create its half connection. Just non-existing, Path info is WO-APP's
     2     yanzuo      For SP-APP, Firstly create its half connection. Just non-existing, Path info is SP-APP's
     2     yanzuo      				  then create WO-APP's ignore connection. existed connections, Path info is SP-APP's
     2     yanzuo                  Create its ignore connection lastly. existed connections, Path info is WO-APP's*/
     2     yanzuo 
   216      h10hu     DECISION need_diff_priority_nrt_conns__r(io_unit.unit_type);
    98    lifsong     ( F ):
     2     yanzuo   	TASK l_status := collect_connections__r( io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo 												           computer_t_any_c,
     2     yanzuo 												           $l_vccs );
    98    lifsong     ELSE:
    98    lifsong        DECISION io_unit.procs(in_proc_idx).half_conns_needed;
   617     qinggu          ( T ):
   617     qinggu            TASK l_status := collect_high_pri_conns__r( io_unit, in_proc_idx,$l_vccs );
   617     qinggu        ENDDECISION;
   617     qinggu 
   617     qinggu        DECISION io_unit.procs(in_proc_idx).half_conns_ph2_needed;
   617     qinggu          ( T ):
   617     qinggu            TASK l_status := collect_connections__r( 
   617     qinggu                                 io_unit.procs(in_proc_idx).phys_addr,
   617     qinggu                                 computer_t_any_c,
   617     qinggu                                 $l_vccs );
   617     qinggu        ENDDECISION;
   617     qinggu 
   617     qinggu        DECISION io_unit.procs(in_proc_idx).half_conns_dsp_needed;
   617     qinggu          ( T ):
   617     qinggu            TASK l_status := collect_dsp_connections__r( 
   617     qinggu                                 io_unit.procs(in_proc_idx).phys_addr,
   617     qinggu                                 computer_t_any_c,
   617     qinggu                                 $l_vccs );
   617     qinggu        ENDDECISION;
    98    lifsong    ENDDECISION;
    98    lifsong    
     2     yanzuo    DECISION l_status;
     2     yanzuo   	( /= success_ec ):
     2     yanzuo   		TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo   	   RETURN l_status;
     2     yanzuo   	ENDDECISION;
     2     yanzuo   	
     2     yanzuo  	TASK l_status:= get_conn_resources__r( io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo            											F, /* not-existing conns only */
     2     yanzuo 													   T, /* nRT conns only */
     2     yanzuo 													   $l_vccs,
     2     yanzuo 													   $l_vcc_resources );
     2     yanzuo   	
     2     yanzuo   	DECISION l_status;
     2     yanzuo   	( /= success_ec ):
     2     yanzuo   		TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo   	   RETURN l_status;
     2     yanzuo   	ENDDECISION;
     2     yanzuo   	
     2     yanzuo    TASK l_if_idx := io_unit.procs(in_proc_idx).interface_index;
     2     yanzuo   	CALL get_path_info__r( io_unit, io_alp_unit, in_proc_idx, l_path_info );
     2     yanzuo 
     2     yanzuo 	DECISION ( l_vcc_resources->item_count > 0 );
     2     yanzuo    ( T ):
     2     yanzuo       TASK l_xc_status := brt_batch_xcon_create__r( io_unit,
     2     yanzuo 														       l_unit_brtpid,
     2     yanzuo 														       in_proc_idx,
     2     yanzuo 														       $l_vcc_resources,
     2     yanzuo 														       l_path_info);
     2     yanzuo 		DECISION l_xc_status;
     2     yanzuo 		( /=success_ec ):
     2     yanzuo 			TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                        @'JIGCLU: BRT ATM xconn creation failed.'
     2     yanzuo                         'ALP Unit type  : 0X%X '
     2     yanzuo                         'ALP Unit index : 0X%X'
     2     yanzuo                         'l_brtpid: 0X%X'
     2     yanzuo                         'result: 0X%X',
     2     yanzuo                          io_unit.unit_type, io_unit.unit_index, l_unit_brtpid, l_status );
     2     yanzuo 		ENDDECISION;
     2     yanzuo 		
     2     yanzuo       DECISION ( l_vcc_resources->item_count > 0 );
     2     yanzuo       ( T ):
     2     yanzuo          TASK l_status := update_half_conn_states__r ( io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo 												                    $l_vcc_resources,
     2     yanzuo 													                 T );
     2     yanzuo 	      DECISION l_status;
     2     yanzuo 		   ( /=success_ec ):
     2     yanzuo 		   	TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo 			   RETURN l_status;
     2     yanzuo 		   ENDDECISION;
     2     yanzuo      	ENDDECISION;
     2     yanzuo   	ENDDECISION;
     2     yanzuo 
     2     yanzuo /************************************************************************************************/
     2     yanzuo /*If the target unit is SP-APP unit, then create all existed 1/2 xconns (not just previous created) to WO-APP again*/
   559    lifsong    DECISION  app_unit_check__r( io_unit )  AND (io_unit.is_wo_unit = F);
   559    lifsong    ( T ):
   559    lifsong       TASK l_status := physical_address_r( io_unit.procs(0).unit_type, io_unit.procs(0).unit_index^0x1, wo_alp_unit_phy_addr );
   559    lifsong       DECISION l_status;
   559    lifsong       ( /= success_ec ):
   559    lifsong          TASK dxsyslog_r( log_type_t_text_i_c,
   559    lifsong                        @'JIGCLU: get alp co unit physical address failed.'
   559    lifsong                         'ALP Unit type  : 0X%X '
   559    lifsong                         'ALP Unit index : 0X%X'
   559    lifsong                         'result: 0X%X',
   559    lifsong                          io_unit.unit_type, io_unit.unit_index, l_co_unit_brtpid, l_status );
   559    lifsong   	    TASK free_buffer_r( l_pah.use_handle.handle );
   559    lifsong          RETURN l_status;
   559    lifsong       ENDDECISION;
   559    lifsong       
   559    lifsong       TASK l_status := physical_address_r( io_unit.procs(in_proc_idx).unit_type, io_unit.procs(in_proc_idx).unit_index^0x1, wo_io_unit_phy_addr );
   559    lifsong       
   559    lifsong       DECISION l_status;
   559    lifsong       ( /= success_ec ):
   559    lifsong          TASK dxsyslog_r( log_type_t_text_i_c,
   559    lifsong                        @'JIGCLU: get alp io unit physical address failed.'
   559    lifsong                         'io Unit type  : 0X%X '
   559    lifsong                         'io Unit index : 0X%X'
   559    lifsong                         'result: 0X%X',
   559    lifsong                          io_unit.unit_type, io_unit.unit_index, l_co_unit_brtpid, l_status );
   559    lifsong          TASK free_buffer_r( l_pah.use_handle.handle );
   559    lifsong          RETURN l_status;
   559    lifsong       ENDDECISION;
   559    lifsong 
   559    lifsong       
     2     yanzuo 		TASK l_status := collect_connections__r( io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo 												           computer_t_any_c,
     2     yanzuo 												           $l_vccs );
     2     yanzuo  		DECISION l_status;
     2     yanzuo 		( /=success_ec ):
     2     yanzuo 			TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo 		   RETURN l_status;
     2     yanzuo 		ENDDECISION;
     2     yanzuo 		
     2     yanzuo  		TASK l_status:= get_conn_resources__r( io_unit.procs(in_proc_idx).phys_addr,
     2     yanzuo            													T, /* existed conns */
     2     yanzuo 													         T, /* nRT conns only */
     2     yanzuo 													         $l_vccs,
     2     yanzuo 													         $l_vcc_resources );
     2     yanzuo   		
     2     yanzuo   		DECISION l_status;
     2     yanzuo 		( /=success_ec ):
     2     yanzuo 			TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo 		   RETURN l_status;
     2     yanzuo 		ENDDECISION;
     2     yanzuo 		
     2     yanzuo 		DECISION (l_vcc_resources->item_count > 0);
     2     yanzuo 		( T ):
   559    lifsong 			CALL  get_brt_pid__r(io_alp_unit.unit_type, wo_alp_unit_phy_addr,l_co_unit_brtpid);
   559    lifsong          
     2     yanzuo 			TASK l_status := brt_batch_xcon_create__r( io_unit,
     2     yanzuo 													           	l_co_unit_brtpid,
     2     yanzuo 													           	in_proc_idx,
     2     yanzuo 													           	$l_vcc_resources,
     2     yanzuo 													           	l_path_info);
     2     yanzuo 	   	DECISION l_status;
     2     yanzuo 			( /=success_ec ):
     2     yanzuo 				TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo                        @'JIGCLU: BRT IGNOR xconn creation failed on WO unit.'
     2     yanzuo                         'ALP Unit type  : 0X%X '
     2     yanzuo                         'ALP Unit index : 0X%X'
     2     yanzuo                         'l_brtpid: 0X%X'
     2     yanzuo                         'result: 0X%X',
     2     yanzuo                          io_unit.unit_type, io_unit.unit_index, l_co_unit_brtpid, l_status );
     2     yanzuo             DECISION l_xc_status;
     2     yanzuo             ( success_ec ):
     2     yanzuo                TASK l_xc_status := l_status;
     2     yanzuo             ENDDECISION;
     2     yanzuo 			ENDDECISION;
     2     yanzuo 		
     2     yanzuo 	   	
     2     yanzuo 		/*Arthur: If here the operation failed for some xconns, then the xconns between two unit will be inconsistent*/
     2     yanzuo 		/*NO need to update conn state, be cause all these xconn have been create before*/
     2     yanzuo 		ENDDECISION;
     2     yanzuo /************************************************************************************************/
     2     yanzuo 
     2     yanzuo    /*Start to create the WO-APP unit targeted xconns to SP units, here all xconn has been created to WO-APP-PQIII
     2     yanzuo    will be recreate to SP-APP unit again, NRT+RT*/
     2     yanzuo /***************************************************************************************************/
     2     yanzuo /* There could be leak from BRTSEB point of view, because when JIGGER SP-APP cluster hand operation on this task    */
     2     yanzuo /*   maybe TOMPRB has request JIGGER conn hand to create xconn to WO-APP-PQIII at same time, these xconn has    */
     2     yanzuo /*  the possiblity not be recreate to SP-APP.  But lets see what will happen in real case, here just a reminder.                */
     2     yanzuo /***************************************************************************************************/
   559    lifsong 		TASK l_status := collect_connections__r( wo_io_unit_phy_addr,
     2     yanzuo      													      computer_t_any_c,
     2     yanzuo 												            $l_vccs );
     2     yanzuo 	  	DECISION l_status;
     2     yanzuo   		( /= success_ec ):
     2     yanzuo   			TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo   	   	RETURN l_status;
     2     yanzuo   		ENDDECISION;
     2     yanzuo   	
   559    lifsong 	  	TASK l_status:= get_conn_resources__r( wo_io_unit_phy_addr,
     2     yanzuo 													           T, /* existing conns only */
   559    lifsong 													           T, /* nRTconns*/
     2     yanzuo 													           $l_vccs,
     2     yanzuo 													           $l_vcc_resources );
     2     yanzuo 		
     2     yanzuo 		DECISION l_status;
     2     yanzuo   		( /= success_ec ):
     2     yanzuo   			TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo   	   	RETURN l_status;
     2     yanzuo   		ENDDECISION;
     2     yanzuo 		
     2     yanzuo 		DECISION ( l_vcc_resources->item_count > 0 );
     2     yanzuo 	   ( T ):
   559    lifsong 	          CALL get_path_info__r( io_alp_unit, io_alp_unit, in_proc_idx, l_path_info );
   559    lifsong 	          
   559    lifsong 	          DECISION ss7u_unit_check__r( io_unit.procs(in_proc_idx).unit_type);
   559    lifsong 	          ( T ):
   559    lifsong             	   TASK l_status := get_xcon_unit__r(wo_alp_unit_phy_addr,manager_pid, is_app, target_unit, alp_unit);
   559    lifsong             	   DECISION l_status;
   559    lifsong             	   (/=success_ec):
   559    lifsong             	  	TASK free_buffer_r( l_pah.use_handle.handle );
   559    lifsong             		RETURN l_status;
   559    lifsong             	   ENDDECISION;
   559    lifsong             	   TASK l_status := brt_batch_xcon_create__r( alp_unit,
     2     yanzuo         														    l_unit_brtpid,
     2     yanzuo         														    in_proc_idx,
     2     yanzuo 														          $l_vcc_resources,
     2     yanzuo 														          l_path_info);
   559    lifsong             	ELSE:
   559    lifsong      		   TASK l_status := brt_batch_xcon_create__r( io_alp_unit,
   559    lifsong         														    l_unit_brtpid,
   559    lifsong         														    in_proc_idx,
   559    lifsong 														          $l_vcc_resources,
   559    lifsong 														          l_path_info);
   559    lifsong               ENDDECISION;
     2     yanzuo 			DECISION l_status;
     2     yanzuo   			( /= success_ec ):
     2     yanzuo   				TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo                        @'JIGCLU: BRT IGNOR xconn creation failed on SP unit.'
     2     yanzuo                         'ALP Unit type  : 0X%X '
     2     yanzuo                         'ALP Unit index : 0X%X'
     2     yanzuo                         'l_brtpid: 0X%X'
     2     yanzuo                         'result: 0X%X',
     2     yanzuo                          io_unit.unit_type, io_unit.unit_index, l_unit_brtpid, l_status );
     2     yanzuo             DECISION l_xc_status;
     2     yanzuo             ( success_ec ):
     2     yanzuo                TASK l_xc_status := l_status;
     2     yanzuo             ENDDECISION;
     2     yanzuo   			ENDDECISION;
     2     yanzuo 		   /*NO need to update conn state, be cause all these xconn have been create before*/
     2     yanzuo   		ENDDECISION;
     2     yanzuo   	ENDDECISION;
     2     yanzuo   		
     2     yanzuo 	TASK free_buffer_r( l_pah.use_handle.handle );
     2     yanzuo    RETURN l_xc_status;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE hc_crt_for_app__r;
     2     yanzuo 
     2     yanzuo /*****************************************************************************/
     2     yanzuo PROCEDURE hc_create__r;
     2     yanzuo /*
     2     yanzuo ******************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      proc_idx     byte,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN      apc_mgr_pid  pid,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
   244     yanzuo    l_status       error_t := success_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION app_mxu_unit_check__r( unit ) AND
     2     yanzuo             unit.sym_mxu_flag ;
     2     yanzuo    ( T ):
   361    lifsong       DECISION sym_app_pre_xc_created;
   361    lifsong       ( F ):
   361    lifsong           /* Tilly's comment: MXU part 1/2 xconn terminated in MD FPGA is already created by FIG
   361    lifsong                don't need to create it again, only OMU part 1/2 xconn is created by BRTSEB */
   361    lifsong            TASK l_status := setup_md_fpga_by_brt__r( alp_unit/*omu_unit */, unit /* alp_unit */,
   361    lifsong                                                      proc_idx );
   361    lifsong            DECISION l_status;
   361    lifsong            ( /= success_ec ):
   361    lifsong               RETURN l_status;
   361    lifsong            ENDDECISION;
   361    lifsong            TASK sym_app_pre_xc_created := T;
     2     yanzuo #if (test_logs)
   361    lifsong            TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: use setup_md_fpga_by_brt__r to '
     2     yanzuo                         '        create other xconn for omu unit '
     2     yanzuo                         'Procedure: hc_create__r '
     2     yanzuo                         'ALP Unit type  : 0X%X '
     2     yanzuo                         'ALP Unit index : 0X%X'
     2     yanzuo                         'result: 0X%X',
     2     yanzuo                          alp_unit.unit_type, alp_unit.unit_index,
     2     yanzuo                         l_status );
     2     yanzuo #endif
   361    lifsong      ENDDECISION;
   361    lifsong      /* if OMU interface+VP creation succeeded, update OMU
     2     yanzuo           information in JIIFIL: */
   361    lifsong      /* Switch xconn1 & xconn2 for SYM-WO-APP-MXU */
     2     yanzuo 
   361    lifsong      TASK l_status := notify_switch_over__r();
   361    lifsong      DECISION l_status;
   361    lifsong      ( /= success_ec ):
   361    lifsong         RETURN l_status;
   361    lifsong      ENDDECISION;
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /* The hc of APP unit or app-trib unit should be created by BRTSEB */
     2     yanzuo    DECISION app_unit_check__r( unit ) OR
   359    lifsong             classify__r( unit, proc_idx, alp_unit ) = unit_class__t_app_trib_c /*OR
   359    lifsong             classify__r( unit, alp_unit ) = unit_class__t_ss7u_c  ss7u is not needed for it is app unit*/;
     2     yanzuo    ( T ):
     2     yanzuo #if (test_logs)
     2     yanzuo        TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: enter into hc_crt_for_app '
     2     yanzuo                         'Procedure: hc_create__r '
     2     yanzuo                         'Target Unit: 0X%X '
     2     yanzuo                         'ALP Unit: 0X%X'
     2     yanzuo                         'mphy_port: 0x%X',
     2     yanzuo                          unit.unit_type, alp_unit.unit_type,
     2     yanzuo                          unit.interfaces(0).mphy_port );
     2     yanzuo #endif
     2     yanzuo       TASK l_status := hc_crt_for_app__r( unit, proc_idx, alp_unit, update );
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo #if (test_logs)
     2     yanzuo        TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                        @'JIGCLU: enter into hc_crt_for_apc '
     2     yanzuo                         'Procedure: hc_create__r '
     2     yanzuo                         'Target Unit: 0X%X '
     2     yanzuo                         'ALP Unit: 0X%X'
     2     yanzuo                         'result: 0X%X',
     2     yanzuo                          unit.unit_type, alp_unit.unit_type,
     2     yanzuo                         l_status );
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo       TASK l_status := hc_crt_for_apc__r( unit, proc_idx, alp_unit, apc_mgr_pid, update );
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( success_ec ):
   216      h10hu       DECISION need_diff_priority_nrt_conns__r(unit.unit_type);
    98    lifsong      ( F ):
    98    lifsong            TASK unit.procs(proc_idx).half_conns_needed := F;
    98    lifsong            CALL flag__r( update, jii_field__t_hc_need_c );
    98    lifsong            TASK unit.procs(proc_idx).half_conns_created := T;
    98    lifsong            CALL flag__r( update, jii_field__t_hc_created_c );
    98    lifsong      ELSE:
   617     qinggu            DECISION unit.procs(proc_idx).half_conns_dsp_needed;
   617     qinggu            ( T ):
   617     qinggu                TASK unit.procs(proc_idx).half_conns_dsp_needed := F;
   617     qinggu                CALL flag__r( update, jii_field__t_hc_dsp_need_c );
   617     qinggu                TASK unit.procs(proc_idx).half_conns_dsp_created := T;
   617     qinggu                CALL flag__r( update, jii_field__t_hc_dsp_created_c );
   617     qinggu            ENDDECISION;
   617     qinggu 
   617     qinggu            DECISION unit.procs(proc_idx).half_conns_ph2_needed;
   617     qinggu            ( T ):
   617     qinggu                TASK unit.procs(proc_idx).half_conns_ph2_needed := F;
   617     qinggu                CALL flag__r( update, jii_field__t_hc_ph2_need_c );
   617     qinggu                TASK unit.procs(proc_idx).half_conns_ph2_created := T;
   617     qinggu                CALL flag__r( update, jii_field__t_hc_ph2_created_c );
   617     qinggu                DECISION need_create_dsp_conns__r(unit.procs(proc_idx).phys_addr);
   617     qinggu                ( T ):
   617     qinggu                    TASK unit.procs(proc_idx).half_conns_dsp_needed := T;
   617     qinggu                    CALL flag__r( update, jii_field__t_hc_dsp_need_c );
   660     qinggu                ELSE:
   660     qinggu                    TASK unit.procs(proc_idx).half_conns_dsp_created := T;
   660     qinggu                    CALL flag__r( update, jii_field__t_hc_dsp_created_c );
   617     qinggu                ENDDECISION;
   617     qinggu                
   617     qinggu            ENDDECISION;
   617     qinggu      
    98    lifsong            DECISION unit.procs(proc_idx).half_conns_needed;
    98    lifsong            ( T ):
    98    lifsong                TASK unit.procs(proc_idx).half_conns_needed := F;
    98    lifsong                CALL flag__r( update, jii_field__t_hc_need_c );
    98    lifsong                TASK unit.procs(proc_idx).half_conns_created := T;
    98    lifsong                CALL flag__r( update, jii_field__t_hc_created_c );
    98    lifsong                TASK unit.procs(proc_idx).half_conns_ph2_needed := T;
    98    lifsong                CALL flag__r( update, jii_field__t_hc_ph2_need_c );
   617     qinggu                TASK unit.procs(proc_idx).half_conns_dsp_needed := F;
   617     qinggu                CALL flag__r( update, jii_field__t_hc_dsp_need_c );
    98    lifsong            ENDDECISION;
    98    lifsong       ENDDECISION;
    98    lifsong       
     2     yanzuo       /* Update the fields with new data */
     2     yanzuo       TASK update.proc_idx := proc_idx;
    98    lifsong       TASK update.rec_ptr := @unit;      
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE hc_create__r;
     2     yanzuo 
     2     yanzuo /*****************************************************************************/
     2     yanzuo PROCEDURE apc_init__r;
     2     yanzuo /*
     2     yanzuo  *****************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit        jiifil__t,
     2     yanzuo     IN/OUT  alp_for_nip jiifil__t,
     2     yanzuo     IN/OUT  update      jii_update_info__t;
  1054    lifsong 
  1054    lifsong RETURNS
  1054    lifsong     error_t;
  1054    lifsong     
     2     yanzuo DCL
     2     yanzuo     ec  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION unit.is_level2_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       /* Set SFU-port for NIP */
     2     yanzuo       TASK unit.sfu_port_number := alp_for_nip.sfu_port_number;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK ec := init_apc_hw__r( unit );
     2     yanzuo 
     2     yanzuo   DECISION ec;
     2     yanzuo   ( success_ec ):
     2     yanzuo      TASK unit.apc_init_needed := F;
     2     yanzuo      CALL flag__r( update, jii_field__t_apc_init1_need_c );
     2     yanzuo      DECISION unit.is_level1_alp_unit;
     2     yanzuo      ( T ):
     2     yanzuo         CALL flag__r( update, jii_field__t_setg_symmxu_apc_c );
     2     yanzuo      ENDDECISION;
     2     yanzuo      /* Update the fields with new data */
     2     yanzuo      TASK update.rec_ptr := @unit,
     2     yanzuo           update.proc_idx := 0;
     2     yanzuo   ELSE:
     2     yanzuo      CALL flag__r( update, jii_field__t_start_att_c );
     2     yanzuo      TASK update.rec_ptr := @unit;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   CALL apc_init_log__r( unit, ec );
  1054    lifsong   
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE apc_init__r;
     2     yanzuo 
     2     yanzuo PROCEDURE apc_init_ph2__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
  1054    lifsong     
  1054    lifsong RETURNS
  1054    lifsong     error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     whisky               pid,
     2     yanzuo     i                    byte,
     2     yanzuo     ec                   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* todo: acquire WHISKY pid some other way */
     2     yanzuo   TASK make_pid_r( whisky, unit.procs(0).phys_addr, whisky_p, 0, 0 );
     2     yanzuo   TASK ec := init_apc_hw_ph2__r( unit, whisky );
     2     yanzuo   /* Update flags regardless of initialization results.
     2     yanzuo   * (if the operation failed, we already set an alarm
     2     yanzuo   * which causes ALP unit to get restarted, unless it
     2     yanzuo   * has RBAN status on in which case we try to continue
     2     yanzuo   * startup as well as possible.
     2     yanzuo   */
     2     yanzuo   TASK unit.apc_init_ph2_needed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_apc_init2_need_c );
     2     yanzuo   /* These are not done for NIP1 */
     2     yanzuo   DECISION unit.is_level1_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       /* tributary units are now allowed to start. */
     2     yanzuo       TASK unit.trib_startup_allowed := T;
     2     yanzuo       CALL flag__r( update, jii_field__t_allow_trib_c );
     2     yanzuo       /* The half-connections of the NRT connections
     2     yanzuo       * of the ALP unit can be established now. */
     2     yanzuo       TASK unit.procs(0).half_conns_needed := T;
     2     yanzuo       CALL flag__r( update, jii_field__t_hc_need_c );
     2     yanzuo     ELSE:
     2     yanzuo       /* These are done for NIP1 */
     2     yanzuo       /* Get rid of these */
     2     yanzuo       TASK unit.interfaces(1).support_added := F;
     2     yanzuo       TASK unit.interfaces(2).support_added := F;
     2     yanzuo       TASK i  := 1;
     2     yanzuo       TASK ec := send_subport_params__r(unit, i, unit, whisky);
     2     yanzuo       TASK i  := 2;
     2     yanzuo       TASK ec := send_subport_params__r(unit, i, unit, whisky);
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Update the fields with new data */
     2     yanzuo   TASK update.rec_ptr := @unit;
     2     yanzuo   CALL apc_init_ph2_log__r( unit, ec );
  1054    lifsong 
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE apc_init_ph2__r;
     2     yanzuo 
     2     yanzuo /************************************************************/
     2     yanzuo PROCEDURE report_extra_vp__r;
     2     yanzuo  FPAR
     2     yanzuo    IN/OUT unit        jiifil__t,
     2     yanzuo    IN/OUT alp_unit    jiifil__t,
     2     yanzuo    IN/OUT update      jii_update_info__t;
     2     yanzuo RETURNS error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec         error_t := success_ec,
     2     yanzuo     ustate     unit_state_t;
     2     yanzuo 
     2     yanzuo START;
   359    lifsong   DECISION unit.is_level2_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       TASK ec := report_vp__r( unit, 1, alp_unit );
     2     yanzuo       DECISION ec;
     2     yanzuo         ( success_ec ):
     2     yanzuo           TASK unit.procs(1).vp_reported := T;
     2     yanzuo           TASK unit.procs(1).vp_reporting_needed := F;
     2     yanzuo           CALL flag__r(update, jii_field__t_vp_ext1_reported_c);
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION unit.is_ip_niu;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION unit_state_by_phys_addr__r( unit.procs( 0 ).phys_addr,
     2     yanzuo                ustate ) = success_ec
     2     yanzuo                AND
     2     yanzuo                ( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c;
     2     yanzuo         ( T ):
     2     yanzuo           TASK ec := report_vp__r( unit, 1, alp_unit );
     2     yanzuo           DECISION ec;
     2     yanzuo             ( success_ec ):
     2     yanzuo               TASK unit.procs(1).vp_reported := T;
     2     yanzuo               TASK unit.procs(1).vp_reporting_needed := F;
     2     yanzuo               CALL flag__r(update, jii_field__t_vp_ext1_reported_c);
     2     yanzuo               CALL flag__r(update, jii_field__t_ipniu_co_upd_c);
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE report_extra_vp__r;
     2     yanzuo 
     2     yanzuo /********************************************************/
     2     yanzuo PROCEDURE report_ipniu_interface__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT    unit        jiifil__t,
     2     yanzuo     IN/OUT    alp_unit    jiifil__t,
     2     yanzuo     IN/OUT    update      jii_update_info__t;
     2     yanzuo  RETURNS error_t;
     2     yanzuo DCL
     2     yanzuo    ustate       unit_state_t,
     2     yanzuo    ec           error_t := success_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION unit_state_by_phys_addr__r( unit.procs( 0 ).phys_addr,
     2     yanzuo            ustate ) = success_ec
     2     yanzuo            AND
     2     yanzuo            ( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c;
     2     yanzuo     ( T ):
     2     yanzuo       /* for error log filtering: */
     2     yanzuo       TASK unit.procs(1).start_attempts_left := unit.procs(0).start_attempts_left;
     2     yanzuo       TASK unit.interfaces(1).mphy_port := jig_nip_ipe__t_ipe_mphy_c;
     2     yanzuo       CALL flag__r( update, jii_field__t_i2_mphy_sch_c );
     2     yanzuo       TASK ec := intf_notify__r( unit, 1, mphy_type_t_ipe_c, alp_unit );
     2     yanzuo       DECISION ec /= success_ec;
     2     yanzuo         ( T ):
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                @'JIGCLU: IPE IF NOTIFY FAILED '
     2     yanzuo                'status=%04X  unit type=%04X index=%d',
     2     yanzuo                ec,
     2     yanzuo                unit.procs(0).unit_type,
     2     yanzuo                unit.procs(0).unit_index );
     2     yanzuo           RETURN ec;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK ec := report_interface__r( unit, 1, alp_unit );
     2     yanzuo       DECISION ec /= success_ec;
     2     yanzuo         ( T ):
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                @'JIGCLU: IPE IF REPORTING FAILED '
     2     yanzuo                'status=%04X  unit type=%04X index=%d',
     2     yanzuo                ec,
     2     yanzuo                unit.procs(0).unit_type,
     2     yanzuo                unit.procs(0).unit_index );
     2     yanzuo         ELSE:
     2     yanzuo           TASK unit.interfaces(1).intf_reporting_needed := F,
     2     yanzuo                unit.interfaces(1).intf_reported := T,
     2     yanzuo                unit.interfaces(1).intf_exists   := T;
     2     yanzuo           CALL flag__r( update, jii_field__t_i2_exists_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_i2_rep_need_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_i2_reported_c );
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE report_ipniu_interface__r;
     2     yanzuo 
   359    lifsong PROCEDURE report_alp2_if__r;
   359    lifsong FPAR
   359    lifsong     IN/OUT  unit      jiifil__t,
   359    lifsong     IN      proc_idx  byte,
   359    lifsong     IN/OUT  alp_unit  jiifil__t,
   359    lifsong     IN/OUT  update    jii_update_info__t;
     2     yanzuo 
   359    lifsong RETURNS
   359    lifsong     error_t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong     ec                 error_t := success_ec,
   359    lifsong     if_idx             byte,
   359    lifsong     i                   byte := 0,
   359    lifsong     own_proc_idx  byte;
   359    lifsong 
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    WHILE i < 2;
   359    lifsong       TASK if_idx   := i;
   359    lifsong       TASK own_proc_idx := i;
   359    lifsong       DECISION unit.interfaces(if_idx).intf_reporting_needed;
   359    lifsong       ( T ):
   359    lifsong          TASK ec := report_interface__r( unit, own_proc_idx, alp_unit );
   359    lifsong          DECISION ec;
   359    lifsong          ( /= success_ec ):
   359    lifsong             /* small delay to allow RBROKE become ready */
   359    lifsong             TASK delay(90);
   359    lifsong             OUT;
   359    lifsong          ELSE:
   359    lifsong             TASK unit.interfaces(if_idx).intf_reporting_needed := F,
   359    lifsong             unit.interfaces(if_idx).intf_reported := T;
   359    lifsong             CALL intf_flag__r( update, if_idx, jii_field__t_i1_rep_need_c );
   359    lifsong             CALL intf_flag__r( update, if_idx, jii_field__t_i1_reported_c );
   359    lifsong             /* Update the fields in JIIFIL with new data */
   359    lifsong             TASK update.proc_idx := proc_idx,
   359    lifsong             update.rec_ptr  := @unit;
   359    lifsong          ENDDECISION;
   359    lifsong       ENDDECISION;
   359    lifsong       TASK i := i + 1;
   359    lifsong    ENDWHILE;
   359    lifsong    
   359    lifsong    RETURN ec;
   359    lifsong    
   359    lifsong ENDPROCEDURE report_alp2_if__r;
   359    lifsong 
   359    lifsong PROCEDURE report_non_alp2_if__r;
   359    lifsong FPAR
   359    lifsong     IN/OUT  unit        jiifil__t,
   359    lifsong     IN      proc_idx     byte,
   359    lifsong     IN/OUT  alp_unit   jiifil__t,
   359    lifsong     IN/OUT  update    jii_update_info__t;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong     error_t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong     ec                 error_t := success_ec,
   359    lifsong     if_idx             byte;
   359    lifsong 
   359    lifsong 
  1382   shuyolin 
   359    lifsong START;
   359    lifsong 
   359    lifsong    TASK if_idx        := unit.procs(proc_idx).interface_index;
   359    lifsong    DECISION unit.interfaces(if_idx).intf_reporting_needed;
   359    lifsong    ( T ):
   359    lifsong      DECISION unit.is_ip_niu;
   359    lifsong        ( T ):
   359    lifsong          TASK ec := report_ipniu_interface__r(unit, alp_unit, update);
   359    lifsong      ENDDECISION;
   359    lifsong      DECISION ec;
   359    lifsong        ( success_ec ):
   359    lifsong          TASK ec := report_interface__r( unit, proc_idx, alp_unit );
   359    lifsong      ENDDECISION;
   359    lifsong      DECISION ec;
   359    lifsong        ( /= success_ec ):
   359    lifsong          /* small delay to allow RBROKE become ready */
   359    lifsong          TASK delay(90);
   359    lifsong        ELSE:
   359    lifsong          TASK unit.interfaces(if_idx).intf_reporting_needed := F,
   359    lifsong               unit.interfaces(if_idx).intf_reported := T;
   359    lifsong          CALL intf_flag__r( update, if_idx, jii_field__t_i1_rep_need_c );
   359    lifsong          CALL intf_flag__r( update, if_idx, jii_field__t_i1_reported_c );
   359    lifsong          /* Update the fields in JIIFIL with new data */
   359    lifsong          TASK update.proc_idx := proc_idx,
   359    lifsong               update.rec_ptr  := @unit;
   359    lifsong      ENDDECISION;
   359    lifsong    ENDDECISION; 
   359    lifsong 
   359    lifsong    RETURN ec;
   359    lifsong ENDPROCEDURE report_non_alp2_if__r;
   359    lifsong 
   359    lifsong PROCEDURE trib_report_vp__r;
   359    lifsong FPAR
   359    lifsong     IN/OUT  unit        jiifil__t,
   359    lifsong     IN      proc_idx     byte,
   359    lifsong     IN/OUT  alp_unit   jiifil__t,
   359    lifsong     IN/OUT  update    jii_update_info__t;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong     error_t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong     ec    error_t := success_ec;
   359    lifsong  
   359    lifsong START;
   359    lifsong 
   359    lifsong  DECISION unit.procs(proc_idx).vp_reporting_needed;
   359    lifsong    ( T ):
   359    lifsong       DECISION unit.is_level2_alp_unit OR unit.is_ip_niu;
   359    lifsong         ( T ):
   359    lifsong           TASK ec := report_extra_vp__r(unit, alp_unit, update);
   359    lifsong       ENDDECISION;
   359    lifsong 
   359    lifsong       DECISION ec;
   359    lifsong       ( success_ec ):
   359    lifsong          TASK ec := report_vp__r( unit, proc_idx, alp_unit );
   359    lifsong       ENDDECISION;
   359    lifsong 
   359    lifsong       DECISION ec;
   359    lifsong       ( success_ec ):
   359    lifsong           TASK unit.procs(proc_idx).vp_reporting_needed := F;
   359    lifsong           CALL flag__r( update, jii_field__t_vp_rep_need_c );
   359    lifsong           TASK unit.procs(proc_idx).vp_reported := T;
   359    lifsong           CALL flag__r( update, jii_field__t_vp_reported_c );
   359    lifsong           /* Update the fields with new data */
   359    lifsong           TASK update.proc_idx := proc_idx,
   359    lifsong                update.rec_ptr  := @unit;
   359    lifsong         ELSE:
   359    lifsong           /* RBROKE may return error code 0x3A11 for a short time
   359    lifsong           after the SP-MXU has already gone to SP-EX state. */
   359    lifsong           DECISION ec /= warm_up_in_progress_ec OR
   359    lifsong                    unit.procs(proc_idx).start_attempts_left < 2;
   359    lifsong             ( T ):
   359    lifsong               TASK dxsyslog_r( log_type_t_text_e_c,
   359    lifsong                    @'JIGCLU: VP REPORTING FAILED'
   359    lifsong                    'status=%04X  unit type=%04X index=%d',
   359    lifsong                    ec,
   359    lifsong                    unit.procs(proc_idx).unit_type,
   359    lifsong                    unit.procs(proc_idx).unit_index );
   359    lifsong           ENDDECISION;
   359    lifsong           /* small delay to allow RBROKE become ready */
   359    lifsong           TASK delay(90);
   359    lifsong        ENDDECISION;
   359    lifsong     ENDDECISION;
   359    lifsong 
   359    lifsong     RETURN ec;
   359    lifsong ENDPROCEDURE trib_report_vp__r;
   359    lifsong 
   359    lifsong 
   359    lifsong 
     2     yanzuo /********************************************************/
     2     yanzuo 
     2     yanzuo PROCEDURE	report_app_if__r;
     2     yanzuo FPAR
   359    lifsong     IN     unit_it  unit_it_t;
   359    lifsong 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status               error_t,
     2     yanzuo     rbroke_pid           pid,
     2     yanzuo     rbroke_attr          attr_group_t,
     2     yanzuo     interface_id         atm_interface_id_t,
     2     yanzuo     interf_type          atm_interface_type_t,
     2     yanzuo     create_state         atm_cre_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_log_c;
     2     yanzuo 
     2     yanzuo    DECISION get_service__r( atm_res_broker__c, rbroke_pid, rbroke_attr );
     2     yanzuo    ( F ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    /*this value will be repleaced with an constant defined in sack*/
     2     yanzuo    TASK interface_id    := atm_interface_id_t_unspecif_c - 1;
     2     yanzuo    TASK interf_type     := atm_interface_type_t_intern_c;
     2     yanzuo 
     2     yanzuo    OUTPUT atm_interf_create_req_s(  interface_id,
     2     yanzuo                                     interf_type,
   359    lifsong                                     unit_it,
     2     yanzuo                                     cell_rate_t_unspecified_c,
     2     yanzuo                                     cell_rate_t_unspecified_c,
     2     yanzuo                                     vpi_bits_t_unspecified_c,
     2     yanzuo                                     vci_bits_t_unspecified_c,
     2     yanzuo                                     create_state ) TO rbroke_pid,
     2     yanzuo                                     SET ATTRIBUTES = rbroke_attr;
   361    lifsong    /* RBR timer is 11 seconds, RGL timer is 3 seconds, here using 15s */
   361    lifsong    SET ( NOW + 3*ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo    INPUT atm_interf_create_ack_s ( interface_id, status );
     2     yanzuo    DECISION ( interface_id = atm_interface_id_t_unspecif_c - 1 );
     2     yanzuo    ( T ):
     2     yanzuo       RESET ( ack_timer );
     2     yanzuo    ELSE:
     2     yanzuo       NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo    ENDDECISION;
     2     yanzuo    DECISION status;
     2     yanzuo    ( success_ec ):
     2     yanzuo    ( if_id_exists_ec ):
     2     yanzuo    /* ok */
     2     yanzuo       TASK status := success_ec;
     2     yanzuo    ELSE:
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                  @'JIGCLU: APP Interface create req failure: %04X'
     2     yanzuo                  ' interface ID=%04XH, unit type=%04X idx=%d',
   359    lifsong                  status, interface_id, unit_it.ttype, unit_it.index );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK status := message_waiting_timeout_ec;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGCLU: report_app_if_vp__r ack_timer expired: %04X'
     2     yanzuo          , status );
     2     yanzuo     RETURN status;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE	report_app_if__r;
     2     yanzuo 
     2     yanzuo /********************************************************/
     2     yanzuo 
     2     yanzuo PROCEDURE report_app_vp__r;
     2     yanzuo FPAR
   359    lifsong     IN     unit_it    unit_it_t;
   359    lifsong     
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     status               error_t,
     2     yanzuo     rbroke_pid           pid,
     2     yanzuo     rbroke_attr          attr_group_t,
     2     yanzuo     tpi                  tpi_t,
     2     yanzuo     traf_para            traf_conf_para_t,
     2     yanzuo     create_state         atm_cre_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK create_state := atm_cre_state_t_new_object_c + atm_cre_state_t_log_c;
     2     yanzuo    DECISION get_service__r( atm_res_broker__c, rbroke_pid, rbroke_attr );
     2     yanzuo    ( F ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    TASK  tpi.level   := tpi_level_t_vp_c,
     2     yanzuo          tpi.interf  := atm_interface_id_t_unspecif_c - 1,
     2     yanzuo          tpi.vpi     := 0,
     2     yanzuo          tpi.vci     := vci_t_unspecified_c;
     2     yanzuo    CALL init_traf_params__r( traf_para );
     2     yanzuo    OUTPUT atm_vpltp_create_req_s (  tpi,
     2     yanzuo                                     atm_interface_type_t_intern_c,
   359    lifsong                                     unit_it,
   359    lifsong                                     unit_it,
     2     yanzuo                                     b_level_t_vc_c,
     2     yanzuo                                     traf_para,
     2     yanzuo                                     traf_para,
     2     yanzuo                                     end_point_t_not_in_segment_c,
     2     yanzuo                                     traffic_shaping_t (.
     2     yanzuo                                     shaping_option_t_none_c,
     2     yanzuo                                     shaping_option_t_none_c .),
     2     yanzuo                                     vci_bits_t_unspecified_c,
     2     yanzuo                                     vci_bits_t_unspecified_c,
     2     yanzuo                                     vci_t_unspecified_c,
     2     yanzuo                                     scheduler_path_t (.
     2     yanzuo                                     scheduler_subport_t_unspec_c,0,0,T.),
     2     yanzuo                                     create_state
     2     yanzuo                                     ) TO rbroke_pid, SET ATTRIBUTES = rbroke_attr;
     2     yanzuo    SET ( NOW + 2*ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack
     2     yanzuo    COMMENT ' ';
     2     yanzuo 
     2     yanzuo    INPUT atm_vpltp_create_ack_s ( rec_tp, rec_alp, status );
     2     yanzuo    DCL
     2     yanzuo       rec_tp    tpi_t,
     2     yanzuo       rec_alp   unit_it_t;
     2     yanzuo    DECISION ( tpi.interf = rec_tp.interf AND
     2     yanzuo               tpi.vpi = rec_tp.vpi AND
     2     yanzuo               tpi.vci = rec_tp.vci AND
   359    lifsong               rec_alp.ttype = unit_it.ttype AND
   359    lifsong               rec_alp.index = unit_it.index );
     2     yanzuo    ( T ):
     2     yanzuo       RESET ( ack_timer );
     2     yanzuo     ELSE:
     2     yanzuo       NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION status;
     2     yanzuo     ( vpltp_exists_ec ):
     2     yanzuo       TASK status := success_ec;
     2     yanzuo     ENDDECISION;
   359    lifsong     DECISION status;
   359    lifsong     ( /= success_ec ):
   359    lifsong       TASK dxsyslog_r( log_type_t_text_e_c,
   359    lifsong                  @'JIGCLU: APP vp create req failure: %04X'
   359    lifsong                   ' unit type=%04X idx=%d',
   359    lifsong                  status, unit_it.ttype, unit_it.index );      
   359    lifsong     ENDDECISION;
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo INPUT ack_timer;
   359    lifsong     TASK dxsyslog_r( log_type_t_text_e_c,
   359    lifsong          @'JIGCLU: report_app_vp__r ack_timer expired: %04X'
   359    lifsong          , status );
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE	report_app_vp__r;
     2     yanzuo 
     2     yanzuo 
   359    lifsong /*trigger vp pipe creation in BRT with special interface id*/
   359    lifsong PROCEDURE report_app_vpp__r;
   359    lifsong FPAR 
   359    lifsong    IN unit_it unit_it_t;
   359    lifsong    
   359    lifsong RETURNS
   359    lifsong    error_t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong    ec error_t;
   359    lifsong 
   359    lifsong START;   
   359    lifsong    TASK  ec := report_app_if__r(unit_it);
   359    lifsong    DECISION ec;
   359    lifsong    ( /= success_ec):
   359    lifsong       RETURN ec;
   359    lifsong    ENDDECISION;
   359    lifsong    
   359    lifsong    RETURN  report_app_vp__r(unit_it);
   359    lifsong ENDPROCEDURE report_app_vpp__r;
   359    lifsong 
   359    lifsong PROCEDURE is_vpp_needed__r;
   359    lifsong FPAR 
   359    lifsong     IN/OUT  unit      jiifil__t,
   359    lifsong     IN      proc_idx  byte;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong    bool;
   359    lifsong 
   359    lifsong DCL
   359    lifsong     ustate        unit_state_t;
   359    lifsong     
   359    lifsong START;
   359    lifsong 
   359    lifsong    DECISION eipu_unit_check__r( unit ) AND (proc_idx = 0);
   359    lifsong    ( T ):
   359    lifsong       DECISION unit_state_by_phys_addr__r( unit.procs(proc_idx).phys_addr, ustate ) = success_ec AND
   359    lifsong                     ( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c;
   359    lifsong       ( T ):
   359    lifsong          RETURN T;
   359    lifsong       ENDDECISION;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    RETURN F;
   359    lifsong ENDPROCEDURE is_vpp_needed__r;
   359    lifsong 
  1213   huantang 
  1213   huantang 
     2     yanzuo /********************************************************/
     2     yanzuo PROCEDURE trib_report__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit      jiifil__t,
     2     yanzuo     IN      proc_idx  byte,
     2     yanzuo     IN/OUT  alp_unit  jiifil__t,
     2     yanzuo     IN/OUT  update    jii_update_info__t;
  1054    lifsong     
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong     
     2     yanzuo DCL
   359    lifsong     unit_it      unit_it_t,
   623    lifsong     ec            error_t := success_ec;
   359    lifsong     
     2     yanzuo START;
     2     yanzuo 
   359    lifsong    DECISION unit.is_level2_alp_unit;
     2     yanzuo    ( T ):
   359    lifsong       TASK ec := report_alp2_if__r(unit, proc_idx, alp_unit, update);
   359    lifsong     ELSE:
   359    lifsong       TASK ec := report_non_alp2_if__r(unit, proc_idx, alp_unit, update);
   359    lifsong    ENDDECISION;
   552     yanzuo    
   552     yanzuo    DECISION ec;
   552     yanzuo    ( success_ec ):
   552     yanzuo       TASK ec := trib_report_vp__r(unit, proc_idx, alp_unit, update);
   359    lifsong    ENDDECISION;
     2     yanzuo 
   623    lifsong    DECISION ( ec = success_ec ) AND is_vpp_needed__r(unit, proc_idx);     
   623    lifsong    ( T ):
   623    lifsong       TASK get_alp_unit_for_brt__r( unit_it, alp_unit );
   623    lifsong       TASK ec := report_app_vpp__r(unit_it);
     2     yanzuo    ENDDECISION;
    92      h10hu 
   556     yanzuo    /*Pronto:38783ESPE02
   552     yanzuo       when NIP1 x-connetion creation failed for some reason, interface initialization task if_init__r will fail with "intf_reporting_needed" and "vp_reporting_needed" marked true
   552     yanzuo       and "if_init_needed" flag remained true;when second interface initialization task come again,if_init__r will not create any interface and vp with "if_init_needed" flag cleared 
   552     yanzuo       because it found those were already created in the first time but "half_conns_needed" remains true.then next current report task would come and when report task is finished,
   552     yanzuo       no any task for phase2 would continue because nip1 x-connetion creation not done.
   552     yanzuo       Even restart nip1 would not recover the situtation that release task would not be triggerred because "half_conns_needed" is not true;and no any other task would be done after port
   552     yanzuo       configuration and APC init task because all resource is in reported status.
   552     yanzuo       Problem is due to flags are shared by NIP1's vps and xconnections.
   552     yanzuo       here report task would check "half_conns_created" connection status,if not created,we expect resource release then interface initialization again.
   552     yanzuo       */
   556     yanzuo    DECISION ( unit.is_level2_alp_unit AND unit.procs(proc_idx).half_conns_created = F );
   556     yanzuo    ( T ):
   556     yanzuo       /* release resource,this should be done after resource is reported,otherwise jigger release task would not do any actual release operation because rugger can't find
   552     yanzuo    	     any related resource record*/
   556     yanzuo       TASK unit.procs( proc_idx ).res_release_needed := T;
   556     yanzuo       CALL flag__r( update, jii_field__t_res_rel_need_c );
    92      h10hu 
   556     yanzuo       /* trigger interface initialization task again after all resource was released*/
   556     yanzuo       TASK unit.procs(proc_idx).if_init_needed:= T;
   556     yanzuo       CALL flag__r( update, jii_field__t_if_init_need_c );    
    92      h10hu 
   556     yanzuo       TASK update.proc_idx := proc_idx,
   556     yanzuo            update.rec_ptr  := @unit;                   
   552     yanzuo 
    92      h10hu    ENDDECISION;
  1427       pshu    DECISION unit.procs(proc_idx).start_attempts_left = 0 AND ec/=success_ec;
   556     yanzuo    ( T ):
  1305       pshu    	  SET ( ALARM( unit.unit_type, unit.unit_index ), unit_configuration_failure_a( piping_fail__c, ec ));
  1396   shuyolin    ( F ):
  1396   shuyolin    		DECISION ( ec /= success_ec AND ec /= warm_up_in_progress_ec AND 
  1396   shuyolin    		      ec /= not_ready_ec AND ec /= message_waiting_timeout_ec AND
  1396   shuyolin    		      ec /= rbr_exec_saved_rel_reqs_ec AND ec /= msg_time_out_ec AND
  1429       pshu    		      ec /= chorus_k_etimeout_ec AND ec/= incorrect_unit_state_ec) ;
  1396   shuyolin    		( T ):
  1396   shuyolin 			SET ( ALARM( unit.unit_type, unit.unit_index ), unit_configuration_failure_a( piping_fail__c, ec ));
  1396   shuyolin 		ENDDECISION;
   556     yanzuo    ENDDECISION;
    92      h10hu    
  1054    lifsong    RETURN ec;
  1054    lifsong 
     2     yanzuo ENDPROCEDURE trib_report__r;
     2     yanzuo 
     2     yanzuo PROCEDURE sd4_init__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit    jiifil__t,
     2     yanzuo     IN/OUT  update  jii_update_info__t;
  1054    lifsong     
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     ec  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec := init_sd4_hw__r( unit );
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK unit.sd4_init_needed := F;
     2     yanzuo       CALL flag__r( update, jii_field__t_sd4_init_need_c  );
     2     yanzuo       /* update global flag 'sd4_initialized' */
     2     yanzuo       CALL flag__r( update, jii_field__t_setg_sd4_init_c );
     2     yanzuo       /* Update the fields with new data */
     2     yanzuo       TASK update.rec_ptr := @unit;
     2     yanzuo   ENDDECISION;
  1054    lifsong   
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE sd4_init__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE trib_restart__r;
     2     yanzuo /*
     2     yanzuo  * Force tributary unit restart after WO-MXU restart.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
  1054    lifsong     
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong 
     2     yanzuo DCL
   216      h10hu     ustate               unit_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* This alarm causes the tributary unit (or SP-alp unit)
     2     yanzuo   to be restarted to its current state. */
   671   huantang   DECISION unit.port_conf_completed  ;
     2     yanzuo     ( T ):
     2     yanzuo       /* Verify that the unit is present in the local slice.. */
     2     yanzuo       DECISION unit_state_r( unit.unit_type, unit.unit_index, ustate );
     2     yanzuo         ( success_ec ):
     2     yanzuo           /* Do not restart SP-ALP1 unit -- recovery takes care
     2     yanzuo           of it */
   593    lifsong           DECISION unit.is_level1_alp_unit;
     2     yanzuo             ( F ):
     2     yanzuo               SET ( ALARM( unit.unit_type, unit.unit_index ),
     2     yanzuo                     tributary_unit_restart_a( alp_unit.unit_index ));
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK unit.trib_restart_needed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_trib_rst_needed_c );
     2     yanzuo 
     2     yanzuo   /* turn off some flags already here to prevent JIGGER from
     2     yanzuo      trying to initialize slave processors which
     2     yanzuo      manage to send their interface parameter request
     2     yanzuo      before the master has sent FIGSEB service request. */
     2     yanzuo 
     2     yanzuo   /* We do NOT clear port_conf_needed and apc_init_needed bits --
     2     yanzuo      tributary unit may not send fig_service_req_msg_s again
     2     yanzuo      if it was not restarted.. */
     2     yanzuo 
     2     yanzuo   TASK unit.port_conf_completed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_pconf_compl_c );
     2     yanzuo   TASK unit.procs(0).if_init_completed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_if_init_compl_c );
     2     yanzuo   TASK unit.apc_init_ph2_needed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_apc_init2_need_c );
     2     yanzuo   TASK unit.alp_warmup_needed := F;
     2     yanzuo   CALL flag__r( update, jii_field__t_alpwrm_need_c );
     2     yanzuo   TASK update.rec_ptr := @unit;
  1054    lifsong   
  1054    lifsong   RETURN success_ec;
  1054    lifsong 
     2     yanzuo ENDPROCEDURE trib_restart__r;
     2     yanzuo 
     2     yanzuo PROCEDURE sp_alp_warmup__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  warmup_data  alp_warmup_params__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
  1054    lifsong         
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     ustate               unit_state_t := unit_state_t_nonex_c,
     2     yanzuo     warmup_indicate      jii_fields__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec := unit_state_by_phys_addr_r(
     2     yanzuo        warmup_data.sp_unit.procs(0).phys_addr, ustate );
   604    lifsong   DECISION ec = success_ec AND warmup_data.sp_unit.alp_warmup_needed;
     2     yanzuo     ( T ):
     2     yanzuo       /* The spare unit may be in SP or TE state. In TE state,
     2     yanzuo       we just send the jig_sp_unit_updated__s message
     2     yanzuo       which allows MXU startup to continue. */
     2     yanzuo       DECISION (ustate | unit_state_t_mainstate_bm_c);
     2     yanzuo         ( unit_state_t_sp_c ):
     2     yanzuo           CALL jii_fields__t_init_r( warmup_indicate );
     2     yanzuo           CALL jii_fields__t_fset( warmup_indicate,
     2     yanzuo                jii_field__t_clus_warmup_on_c );
     2     yanzuo           CALL jiifil_update__r( warmup_data.sp_unit, warmup_indicate, 0 );
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* Inform master so that it can send ack to UAM. */
   604    lifsong       DECISION ( NOT app_unit_check__r(warmup_data.sp_unit) ) AND ( warmup_data.sp_unit.is_level1_alp_unit );
   361    lifsong         ( T ):
     2     yanzuo           OUTPUT jig_sp_unit_updated__s(
     2     yanzuo                  warmup_data.sp_unit.procs(0).phys_addr,
     2     yanzuo                  warmup_data.sp_unit.cluster_idx
     2     yanzuo                  ) TO manager_pid;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo #if (T)
     2     yanzuo       /* This code is for the old warming system only.
     2     yanzuo       * When it is in use, we execute the warm-up task twice:
     2     yanzuo       * first when UXWARM is started in the SP unit, second time
     2     yanzuo       * when the SP unit has gotten to SP-EX state.
     2     yanzuo       */
     2     yanzuo       DECISION ustate;
     2     yanzuo         ( /= unit_state_t_spex_c ):
     2     yanzuo           /* Ok, this was the first phase (or only phase for TE unit).
     2     yanzuo           Clear alp_warmup_needed flag for now. */
     2     yanzuo           TASK warmup_data.sp_unit.alp_warmup_needed    := F;
     2     yanzuo           CALL flag__r( update, jii_field__t_alpwrm_need_c );
     2     yanzuo           TASK update.rec_ptr := @warmup_data.sp_unit;
     2     yanzuo 
     2     yanzuo           /* If the unit is switched over very fast after started up,
     2     yanzuo            * the 2nd fig_sp_unit_updated_s after unit in SP-EX might be missed and
     2     yanzuo            * this routine will not be run again any more. so some flags should be set here
     2     yanzuo            * just in this 1st run
     2     yanzuo            */
     2     yanzuo           /* Update WO unit JIIFIL data first. */
     2     yanzuo           TASK warmup_data.wo_unit.co_alp_unit_updated := T;
     2     yanzuo           CALL flag__r( update, jii_field__t_coalp_upd_c );
     2     yanzuo           CALL jiifil_update__r( warmup_data.wo_unit,
     2     yanzuo                update.fields, update.proc_idx );
     2     yanzuo           /* ... then set up SP unit JIIFIL data update. */
     2     yanzuo           TASK warmup_data.sp_unit.alp_warmup_needed    := F,
     2     yanzuo                /* set state flags to the same value as in WO-unit */
     2     yanzuo                warmup_data.sp_unit.co_alp_unit_updated  := T,
     2     yanzuo                warmup_data.sp_unit.trib_startup_allowed := T,
     2     yanzuo                warmup_data.sp_unit.ready_for_reporting  := T;
     2     yanzuo           /* coalp_upd_c flag is already set; set others */
     2     yanzuo           CALL flag__r( update, jii_field__t_alpwrm_need_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_allow_trib_c );
     2     yanzuo           CALL flag__r( update, jii_field__t_rdy_for_rep_c );
     2     yanzuo 
  1054    lifsong           RETURN ec;
     2     yanzuo       ENDDECISION;
     2     yanzuo #endif
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       /* Ok, warming done by JIGGER is over. */
     2     yanzuo 
     2     yanzuo       /* Update WO unit JIIFIL data first. */
     2     yanzuo       TASK warmup_data.wo_unit.co_alp_unit_updated := T;
     2     yanzuo       CALL flag__r( update, jii_field__t_coalp_upd_c );
     2     yanzuo       CALL jiifil_update__r( warmup_data.wo_unit,
     2     yanzuo            update.fields, update.proc_idx );
     2     yanzuo       /* ... then set up SP unit JIIFIL data update. */
     2     yanzuo       TASK warmup_data.sp_unit.alp_warmup_needed    := F,
     2     yanzuo            /* set state flags to the same value as in WO-unit */
     2     yanzuo            warmup_data.sp_unit.co_alp_unit_updated  := T,
     2     yanzuo            warmup_data.sp_unit.trib_startup_allowed := T,
     2     yanzuo            warmup_data.sp_unit.ready_for_reporting  := T;
     2     yanzuo       /* coalp_upd_c flag is already set; set others */
     2     yanzuo       CALL flag__r( update, jii_field__t_alpwrm_need_c );
     2     yanzuo       CALL flag__r( update, jii_field__t_allow_trib_c );
     2     yanzuo       CALL flag__r( update, jii_field__t_rdy_for_rep_c );
     2     yanzuo     ELSE:
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Clear the 'warm-up in progress' flag */
     2     yanzuo   CALL flag__r( update, jii_field__t_clus_warmup_off_c );
     2     yanzuo   /* update warming timestamp to prevent the work module from
     2     yanzuo   * starting the warm-up task again immediately in
     2     yanzuo   * case of failure.
     2     yanzuo   */
     2     yanzuo   CALL flag__r( update, jii_field__t_warmup_ts_c );
     2     yanzuo   TASK update.rec_ptr := @warmup_data.sp_unit;
  1054    lifsong   
  1054    lifsong   RETURN ec;
     2     yanzuo ENDPROCEDURE sp_alp_warmup__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE stop_requests__r;
     2     yanzuo /*
     2     yanzuo  * Tell the given unit to stop sending ATM interface parameter requests.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  params  stop_params__t;
  1054    lifsong RETURNS
  1054    lifsong    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     pq_gg1  pqsar_gg1_t,
     2     yanzuo     ms_gg1  mssar_gg1_t,
     2     yanzuo     fig_hdr  fig_msg_header_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Build dummy parameter data for the target computer.
     2     yanzuo   * We cannot ask the parameters from XVALUE because the
     2     yanzuo   * target computer does not exist in the configuration, or
     2     yanzuo   * its type does not match the actual PIU type.
     2     yanzuo   */
     2     yanzuo   TASK hms_address_t_make_r(
     2     yanzuo        fig_hdr.hms_address,
     2     yanzuo        hms_address_t_rack_r( params.full_hms_addr ),
     2     yanzuo        hms_address_t_subrack_r( params.full_hms_addr ),
     2     yanzuo        hms_address_t_ppa_r( params.full_hms_addr ));
     2     yanzuo   TASK fig_hdr.extended_addr := hms_address_t_proc_idx_r( params.full_hms_addr );
     2     yanzuo   DECISION params.sar_type;
     2     yanzuo     ( sar_type_t_pqii_sar_c ):
     2     yanzuo       TASK memset( bytepointer( @pq_gg1 ), 0, SIZEOF( pq_gg1 ));
     2     yanzuo       OUTPUT res_pqii_int_if_param_ack_s( fig_hdr,
     2     yanzuo              success_ec,
     2     yanzuo              pq_gg1,
     2     yanzuo              1 ) TO hms_forwarder;
     2     yanzuo     ELSE:
     2     yanzuo       TASK memset( bytepointer( @ms_gg1 ), 0, SIZEOF( ms_gg1 ));
     2     yanzuo       OUTPUT res_mssar_int_if_param_ack_s( fig_hdr,
     2     yanzuo              success_ec,
     2     yanzuo              ms_gg1 ) TO hms_forwarder;
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL get_internal_hms_ack__r();
  1054    lifsong   
  1054    lifsong   RETURN success_ec;
  1054    lifsong 
     2     yanzuo ENDPROCEDURE stop_requests__r;
     2     yanzuo #include "jigrelgx.sdl"
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE flush_pending_task_msgs__r;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo * Consume all pending task messages before reporting task completion.
     2     yanzuo **************************************************************************/
     2     yanzuo START;
     2     yanzuo   DECISION message_count_r();
     2     yanzuo     ( 0 ):
     2     yanzuo       RETURN;
     2     yanzuo   ENDDECISION;
     2     yanzuo   OUTPUT jig_continue__s TO SELF;
     2     yanzuo   NEXTSTATE filter_task_msgs;
     2     yanzuo 
     2     yanzuo STATE filter_task_msgs;
     2     yanzuo 
     2     yanzuo   INPUT jig_task_msg__s( * );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_alp2_conf_req__s( para, client );
     2     yanzuo     DCL
     2     yanzuo        para              jig_alp2_conf_para__t,
     2     yanzuo        client            pid;
     2     yanzuo     OUTPUT jig_alp2_conf_ack__s( prereq_of_conn_not_fulfilled_ec,
     2     yanzuo            para ) TO client;
     2     yanzuo     NEXTSTATE -;
  1420       pshu   INPUT app_pre_half_xconn_ack_s(*);
  1420       pshu     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_continue__s;
     2     yanzuo     RETURN;
     2     yanzuo ENDSTATE filter_task_msgs;
     2     yanzuo ENDPROCEDURE flush_pending_task_msgs__r;
     2     yanzuo 
     2     yanzuo /* ============================================================ */
     2     yanzuo /* P R O C E S S   B O D Y */
     2     yanzuo /* ============================================================ */
     2     yanzuo START;
     2     yanzuo   SET ( NOW + task_inquiry_interval__c, task_inquiry_timer );
     2     yanzuo   TASK mphy_request_id := 0;
    73     jamema   TASK spi3_request_id := 0;
     2     yanzuo   TASK memset( bytepointer( @g_apc_init_table ), 0xFF, dword( SIZEOF( apc_init_table__t ) ) );
     2     yanzuo   NEXTSTATE working;
     2     yanzuo 
     2     yanzuo STATE working;
     2     yanzuo 
     2     yanzuo   INPUT task_inquiry_timer;
  1124   huantang     OUTPUT jig_task_inquiry__s( my_cluster_idx ) TO manager_pid;
     2     yanzuo     SET ( NOW + task_inquiry_interval__c, task_inquiry_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_task_msg__s( job );
     2     yanzuo     DCL
     2     yanzuo        job               task_data__t,
     2     yanzuo        update_info       jii_update_info__t,
  1054    lifsong        dummy_serv_attr   attr_group_t,
  1054    lifsong        task_result       error_t := success_ec;
     2     yanzuo 
  1054    lifsong     CALL task_starting_log__r( job, T, success_ec);
     2     yanzuo     RESET ( task_inquiry_timer );
     2     yanzuo     TASK memset( bytepointer( @update_info ), 0, SIZEOF( update_info ));
     2     yanzuo     TASK update_info.rec_ptr  := NIL;
     2     yanzuo 
  1124   huantang   	 DECISION get_service__r( hms_forwarding__c, hms_forwarder,
  1124   huantang   	       dummy_serv_attr );
  1124   huantang   	 ( F ):
  1124   huantang   	     TASK hms_forwarder := orig_hms_forwarder;
  1124   huantang   	 ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION job.task_code;
     2     yanzuo       ( task_type__t_port_conf_c ):
  1054    lifsong         TASK task_result := port_conf__r    ( job.params.gen.unit_data, 
    73     jamema              job.params.gen.alp_unit_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_if_init_c ):
  1054    lifsong         TASK task_result := if_init__r      ( job.params.gen.unit_data,
     2     yanzuo              job.params.gen.proc_idx,
     2     yanzuo              job.params.gen.alp_unit_data,
     2     yanzuo              1 /* phase 1 */,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_port_conf_ph2_c ):
  1054    lifsong         TASK task_result := port_conf_ph2__r( job.params.gen.unit_data,
    73     jamema              job.params.gen.alp_unit_data,        
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_if_init_ph2_c ):
  1054    lifsong         TASK task_result := if_init__r      ( job.params.unit_data,
     2     yanzuo              job.params.gen.proc_idx,
     2     yanzuo              job.params.gen.alp_unit_data,
     2     yanzuo              2 /* phase 2 */,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_hc_create_c ):
  1054    lifsong          TASK task_result := hc_create__r ( job.params.gen.unit_data,
     2     yanzuo                                  job.params.gen.proc_idx,
     2     yanzuo                                  job.params.gen.alp_unit_data,
     2     yanzuo                                  job.params.gen.apc_mgr_pid,
     2     yanzuo                                  update_info );
     2     yanzuo       ( task_type__t_apc_init_c ):
  1054    lifsong         TASK task_result := apc_init__r     ( job.params.unit_data,
     2     yanzuo              job.params.gen.alp_unit_data, /* For NIP */
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_apc_init_ph2_c ):
  1054    lifsong         TASK task_result := apc_init_ph2__r ( job.params.unit_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_trib_report_c ):
  1054    lifsong         TASK task_result := trib_report__r  ( job.params.gen.unit_data,
     2     yanzuo              job.params.gen.proc_idx,
     2     yanzuo              job.params.gen.alp_unit_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_sd4_init_c ):
  1054    lifsong         TASK task_result := sd4_init__r     ( job.params.unit_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_sp_alp_warmup_c ):
  1054    lifsong         TASK task_result := sp_alp_warmup__r( job.params.warmup_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_trib_restart_c ):
  1054    lifsong         TASK task_result := trib_restart__r ( job.params.gen.unit_data,
  1054    lifsong                                              job.params.gen.alp_unit_data,
  1054    lifsong                                              update_info );
     2     yanzuo       ( task_type__t_rel_resources_c ):
  1054    lifsong         TASK task_result := rel_resources__r( job.params.gen.unit_data,
     2     yanzuo              job.params.gen.proc_idx,
     2     yanzuo              job.params.gen.alp_unit_data,
     2     yanzuo              update_info );
     2     yanzuo       ( task_type__t_stop_reqs_c ):
  1054    lifsong         TASK task_result := stop_requests__r( job.params.stop_para );
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log( log_type_t_byte_e_c,
     2     yanzuo              log_write_item_t(@job.task_code),1,
     2     yanzuo              log_text_info_t(@'JIGCLU: unknown task!'));
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION update_info.rec_ptr /= NIL;
     2     yanzuo       ( T ):
     2     yanzuo         /* update start_attempts_left to JIIFIL in both OMUs */
     2     yanzuo         CALL flag__r( update_info, jii_field__t_start_att_c );
     2     yanzuo         CALL jiifil_update__r( $update_info.rec_ptr,
     2     yanzuo              update_info.fields,
     2     yanzuo              update_info.proc_idx );
     2     yanzuo 
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* Remove all task messages from the message queue
     2     yanzuo     * to prevent duplicate initializations in case the master
     2     yanzuo     * process has screwed up and sent us new tasks during the
     2     yanzuo     * execution of the previous task. */
     2     yanzuo     CALL flush_pending_task_msgs__r ();
  1124   huantang     OUTPUT jig_task_completed__s( my_cluster_idx ) TO manager_pid;
     2     yanzuo 
  1054    lifsong     CALL task_starting_log__r( job, F, task_result);
     2     yanzuo     SET ( NOW + task_inquiry_interval__c, task_inquiry_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_alp2_conf_req__s( params, client );
     2     yanzuo     DCL
     2     yanzuo        params            jig_alp2_conf_para__t,
     2     yanzuo        client            pid,
     2     yanzuo        dummy_serv_attr   attr_group_t,
     2     yanzuo        ec                error_t;
     2     yanzuo 
     2     yanzuo     DECISION get_service__r( hms_forwarding__c, hms_forwarder,
     2     yanzuo            dummy_serv_attr );
     2     yanzuo       ( F ):
     2     yanzuo         TASK hms_forwarder := orig_hms_forwarder;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo     TASK ec := alp2_hconn_operation__r( params.alp2_hms_addr,
     2     yanzuo          params.alp2_unit_type,
     2     yanzuo          params.alp2_unit_index,
     2     yanzuo          params.req_mode,
     2     yanzuo          params.outw_mphy,
     2     yanzuo          params.inw_mphy,
     2     yanzuo          params.vpi,
     2     yanzuo          params.vci );
     2     yanzuo     OUTPUT jig_alp2_conf_ack__s( ec, params ) TO client;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT hand_supervision_msg_s;
     2     yanzuo 
     2     yanzuo       OUTPUT hand_supervision_ack_s TO SENDER,
     2     yanzuo              SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   INPUT c_test_msg_s( test_id, sub_id, ? );
     2     yanzuo     DCL
   216      h10hu        test_id, sub_id   byte;
  1124   huantang     TASK test_id := test_id;
  1124   huantang     TASK sub_id  := sub_id;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT clean_apc_init_table( in_target_unit );
     2     yanzuo     DCL
     2     yanzuo        in_target_unit    unit_it_t;
     2     yanzuo 
     2     yanzuo      CALL clean_apc_table__r( in_target_unit );
     2     yanzuo      NEXTSTATE -;
     2     yanzuo 
     2     yanzuo ENDSTATE working;
     2     yanzuo 
     2     yanzuo ENDPROCESS jigclu;
   641    lifsong PROCESS jigcon
   641    lifsong   COMMENT '$Id$';
   641    lifsong /*
   641    lifsong *
   641    lifsong *  Environment:
   641    lifsong *       'jigcon' is part of 'jigger' process family and
   641    lifsong *       belongs to the system block 'phrsyb' and to service block
   641    lifsong *       'figseb'.
   641    lifsong *
   641    lifsong *  Description:
   641    lifsong *
   641    lifsong *
   641    lifsong *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
   641    lifsong **************************************************************************/
   641    lifsong FPAR	
   641    lifsong     data               conn_hand_data__t,
   641    lifsong     create_client_pid  pid,
   641    lifsong     delete_client_pid  pid,
   641    lifsong     xconn_server       pid,
   641    lifsong     xconn_attr         attr_group_t,
  1420       pshu     hms_hand            pid;
   641    lifsong 
   641    lifsong CONSTANT
   641    lifsong     temporary_wait__c = 499;
   641    lifsong     auuseb_timeout__c = 200;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     status                      error_t,
   641    lifsong     old_pri                     priority_t,
   641    lifsong     is_rt_conn                  bool := F,
   641    lifsong     creating                    bool,
   641    lifsong     xc_exist                    bool := F,
   641    lifsong     parent_far_pid              pid,
   641    lifsong     start_time                  clock_t,
   641    lifsong     conn_ids, addrs, xconn_ids  jig_two_id_array__t;
   641    lifsong 
   641    lifsong TIMER
   641    lifsong     SET single_tl,
  1420       pshu     information_notif_timer,
  1420       pshu     msg_ack_timer;
   641    lifsong 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE create_rt_vcltp__r;
   641    lifsong /*
   641    lifsong  * Reserve VCLTP from RUGGER.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta       conn_hand_data__t,
   641    lifsong     IN         ep_idx    byte;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong START;
   641    lifsong     OUTPUT atm_vcltp_create_req_s( dta.endpoint(ep_idx).tpi,
   641    lifsong                                    atm_cre_state_t_new_object_c )
   641    lifsong            TO xconn_server,
   641    lifsong            SET ATTRIBUTES = xconn_attr;
   641    lifsong 
   641    lifsong     SET (NOW + temporary_wait__c, information_notif_timer );
   641    lifsong     NEXTSTATE waiting_notif_ack;
   641    lifsong 
   641    lifsong STATE waiting_notif_ack;
   641    lifsong 
   641    lifsong   INPUT atm_vcltp_create_ack_s (tp_identifier,status);
   641    lifsong     DCL
   641    lifsong        status              error_t,
   641    lifsong        tp_identifier       tpi_t;
   641    lifsong 
   641    lifsong     DECISION dta.endpoint(ep_idx).tpi.interf = tp_identifier.interf AND
   641    lifsong              dta.endpoint(ep_idx).tpi.vpi    = tp_identifier.vpi AND
   641    lifsong              dta.endpoint(ep_idx).tpi.vci    = tp_identifier.vci;
   641    lifsong     ( T ):
   641    lifsong        RESET ( information_notif_timer );
   641    lifsong 
   641    lifsong        DECISION status;
   641    lifsong        /** If rugger found that the required vcltp already exist when creating atm vcltp, 
   641    lifsong        rugger will reture vc_id_already_exists_ec,NOT vcltp_exists_ec.
   641    lifsong        Please make attention.  **/
   641    lifsong        ( vc_id_already_exists_ec ):
   641    lifsong           TASK status := success_ec;
   641    lifsong        ENDDECISION;
   641    lifsong 
   641    lifsong        RETURN status;
   641    lifsong     ENDDECISION;
   641    lifsong     NEXTSTATE -;
   641    lifsong 
   641    lifsong   INPUT information_notif_timer;
   641    lifsong     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
   641    lifsong                       log_text_info_t(@'JIGCON: NO ATM_VCLTP_CREATE_ACK...'));
   641    lifsong     TASK write_to_log(log_type_t_byte_e_c,
   641    lifsong                       log_write_item_t(@dta.endpoint(ep_idx).tpi),
   641    lifsong                       SIZEOF(tpi_t),
   853       pshu                       log_text_info_t(@'JIGCON: ...CREATE TPI:'));
   641    lifsong     RETURN message_waiting_timeout_ec;
   641    lifsong 
   641    lifsong ENDSTATE waiting_notif_ack;
   641    lifsong ENDPROCEDURE create_rt_vcltp__r;
   641    lifsong 
  1054    lifsong 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE delete_rt_vcltp__r;
   641    lifsong /*
   641    lifsong  * Release VCLTP from RUGGER.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta       conn_hand_data__t,
   641    lifsong     IN         ep_idx    byte;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong START;
   641    lifsong     OUTPUT atm_vcltp_release_req_s( dta.endpoint(ep_idx).tpi )
   641    lifsong            TO xconn_server,
   641    lifsong            SET ATTRIBUTES = xconn_attr;
   641    lifsong 
   641    lifsong     SET (NOW + temporary_wait__c, information_notif_timer );
   641    lifsong     NEXTSTATE waiting_notif_ack;
   641    lifsong 
   641    lifsong STATE waiting_notif_ack;
   641    lifsong 
   641    lifsong   INPUT atm_vcltp_release_ack_s (tp_identifier,status);
   641    lifsong     DCL
   641    lifsong        status            error_t,
   641    lifsong        tp_identifier     tpi_t;
   641    lifsong 
   641    lifsong     DECISION dta.endpoint(ep_idx).tpi.interf = tp_identifier.interf AND
   641    lifsong              dta.endpoint(ep_idx).tpi.vpi = tp_identifier.vpi AND
   641    lifsong              dta.endpoint(ep_idx).tpi.vci = tp_identifier.vci;
   641    lifsong     ( T ):
   641    lifsong        RESET ( information_notif_timer );
   641    lifsong 
   641    lifsong        DECISION status;
   641    lifsong        ( vc_id_does_not_exist_ec ):
   641    lifsong           TASK status := success_ec;
   641    lifsong        ENDDECISION;
   641    lifsong 
   641    lifsong        RETURN status;
   641    lifsong     ENDDECISION;
   641    lifsong     NEXTSTATE -;
   641    lifsong 
   641    lifsong   INPUT information_notif_timer;
   641    lifsong     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
   641    lifsong                       log_text_info_t(@'JIGCON: NO ATM_VCLTP_RELEASE_ACK...'));
   641    lifsong     TASK write_to_log(log_type_t_byte_e_c,
   641    lifsong                       log_write_item_t(@dta.endpoint(ep_idx).tpi),
   641    lifsong                       SIZEOF(tpi_t),
   641    lifsong                       log_text_info_t(@'JIGCON: ...RELATED TPI:'));
   641    lifsong     RETURN message_waiting_timeout_ec;
   641    lifsong 
   641    lifsong ENDSTATE waiting_notif_ack;
   641    lifsong ENDPROCEDURE delete_rt_vcltp__r;
   641    lifsong 
  1139      tinyu 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE create_rt_xconn__r;
   641    lifsong /*
   641    lifsong  * Create RT xconn via RBROKE.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta           conn_hand_data__t,
   641    lifsong     IN/OUT     upd_xconn_ids jig_two_id_array__t;
   641    lifsong 
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     traf_para            atm_aal2_traf_para_t;
   641    lifsong 
   641    lifsong START;
   641    lifsong     TASK traf_para.form            := atm_aal2_traf_para_t_intern_c,
   641    lifsong          traf_para.para.intern.ing := dta.traf_conf_para(0),
   641    lifsong          traf_para.para.intern.egr := dta.traf_conf_para(1);
   641    lifsong 
   641    lifsong     OUTPUT atm_xconn_create_req_s(dta.endpoint(0).tpi,
   641    lifsong                                   dta.endpoint(0).mxu_type_index,
   641    lifsong                                   xconn_id_t_unspecified_c,
   641    lifsong                                   end_point_t_not_in_segment_c,
   641    lifsong                                   traffic_shaping_t (.
   641    lifsong                                     shaping_option_t_none_c,
   641    lifsong                                     shaping_option_t_none_c .),
   641    lifsong 
   641    lifsong                                   dta.endpoint(1).tpi,
   641    lifsong                                   dta.endpoint(1).mxu_type_index,
   641    lifsong                                   xconn_id_t_unspecified_c,
   641    lifsong                                   end_point_t_not_in_segment_c,
   641    lifsong                                   traffic_shaping_t (.
   641    lifsong                                     shaping_option_t_none_c,
   641    lifsong                                     shaping_option_t_none_c .),
   641    lifsong 
   641    lifsong                                   b_level_t_vc_c,
   641    lifsong                                   traf_para,
   641    lifsong                                   cdvt_params_t (.
   641    lifsong                                     cdvt_t_unspecified_c,
   641    lifsong                                     cdvt_t_unspecified_c,
   641    lifsong                                     cdvt_t_unspecified_c,
   641    lifsong                                     cdvt_t_unspecified_c .),
   641    lifsong                                   frame_disc_t (.
   641    lifsong                                     abled_flag_t_disabled_c,
   641    lifsong                                     abled_flag_t_disabled_c,
   641    lifsong                                     abled_flag_t_disabled_c,
   641    lifsong                                     abled_flag_t_disabled_c .),
   641    lifsong 
   641    lifsong                                   atm_usage_tag_t_ic_ud_c,
   641    lifsong                                   abled_flag_t_disabled_c,
   641    lifsong                                   abled_flag_t_disabled_c,
   641    lifsong                                   abled_flag_t_disabled_c,
   641    lifsong                                   abled_flag_t_enabled_c,
   641    lifsong                                   rm_owner_id_t_unspecified_c,
   641    lifsong                                   atm_cre_state_t_new_object_c)
   641    lifsong            TO xconn_server,
   641    lifsong            SET ATTRIBUTES = xconn_attr;
   641    lifsong 
   641    lifsong     SET (NOW + 2*temporary_wait__c, information_notif_timer );
   641    lifsong     NEXTSTATE waiting_for_ack;
   641    lifsong 
   641    lifsong STATE waiting_for_ack;
   641    lifsong 
   641    lifsong   INPUT atm_xconn_create_ack_s(fst_tp_identifier,fst_mxu,fst_xconn_id,
   641    lifsong                                sec_tp_identifier,sec_mxu,sec_xconn_id,
   641    lifsong                                status);
   641    lifsong     DCL
   641    lifsong        status            error_t,
   641    lifsong        fst_tp_identifier tpi_t,
   641    lifsong        fst_mxu           unit_it_t,
   641    lifsong        fst_xconn_id      xconn_id_t,
   641    lifsong        sec_tp_identifier tpi_t,
   641    lifsong        sec_mxu           unit_it_t,
   641    lifsong        sec_xconn_id      xconn_id_t;
   641    lifsong 
   641    lifsong     DECISION dta.endpoint(0).tpi.interf = fst_tp_identifier.interf AND
   641    lifsong              dta.endpoint(1).tpi.interf = sec_tp_identifier.interf AND
   641    lifsong              dta.endpoint(0).tpi.vpi = fst_tp_identifier.vpi AND
   641    lifsong              dta.endpoint(1).tpi.vpi = sec_tp_identifier.vpi AND
   641    lifsong              dta.endpoint(0).tpi.vci = fst_tp_identifier.vci AND
   641    lifsong              dta.endpoint(1).tpi.vci = sec_tp_identifier.vci AND
   641    lifsong              dta.endpoint(0).mxu_type_index.ttype = fst_mxu.ttype AND
   641    lifsong              dta.endpoint(0).mxu_type_index.index = fst_mxu.index AND
   641    lifsong              dta.endpoint(1).mxu_type_index.ttype = sec_mxu.ttype AND
   641    lifsong              dta.endpoint(1).mxu_type_index.index = sec_mxu.index;
   641    lifsong     ( T ):
   641    lifsong        RESET ( information_notif_timer );
   641    lifsong        DECISION status;
   641    lifsong        ( success_ec ):
   641    lifsong        /*This is because JIGGER always assume XCONN ID only use low 16 bits
   641    lifsong        though it is a DWORD*/
   641    lifsong          DECISION (( fst_xconn_id>0XFFFF ) OR ( sec_xconn_id > 0XFFFF ));
   641    lifsong          (T):
   641    lifsong             TASK  status := jig_xconn_id__t_unspecified__c;
   641    lifsong             TASK dxsyslog_r( log_type_t_text_e_c,
   641    lifsong                  @'JIGCON: HIGH BITS OF xconn_id_t HAVE BEEN USED'
   641    lifsong                   ' fst unit_type=%XH, fst unit_index=%XH, fst connid=%04X'
   641    lifsong                   ' sec unit_type=%XH, sec unit_index=%XH, sec connid=%04X',
   641    lifsong                   fst_mxu.ttype,
   641    lifsong                   fst_mxu.index,
   641    lifsong                   fst_xconn_id,
   641    lifsong                   sec_mxu.ttype,
   641    lifsong                   sec_mxu.index,
   641    lifsong                   sec_xconn_id);
   641    lifsong              RETURN  status;
   641    lifsong          ENDDECISION;
   641    lifsong           TASK upd_xconn_ids.item(0) := fst_xconn_id,
   641    lifsong                upd_xconn_ids.item(1) := sec_xconn_id,
   641    lifsong                upd_xconn_ids.n_items := 2;
   641    lifsong 
   641    lifsong        ( apc_open_ing_conn_failed_ec,
   641    lifsong          apc_open_eg_conn_failed_ec ):
   641    lifsong           /* return error code which does not cause AUUSEB error logs */
   641    lifsong           TASK status := prereq_of_conn_not_fulfilled_ec;
   641    lifsong        ( tp_connected_ec ):
   641    lifsong            TASK status := success_ec;
   641    lifsong            TASK upd_xconn_ids.item(0) := jig_xconn_id__t_unspecified__c,
   641    lifsong                upd_xconn_ids.item(1) := jig_xconn_id__t_unspecified__c,
   641    lifsong                upd_xconn_ids.n_items := 2;
   641    lifsong            TASK   write_to_log(  log_type_t_dword_i_c,
   641    lifsong                                  log_write_item_t(@status),
   641    lifsong                                  SIZEOF(status),
   641    lifsong                                  log_text_info_t
   853       pshu                                  (@'JIGCON: RBROKE NOTIFY TP ALREADY IN USE'));
  1475   huantang        (  warm_up_in_progress_ec  ): 
   641    lifsong        /*added for PR 44404ESPE02: GOFFIC Critica error logs in TPG*/
   641    lifsong           TASK status := prereq_of_conn_not_fulfilled_ec,
   641    lifsong                 upd_xconn_ids.item(0) := 0,
   641    lifsong                 upd_xconn_ids.item(1) := 0,
   641    lifsong                 upd_xconn_ids.n_items := 2;
  1475   huantang        ( incorrect_unit_state_ec,not_ready_ec ): /*do not report error log if unit is in restarting*/
   641    lifsong            TASK upd_xconn_ids.item(0) := 0,
   641    lifsong                 upd_xconn_ids.item(1) := 0,
   641    lifsong                 upd_xconn_ids.n_items := 2;
   641    lifsong        ELSE:
   641    lifsong            /* the xconn is not created and the xconn_id marks the case.*/
   641    lifsong            TASK upd_xconn_ids.item(0) := 0,
   641    lifsong                 upd_xconn_ids.item(1) := 0,
   641    lifsong                 upd_xconn_ids.n_items := 2;
   641    lifsong            TASK dxsyslog_r( log_type_t_text_i_c,
   641    lifsong                             @'JIGCON: RT XCONN CREATION FAILS: %04X'
   641    lifsong                              ' intf 1: %04X vpi:%d vci:%04X'
   641    lifsong                              ' intf 2: %04X vpi:%d vci:%04X',
   641    lifsong                             status,
   641    lifsong                             dta.endpoint(0).tpi.interf,
   641    lifsong                             dta.endpoint(0).tpi.vpi,
   641    lifsong                             dta.endpoint(0).tpi.vci,
   641    lifsong                             dta.endpoint(1).tpi.interf,
   641    lifsong                             dta.endpoint(1).tpi.vpi,
   641    lifsong                             dta.endpoint(1).tpi.vci );
   641    lifsong        ENDDECISION;
   641    lifsong        RETURN status;
   641    lifsong     ENDDECISION;
   641    lifsong     NEXTSTATE -;
   641    lifsong 
   641    lifsong   INPUT information_notif_timer;
   641    lifsong     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
   641    lifsong                       log_text_info_t(@'JIGCON: NO ANSWER TO XCONN CREATION...'));
   641    lifsong     TASK write_to_log(log_type_t_byte_e_c,
   641    lifsong                       log_write_item_t(@dta.endpoint(0)),
   641    lifsong                       SIZEOF(dta.endpoint(0)),
   641    lifsong                       log_text_info_t(@'JIGCON:...FIRST UNIT:'));
   641    lifsong     TASK write_to_log(log_type_t_byte_e_c,
   641    lifsong                       log_write_item_t(@dta.endpoint(1)),
   641    lifsong                       SIZEOF(dta.endpoint(1)),
   641    lifsong                       log_text_info_t(@'JIGCON:...SECOND UNIT:'));
   641    lifsong     RETURN message_waiting_timeout_ec;
   641    lifsong 
   641    lifsong ENDSTATE waiting_for_ack;
   641    lifsong 
   641    lifsong ENDPROCEDURE create_rt_xconn__r;
   641    lifsong 
  1139      tinyu 
   641    lifsong PROCEDURE alp2_hconn_op__r;
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta       conn_hand_data__t,
   641    lifsong     IN         ep_idx    byte,
   641    lifsong     IN         mode      request_mode_t;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     my_phys_pid  pid,
   641    lifsong     params       jig_alp2_conf_para__t;
   641    lifsong 
   641    lifsong START;
   641    lifsong     TASK my_phys_pid := SELF;
   641    lifsong     TASK set_pid_computer_r( my_phys_pid, own_unit_phys_addr );
   641    lifsong 
   641    lifsong     TASK params.alp2_hms_addr   := dta.endpoint(ep_idx).hms_addr,
   641    lifsong          params.alp2_unit_type  := dta.endpoint(ep_idx).unit_info.ttype,
   641    lifsong          params.alp2_unit_index := dta.endpoint(ep_idx).unit_info.index,
   641    lifsong          params.req_mode        := mode,
   641    lifsong          params.outw_mphy       := dta.endpoint(ep_idx).alp2_outw_mphy,
   641    lifsong          params.inw_mphy        := dta.endpoint(ep_idx).alp2_inw_mphy,
   641    lifsong          params.vpi             := dta.endpoint(ep_idx).tpi.vpi,
   641    lifsong          params.vci             := dta.endpoint(ep_idx).tpi.vci;
   641    lifsong 
   641    lifsong     OUTPUT jig_alp2_conf_req__s( params, my_phys_pid ) TO PARENT,
   641    lifsong            SET SND_MSGCOPY_FROM_WO_TO_SPUP = 0,
   641    lifsong                DESTROY_MSG_IF_NOT_WO_STATE = 1;
   641    lifsong 
   641    lifsong     SET( NOW + temporary_wait__c, information_notif_timer );
   641    lifsong     NEXTSTATE wait_conf_ack;
   641    lifsong 
   641    lifsong STATE wait_conf_ack;
   641    lifsong 
   641    lifsong   INPUT jig_alp2_conf_ack__s( status, para2 );
   641    lifsong     DCL
   641    lifsong        status            error_t,
   641    lifsong        para2             jig_alp2_conf_para__t;
   641    lifsong 
   641    lifsong     DECISION ( para2.alp2_hms_addr /= params.alp2_hms_addr ) OR
   641    lifsong              ( para2.req_mode      /= params.req_mode      ) OR
   641    lifsong              ( para2.vci           /= params.vci           );
   641    lifsong     ( T ):
   641    lifsong        NEXTSTATE -;
   641    lifsong     ENDDECISION;
   641    lifsong     RESET( information_notif_timer );
   641    lifsong     RETURN status;
   641    lifsong 
   641    lifsong   INPUT information_notif_timer;
   641    lifsong     RETURN message_waiting_timeout_ec;
   641    lifsong 
   641    lifsong ENDSTATE wait_conf_ack;
   641    lifsong ENDPROCEDURE alp2_hconn_op__r;
   641    lifsong 
  1420       pshu PROCEDURE create_first_half_conn_in_app__r;
  1420       pshu FPAR
  1420       pshu     IN VIEWED  dta       conn_hand_data__t,
  1420       pshu     IN         ep_idx    byte;
  1420       pshu RETURNS
  1420       pshu     error_t;
  1420       pshu DCL
  1420       pshu     l_fig_hdr               fig_msg_header_t,
  1420       pshu 	in_ingress_sel          apc_ing_stream_t,
  1420       pshu 	in_egress_sel           apc_egr_stream_t,
  1420       pshu 	remote_xconn_info       xconn_dest_info_t;
   641    lifsong 
  1420       pshu START;
  1420       pshu 	TASK l_fig_hdr.hms_address := dta.endpoint(ep_idx).hms_addr,
  1420       pshu 	     l_fig_hdr.extended_addr := 0;
  1420       pshu 	TASK remote_xconn_info.fabric_port   := dta.endpoint(ep_idx^1).sfu_port,
  1420       pshu 	     remote_xconn_info.remote_connid := dta.endpoint(ep_idx^1).xconn_id;
  1420       pshu     TASK add_proxy_item(SELF,dta.endpoint(ep_idx).hms_addr);
   641    lifsong 
  1420       pshu     
  1420       pshu 	OUTPUT app_pre_half_xconn_req_s(l_fig_hdr,                         /* hms of alp1*/
  1420       pshu 	                                in_ingress_sel,                    /* null */
  1420       pshu 	                                in_egress_sel,                     /* null */
  1420       pshu 	                                remote_xconn_info.fabric_port*2+1, /* mphy*/
  1420       pshu 	                                dta.endpoint(ep_idx).tpi.vci,      /* vci*/
  1420       pshu 	                                tp_in_topology_t_uc_c,             /* top type */ 
  1420       pshu 	                                dta.endpoint(ep_idx).xconn_id,     /* xconn id */
  1420       pshu 	                                remote_xconn_info                  /* remote info*/                                       
  1420       pshu 	                                ) TO hms_hand;
  1420       pshu     SET ( NOW + temporary_wait__c, msg_ack_timer );
  1420       pshu     NEXTSTATE waiting_ack;
  1420       pshu STATE waiting_ack;
  1420       pshu 	INPUT msg_ack_timer;
  1420       pshu 	   DCL 
  1420       pshu 	      dummy_pid  pid,
  1420       pshu 	      dummy_b    bool;
  1420       pshu 	      
  1420       pshu 	   TASK  dummy_b := pull_proxy_item(dta.endpoint(ep_idx).hms_addr,dummy_pid);
  1420       pshu 	   RETURN message_waiting_timeout_ec;
  1420       pshu 	INPUT app_pre_half_xconn_ack_s( l_resp_hms_address, l_status );
  1420       pshu        DCL
  1420       pshu           l_resp_hms_address  fig_msg_header_t,
  1420       pshu           l_status            error_t;
  1420       pshu           RESET(msg_ack_timer);
  1420       pshu 	      RETURN l_status;
  1420       pshu ENDSTATE waiting_ack;
  1420       pshu ENDPROCEDURE create_first_half_conn_in_app__r;
  1420       pshu 
  1420       pshu 
  1420       pshu PROCEDURE create_first_half_conn_in_apc__r;
  1420       pshu FPAR
  1420       pshu     IN VIEWED  dta       conn_hand_data__t,
  1420       pshu     IN         ep_idx    byte,
  1420       pshu     IN         tm_params_apc       alp_tp_streams_t;
  1420       pshu RETURNS
  1420       pshu     error_t;
  1420       pshu DCL
  1420       pshu     l_fig_hdr               fig_msg_header_t,
  1420       pshu     remote_xconn_info       xconn_dest_info_t;
  1420       pshu 
  1420       pshu START;
  1420       pshu     TASK l_fig_hdr.hms_address := dta.endpoint(ep_idx).hms_addr,
  1420       pshu          l_fig_hdr.extended_addr := 0;
  1420       pshu     TASK remote_xconn_info.fabric_port   := dta.endpoint(ep_idx^1).sfu_port,
  1420       pshu          remote_xconn_info.remote_connid := dta.endpoint(ep_idx^1).xconn_id;
  1420       pshu     TASK add_proxy_item(SELF,dta.endpoint(ep_idx).hms_addr);
  1420       pshu 
  1420       pshu     TASK tm_params_apc.gen_ing_stream.epd_ppd_info.epd := T,
  1420       pshu          tm_params_apc.gen_ing_stream.epd_ppd_info.ppd := T,
  1420       pshu          tm_params_apc.gen_egr_stream.epd_ppd_info.epd := T,
  1420       pshu          tm_params_apc.gen_egr_stream.epd_ppd_info.ppd := T;
  1420       pshu     DECISION tm_params_apc.ingress_sel;
  1420       pshu     ( apc_ing_stream_t_cl1_c ):
  1420       pshu         TASK tm_params_apc.ing_stream.cl1.dest_fabric_port_number :=
  1420       pshu                  remote_xconn_info.fabric_port;
  1420       pshu     ENDDECISION;
  1420       pshu 
  1420       pshu     OUTPUT create_predet_half_xconn_req_s(l_fig_hdr,
  1420       pshu                                           tm_params_apc.ingress_sel,
  1420       pshu                                           tm_params_apc.egress_sel,
  1420       pshu                                           dta.endpoint(ep_idx).mphy_port,
  1420       pshu                                           dta.endpoint(ep_idx).tpi.vci, 
  1420       pshu                                           tp_in_topology_t_uc_c,
  1420       pshu                                           dta.endpoint(ep_idx).xconn_id,
  1420       pshu                                           remote_xconn_info,
  1420       pshu                                           tm_params_apc.gen_ing_stream,
  1420       pshu                                           tm_params_apc.gen_egr_stream,
  1420       pshu                                           tm_params_apc.egr_subport,
  1420       pshu                                           tm_params_apc.ing_stream.cl0,
  1420       pshu                                           tm_params_apc.ing_stream.cl1,
  1420       pshu 								          tm_params_apc.ing_stream.cl234,
  1420       pshu 								          tm_params_apc.egr_stream.spt1_cl0,
  1420       pshu 								          tm_params_apc.egr_stream.spt1_cl1,
  1420       pshu 								          tm_params_apc.egr_stream.spt1_cl234,
  1420       pshu 								          tm_params_apc.egr_stream.spt2s,
  1420       pshu 								          tm_params_apc.egr_stream.spt2n)TO hms_hand;
  1420       pshu     SET ( NOW + temporary_wait__c, msg_ack_timer );
  1420       pshu     NEXTSTATE waiting_ack;
  1420       pshu STATE waiting_ack;
  1420       pshu     INPUT msg_ack_timer;
  1420       pshu        DCL 
  1420       pshu           dummy_pid  pid,
  1420       pshu           dummy_b    bool;
  1420       pshu           
  1420       pshu        TASK  dummy_b := pull_proxy_item(dta.endpoint(ep_idx).hms_addr,dummy_pid);
  1420       pshu        RETURN message_waiting_timeout_ec;
  1420       pshu     INPUT create_predet_half_xconn_ack_s( l_resp_hms_address, l_status );
  1420       pshu        DCL
  1420       pshu           l_resp_hms_address  fig_msg_header_t,
  1420       pshu           l_status            error_t;
  1420       pshu           RESET(msg_ack_timer);
  1420       pshu           RETURN l_status;
  1420       pshu ENDSTATE waiting_ack;
  1420       pshu ENDPROCEDURE create_first_half_conn_in_apc__r;
  1420       pshu 
  1479       pshu 
  1479       pshu PROCEDURE get_wosp_brt_pids__r;
  1479       pshu FPAR
  1479       pshu     IN VIEWED  dta          conn_hand_data__t,
  1479       pshu     IN         ep_idx       byte,
  1479       pshu     IN         alp_type     unit_type_t,
  1479       pshu     IN/OUT     real_brtpid  pid,
  1479       pshu     IN/OUT     ignr_brtpid  pid;
  1479       pshu START;
  1479       pshu 	DECISION  dta.endpoint(ep_idx).phys_addr;
  1479       pshu 	(dta.endpoint(ep_idx).mxu_addr):
  1479       pshu 		CALL get_brt_pid__r(alp_type,
  1479       pshu 		                    dta.endpoint(ep_idx).mxu_addr,
  1479       pshu 		                    real_brtpid);
  1479       pshu 		CALL get_brt_pid__r(alp_type,
  1479       pshu 		                    dta.endpoint(ep_idx).sp_mxu_addr,
  1479       pshu 		                    ignr_brtpid);
  1479       pshu 	(dta.endpoint(ep_idx).sp_mxu_addr):
  1479       pshu 		CALL get_brt_pid__r(alp_type,
  1479       pshu 		                    dta.endpoint(ep_idx).sp_mxu_addr,
  1479       pshu 		                    real_brtpid);
  1479       pshu 		CALL get_brt_pid__r(alp_type,
  1479       pshu 		                    dta.endpoint(ep_idx).mxu_addr,
  1479       pshu 		                    ignr_brtpid);
  1479       pshu     ELSE:
  1479       pshu         CALL get_brt_pid__r(alp_type,
  1479       pshu 		                    dta.endpoint(ep_idx).mxu_addr,
  1479       pshu 		                    real_brtpid);
  1479       pshu         
  1479       pshu         DECISION(dta.endpoint(ep_idx).unit_info.ttype);
  1479       pshu         (unit_type_t_ss7up_c):
  1479       pshu             CALL get_brt_pid__r(alp_type,
  1479       pshu 		                        dta.endpoint(ep_idx).sp_mxu_addr,
  1479       pshu 		                        ignr_brtpid);
  1479       pshu         ELSE:
  1479       pshu 		    TASK make_pid_r(ignr_brtpid,0xffff,0,0,0);
  1479       pshu 		ENDDECISION;
  1479       pshu     ENDDECISION; 
  1479       pshu 
  1479       pshu ENDPROCEDURE;
  1479       pshu     
  1479       pshu 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE create_nrt_half_conn__r;
   641    lifsong /*
   641    lifsong  * Create one half of a non-realtime message connection.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta       conn_hand_data__t,
   641    lifsong     IN         ep_idx    byte;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong DCL
   641    lifsong     alp1_tm_params       alp_tp_streams_t,
   641    lifsong     tm_params_dummy      alp_tp_streams_t,
   641    lifsong     ec                   error_t := success_ec,
  1367       pshu     real_ec            error_t,
  1367       pshu     ingr_ec            error_t,
   641    lifsong     ui                   unit_it_t,
   641    lifsong     res                  jig_few_vcc_resources__t,
   641    lifsong     l_jii_alp, l_target_unit				jiifil__t,
  1367       pshu     l_real_brtpid		pid,
  1367       pshu     l_ignr_brtpid       pid,
   641    lifsong     l_tpi            tpi_t,
   641    lifsong     l_path_info		half_cconn_phy_info_t,
  1421       pshu     l_one_vcc_res		jig_one_vcc_resources__t;
   641    lifsong 
   641    lifsong START;
   641    lifsong 
   641    lifsong 	DECISION data.endpoint(ep_idx).mxu_type_index.ttype;/*Check if it is an ALP unit or a trib unit*/
   641    lifsong 	(unit_type_t_no_object_given_c):
   641    lifsong 		TASK	l_jii_alp.unit_type := dta.endpoint(ep_idx).unit_info.ttype,
   641    lifsong 				l_jii_alp.unit_index := dta.endpoint(ep_idx).unit_info.index,
   641    lifsong 				l_jii_alp.sfu_port_number := data.endpoint(ep_idx).sfu_port;/*ALP unit*/
   641    lifsong 	ELSE:
   641    lifsong 		TASK	l_jii_alp.unit_type := dta.endpoint(ep_idx).mxu_type_index.ttype,
   641    lifsong 				l_jii_alp.unit_index := dta.endpoint(ep_idx).mxu_type_index.index,
   641    lifsong 				l_jii_alp.sfu_port_number := data.endpoint(ep_idx).sfu_port;/*TRIB unit*/
   641    lifsong 	ENDDECISION;
   641    lifsong 	TASK	l_target_unit.unit_type := dta.endpoint(ep_idx).unit_info.ttype,
   641    lifsong                 l_target_unit.unit_index := dta.endpoint(ep_idx).unit_info.index,
   641    lifsong                 l_target_unit.procs(0).unit_type := dta.endpoint(ep_idx).unit_info.ttype,
   641    lifsong                 l_target_unit.procs(0).unit_index := dta.endpoint(ep_idx).unit_info.index,
   641    lifsong                 l_target_unit.procs(0).interface_index := 0,
   641    lifsong                 l_target_unit.sfu_port_number := dta.endpoint(ep_idx).sfu_port;
   641    lifsong 			
  1420       pshu 	TASK   l_target_unit.interfaces(0).intf_id := dta.endpoint(ep_idx).tpi.interf,
  1420       pshu 	       l_target_unit.interfaces(0).mphy_port := dta.endpoint(ep_idx).mphy_port,
  1420       pshu 	       l_target_unit.procs(0).vpi 	 := dta.endpoint(ep_idx).tpi.vpi;
   641    lifsong      			
  1333    jinncao 	TASK memset( bytepointer(@res), 0, SIZEOF(res));
   641    lifsong 
  1333    jinncao 	TASK ec := unit_type_and_index_r( dta.endpoint(ep_idx).phys_addr, ui );
   641    lifsong 
  1333    jinncao 	DECISION (ec = success_ec) AND (dta.endpoint(ep_idx).alp_is_app = F);
  1333    jinncao 	( T ):
  1333    jinncao 		TASK ec := get_traf_manag_params__r(
   641    lifsong                     ui.index,
   641    lifsong                     dta.endpoint(ep_idx).tpi.vpi,
   641    lifsong                     dta.endpoint(ep_idx).mphy_port,
   641    lifsong                     dta.endpoint(ep_idx).mxu_type_index.ttype,
   641    lifsong                     dta.endpoint(ep_idx).mxu_type_index.index,
   641    lifsong                     alp1_tm_params, tm_params_dummy );
  1333    jinncao 	ENDDECISION;
   641    lifsong 
  1333    jinncao 	DECISION (ec = success_ec) AND dta.endpoint(ep_idx).alp2_conn;
  1333    jinncao 	( T ):
  1333    jinncao 		TASK ec := alp2_hconn_op__r(dta, ep_idx,
   641    lifsong                                    request_mode_t_create_c );
  1333    jinncao 	ENDDECISION;
   641    lifsong 
  1333    jinncao 	DECISION ec;
  1333    jinncao 	( success_ec ):
  1333    jinncao 		TASK res.item(0).vci              := dta.endpoint(ep_idx).tpi.vci,
  1333    jinncao 			res.item(0).xconn_id         := dta.endpoint(ep_idx).xconn_id,
  1333    jinncao 			res.item(0).remote_xconn_id  := dta.endpoint(ep_idx^1).xconn_id,
  1333    jinncao 			res.item(0).dest_fabric_port := dta.endpoint(ep_idx^1).sfu_port,
  1333    jinncao 			res.item_count               := 1,
  1333    jinncao 			res.item(0).target_comp    := dta.endpoint(ep_idx).phys_addr,
  1333    jinncao 			res.item(0).conn_id        := dta.id;
  1333    jinncao 		TASK l_one_vcc_res.vci              := dta.endpoint(ep_idx).tpi.vci,
  1333    jinncao 			l_one_vcc_res.xconn_id         := dta.endpoint(ep_idx).xconn_id,
  1333    jinncao 			l_one_vcc_res.remote_xconn_id  := dta.endpoint(ep_idx^1).xconn_id,
  1333    jinncao 			l_one_vcc_res.dest_fabric_port := dta.endpoint(ep_idx^1).sfu_port,
  1333    jinncao 			l_one_vcc_res.serv_category := int_serv_cat_t_i_nrt_mnw_c;
  1333    jinncao 		/*TASK l_one_vcc_res.vci := 		res.item(0);*/
  1333    jinncao 		DECISION data.endpoint(ep_idx).alp_is_app;
  1333    jinncao 		( F ):
  1333    jinncao 			TASK ec := create_halfconns_in_hw__r( dta.endpoint(ep_idx).mxu_addr,
   641    lifsong                                              dta.endpoint(ep_idx).sp_mxu_addr,
   641    lifsong                                              dta.endpoint(ep_idx).sp_mxu_addr
   641    lifsong                                              < computer_t_phys_not_defined_c,
   641    lifsong                                              alp1_tm_params,
   641    lifsong                                              dta.endpoint(ep_idx).tpi.vpi,
   641    lifsong                                              dta.endpoint(ep_idx).mphy_port,
   641    lifsong                                              1,
   641    lifsong                                              $jig_vccs_resources_ptr__t(@res),
   641    lifsong                                              0 );
  1333    jinncao 			/* sanity check: if ec=success_ec, nrof conns should be 1 */
  1333    jinncao 			DECISION (ec = success_ec) AND (res.item_count < 1);
  1333    jinncao 			( T ):
  1333    jinncao 				TASK ec := unsuccessful_ec;
  1333    jinncao 			ENDDECISION;
   641    lifsong 
  1333    jinncao 			RETURN ec;
  1333    jinncao 		ENDDECISION;
   641    lifsong 
  1479       pshu         CALL get_wosp_brt_pids__r(dta,ep_idx,l_jii_alp.unit_type,l_real_brtpid,l_ignr_brtpid);
   641    lifsong 
   641    lifsong 
  1367       pshu         TASK  l_tpi.level  := tpi_level_t_vc_c,
  1367       pshu 			  l_tpi.interf := dta.endpoint(ep_idx).tpi.interf,
  1367       pshu 			  l_tpi.vpi    := dta.endpoint(ep_idx).tpi.vpi,
  1367       pshu 		      l_tpi.vci    := l_one_vcc_res.vci;
  1367       pshu         CALL  get_path_info__r (l_target_unit, l_jii_alp, 0, l_path_info);
  1367       pshu         
  1420       pshu         DECISION(alp1_unit__r(dta.endpoint(ep_idx).unit_info.ttype) AND
  1420       pshu                  is_to_center_node__r(dta.endpoint(ep_idx).phys_addr,
  1420       pshu                                       dta.endpoint(ep_idx^1).phys_addr));
  1420       pshu         (T):
  1420       pshu             TASK real_ec := create_first_half_conn_in_app__r(dta,ep_idx);
  1420       pshu         ELSE:
  1420       pshu             TASK real_ec := brt_xconn_create__r(l_real_brtpid, l_tpi, l_path_info, l_one_vcc_res);
  1420       pshu         ENDDECISION;
  1367       pshu 
  1367       pshu 		DECISION(real_ec/= success_ec);
  1367       pshu 		(T):
  1367       pshu 			RETURN real_ec;
   641    lifsong 		ENDDECISION;
  1367       pshu 
  1367       pshu 		DECISION get_pid_family_r(l_ignr_brtpid) /= 0x0 AND 
  1367       pshu 		         is_unit_ready_for_nrt_create__r(get_pid_computer_r(l_ignr_brtpid));
  1367       pshu 		(T):
  1367       pshu 			TASK ingr_ec := brt_xconn_create__r(l_ignr_brtpid, l_tpi, l_path_info, l_one_vcc_res);
  1333    jinncao 		ENDDECISION;
  1367       pshu 		RETURN real_ec;
  1367       pshu 	ELSE:
  1367       pshu 		RETURN ec;
   641    lifsong 	ENDDECISION;
  1367       pshu         
  1367       pshu 
   641    lifsong ENDPROCEDURE create_nrt_half_conn__r;
   641    lifsong 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE create_rt_conn__r;
   641    lifsong /*
   641    lifsong  * Create a RT cross-connection between two computers.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN/OUT  upd_conn_ids  jig_two_id_array__t,
   641    lifsong     IN/OUT  upd_addrs     jig_two_id_array__t,
   641    lifsong     IN/OUT  upd_xconn_ids jig_two_id_array__t;
   641    lifsong 
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     update_idx, ep_idx   byte,
  1410      tinyu     ec, ec2              error_t:=success_ec,
   641    lifsong     full_retry           bool := F,
   641    lifsong     try_again            bool := T;
   641    lifsong 
   641    lifsong START;
   641    lifsong     WHILE try_again;
   641    lifsong        TASK try_again := F;
   641    lifsong 
   641    lifsong        /* reserve VCLtps which have not yet been reserved. */
   641    lifsong        TASK ep_idx := 0, update_idx := 0, ec := success_ec;
   641    lifsong        WHILE (ep_idx < 2) AND (ec = success_ec);
   641    lifsong           DECISION full_retry OR
   641    lifsong                    ( NOT data.endpoint(ep_idx).exists_in_hw );
   641    lifsong           ( T ):
   641    lifsong              TASK ec := create_rt_vcltp__r( data, ep_idx );
   641    lifsong              DECISION ec;
   641    lifsong              ( success_ec ):
   641    lifsong                 TASK upd_conn_ids.item(update_idx) := data.id,
   641    lifsong                      upd_addrs.item(update_idx)    := data.endpoint(ep_idx).phys_addr,
   641    lifsong                      update_idx                    := update_idx + 1;
   641    lifsong              ENDDECISION;
   641    lifsong           ENDDECISION;
   641    lifsong           TASK ep_idx := ep_idx + 1;
   641    lifsong        ENDWHILE;
   641    lifsong 
   641    lifsong        DECISION ec;
   641    lifsong        ( success_ec ):
   641    lifsong           TASK ec := create_rt_xconn__r( data, upd_xconn_ids );
   641    lifsong 
   641    lifsong           DECISION ec;
   641    lifsong           ( success_ec ):
   641    lifsong           ( vc_id_does_not_exist_ec ):
   641    lifsong              /* if RUGGER complains that one of the VCLTPs does not exist,
   641    lifsong                  try to re-reserve them: */
   641    lifsong              DECISION full_retry;
   641    lifsong              ( F ):
   641    lifsong                 TASK full_retry := T,
   641    lifsong                      try_again := T;
   641    lifsong              ENDDECISION;
   641    lifsong           ELSE:
   641    lifsong              /* rollback VCLtps */
   641    lifsong              TASK ep_idx := 0, update_idx := 0;
   641    lifsong              WHILE (ep_idx < 2);
   641    lifsong                 TASK ec2 := delete_rt_vcltp__r( data, ep_idx );
   641    lifsong                 TASK ep_idx := ep_idx + 1;
   641    lifsong              ENDWHILE;          
   641    lifsong           ENDDECISION;
   641    lifsong        ENDDECISION;
   641    lifsong     ENDWHILE;
   641    lifsong 
   641    lifsong     TASK upd_conn_ids.n_items := update_idx,
   641    lifsong          upd_addrs.n_items    := upd_conn_ids.n_items;
   641    lifsong 
   641    lifsong #if (F)
   641    lifsong     /* if we could create xconn directly without creating
   641    lifsong        vcltps first, we would do this here: */
   641    lifsong     DECISION ec;
   641    lifsong     ( success_ec ):
   641    lifsong        TASK upd_conn_ids.item(0) := data.id,
   641    lifsong             upd_conn_ids.item(1) := data.id,
   641    lifsong             upd_addrs.item(0)    := data.endpoint(0).phys_addr,
   641    lifsong             upd_addrs.item(1)    := data.endpoint(1).phys_addr,
   641    lifsong             upd_conn_ids.n_items := 2,
   641    lifsong             upd_addrs.n_items    := upd_conn_ids.n_items;
   641    lifsong     ENDDECISION;
   641    lifsong #endif
   641    lifsong 
   641    lifsong     RETURN ec;
   641    lifsong 
   641    lifsong ENDPROCEDURE create_rt_conn__r;
   641    lifsong 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE create_nrt_conn__r;
   641    lifsong /*
   641    lifsong  * Create NRT connection in ALP1 HW with WHISKY services.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN/OUT  upd_conn_ids jig_two_id_array__t,
  1407     z7zhou     IN/OUT  upd_addrs    jig_two_id_array__t,
  1407     z7zhou     IN/OUT  upd_xconn_ids jig_two_id_array__t;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong DCL
   641    lifsong     ep_idx               byte := 0,
   641    lifsong     upd_idx              byte := 0,
   641    lifsong     ec                   error_t := success_ec;
   641    lifsong 
   641    lifsong START;
   641    lifsong     WHILE (ep_idx < 2) AND (ec = success_ec);
   641    lifsong        DECISION data.endpoint(ep_idx).exists_in_hw = F
   641    lifsong                 AND
   641    lifsong                 data.endpoint(ep_idx).mxu_addr < computer_t_phys_not_defined_c;
   641    lifsong        ( T ):
   641    lifsong           TASK ec := create_nrt_half_conn__r( data, ep_idx );
   641    lifsong           DECISION ec;
   641    lifsong           ( success_ec ):
   641    lifsong              TASK upd_conn_ids.item(upd_idx) := data.id,
   641    lifsong                   upd_addrs.item(upd_idx)    := data.endpoint(ep_idx).phys_addr,
  1407     z7zhou                   upd_xconn_ids.item(upd_idx):= data.endpoint(ep_idx).xconn_id,
   641    lifsong                   upd_idx                    := upd_idx + 1;
   641    lifsong           ENDDECISION;
   641    lifsong        ENDDECISION;
   641    lifsong        TASK ep_idx := ep_idx + 1;
   641    lifsong     ENDWHILE;
   641    lifsong 
   641    lifsong     /* no need to roll back in error situations; we can update all
   641    lifsong        successfully created half-connections to JICFIL. */
   641    lifsong 
  1407     z7zhou     TASK upd_conn_ids.n_items  := upd_idx,
  1407     z7zhou          upd_xconn_ids.n_items := upd_idx,
  1407     z7zhou          upd_addrs.n_items     := upd_idx;
   641    lifsong     RETURN ec;
   641    lifsong 
   641    lifsong ENDPROCEDURE create_nrt_conn__r;
   641    lifsong 
  1139      tinyu 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE delete_nrt_half_conn__r;
   641    lifsong /*
   641    lifsong  * Delete one NRT half-connection from ALP1 hardware.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta       conn_hand_data__t,
   641    lifsong     IN         ep_idx    	  byte;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong DCL
   641    lifsong     tm_params_dummy      alp_tp_streams_t,
   641    lifsong     ec                   error_t := success_ec,
   641    lifsong     hconns               vc_half_conn_array_t,
   641    lifsong     l_jii_alp, l_target_unit				jiifil__t,
   641    lifsong     l_brtpid	           pid,
   641    lifsong   	is_app 	             bool,
   641    lifsong 	  l_alp_unit           jiifil__t,
   641    lifsong     l_path_info		half_cconn_phy_info_t,
   641    lifsong     l_child_idx          byte,
   641    lifsong     ustate					unit_state_t;
   641    lifsong 
   641    lifsong START;
   641    lifsong 	TASK ec := get_xcon_unit__r(data.endpoint(ep_idx).phys_addr, PARENT, is_app, l_target_unit, l_alp_unit);
   641    lifsong 	DECISION ec;
   641    lifsong 	(/=success_ec):
   641    lifsong 		RETURN ec;
   641    lifsong 	ENDDECISION;
   641    lifsong 	
   641    lifsong 	DECISION data.endpoint(ep_idx).mxu_type_index.ttype;/*Check if it is an ALP unit or a trib unit*/
   641    lifsong 	(unit_type_t_no_object_given_c):
   641    lifsong 		TASK	l_jii_alp.unit_type := data.endpoint(ep_idx).unit_info.ttype,
   641    lifsong 				l_jii_alp.unit_index := data.endpoint(ep_idx).unit_info.index,
   641    lifsong 				l_jii_alp.sfu_port_number := data.endpoint(ep_idx).sfu_port;/*ALP unit*/
   641    lifsong 	ELSE:
   641    lifsong 		TASK	l_jii_alp.unit_type := data.endpoint(ep_idx).mxu_type_index.ttype,
   641    lifsong 				l_jii_alp.unit_index := data.endpoint(ep_idx).mxu_type_index.index,
   641    lifsong 				l_jii_alp.sfu_port_number := data.endpoint(ep_idx).sfu_port;/*TRIB unit*/
   641    lifsong 	ENDDECISION;
   641    lifsong 	
   641    lifsong 	  TASK l_child_idx := 0;
   641    lifsong 	  WHILE l_child_idx < child_fu_list_t_size_c;
   641    lifsong 	    DECISION l_target_unit.procs(l_child_idx).phys_addr = data.endpoint(ep_idx).phys_addr;
   641    lifsong 	    ( T ):
   641    lifsong 	      TASK l_target_unit.procs(0) := l_target_unit.procs(l_child_idx);
   641    lifsong 	    ENDDECISION;
   641    lifsong 	    TASK l_child_idx := l_child_idx + 1;
   641    lifsong 	  ENDWHILE;
   641    lifsong 
   641    lifsong 
   641    lifsong     DECISION dta.endpoint(ep_idx).mxu_addr;
   641    lifsong     ( < computer_t_phys_not_defined_c ):
   641    lifsong 
   641    lifsong        TASK memset(bytepointer(@hconns), 0, SIZEOF(hconns));
   641    lifsong        TASK memset(bytepointer(@tm_params_dummy), 0, SIZEOF(tm_params_dummy));
   641    lifsong 
   641    lifsong        DECISION dta.endpoint(ep_idx).alp2_conn;
   641    lifsong        ( T ):
   641    lifsong           TASK ec := alp2_hconn_op__r( dta, ep_idx,
   641    lifsong                                        request_mode_t_delete_c );
   641    lifsong        ENDDECISION;
   641    lifsong 
   641    lifsong        TASK hconns.item(0).vci                      := dta.endpoint(ep_idx).tpi.vci,
   641    lifsong             hconns.item(0).local_conn_id            := dta.endpoint(ep_idx).xconn_id,
   641    lifsong             hconns.item(0).xconn_info.remote_connid := dta.endpoint(ep_idx^1).xconn_id,
   641    lifsong             hconns.item(0).xconn_info.fabric_port   := dta.endpoint(ep_idx^1).sfu_port;
   641    lifsong        TASK hconns.item_count := 1;
   641    lifsong 	  DECISION data.endpoint(ep_idx).alp_is_app;
   641    lifsong        ( F ):
   641    lifsong 	      	TASK ec := hconns_operation__r( dta.endpoint(ep_idx).mxu_addr,
   641    lifsong      	                                  dta.endpoint(ep_idx).sp_mxu_addr,
   641    lifsong                                        dta.endpoint(ep_idx).sp_mxu_addr
   641    lifsong                                        < computer_t_phys_not_defined_c,
   641    lifsong                                        request_mode_t_delete_c,
   641    lifsong                                        dta.endpoint(ep_idx).mphy_port,
   641    lifsong                                        dta.endpoint(ep_idx).tpi.vpi,
   641    lifsong                                        hconns,
   641    lifsong                                        tm_params_dummy );
   641    lifsong 	  ELSE:
   641    lifsong 	    /* if the ALP1 unit is separated, no need to send any commands there. */
   641    lifsong 	  	  DECISION unit_state_by_phys_addr__r( l_alp_unit.procs(0).phys_addr, ustate );
   641    lifsong     		  ( success_ec ):
   641    lifsong       		TASK ustate := ustate | unit_state_t_mainstate_bm_c;
   641    lifsong       		DECISION ustate;
   641    lifsong         		( unit_state_t_se_c, unit_state_t_tr_c ):
   641    lifsong           			RETURN success_ec;
   641    lifsong       		ENDDECISION;
   641    lifsong  		  ENDDECISION;
   641    lifsong 
   641    lifsong 		CALL	get_path_info__r (l_target_unit, l_jii_alp, 0, l_path_info);
   641    lifsong 
   641    lifsong 		CALL 	get_brt_pid__r (l_jii_alp.unit_type, dta.endpoint(ep_idx).mxu_addr, l_brtpid);
   641    lifsong 
   641    lifsong 		TASK	ec := brt_xconn_remove_1__r(l_brtpid, l_path_info, dta, ep_idx);
   641    lifsong 	  	
   641    lifsong 		DECISION ( data.endpoint(ep_idx).target_is_app OR (ss7u_unit_check__r(data.endpoint(ep_idx).unit_info.ttype) = T))
   641    lifsong 				AND (dta.endpoint(ep_idx).co_unit_addr /= computer_t_phys_invalid_c);
   641    lifsong 		(T):	/*Ignor xconn needed here*/
   641    lifsong 	    /* if the ALP1 unit is separate, no need to send any commands there. */
   641    lifsong 	  	  DECISION unit_state_by_phys_addr__r( dta.endpoint(ep_idx).co_unit_addr, ustate );
   641    lifsong     		  ( success_ec ):
   641    lifsong       		TASK ustate := ustate | unit_state_t_mainstate_bm_c;
   641    lifsong       		DECISION ustate;
   641    lifsong         		( unit_state_t_se_c, unit_state_t_tr_c ):
   641    lifsong           			RETURN success_ec;
   641    lifsong       		ENDDECISION;
   641    lifsong  		  ENDDECISION;
   641    lifsong  		
   641    lifsong 			CALL	get_brt_pid__r(l_target_unit.unit_type, dta.endpoint(ep_idx).co_unit_addr,l_brtpid);
   641    lifsong 
   641    lifsong 		  	TASK	ec := brt_xconn_remove_1__r(l_brtpid, l_path_info, dta, ep_idx);
   641    lifsong 		ENDDECISION;
   641    lifsong 
   641    lifsong 	ENDDECISION;
   641    lifsong     ENDDECISION;
   641    lifsong     RETURN ec;
   641    lifsong 
   641    lifsong ENDPROCEDURE delete_nrt_half_conn__r;
   641    lifsong 
  1139      tinyu 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE delete_nrt_conn__r;
   641    lifsong /*
   641    lifsong  * Delete NRT connection (or half of it) from ALP1 HW.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN/OUT  upd_conn_ids jig_two_id_array__t,
   641    lifsong     IN/OUT  upd_addrs    jig_two_id_array__t;
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     ep_idx               byte := 0,
   641    lifsong     upd_idx              byte := 0,
   641    lifsong     ec2, ec              error_t := success_ec;
   641    lifsong 
   641    lifsong START;
   641    lifsong     WHILE (ep_idx < 2);
   641    lifsong        DECISION data.endpoint(ep_idx).exists_in_hw;
   641    lifsong        ( T ):
   641    lifsong           TASK ec2 := delete_nrt_half_conn__r( data, ep_idx );
   641    lifsong           DECISION ec2;
   641    lifsong           ( success_ec ):
   641    lifsong              TASK upd_conn_ids.item(upd_idx) := data.id,
   641    lifsong                   upd_addrs.item(upd_idx)    := data.endpoint(ep_idx).phys_addr,
   641    lifsong                   upd_idx                    := upd_idx + 1;
   641    lifsong           ELSE:
   641    lifsong              TASK ec := ec2;
   641    lifsong           ENDDECISION;
   641    lifsong        ENDDECISION;
   641    lifsong        TASK ep_idx := ep_idx + 1;
   641    lifsong     ENDWHILE;
   641    lifsong 
   641    lifsong     /* no need to roll back in error situations; we can update all
   641    lifsong        successfully deleted half-connections to JICFIL. */
   641    lifsong 
   641    lifsong     TASK upd_conn_ids.n_items := upd_idx,
   641    lifsong          upd_addrs.n_items    := upd_idx;
   641    lifsong     RETURN ec;
   641    lifsong 
   641    lifsong ENDPROCEDURE delete_nrt_conn__r;
   641    lifsong 
   641    lifsong 
  1139      tinyu                                               
  1139      tinyu 
   641    lifsong /**************************************************************************/
  1139      tinyu PROCEDURE set_rel_stat_by_bool__r;
  1139      tinyu /*
  1139      tinyu  * This procedure sets rel_stat by a BOOL value
  1333    jinncao  **************************************************************************/
  1333    jinncao 
  1333    jinncao    FPAR
  1139      tinyu       IN dec   bool,
  1333    jinncao       IN ep_index   byte,
  1333    jinncao       IN/OUT rel_state   release_state__t;
  1333    jinncao 
  1333    jinncao    START;
  1333    jinncao       DECISION dec;
  1333    jinncao       (T):
  1333    jinncao          TASK rel_state (ep_index) := atm_cre_state_t_rel_all_c;
  1333    jinncao       ELSE:
  1333    jinncao          TASK rel_state (ep_index) := bit_or_r (atm_cre_state_t_hw_c, atm_cre_state_t_cac_c);
  1333    jinncao       ENDDECISION;
  1333    jinncao 
  1139      tinyu ENDPROCEDURE set_rel_stat_by_bool__r;
  1139      tinyu 
  1333    jinncao 
  1333    jinncao /**************************************************************************/
  1139      tinyu PROCEDURE set_rel_stat_by_conn_hand__r;
  1139      tinyu /*
  1139      tinyu  * This procedure sets rel_stat by a conn_hand
  1333    jinncao  **************************************************************************/
  1333    jinncao 
  1333    jinncao    FPAR     
  1333    jinncao       IN dta   conn_hand_data__t,
  1139      tinyu       IN/OUT rel_state   release_state__t;
  1139      tinyu    DCL 
  1139      tinyu       ep_index   byte,
  1333    jinncao       ret bool;
  1333    jinncao 
  1333    jinncao    START;
  1333    jinncao       TASK ep_index := 0;      
  1333    jinncao       WHILE (ep_index < 2);        
  1333    jinncao          DECISION ss7u_unit_check__r (dta.endpoint (ep_index).unit_info.ttype);
  1333    jinncao          /* is ss7u, check state of wo/sp mxu */
  1139      tinyu          (T):
  1139      tinyu             TASK ret := is_unit_in_ex_state__r (dta.endpoint (ep_index).mxu_addr) OR 
  1333    jinncao                       is_unit_in_ex_state__r (dta.endpoint (ep_index).sp_mxu_addr);
  1333    jinncao          /* is NOt ss7u, check WO MXU trib_startup_allowed */
  1333    jinncao          (F):
  1333    jinncao             TASK ret := check_trib_startup_allowed__r (dta.endpoint (ep_index).mxu_addr);
  1139      tinyu          ENDDECISION;         
  1139      tinyu          CALL set_rel_stat_by_bool__r (ret ,ep_index, rel_state);         
  1333    jinncao          TASK ep_index := ep_index + 1;
  1333    jinncao       ENDWHILE;
  1333    jinncao ENDPROCEDURE set_rel_stat_by_conn_hand__r;
  1333    jinncao 
   641    lifsong PROCEDURE delete_rt_xconn__r;
   641    lifsong /*
   641    lifsong  * This procedure deletes the xconn given as parameter.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN VIEWED  dta          conn_hand_data__t;
   641    lifsong 
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong       traf_para           atm_aal2_traf_para_t,
   641    lifsong       cdvt_params      cdvt_params_t,
   641    lifsong       l_xconn_id_1      xconn_id_t,
   641    lifsong       l_xconn_id_2                xconn_id_t,
  1139      tinyu       rel_state     release_state__t;
   641    lifsong 
   641    lifsong START;
   641    lifsong        TASK traf_para.form := atm_aal2_traf_para_t_intern_c;
   641    lifsong        TASK traf_para.para.intern.ing.category := dta.traf_conf_para(0).category,
   641    lifsong             traf_para.para.intern.ing.traf_param.max_frame_size := 0,
   641    lifsong             traf_para.para.intern.ing.traf_param.avg_cell_rate := cell_rate_t_unspecified_c,
   641    lifsong             traf_para.para.intern.ing.frame_disc_epd := abled_flag_t_disabled_c,
   641    lifsong             traf_para.para.intern.ing.frame_disc_ppd := abled_flag_t_disabled_c;
   641    lifsong        TASK traf_para.para.intern.egr.category := dta.traf_conf_para(0).category,
   641    lifsong             traf_para.para.intern.egr.traf_param.max_frame_size := 0,
   641    lifsong             traf_para.para.intern.egr.traf_param.avg_cell_rate := cell_rate_t_unspecified_c,
   641    lifsong             traf_para.para.intern.egr.frame_disc_epd := abled_flag_t_disabled_c,
   641    lifsong             traf_para.para.intern.egr.frame_disc_ppd := abled_flag_t_disabled_c;
   641    lifsong        TASK cdvt_params.ing_pcr := cdvt_t_unspecified_c,
   641    lifsong             cdvt_params.ing_scr := cdvt_t_unspecified_c,
   641    lifsong             cdvt_params.egr_pcr := cdvt_t_unspecified_c,
   641    lifsong             cdvt_params.egr_scr := cdvt_t_unspecified_c;
  1139      tinyu      
   641    lifsong          TASK  l_xconn_id_1 := dta.endpoint(0).xconn_id,
   641    lifsong                   l_xconn_id_2 := dta.endpoint(1).xconn_id;
   641    lifsong          DECISION ( dta.endpoint(0).xconn_id = jig_xconn_id__t_unspecified__c );
   641    lifsong          (T):
   641    lifsong             TASK  l_xconn_id_1 := xconn_id_t_unspecified_c;
   641    lifsong          ENDDECISION;
   641    lifsong          DECISION ( dta.endpoint(1).xconn_id = jig_xconn_id__t_unspecified__c );
   641    lifsong          (T):
   641    lifsong             TASK  l_xconn_id_2 := xconn_id_t_unspecified_c;
   641    lifsong          ENDDECISION;
  1139      tinyu 
  1139      tinyu       CALL set_rel_stat_by_conn_hand__r (dta, rel_state);
   641    lifsong       
   641    lifsong     OUTPUT atm_xconn_release_req_s( dta.endpoint(0).tpi,
   641    lifsong                                     dta.endpoint(0).mxu_type_index,
   641    lifsong                                     l_xconn_id_1,
   641    lifsong                                     T,
  1139      tinyu                                     rel_state(0),
   641    lifsong                                     dta.endpoint(1).tpi,
   641    lifsong                                     dta.endpoint(1).mxu_type_index,
   641    lifsong                                     l_xconn_id_2,
   641    lifsong                                     T,
  1139      tinyu                                     rel_state(1),
   641    lifsong                                     traf_para,
   641    lifsong                                     cdvt_params,
   641    lifsong                                     atm_usage_tag_t_ic_ud_c)
   641    lifsong                                       TO xconn_server,
   641    lifsong                                       SET ATTRIBUTES = xconn_attr;
   641    lifsong 
   641    lifsong     SET (NOW + 6*temporary_wait__c, information_notif_timer );
   641    lifsong     NEXTSTATE wait_xconn_rel_ack;
   641    lifsong 
   641    lifsong STATE wait_xconn_rel_ack;
   641    lifsong 
   641    lifsong   INPUT atm_xconn_release_ack_s( tpi1, tpi2, status );
   641    lifsong     DCL
   641    lifsong        tpi1, tpi2  tpi_t,
   641    lifsong        status      error_t;
   641    lifsong 
   641    lifsong     DECISION dta.endpoint(0).tpi.interf = tpi1.interf AND
   641    lifsong              dta.endpoint(1).tpi.interf = tpi2.interf AND
   641    lifsong              dta.endpoint(0).tpi.vpi    = tpi1.vpi AND
   641    lifsong              dta.endpoint(1).tpi.vpi    = tpi2.vpi AND
   641    lifsong              dta.endpoint(0).tpi.vci    = tpi1.vci AND
   641    lifsong              dta.endpoint(1).tpi.vci    = tpi2.vci;
   641    lifsong     ( T ):
   641    lifsong        RESET( information_notif_timer );
   641    lifsong        RETURN status;
   641    lifsong     ENDDECISION;
   641    lifsong     NEXTSTATE -;
   641    lifsong 
   641    lifsong   INPUT information_notif_timer;
   641    lifsong     TASK dxsyslog_r( log_type_t_text_e_c,
   641    lifsong                      @'JIGCON: No answer to xconn release request!'
   641    lifsong                       ' intf 1: %04X vpi:%d vci:%04X'
   641    lifsong                       ' intf 2: %04X vpi:%d vci:%04X',
   641    lifsong                      dta.endpoint(0).tpi.interf,
   641    lifsong                      dta.endpoint(0).tpi.vpi,
   641    lifsong                      dta.endpoint(0).tpi.vci,
   641    lifsong                      dta.endpoint(1).tpi.interf,
   641    lifsong                      dta.endpoint(1).tpi.vpi,
   641    lifsong                      dta.endpoint(1).tpi.vci );
   641    lifsong 
   641    lifsong     RETURN message_waiting_timeout_ec;
   641    lifsong 
   641    lifsong ENDSTATE wait_xconn_rel_ack;
   641    lifsong ENDPROCEDURE delete_rt_xconn__r;
   641    lifsong 
  1139      tinyu 
   641    lifsong /**************************************************************************/
   641    lifsong PROCEDURE delete_rt_conn__r;
   641    lifsong /*
   641    lifsong  * This procedure deletes RT xconnection, or if it hasn't been
   641    lifsong  * established yet, the VCLTPs which may have been reserved.
   641    lifsong  **************************************************************************/
   641    lifsong FPAR
   641    lifsong     IN   dta          conn_hand_data__t,
   641    lifsong     IN/OUT     upd_conn_ids jig_two_id_array__t,
   641    lifsong     IN/OUT     upd_addrs    jig_two_id_array__t,
   641    lifsong     IN/OUT     upd_xcids    jig_two_id_array__t;
   641    lifsong 
   641    lifsong RETURNS
   641    lifsong     error_t;
   641    lifsong 
   641    lifsong DCL
   641    lifsong     status               error_t := success_ec,
   641    lifsong     del_stat             error_t,
   641    lifsong     ep_idx               byte,
   641    lifsong     update_idx           byte := 0,
   641    lifsong     xcid                 jig_xconn_id__t;
   641    lifsong 
   641    lifsong START;
   641    lifsong     /* if the connection has been created, do xconn deletion. */
   641    lifsong       TASK xcid := dta.endpoint(0).xconn_id;
   641    lifsong 
   641    lifsong       DECISION xcid;
   641    lifsong       ( /= 0 ):
   641    lifsong          TASK status := delete_rt_xconn__r( dta );
   641    lifsong          DECISION status;
   641    lifsong          (success_ec):
   641    lifsong             TASK upd_conn_ids.item(0) := dta.id,
   641    lifsong                  upd_conn_ids.item(1) := dta.id,
   641    lifsong                  upd_addrs.item(0)    := dta.endpoint(0).phys_addr,
   641    lifsong                  upd_addrs.item(1)    := dta.endpoint(1).phys_addr,
   641    lifsong                  upd_conn_ids.n_items := 2,
   641    lifsong                  upd_addrs.n_items    := upd_conn_ids.n_items;
   641    lifsong          ENDDECISION;
   641    lifsong       ENDDECISION;
   641    lifsong 
   641    lifsong     /* 04-05-24: after power loss in subracks (1:3)-(3:4),
   641    lifsong        JIGGER got back error codes 0x3506,0x348E to some RT-xconn deletion
   641    lifsong        requests and resource releasing failed. Probably some xconn deletions
   641    lifsong        had timed out in JIGGER's viewpoint, although the xconn was actually
   641    lifsong        removed from CACU.
   641    lifsong        So, if that happens again, try to release VCLTPs directly. */
   641    lifsong     DECISION status;
   641    lifsong     ( vc_id_does_not_exist_ec,
   641    lifsong       parameters_out_of_range_ec ):
   641    lifsong        /* zero xconn-ids in JICFIL. */
   641    lifsong        TASK upd_xcids.item(0) := 0,
   641    lifsong             upd_xcids.item(1) := 0,
   641    lifsong             upd_xcids.n_items := 2,
   641    lifsong             xcid := 0;
   641    lifsong        TASK status := success_ec;
   641    lifsong     ENDDECISION;
   641    lifsong 
   641    lifsong     DECISION xcid;
   641    lifsong     ( 0 ):
   641    lifsong        /* release reserved VCLTPs. */
   641    lifsong        TASK ep_idx := 0;
   641    lifsong        WHILE ep_idx < 2;
   641    lifsong           DECISION dta.endpoint( ep_idx ).exists_in_hw;
   641    lifsong           ( T ):
   641    lifsong              TASK del_stat := delete_rt_vcltp__r( dta, ep_idx );
   641    lifsong              DECISION del_stat;
   641    lifsong              ( success_ec ):
   641    lifsong                 TASK upd_conn_ids.item( update_idx ) := dta.id,
   641    lifsong                      upd_addrs.item( update_idx ) := dta.endpoint( ep_idx ).phys_addr;
   641    lifsong                 TASK update_idx := update_idx + 1;
   641    lifsong              ELSE:
   641    lifsong                 TASK status := del_stat;
   641    lifsong              ENDDECISION;
   641    lifsong           ENDDECISION;
   641    lifsong           TASK ep_idx := ep_idx + 1;
   641    lifsong        ENDWHILE;
   641    lifsong        TASK upd_conn_ids.n_items := update_idx,
   641    lifsong             upd_addrs.n_items    := update_idx;
   641    lifsong     ENDDECISION;
   641    lifsong     RETURN status;
   641    lifsong 
   641    lifsong ENDPROCEDURE delete_rt_conn__r;
   641    lifsong 
   641    lifsong /* JIGCON process body: */
   641    lifsong 
   641    lifsong START;
   641    lifsong     TASK start_time := clock;
   641    lifsong 
   641    lifsong     /* workaround for Web-Prodas bug which made it impossible to
   641    lifsong        set JIGCON hand priority below master's normal priority: */
   641    lifsong     TASK old_pri := change_priority( own_full_process_id, 0x5050 );
   641    lifsong 
   641    lifsong     TASK conn_ids.n_items  := 0,
   641    lifsong          addrs.n_items     := 0,
   641    lifsong          xconn_ids.n_items := 0,
   641    lifsong          creating          := (create_client_pid /= NULL),
   641    lifsong          is_rt_conn        := (data.traf_conf_para(0).category =
   641    lifsong                               int_serv_cat_t_i_rt_mnw_c);
   641    lifsong 
   641    lifsong     DECISION creating;
   641    lifsong     ( T ):
   641    lifsong        DECISION is_rt_conn;
   641    lifsong        ( F ):
  1407     z7zhou           TASK status := create_nrt_conn__r( conn_ids, addrs, xconn_ids );
   641    lifsong        ELSE:
   641    lifsong           TASK status := create_rt_conn__r( conn_ids, addrs, xconn_ids );
   641    lifsong        ENDDECISION;
   641    lifsong     ELSE:
   641    lifsong        DECISION is_rt_conn;
   641    lifsong        ( F ):
   641    lifsong           TASK status := delete_nrt_conn__r( conn_ids, addrs );
   641    lifsong        ELSE:
   641    lifsong           TASK status := delete_rt_conn__r( data, conn_ids, addrs, xconn_ids );
   641    lifsong        ENDDECISION;
   641    lifsong     ENDDECISION;
   641    lifsong 
   641    lifsong     TASK parent_far_pid := PARENT;
   641    lifsong     TASK set_pid_computer_r( parent_far_pid, own_unit_log_addr );
   641    lifsong 
   641    lifsong     /* restore original priority: */
   641    lifsong     TASK old_pri := change_priority( own_full_process_id, old_pri );
   641    lifsong 
   641    lifsong     /* Add the connection to JIC but both the xconn are not created */
   641    lifsong     TASK xc_exist := creating;
   641    lifsong     DECISION is_rt_conn AND creating AND ( status /= success_ec );
   641    lifsong     ( T ):
   641    lifsong         TASK xc_exist := F;
   641    lifsong     ENDDECISION;
   641    lifsong     
   641    lifsong     OUTPUT jig_update_half_conn_states__s (
   641    lifsong              $jig_id_array_ptr__t(@conn_ids),
   641    lifsong              $jig_id_array_ptr__t(@addrs),
   641    lifsong              $jig_id_array_ptr__t(@xconn_ids),
   641    lifsong              xc_exist /* exists := T/F */,
   641    lifsong              create_client_pid,
   641    lifsong              delete_client_pid,
   641    lifsong              status,
   641    lifsong              data.id,
   641    lifsong              data.endpoint(0).phys_addr,
   641    lifsong              data.endpoint(1).phys_addr
   641    lifsong            ) TO parent_far_pid,
   641    lifsong            SET DESTROY_MSG_IF_NOT_WO_STATE = F;
   641    lifsong     STOP;
   641    lifsong 
   641    lifsong ENDPROCESS jigcon;
   641    lifsong 
     2     yanzuo IMPLEMENTATION jigdatgx OF MODULE jigdat
   641    lifsong   COMMENT '$Id$';
     2     yanzuo 
     2     yanzuo CONSTANT
     2     yanzuo     ack_waiting_time__c = 500;
     2     yanzuo     short_ack_waiting_time__c = 90;
    38    lifsong     g_xml_buff_size__c    = 8000;       /* For routine xml_new_parser_from_file_r */
  1384   weigchen 
  1384   weigchen     ne_rnc196_cs8__c        = 3;   /*PRFILE param ne_logical_configuratio, it shows RNC196CS8*/
  1384   weigchen     ne_rnc196__c              = 0;   /*PRFILE param ne_logical_configuratio, it shows RNC196CS1~5*/
  1384   weigchen     ne_rnc196_450__c       = 1;   /*PRFILE param ne_logical_configuratio, it shows RNC196CS6~7 and RNC450 N1~3*/
  1384   weigchen     ne_rnc2600__c        = 4;
  1120   weigchen     
     2     yanzuo TYPE long_ptr_ptr__t
     2     yanzuo   REPRESENTATION POINTER (long_pointer_t);
     2     yanzuo ENDTYPE long_ptr_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE bool_ptr__t
     2     yanzuo   REPRESENTATION POINTER (bool);
     2     yanzuo ENDTYPE bool_ptr__t;
     2     yanzuo 
   600     qinggu TYPE dword_ptr__t
   600     qinggu   REPRESENTATION POINTER (dword);
   600     qinggu ENDTYPE dword_ptr__t;
   600     qinggu 
  1420       pshu TYPE proxy_table__t
  1420       pshu   CONSTANT 
  1420       pshu      size_c = 50;
  1420       pshu   REPRESENTATION
  1420       pshu      ARRAY( size_c ) OF
  1420       pshu      STRUCT
  1420       pshu         dest_pid        pid;
  1420       pshu         dest_hms        hms_address_t;
  1420       pshu         is_in_use       bool;
  1420       pshu      ENDSTRUCT;
  1420       pshu ENDTYPE proxy_table__t;
     2     yanzuo DCL
     2     yanzuo     dummy_jii_ptr            jiifil_ptr__t,
     2     yanzuo     dummy_comp_ptr           jii_comp_ptr__t,
     2     yanzuo     jiifil_base_ptr__pv      jiifil_ptr__t,
     2     yanzuo     jicfil_base_ptr__pv      jicfil_ptr__t,
     2     yanzuo     jiafil_base_ptr__pv      alp_cluster_ptr__t,
     2     yanzuo     jibfil_base_ptr__pv      vci_bitmap_ptr__t,
     2     yanzuo     curr_whisky_req_idx__pv  dword,
     2     yanzuo 
  1420       pshu     tomprb_pid               pid,
  1420       pshu     jigcon_proxy_table          proxy_table__t;
     2     yanzuo 
  1420       pshu 
     2     yanzuo DCL WITHWARMING
     2     yanzuo     next_jiifil_rec__pv          jiifil_idx__t,
     2     yanzuo     next_bitmap_idx__pv          vci_bitmap_idx__t,
     2     yanzuo     sym_mxu_cluster__pv          alp_cluster_idx__t,
    46       p5li     sym_mxu_is_app__pv           bool, /* to mark that we support APP unit or APC ones 
    46       p5li                                           in the system.*/
     2     yanzuo 
     2     yanzuo     stop_units__pv               stop_units__t,
     2     yanzuo 
     2     yanzuo     rugger_pid__pv               pid,
     2     yanzuo     core_ready_for_reporting__pv bool,
     2     yanzuo     sym_mxu_apc_init_done__pv    bool,
     2     yanzuo     sd4_init_done__pv            bool,
     2     yanzuo 
     2     yanzuo     service_table                serv_table__t,
     2     yanzuo 
   754     yanzuo     g_rx_bigvcc_param            rx_bigvcc_param__t,
  1352   weigchen     g_bigdma_enable             bool,
   754     yanzuo 
     2     yanzuo     jiifil_handle                file_handle_t( FILE_WARMED_ENTIRELY, jiifil_file_fn ),
     2     yanzuo     jicfil_handle                file_handle_t( FILE_WARMED_ENTIRELY, jicfil_file_fn ),
     2     yanzuo     jiafil_handle                file_handle_t( FILE_WARMED_ENTIRELY, jiafil_file_fn ),
   856   huantang     jibfil_handle                file_handle_t( FILE_WARMED_ENTIRELY, jibfil_file_fn ),
     2     yanzuo 
  1420       pshu     jiifil_index_table           jiifil_index_array__t;
  1420       pshu 
  1420       pshu PROCEDURE add_proxy_item;
  1420       pshu FPAR
  1420       pshu 	IN dest_pid   pid,
  1420       pshu 	IN dest_hms   hms_address_t;
  1420       pshu 
  1420       pshu DCL
  1420       pshu 	index byte;
  1420       pshu START;
  1420       pshu    TASK index := 0;
  1420       pshu    while(index <proxy_table__t_size_c );
  1420       pshu       DECISION jigcon_proxy_table(index).is_in_use;
  1420       pshu       (F):
  1420       pshu          TASK jigcon_proxy_table(index).is_in_use := T,
  1420       pshu               jigcon_proxy_table(index).dest_pid  := dest_pid,
  1420       pshu               jigcon_proxy_table(index).dest_hms  := dest_hms;
  1420       pshu          RETURN;
  1420       pshu          
  1420       pshu       ENDDECISION;
  1420       pshu       TASK index := index + 1;
  1420       pshu    ENDWHILE;
  1420       pshu    
  1420       pshu ENDPROCEDURE add_proxy_item;
  1420       pshu 
  1420       pshu PROCEDURE pull_proxy_item;
  1420       pshu FPAR
  1420       pshu 	IN   hms        hms_address_t,
  1420       pshu 	OUT  dest_pid    pid;
  1420       pshu RETURNS 
  1420       pshu     bool;
  1420       pshu DCL
  1420       pshu     index   byte;
  1420       pshu 
  1420       pshu START;
  1420       pshu 
  1420       pshu     TASK index := 0;
  1420       pshu     WHILE(index < proxy_table__t_size_c );
  1420       pshu        DECISION(jigcon_proxy_table(index).is_in_use AND
  1420       pshu                 jigcon_proxy_table(index).dest_hms = hms);
  1420       pshu        (T):
  1420       pshu           TASK dest_pid := jigcon_proxy_table(index).dest_pid;
  1420       pshu           TASK jigcon_proxy_table(index).is_in_use := F;
  1420       pshu           RETURN T;
  1420       pshu        ENDDECISION;
  1420       pshu        TASK index:= index +1;
  1420       pshu     ENDWHILE;
  1420       pshu 
  1420       pshu     RETURN F;
  1420       pshu ENDPROCEDURE pull_proxy_item;
  1420       pshu 
  1420       pshu 
  1420       pshu PROCEDURE init_proxy_item;
  1420       pshu 
  1420       pshu START;
  1420       pshu 	TASK memset( bytepointer(@jigcon_proxy_table),0x0,sizeof(jigcon_proxy_table));
  1420       pshu 
  1420       pshu ENDPROCEDURE init_proxy_item;
  1420       pshu 
  1420       pshu 
     2     yanzuo PROCEDURE fig_service_req_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: fig service_req
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      fig_msg_header    fig_msg_header_t,
     2     yanzuo     IN      reset_phase       fig_reset_phase_t,
     2     yanzuo     IN      phys_addr         phys_address_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec       error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo   TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        phys_addr,
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Fig service req: HMS addr: 0x%X reset phase: 0x%X '),
     2     yanzuo        fig_msg_header.hms_address, reset_phase );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE fig_service_req_log__r;
     2     yanzuo 
     2     yanzuo PROCEDURE int_interf_param_req_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: fig service_req
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN    fig_msg_header  fig_msg_header_t,
     2     yanzuo     IN    boot_loading    bool,
     2     yanzuo     IN    phys_addr       phys_address_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec          error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        phys_addr,
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Int interf params req: HMS addr: 0x%X proc: 0x%X phase: 0x%X ' ),
     2     yanzuo        fig_msg_header.hms_address, fig_msg_header.extended_addr, boot_loading );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE int_interf_param_req_log__r;
     2     yanzuo 
   733    lifsong 
   733    lifsong /**************************************************************************/
   733    lifsong PROCEDURE is_dsp_xconn_id__r;
   733    lifsong /*
   733    lifsong  * 
   733    lifsong  **************************************************************************/
   733    lifsong 
   733    lifsong FPAR
   733    lifsong     IN int_xconn_id  dword; 
   733    lifsong     
   733    lifsong RETURNS 
   733    lifsong     bool;
   733    lifsong 
   733    lifsong START;
   733    lifsong    
   733    lifsong      RETURN ( int_xconn_id >= jig_limits__t_n_dsp_conns_min_c );
   733    lifsong     
   733    lifsong ENDPROCEDURE is_dsp_xconn_id__r;
   733    lifsong 
   733    lifsong 
     2     yanzuo /* Procedure Definition *****************************************************
     2     yanzuo This procedure opens a memory file according to the given parameters and
     2     yanzuo returns a file handle to the created file and pointer to the beginning
     2     yanzuo of the file.
     2     yanzuo *****************************************************************************/
     2     yanzuo PROCEDURE open_file__r;
     2     yanzuo   /* Procedure Formal Parameters **************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  file_handling_succ  error_t,
     2     yanzuo     IN/OUT  file_handle         file_handle_t,
     2     yanzuo     IN      file_name_ptr       bytepointer,
     2     yanzuo     IN      file_number         file_id_t,
     2     yanzuo     IN      number_of_records   dword,
     2     yanzuo     IN      size_of_the_element dword,
     2     yanzuo     IN      ptr_to_file_ptr     long_ptr_ptr__t,
     2     yanzuo     IN/OUT  file_existed_already bool;
     2     yanzuo 
     2     yanzuo /* Local Definitions ************************************************/
     2     yanzuo DCL
     2     yanzuo     filedef              fis_filedef_t,
     2     yanzuo     file_ver             m_file_version_t;
     2     yanzuo 
     2     yanzuo /* Procedure Body ***************************************************/
     2     yanzuo START;
     2     yanzuo   /* see if the file already exists */
     2     yanzuo   TASK file_handling_succ := array_open( file_handle, file_number,
     2     yanzuo        access_mode_t_rd_wr_buff_ptr_c );
     2     yanzuo   TASK file_existed_already := ( file_handling_succ = success_ec );
     2     yanzuo   DECISION file_existed_already;
     2     yanzuo     ( F ):
     2     yanzuo       /* try to create the file */
     2     yanzuo       TASK memset( bytepointer( @filedef ), 0, SIZEOF( filedef ));
     2     yanzuo       TASK memcpy( bytepointer( @filedef.file_name ), file_name_ptr, 8 );
     2     yanzuo       TASK filedef.status_bits          := file_status_t_ptr_write_m_c +
     2     yanzuo            file_status_t_buff_write_m_c + file_status_t_read_m_c;
     2     yanzuo       TASK file_handling_succ := array_create_r (
     2     yanzuo            file_handle,
     2     yanzuo            file_number,
     2     yanzuo            file_ver,
     2     yanzuo            version_handling_t_default_c,
     2     yanzuo            filedef,
     2     yanzuo            file_type_t_one_dim_array_c,
     2     yanzuo            number_of_records,
     2     yanzuo            1,
     2     yanzuo            size_of_the_element,
     2     yanzuo            access_mode_t_rd_wr_buff_ptr_c
     2     yanzuo            );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION file_handling_succ;
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK file_handling_succ := rec_ref( $ptr_to_file_ptr,
     2     yanzuo            file_handle,
     2     yanzuo            0 );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE open_file__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jiifil_ptr__r;
     2     yanzuo /*
     2     yanzuo  * Returns a pointer to the specified JIIFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN rec_idx  dword;
     2     yanzuo RETURNS
     2     yanzuo     jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN ADDPTR( jiifil_base_ptr__pv, rec_idx );
     2     yanzuo ENDPROCEDURE jiifil_ptr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     4     yanzuo PROCEDURE jicfil_map_connid__r;
     4     yanzuo /*
     4     yanzuo  * map conn_id to jicfil index if is dsp conn_id
     4     yanzuo  **************************************************************************/
     4     yanzuo FPAR
   733    lifsong     IN int_xconn_id  dword; 
     4     yanzuo RETURNS 
     4     yanzuo     dword;
     4     yanzuo 
     4     yanzuo START;
   733    lifsong   
   843    lifsong    DECISION is_dsp_xconn_id__r(int_xconn_id);
     4     yanzuo     ( T ):
   733    lifsong       TASK int_xconn_id := ( int_xconn_id & jig_limits__t_n_dsp_conns_msk_c ) + jig_limits__t_jic_dsp_con_min_c;
   843    lifsong    ELSE:
   843    lifsong       DECISION int_xconn_id >=  jig_limits__t_jic_dsp_con_min_c;
   843    lifsong       ( T ):
   843    lifsong          TASK dxsyslog_r( log_type_t_text_e_c,
   843    lifsong                          @'JIGDAT: jicfil_map_connid__r'
   843    lifsong                           'Non-dsp conn_id exceeds limitation, check jig_limits__t!'
   843    lifsong                           'conn_id: 0x%X',
   843    lifsong                           int_xconn_id);
   843    lifsong       ENDDECISION;
   843    lifsong    ENDDECISION; 
   843    lifsong 
   843    lifsong    DECISION int_xconn_id > jig_limits__t_n_conns_c ;
   843    lifsong    ( T ):
   843    lifsong          TASK dxsyslog_r( log_type_t_text_e_c,
   843    lifsong                          @'JIGDAT: jicfil_map_connid__r'
   843    lifsong                           'conn_id exceeds limitation, check jig_limits__t!'
   843    lifsong                           'conn_id: 0x%X',
   843    lifsong                           int_xconn_id);
   843    lifsong    ENDDECISION;
   843    lifsong       
   843    lifsong    RETURN int_xconn_id;
     4     yanzuo ENDPROCEDURE jicfil_map_connid__r; 
     4     yanzuo 
     4     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jicfil_ptr__r;
     2     yanzuo /*
     2     yanzuo  * Returns a pointer to the specified JICFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN rec_idx  dword;
     2     yanzuo RETURNS
     2     yanzuo     jicfil_ptr__t;
     4     yanzuo DCL
     4     yanzuo     jicfil_idx     dword;    
     4     yanzuo     
     2     yanzuo START;
     4     yanzuo   TASK jicfil_idx := jicfil_map_connid__r( rec_idx );
     4     yanzuo   RETURN ADDPTR( jicfil_base_ptr__pv, jicfil_idx );
     2     yanzuo ENDPROCEDURE jicfil_ptr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jiafil_ptr__r;
     2     yanzuo /*
     2     yanzuo  * Returns a pointer to the specified JIAFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN rec_idx dword;
     2     yanzuo RETURNS
     2     yanzuo     jiafil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN ADDPTR( jiafil_base_ptr__pv, rec_idx );
     2     yanzuo ENDPROCEDURE jiafil_ptr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jibfil_ptr__r;
     2     yanzuo /*
     2     yanzuo  * Returns a pointer to the specified JIBFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  rec_idx          dword;
     2     yanzuo RETURNS
     2     yanzuo     jibfil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN ADDPTR( jibfil_base_ptr__pv, rec_idx );
     2     yanzuo ENDPROCEDURE jibfil_ptr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_jiifil__r;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo * Initialize JIIFIL to its initial state.
     2     yanzuo **************************************************************************/
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( jiifil_ptr__r( 0 )),
     2     yanzuo        0,
     2     yanzuo        (jig_limits__t_n_funits_c + 1) * SIZEOF(jiifil__t) );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE init_jiifil__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_jicfil__r;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo * Initialize JICFIL to its initial state.
     2     yanzuo **************************************************************************/
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( jicfil_ptr__r( 0 )),
     2     yanzuo        0,
     2     yanzuo        (jig_limits__t_n_conns_c + 1) * SIZEOF(jicfil__t) );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE init_jicfil__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE reset_jiafil_record__r;
     2     yanzuo /*
     2     yanzuo  * Fill the JIAFIL record with initial (empty) values.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  clus_ptr         jiafil_ptr__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     res_id               dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( clus_ptr ), 0, SIZEOF( $clus_ptr ));
     2     yanzuo   TASK clus_ptr->alp_unit(0).phys_addr := computer_t_phys_not_defined_c;
     2     yanzuo   TASK clus_ptr->alp_unit(1).phys_addr := computer_t_phys_not_defined_c;
     2     yanzuo   /* Do not use reserved APC xconn-ids for internal connections.
     2     yanzuo   (This code can be removed when/if the reserved xconn ids
     2     yanzuo   have been moved above the range used by JIGGER.) */
     2     yanzuo   TASK res_id := xconn_id_t_apc_ctrl_sw_min_c & ~7;
     2     yanzuo   WHILE res_id <= xconn_id_t_apc_ctrl_sw_max_c AND
     2     yanzuo         res_id >= jig_limits__t_min_xcid_c AND
     2     yanzuo         res_id < jig_limits__t_min_xcid_c + jig_limits__t_n_xcids_c;
     2     yanzuo     TASK clus_ptr->res_alp_xcids( res_id >> 3 ) := 0xFF;
     2     yanzuo     TASK res_id := res_id + 8;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE reset_jiafil_record__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_jiafil__r;
     2     yanzuo /*
     2     yanzuo  * Initialize JIAFIL to its initial state.
     2     yanzuo  **************************************************************************/
     2     yanzuo DCL
     2     yanzuo     clus_idx             dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK clus_idx := 1;
     2     yanzuo   WHILE clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo     CALL reset_jiafil_record__r( jiafil_ptr__r( clus_idx ));
     2     yanzuo     TASK clus_idx := clus_idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo ENDPROCEDURE init_jiafil__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_vci_bitmap__r;
     2     yanzuo /*
     2     yanzuo  * Initialize VCI bitmap (JIBFIL record) to its initial state.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  bm_ptr  vci_bitmap_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK bm_ptr->owner := computer_t_phys_not_defined_c;
     2     yanzuo   TASK memset( bytepointer( @bm_ptr->bitmap ), 0,
     2     yanzuo        SIZEOF( bm_ptr->bitmap ));
     2     yanzuo ENDPROCEDURE init_vci_bitmap__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_jibfil__r;
     2     yanzuo /*
     2     yanzuo  * Fill JIBFIL with initial values.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword,
     2     yanzuo     bm_ptr               jibfil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK idx := 1;
     2     yanzuo   WHILE idx <= jig_limits__t_n_vci_bm_c;
     2     yanzuo     TASK bm_ptr := jibfil_ptr__r( idx );
     2     yanzuo     CALL init_vci_bitmap__r( bm_ptr );
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE init_jibfil__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_initialize__r;
     2     yanzuo /*
     2     yanzuo  * Create (or open) memory files: JIIFIL, JICFIL, JIAFIL and JIBFIL
     2     yanzuo  * and initialize global variables.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  starting         bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword,
     2     yanzuo     ec, file_status      error_t,
     2     yanzuo     file_existed         bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION starting;
     2     yanzuo     ( F ):
     2     yanzuo       TASK ec := file_close( jiifil_handle );
     2     yanzuo       TASK ec := file_close( jicfil_handle );
     2     yanzuo       TASK ec := file_close( jibfil_handle );
     2     yanzuo       TASK ec := file_close( jiafil_handle );
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL open_file__r( file_status,
     2     yanzuo        jiifil_handle,
     2     yanzuo        bytepointer(@'JIIFILGX'),
     2     yanzuo        jiifil_file_fn,
     2     yanzuo        jig_limits__t_n_funits_c+1,
     2     yanzuo        SIZEOF(jiifil__t),
     2     yanzuo        long_ptr_ptr__t( @jiifil_base_ptr__pv ),
     2     yanzuo        file_existed );
     2     yanzuo   DECISION file_status;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION (NOT file_existed) OR (NOT starting);
     2     yanzuo         ( T ):
   958   huantang           TASK memset( bytepointer( @jiifil_index_table ), 0,
   958   huantang                  SIZEOF( jiifil_index_table ));
     2     yanzuo           CALL init_jiifil__r();
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,log_write_item_t(@file_status),1,
     2     yanzuo            log_text_info_t(@'JIGGER: FAILED TO CREATE INTERFACE FILE'));
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL open_file__r( file_status,
     2     yanzuo        jicfil_handle,
     2     yanzuo        bytepointer(@'JICFILGX'),
     2     yanzuo        jicfil_file_fn,
     2     yanzuo        jig_limits__t_n_conns_c+1,
     2     yanzuo        SIZEOF(jicfil__t),
     2     yanzuo        long_ptr_ptr__t( @jicfil_base_ptr__pv ),
     2     yanzuo        file_existed );
     2     yanzuo   DECISION file_status;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION (NOT file_existed) OR (NOT starting);
     2     yanzuo         ( T ):
     2     yanzuo           CALL init_jicfil__r();
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,log_write_item_t(@file_status),1,
     2     yanzuo            log_text_info_t(@'JIGGER: FAILED TO CREATE INTERFACE FILE'));
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL open_file__r( file_status,
     2     yanzuo        jiafil_handle,
     2     yanzuo        bytepointer(@'JIAFILGX'),
     2     yanzuo        jiafil_file_fn,
     2     yanzuo        jig_limits__t_n_clus_c+1,
     2     yanzuo        SIZEOF(alp_cluster__t),
     2     yanzuo        long_ptr_ptr__t( @jiafil_base_ptr__pv ),
     2     yanzuo        file_existed );
     2     yanzuo   DECISION file_status;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION (NOT file_existed) OR (NOT starting);
     2     yanzuo         ( T ):
     2     yanzuo           CALL init_jiafil__r();
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,log_write_item_t(@file_status),1,
     2     yanzuo            log_text_info_t(@'JIGGER: FAILED TO CREATE ALP CLUSTER FILE'));
     2     yanzuo   ENDDECISION;
     2     yanzuo   CALL open_file__r( file_status,
     2     yanzuo        jibfil_handle,
     2     yanzuo        bytepointer(@'JIBFILGX'),
     2     yanzuo        jibfil_file_fn,
     2     yanzuo        jig_limits__t_n_comps_c+1,
     2     yanzuo        SIZEOF(vci_bitmap__t),
     2     yanzuo        long_ptr_ptr__t( @jibfil_base_ptr__pv ),
     2     yanzuo        file_existed );
     2     yanzuo   DECISION file_status;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION (NOT file_existed) OR (NOT starting);
     2     yanzuo         ( T ):
     2     yanzuo           CALL init_jibfil__r();
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       TASK write_to_log(log_type_t_dword_e_c,log_write_item_t(@file_status),1,
     2     yanzuo            log_text_info_t(@'JIGGER: FAILED TO CREATE VCI BITMAP FILE'));
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* Do not initialize global variables when the master
     2     yanzuo   is restarted because of supervision error or exception */
     2     yanzuo   DECISION (NOT starting) OR (NOT file_existed);
     2     yanzuo     ( T ):
     2     yanzuo       TASK next_bitmap_idx__pv := jig_limits__t_n_vci_bm_c,
     2     yanzuo            sym_mxu_cluster__pv := alp_cluster_idx__t_invalid_c,
     2     yanzuo            core_ready_for_reporting__pv := F,
     2     yanzuo            sym_mxu_apc_init_done__pv    := F,
     2     yanzuo            sd4_init_done__pv            := F;
     2     yanzuo       TASK idx := 0;
     2     yanzuo       WHILE idx < stop_units__t_count_c;
     2     yanzuo         TASK stop_units__pv( idx ).hms_address := hms_address_t_not_defined_c;
     2     yanzuo         TASK idx := idx + 1;
     2     yanzuo       ENDWHILE;
   754     yanzuo       
   754     yanzuo       TASK g_rx_bigvcc_param.enable_flag := F,
   754     yanzuo            g_rx_bigvcc_param.min_vci := 0,
   754     yanzuo            g_rx_bigvcc_param.sub_vci := 0,
   754     yanzuo            g_rx_bigvcc_param.max_vci := 0;
   754     yanzuo 
     2     yanzuo   ENDDECISION;
   856   huantang 
   958   huantang   
     2     yanzuo ENDPROCEDURE jii_initialize__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE valid_addr__r;
     2     yanzuo /*
     2     yanzuo  * Tell if the given physical computer address is valid.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  addr  phys_address_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN addr < computer_t_phys_not_defined_c;
     2     yanzuo ENDPROCEDURE valid_addr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE invalid_addr__r;
     2     yanzuo /*
     2     yanzuo  * Tell if the given physical computer address is invalid.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  addr  phys_address_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN addr >= computer_t_phys_not_defined_c;
     2     yanzuo ENDPROCEDURE invalid_addr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE curr_timestamp__r;
     2     yanzuo /*
     2     yanzuo  * Return a 32-bit timestamp with 10 millisecond resolution.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     jig_timestamp__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     cal_time  calendar_time_t,
     2     yanzuo     tstamp    dword,
     2     yanzuo     dl_sav    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK dl_sav := copy_calendar_time_r( cal_time );
     2     yanzuo   TASK tstamp := time_gap(
     2     yanzuo        0x00000000, 0x00000101,
     2     yanzuo        $dword_ptr__t( @cal_time.hundredths_of_seconds ),
     2     yanzuo        $dword_ptr__t( @cal_time.day ));
     2     yanzuo   DECISION dl_sav;
     2     yanzuo     ( T ):
     2     yanzuo       /* subtract one hour because of daylight saving time */
     2     yanzuo       TASK tstamp := dword( tstamp - 3600 * 100 );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN tstamp;
     2     yanzuo ENDPROCEDURE curr_timestamp__r;
  1314   chunchen /**************************************************************************/
  1314   chunchen PROCEDURE check_unit_in_se_state__r;
  1314   chunchen /*
  1314   chunchen  * Check if unit is in SE-NH or SE-OU state
  1314   chunchen  * return unit_state_not_available_ec if the state is SE-NH or SE-OU
  1314   chunchen  **************************************************************************/
  1314   chunchen FPAR
  1314   chunchen     IN unit_addr            phys_address_t;
  1314   chunchen      
  1314   chunchen RETURNS   
  1314   chunchen     bool;
  1314   chunchen     
  1314   chunchen DCL
  1314   chunchen     ec                   error_t,
  1314   chunchen     ustate               unit_state_t;
     2     yanzuo 
  1314   chunchen START;      
  1314   chunchen        TASK ec :=  unit_state_by_phys_addr__r(unit_addr, ustate);
  1314   chunchen        DECISION ec;
  1314   chunchen        (success_ec):
  1314   chunchen               DECISION (ustate = unit_state_t_senh_c OR ustate = unit_state_t_seou_c);
  1314   chunchen               (T):
  1314   chunchen                    RETURN T;                  
  1314   chunchen                ENDDECISION;
  1314   chunchen        ENDDECISION;      
  1314   chunchen        RETURN F;
  1314   chunchen   
  1314   chunchen ENDPROCEDURE check_unit_in_se_state__r;   
     2     yanzuo /***************************************************************************/
     2     yanzuo PROCEDURE jic_tm_same_vci__r;
     2     yanzuo /*
     2     yanzuo  * Set same VCI value 0x20 for the input conn which is go through TMFPGA to PQIII between OMU&MXU
     2     yanzuo  ***************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT   vcc_res           jig_vccs_resources__t,
     2     yanzuo    IN/OUT   tm_fpga_vcc_idx   dword;
     2     yanzuo RETURNS error_t;
     2     yanzuo DCL
     2     yanzuo       l_jic_ptr, l_snd_jic_ptr      jicfil_ptr__t,
   958   huantang       l,n,m       dword:=0,
     2     yanzuo       l_vci               vci_t;
     2     yanzuo START;
     2     yanzuo    DECISION jii_find_conn__r(vcc_res.res(tm_fpga_vcc_idx).conn_id, l_jic_ptr);
     2     yanzuo    (T):
     2     yanzuo       WHILE m<2;/*Check input conn vci value*/
     2     yanzuo          DECISION (l_jic_ptr->half_conn(m).vci /= 0x20) AND
     2     yanzuo                   (l_jic_ptr->half_conn(m).vci /= 0);
     2     yanzuo          (T):/*VCI has been assgined for this half and it isnt 0x20*/
     2     yanzuo              /*if vci not equals 0x20, then search all vcis under this unit and exchange it with vci 0x20*/
     2     yanzuo              /*but if 0x20 has never been assigned to this unit, then....*/
     2     yanzuo             WHILE (l <= vcc_res.item_count);
     2     yanzuo                DECISION (vcc_res.res(l).target_comp /= vcc_res.common.alp1_unit_addr) AND
     2     yanzuo                         (vcc_res.res(l).vci = 0x20);/*Find the half xconn with vci isnt 20 ant its not to MXU, and we now get is conn id*/
     2     yanzuo                (T):
     2     yanzuo                   DECISION jii_find_conn__r(vcc_res.res(l).conn_id, l_snd_jic_ptr);
     2     yanzuo                   (T):
     2     yanzuo                      WHILE n<2;
     2     yanzuo                         DECISION (l_snd_jic_ptr->half_conn(n).vci = 0x20) AND
     2     yanzuo                                  (l_snd_jic_ptr->half_conn(n).comp = l_jic_ptr->half_conn(m).comp);/*two vci should locate in one unit*/
     2     yanzuo                         (T):/*exchange vci*/
     2     yanzuo                            TASK  l_vci := l_jic_ptr->half_conn(m).vci,
     2     yanzuo                                  l_jic_ptr->half_conn(m).vci := l_snd_jic_ptr->half_conn(n).vci,
     2     yanzuo                                  l_snd_jic_ptr->half_conn(n).vci:= l_vci;
     2     yanzuo                         ENDDECISION;
     2     yanzuo                         TASK  n := n+1;
     2     yanzuo                      ENDWHILE;
     2     yanzuo                      TASK n := 0;
     2     yanzuo                   ENDDECISION;
     2     yanzuo                ENDDECISION;
     2     yanzuo                TASK  l := l+1;
     2     yanzuo             ENDWHILE;
     2     yanzuo             TASK l := 0;
     2     yanzuo             /*No 0x20 exsits, need a new allocation in JIC bitmap*/
     2     yanzuo             TASK  l_jic_ptr->half_conn(m).vci := 0x20;
     2     yanzuo          ENDDECISION;
     2     yanzuo          TASK  m := m+1;
     2     yanzuo       ENDWHILE;
     2     yanzuo       RETURN success_ec;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN unsuccessful_ec;
     2     yanzuo ENDPROCEDURE jic_tm_same_vci__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_conn__r;
     2     yanzuo /*
     2     yanzuo  * Find the given connection from JICFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      conn_id      conn_id_t,
     2     yanzuo     IN/OUT  jic_ptr      jicfil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK jic_ptr := jicfil_ptr__r( conn_id );
     2     yanzuo   RETURN jic_ptr->toelib_conn_id = conn_id;
     2     yanzuo ENDPROCEDURE jii_find_conn__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_add_conn__r;
     2     yanzuo /*
     2     yanzuo  * Add the given connection to JICFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      conn_id      conn_id_t,
     2     yanzuo     IN/OUT  jic_ptr      jicfil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK jic_ptr := jicfil_ptr__r( conn_id );
     2     yanzuo   TASK memset( bytepointer( jic_ptr ), 0, SIZEOF(jicfil__t));
     2     yanzuo   TASK jic_ptr->toelib_conn_id := conn_id;
     2     yanzuo   RETURN T;
     2     yanzuo ENDPROCEDURE jii_add_conn__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE stop_figseb_requests__r;
     2     yanzuo /*
     2     yanzuo  * Do something to prevent the given computer from sending any
     2     yanzuo  * more port configuration requests.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1140      tinyu     IN  fig_hdr          fig_msg_header_t;
  1140      tinyu    /* IN  uxhw_type        ux_hw_block_type_t,
  1140      tinyu     IN  reset_phase      fig_reset_phase_t;*/
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     piu_loc, master_loc  piu_location_t,
     2     yanzuo     has_master_node      bool,
     2     yanzuo     my_hms_addr          hms_address_t,
     2     yanzuo     ec                   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Verify that the request was NOT sent from the own unit.
     2     yanzuo   We don't want to restart *that*... */
     2     yanzuo   TASK ec := hms_slv_addr_from_phys_addr_r( own_unit_phys_addr,
     2     yanzuo        my_hms_addr );
     2     yanzuo   DECISION ec;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       TASK ec := hms_get_piu_location_r( piu_loc, has_master_node,
     2     yanzuo            master_loc );
     2     yanzuo       TASK hms_address_t_assign_piu_loc_r( my_hms_addr, piu_loc );
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec = success_ec AND fig_hdr.hms_address /= my_hms_addr;
     2     yanzuo     ( T ):
     2     yanzuo       TASK hms_address_t_get_piu_loc_r( fig_hdr.hms_address, piu_loc );
  1124   huantang 	 	/* When the recovery system gets unit restart notification,
  1124   huantang 	 	it notices that there is unknown unit and separates it.
  1124   huantang 	 	Then UXCPRB/UXMANA does not send requests because it sees
  1124   huantang 	 	that the unit is separated at HW level. */
  1124   huantang 	 	TASK ec := hms_reset_piu_r( piu_loc, F,
  1124   huantang 	 	   blackbox_control_t_skip_c,
  1124   huantang 	 	   debug_mode_t_normal_c );
  1124   huantang 
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE stop_figseb_requests__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE stop_if_param_requests__r;
     2     yanzuo /*
     2     yanzuo  * Do something to prevent the given computer from sending any
     2     yanzuo  * more ATM interface parameter requests.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  fig_hdr          fig_msg_header_t,
     2     yanzuo     IN  sar_type         sar_type_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword,
     2     yanzuo     free_idx             dword := stop_units__t_count_c;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* Add processor index into the HMS address field
     2     yanzuo   * to make searching easier. */
     2     yanzuo   TASK hms_address_t_make_ext_r(
     2     yanzuo        fig_hdr.hms_address,
     2     yanzuo        hms_processor_index_t   ( fig_hdr.extended_addr ),
     2     yanzuo        hms_address_t_rack_r    ( fig_hdr.hms_address ),
     2     yanzuo        hms_address_t_subrack_r ( fig_hdr.hms_address ),
     2     yanzuo        hms_address_t_ppa_r     ( fig_hdr.hms_address ));
     2     yanzuo   /* Now we can encode SAR type to the extended addr field.. */
     2     yanzuo   TASK fig_hdr.extended_addr := sar_type;
     2     yanzuo   TASK idx := 0;
     2     yanzuo   WHILE idx < stop_units__t_count_c;
     2     yanzuo     DECISION stop_units__pv(idx).hms_address;
     2     yanzuo       ( fig_hdr.hms_address ):
     2     yanzuo         RETURN F;
     2     yanzuo       ( hms_address_t_not_defined_c ):
     2     yanzuo         TASK free_idx := idx;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   DECISION free_idx;
     2     yanzuo     ( < stop_units__t_count_c ):
     2     yanzuo       TASK stop_units__pv( free_idx ) := fig_hdr;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN free_idx < stop_units__t_count_c;
     2     yanzuo ENDPROCEDURE stop_if_param_requests__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_stoppable_comp__r;
     2     yanzuo /*
     2     yanzuo  * Return the HMS address and SAR type of any unknown unit which
     2     yanzuo  * has sent ATM parameter request.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  hms_addr  hms_address_t,
     2     yanzuo     IN/OUT  sar_type  sar_type_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   WHILE idx < stop_units__t_count_c;
     2     yanzuo     DECISION stop_units__pv(idx).hms_address;
     2     yanzuo       ( /= hms_address_t_not_defined_c ):
     2     yanzuo         TASK hms_addr := stop_units__pv(idx).hms_address,
     2     yanzuo              sar_type := sar_type_t( stop_units__pv(idx).extended_addr ),
     2     yanzuo              stop_units__pv(idx).hms_address := hms_address_t_not_defined_c;
     2     yanzuo         RETURN T;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jii_find_stoppable_comp__r;
     2     yanzuo 
   856   huantang 
   856   huantang PROCEDURE jii_write_to_index_table__r;
   856   huantang FPAR
   856   huantang    IN/OUT  rec          jiifil__t;
   856   huantang DCL
   856   huantang    proc_idx         dword;
   856   huantang START;
   856   huantang    TASK proc_idx := 0;
   856   huantang    WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
   856   huantang      DECISION valid_addr__r( rec.procs(proc_idx).phys_addr );
   856   huantang        ( T ):
   856   huantang          TASK jiifil_index_table(rec.procs(proc_idx).phys_addr) := rec.rec_idx;
   856   huantang      ENDDECISION;
   856   huantang      TASK proc_idx := proc_idx + 1;
   856   huantang    ENDWHILE;
   856   huantang 
   856   huantang ENDPROCEDURE jii_write_to_index_table__r;
   856   huantang 
   856   huantang PROCEDURE jii_delete_index_table__r;
   856   huantang FPAR
   856   huantang    IN/OUT  rec          jiifil__t;
   856   huantang DCL
   856   huantang    proc_idx         dword;
   856   huantang START;
   856   huantang    TASK proc_idx := 0;
   856   huantang    WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
   856   huantang      DECISION valid_addr__r( rec.procs(proc_idx).phys_addr );
   856   huantang        ( T ):
   856   huantang          TASK jiifil_index_table(rec.procs(proc_idx).phys_addr) := 0;
   856   huantang      ENDDECISION;
   856   huantang      TASK proc_idx := proc_idx + 1;
   856   huantang    ENDWHILE;
   856   huantang 
   856   huantang ENDPROCEDURE jii_delete_index_table__r;
   856   huantang 
   856   huantang PROCEDURE jii_get_index_from_addr__r;
   856   huantang FPAR
  1071   huantang    IN  addr          phys_address_t;
   856   huantang RETURNS
   856   huantang    jiifil_idx__t;
   856   huantang 
   856   huantang 
   856   huantang START;
   856   huantang    DECISION valid_addr__r( addr );
   856   huantang      ( T ):
   856   huantang       RETURN jiifil_index_table(addr);
   856   huantang    ENDDECISION;
   856   huantang    RETURN jiifil_idx__t(0);
   856   huantang ENDPROCEDURE jii_get_index_from_addr__r;
   856   huantang 
   856   huantang 
   856   huantang 
   856   huantang 
   359    lifsong PROCEDURE get_alp_unit_for_brt__r;
   359    lifsong FPAR
   359    lifsong    IN/OUT  alp_unit    unit_it_t,
   359    lifsong    IN/OUT  alp_jii      jiifil__t;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    DECISION iw8s1_unit_check__r( alp_jii.unit_type );
   359    lifsong    ( T ):
   359    lifsong       TASK alp_unit.ttype := alp_jii.procs(0).unit_type,
   359    lifsong               alp_unit.index := alp_jii.procs(0).unit_index;
   359    lifsong    ELSE:
   359    lifsong       TASK alp_unit.ttype := alp_jii.unit_type,
   359    lifsong               alp_unit.index := alp_jii.unit_index;
   359    lifsong    ENDDECISION;
   359    lifsong ENDPROCEDURE get_alp_unit_for_brt__r;
   359    lifsong 
     2     yanzuo PROCEDURE find_wo_alp_unit__r;
     2     yanzuo FPAR
     2     yanzuo     IN      jii_ptr      jiifil_ptr__t,
     2     yanzuo     IN/OUT  alp_ptr      jiifil_ptr__t;
     2     yanzuo DCL
     2     yanzuo     jia_ptr              jiafil_ptr__t,
     2     yanzuo     u_idx                dword := 0,
     2     yanzuo     alp_unit_idx         dword := jiifil_idx__t_invalid_c,
     2     yanzuo     ustate               unit_state_t,
     2     yanzuo     wo_unit_index        unit_index_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK alp_ptr := NIL;
     2     yanzuo   DECISION jii_ptr->cluster_idx;
     2     yanzuo     ( /= alp_cluster_idx__t_invalid_c ):
     2     yanzuo       TASK jia_ptr := jiafil_ptr__r( jii_ptr->cluster_idx );
     2     yanzuo       WHILE u_idx < 2;
     2     yanzuo         DECISION ( jia_ptr->alp_unit( u_idx ).phys_addr <
     2     yanzuo                  computer_t_phys_not_defined_c ) AND
     2     yanzuo                  ( unit_state_by_phys_addr__r(
     2     yanzuo                  jia_ptr->alp_unit( u_idx ).phys_addr,
     2     yanzuo                  ustate ) = success_ec );
     2     yanzuo           ( T ):
     2     yanzuo             DECISION ustate | unit_state_t_mainstate_bm_c;
   799     z7zhou               ( unit_state_t_wo_c, unit_state_t_bl_c):
     2     yanzuo                 TASK alp_ptr := jiifil_ptr__r(
     2     yanzuo                      jia_ptr->alp_unit(u_idx).jii_idx );
     2     yanzuo                 RETURN;
     2     yanzuo               ( unit_state_t_te_c ):
     2     yanzuo                 TASK alp_unit_idx := jia_ptr->alp_unit( u_idx ).jii_idx;
     2     yanzuo               ( unit_state_t_se_c ):
     2     yanzuo                 DECISION alp_unit_idx;
     2     yanzuo                 ( jiifil_idx__t_invalid_c ):
     2     yanzuo                 TASK alp_unit_idx := jia_ptr->alp_unit( u_idx ).jii_idx;
     2     yanzuo                 ENDDECISION;
     2     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK u_idx := u_idx + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo       DECISION alp_unit_idx;
     2     yanzuo       ( /= jiifil_idx__t_invalid_c ):
     2     yanzuo           /* The unit may have a WO co-unit which is not in
     2     yanzuo           JIIFIL yet. */
     2     yanzuo           TASK alp_ptr := jiifil_ptr__r( alp_unit_idx );
     2     yanzuo           DECISION active_unit_index_r( alp_ptr->unit_type,
     2     yanzuo                    alp_ptr->unit_index,
     2     yanzuo                    wo_unit_index ) = success_ec
     2     yanzuo                    AND
     2     yanzuo                    wo_unit_index /= alp_ptr->unit_index;
     2     yanzuo             ( T ):
     2     yanzuo               TASK alp_ptr := NIL;
     2     yanzuo           ENDDECISION;
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE find_wo_alp_unit__r;
     2     yanzuo 
   958   huantang 
     2     yanzuo /**************************************************************************/
   958   huantang PROCEDURE jii_find_computer_from_jii__r;
     2     yanzuo /*
     2     yanzuo  * Find the computer with the given physical address from JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      comp         phys_address_t,
   600     qinggu     IN/OUT  jii_para_ptr jiifil_ptr__t,
     2     yanzuo     IN/OUT  comp_ptr     jii_comp_ptr__t,
     2     yanzuo     IN/OUT  alp_ptr      jiifil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
   958   huantang DCL 
   958   huantang    c_idx                dword;
   958   huantang    
   958   huantang START;
   958   huantang    TASK c_idx := 0;
   958   huantang    
   958   huantang    WHILE ( jii_para_ptr->rec_idx /= 0 ) AND ( c_idx < jiifil__t_n_comp_per_unit_c );
   958   huantang       DECISION jii_para_ptr->procs(c_idx).phys_addr;
   958   huantang       ( comp ):
   958   huantang           TASK comp_ptr := @jii_para_ptr->procs(c_idx);
   958   huantang           /* find out the current WO-ALP unit */
   958   huantang           DECISION ss7u_unit_check__r(comp_ptr->unit_type);
   958   huantang           (T):
   958   huantang               TASK alp_ptr := jii_para_ptr;
   958   huantang           ELSE:
   958   huantang               CALL find_wo_alp_unit__r( jii_para_ptr, alp_ptr );
   958   huantang           ENDDECISION;
   958   huantang           RETURN T;
   958   huantang       ENDDECISION;
   958   huantang       TASK c_idx := c_idx + 1;
   958   huantang    ENDWHILE;
   958   huantang    RETURN F;
   958   huantang ENDPROCEDURE jii_find_computer_from_jii__r;
   958   huantang 
   958   huantang /**************************************************************************/
   958   huantang PROCEDURE jii_find_computer_by_index__r;
   958   huantang /*
   958   huantang  * Find the computer with the given physical address from JIIFIL.
   958   huantang  **************************************************************************/
   958   huantang FPAR
   958   huantang     IN      comp         phys_address_t,
   958   huantang     IN/OUT  jii_para_ptr jiifil_ptr__t,
   958   huantang     IN/OUT  comp_ptr     jii_comp_ptr__t,
   958   huantang     IN/OUT  alp_ptr      jiifil_ptr__t;
   958   huantang RETURNS
   958   huantang     bool;
     2     yanzuo DCL
     2     yanzuo     u_idx                dword := 1;
     2     yanzuo 
     2     yanzuo START;
   856   huantang    TASK u_idx := jii_get_index_from_addr__r(comp);
     2     yanzuo 
   958   huantang    TASK jii_para_ptr := jiifil_ptr__r( u_idx );
   958   huantang    RETURN jii_find_computer_from_jii__r(comp,jii_para_ptr,comp_ptr,alp_ptr) ;
   958   huantang 
   958   huantang ENDPROCEDURE jii_find_computer_by_index__r;
   958   huantang 
   958   huantang /**************************************************************************/
   958   huantang PROCEDURE jii_find_computer_by_scan__r;
   958   huantang /*
   958   huantang  * Find the computer with the given physical address from JIIFIL.
   958   huantang  **************************************************************************/
   958   huantang FPAR
   958   huantang     IN      comp         phys_address_t,
   958   huantang     IN/OUT  jii_para_ptr jiifil_ptr__t,
   958   huantang     IN/OUT  comp_ptr     jii_comp_ptr__t,
   958   huantang     IN/OUT  alp_ptr      jiifil_ptr__t;
   958   huantang RETURNS
   958   huantang     bool;
   958   huantang DCL
   958   huantang     u_idx                dword := 1;
   958   huantang 
   958   huantang START;
   958   huantang   WHILE u_idx <= jig_limits__t_n_funits_c;
   958   huantang     TASK jii_para_ptr := jiifil_ptr__r( u_idx );
   958   huantang     DECISION jii_find_computer_from_jii__r(comp,jii_para_ptr,comp_ptr,alp_ptr) ;
   958   huantang     ( T ) :
   856   huantang        RETURN T;
   958   huantang     ENDDECISION;
   958   huantang     TASK u_idx := u_idx + 1;
   958   huantang   ENDWHILE;
   958   huantang 
   958   huantang   RETURN F;
   958   huantang ENDPROCEDURE jii_find_computer_by_scan__r;
   958   huantang 
   958   huantang 
   958   huantang /**************************************************************************/
   958   huantang PROCEDURE jii_find_computer__r;
   958   huantang /*
   958   huantang  * Find the computer with the given physical address from JIIFIL.
   958   huantang  **************************************************************************/
   958   huantang FPAR
   958   huantang     IN      comp         phys_address_t,
   958   huantang     IN/OUT  jii_para_ptr jiifil_ptr__t,
   958   huantang     IN/OUT  comp_ptr     jii_comp_ptr__t,
   958   huantang     IN/OUT  alp_ptr      jiifil_ptr__t;
   958   huantang RETURNS
   958   huantang     bool;
   958   huantang 
   958   huantang START;
   958   huantang 
   958   huantang    DECISION jii_find_computer_by_index__r(comp,jii_para_ptr,comp_ptr,alp_ptr) ;
   958   huantang    ( T ):
   958   huantang       RETURN T;
   856   huantang    ENDDECISION;
   958   huantang    
   958   huantang    DECISION jii_find_computer_by_scan__r(comp,jii_para_ptr,comp_ptr,alp_ptr) ;
   958   huantang    ( T ):
   958   huantang       CALL jii_write_to_index_table__r( $jii_para_ptr );
   958   huantang       RETURN T;
   958   huantang    ENDDECISION;
   856   huantang 
   600     qinggu   TASK jii_para_ptr := NIL;
   600     qinggu 
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jii_find_computer__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1073   huantang PROCEDURE jii_find_computer_by_hms__r;
  1073   huantang /*
  1073   huantang  * Find the computer with the given physical address from JIIFIL.
  1073   huantang  **************************************************************************/
  1073   huantang FPAR
  1073   huantang     IN      hms          hms_address_t,
  1073   huantang     IN/OUT  jii_ptr jiifil_ptr__t,
  1073   huantang     IN/OUT  comp_ptr     jii_comp_ptr__t,
  1073   huantang     IN/OUT  alp_ptr      jiifil_ptr__t;
  1073   huantang RETURNS
  1073   huantang     bool;
  1073   huantang DCL
  1073   huantang     phys_addr            phys_address_t;
  1073   huantang START;
  1073   huantang   DECISION hms_addr_to_phys_addr__r( hms, phys_addr );
  1073   huantang     ( success_ec ):
  1073   huantang       RETURN jii_find_computer__r( phys_addr, jii_ptr, comp_ptr,
  1073   huantang              alp_ptr ) AND alp_ptr /= NIL;
  1073   huantang     ELSE:
  1073   huantang         TASK jii_ptr := NIL;
  1073   huantang   ENDDECISION;
  1073   huantang   RETURN F;
  1073   huantang ENDPROCEDURE jii_find_computer_by_hms__r;
  1073   huantang 
  1073   huantang /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_hms__r;
     2     yanzuo /*
     2     yanzuo  * Find the computer identified with HMS address from JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN fig_hdr fig_msg_header_t,
     2     yanzuo     IN/OUT jii_ptr jiifil_ptr__t,
     2     yanzuo     IN/OUT comp_ptr jii_comp_ptr__t,
     2     yanzuo     IN/OUT alp_ptr jiifil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
  1087   huantang     hms_addr             hms_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK hms_address_t_make_ext_r(
     2     yanzuo        hms_addr,
     2     yanzuo        hms_processor_index_t   ( fig_hdr.extended_addr ),
     2     yanzuo        hms_address_t_rack_r    ( fig_hdr.hms_address ),
     2     yanzuo        hms_address_t_subrack_r ( fig_hdr.hms_address ),
     2     yanzuo        hms_address_t_ppa_r     ( fig_hdr.hms_address ));
  1073   huantang   RETURN jii_find_computer_by_hms__r(hms_addr, jii_ptr, comp_ptr, alp_ptr);
     2     yanzuo ENDPROCEDURE jii_find_hms__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_unit__r;
     2     yanzuo /*
     2     yanzuo  * Find the computer identified with unit type and index from JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      utype        unit_type_t,
     2     yanzuo     IN      uidx         unit_index_t,
     2     yanzuo     IN/OUT  jii_ptr      jiifil_ptr__t,
     2     yanzuo     IN/OUT  comp_ptr     jii_comp_ptr__t,
     2     yanzuo     IN/OUT  alp_ptr      jiifil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
     2     yanzuo     phys_addr phys_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION physical_address_trial_r( slice_id_t_both_slices_c,
     2     yanzuo            utype, uidx, phys_addr );
     2     yanzuo     ( success_ec ):
     2     yanzuo       RETURN jii_find_computer__r( phys_addr,
   490     yanzuo              jii_ptr, comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jii_find_unit__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jigclu_find_unit__r;
     2     yanzuo /*
     2     yanzuo  * Find the computer identified with unit type and index from JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo       IN       utype        unit_type_t,
     2     yanzuo       IN       uindex       unit_index_t,
     2     yanzuo       IN/OUT   io_phy_addr     phys_address_t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
     2     yanzuo     jii_ptr  jiifil_ptr__t,
     2     yanzuo     comp_ptr jii_comp_ptr__t,
     2     yanzuo     alp_ptr  jiifil_ptr__t,
   216      h10hu     phys_addr phys_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION physical_address_trial_r( slice_id_t_both_slices_c, utype, uindex, phys_addr );
     2     yanzuo   ( success_ec ):
     2     yanzuo       DECISION jii_find_computer__r( phys_addr, jii_ptr, comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
     2     yanzuo       (T):      TASK io_phy_addr := alp_ptr->procs(0).phys_addr;
     2     yanzuo                 RETURN T;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jigclu_find_unit__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1140      tinyu PROCEDURE check_trib_startup_allowed__r;
  1140      tinyu /*
  1140      tinyu  * This procedure checks  ALP trib_startup_allowed.
  1140      tinyu  **************************************************************************/
  1140      tinyu FPAR	
  1140      tinyu     IN mxu_addr   phys_address_t;
  1140      tinyu RETURNS bool;
  1140      tinyu 
  1140      tinyu DCL
  1140      tinyu     jii_para_ptr   jiifil_ptr__t,
  1140      tinyu     comp_ptr jii_comp_ptr__t,
  1140      tinyu     alp_ptr  jiifil_ptr__t;
  1140      tinyu 
  1140      tinyu START;
  1140      tinyu 	 DECISION jii_find_computer__r(mxu_addr, jii_para_ptr ,comp_ptr, alp_ptr );
  1140      tinyu 	 (T):
  1140      tinyu 		RETURN jii_para_ptr->trib_startup_allowed;
  1140      tinyu 	 ENDDECISION;
  1140      tinyu 	 RETURN F;
  1140      tinyu ENDPROCEDURE check_trib_startup_allowed__r;
  1140      tinyu 
  1140      tinyu /**************************************************************************/
   585      h10hu PROCEDURE jigclu_find_app_spi3__r;
     2     yanzuo /*
     2     yanzuo  * Find the computer spi3 port number with phy_address from JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN       in_phy_addr  unit_type_t,
     2     yanzuo    IN/OUT   io_mphy_port mphy_port_number_t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
     2     yanzuo    jii_ptr   jiifil_ptr__t,
     2     yanzuo    comp_ptr  jii_comp_ptr__t,
     2     yanzuo    alp_ptr   jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
   490     yanzuo    DECISION jii_find_computer__r( in_phy_addr, jii_ptr, comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
     2     yanzuo    ( T ):
     2     yanzuo       TASK io_mphy_port  := sfu_port_info_t_max_traf_cls_c * alp_ptr->sfu_port_number
     2     yanzuo                             + sfu_port_info_t_nrt_offset_c;
     2     yanzuo       RETURN T;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN F;
   585      h10hu ENDPROCEDURE jigclu_find_app_spi3__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_next_comp__r;
     2     yanzuo /*
     2     yanzuo  * Find from JIIFIL the next computer in the given (or any) cluster,
     2     yanzuo  * starting from the given unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      clus_idx     alp_cluster_idx__t,
     2     yanzuo     IN/OUT  search_key   jii_search_key__t,
     2     yanzuo     IN/OUT  jii_ptr      jiifil_ptr__t,
     2     yanzuo     IN/OUT  comp_ptr     jii_comp_ptr__t,
     2     yanzuo     IN/OUT  alp_ptr      jiifil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* convert search key to internal range, and increment it */
     2     yanzuo   TASK search_key := jii_search_key__t( search_key + 1 -
     2     yanzuo        jii_search_key__t_base_c );
     2     yanzuo   WHILE search_key < 4 * jig_limits__t_n_funits_c;
     2     yanzuo     TASK jii_ptr := jiifil_ptr__r( search_key / 4 );
     2     yanzuo     DECISION ( jii_ptr->rec_idx /= 0 )
     2     yanzuo              AND
     2     yanzuo              (( clus_idx = alp_cluster_idx__t_any_c ) OR
     2     yanzuo              ( jii_ptr->cluster_idx = clus_idx ));
     2     yanzuo       ( T ):
     2     yanzuo         TASK comp_ptr := @jii_ptr->procs( search_key MOD 4 );
     2     yanzuo         DECISION invalid_addr__r( comp_ptr->phys_addr );
     2     yanzuo           ( F ):
   561    lifsong             DECISION alp_ptr = NIL OR npu_unit_check__r(comp_ptr->unit_type);
   559    lifsong             ( T ):
   559    lifsong                  /* find out the current WO-ALP unit */
   559    lifsong                  CALL find_wo_alp_unit__r( jii_ptr, alp_ptr );
     2     yanzuo             ENDDECISION;
   559    lifsong 
   559    lifsong             DECISION ss7u_unit_check__r(comp_ptr->unit_type);
   559    lifsong             (T):
   559    lifsong                 TASK alp_ptr := jii_ptr;
   559    lifsong             ENDDECISION;
     2     yanzuo             /* convert key back to external range */
     2     yanzuo             TASK search_key := search_key + jii_search_key__t_base_c;
     2     yanzuo             RETURN T;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK search_key := search_key + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK search_key := search_key + jii_search_key__t_base_c;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jii_find_next_comp__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_find_first_comp__r;
     2     yanzuo /*
     2     yanzuo  * Find from JIIFIL the first computer belonging to the given (or any)
     2     yanzuo  * ALP1 cluster.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      clus_idx     alp_cluster_idx__t,
     2     yanzuo     IN/OUT  search_key   jii_search_key__t,
     2     yanzuo     IN/OUT  jii_ptr      jiifil_ptr__t,
     2     yanzuo     IN/OUT  comp_ptr     jii_comp_ptr__t,
     2     yanzuo     IN/OUT  alp_ptr      jiifil_ptr__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* set the search_key to a value which starts the search
     2     yanzuo   from the first JIIFIL record. */
     2     yanzuo   TASK search_key := jii_search_key__t( jii_search_key__t_base_c - 1 );
     2     yanzuo   TASK alp_ptr := NIL;
     2     yanzuo   RETURN jii_find_next_comp__r( clus_idx,
     2     yanzuo          search_key,
     2     yanzuo          jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo ENDPROCEDURE jii_find_first_comp__r;
     2     yanzuo 
     2     yanzuo /* newprocs */
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_empty_jiifil_rec__r;
     2     yanzuo /*
     2     yanzuo  * This procedure initializes the given JIIFIL record with
     2     yanzuo  * empty base values.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo DCL
     2     yanzuo     expired_timestamp    jig_timestamp__t,
     2     yanzuo     proc_idx             dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( @rec ), 0, SIZEOF( rec ));
     2     yanzuo   TASK rec.rec_idx := jiifil_idx__t_invalid_c;
     2     yanzuo   /*
     2     yanzuo   * Initialize explicitly all fields where 0 is
     2     yanzuo   * not a suitable initial value.
     2     yanzuo   */
   581    jianyxu   TASK rec.is_center_unit := F;  
     2     yanzuo   TASK rec.co_alp_unit_phys_addr := computer_t_phys_invalid_c;
     2     yanzuo   TASK expired_timestamp := jig_timestamp__t (
     2     yanzuo        curr_timestamp__r() -
     2     yanzuo        2 * jig_timestamp__t_expiration_c
     2     yanzuo        );
     2     yanzuo   TASK rec.port_conf_timestamp     := expired_timestamp,
     2     yanzuo        rec.port_conf_ph2_timestamp := expired_timestamp;
     2     yanzuo   TASK rec.interfaces(0).mphy_port := mphy_port_number_t_unspec_c,
     2     yanzuo        rec.interfaces(0).intf_id   := atm_interface_id_t_unspecif_c;
     2     yanzuo   TASK rec.fig_req_uxhwb_type := ux_hw_block_type_t_hw_perm_hms;
    73     jamema   TASK rec.reconfig_needed := F, rec.mphy_count := 0;
     2     yanzuo   TASK proc_idx := 0;
     2     yanzuo   WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
     2     yanzuo     TASK rec.procs(proc_idx).phys_addr := computer_t_phys_not_defined_c;
     2     yanzuo     TASK rec.procs(proc_idx).vci_bitmap_idx := vci_bitmap_idx__t_invalid_c;
     2     yanzuo     TASK rec.procs(proc_idx).mphy_port := mphy_port_number_t_unspec_c;
     2     yanzuo     TASK rec.procs(proc_idx).scheduler_subport := 0x1F; /* ?? */
     2     yanzuo     TASK rec.procs(proc_idx).if_init_timestamp     := expired_timestamp,
     2     yanzuo          rec.procs(proc_idx).if_init_ph2_timestamp := expired_timestamp;
     2     yanzuo     TASK proc_idx := proc_idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo ENDPROCEDURE init_empty_jiifil_rec__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE update_alp_cluster__r;
     2     yanzuo /*
     2     yanzuo  * Add a new ALP unit to the ALP cluster.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      clus_idx     alp_cluster_idx__t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t;
     2     yanzuo DCL
     2     yanzuo     clus_ptr             alp_cluster_ptr__t,
     2     yanzuo     pri, ui              dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK alp_unit.cluster_idx := clus_idx;
     2     yanzuo   TASK clus_ptr := jiafil_ptr__r( clus_idx );
     2     yanzuo   DECISION invalid_addr__r( clus_ptr->alp_unit(0).phys_addr );
     2     yanzuo     ( T ):
     2     yanzuo       TASK ui := 0;
     2     yanzuo     ELSE:
     2     yanzuo       TASK ui := 1;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK clus_ptr->alp_unit(ui).phys_addr := alp_unit.procs(0).phys_addr;
     2     yanzuo   TASK clus_ptr->alp_unit(ui).jii_idx   := alp_unit.rec_idx;
     2     yanzuo   /* Assign startup priority (1=highest, 0xFFFFFFFF=lowest). */
     2     yanzuo   DECISION alp_unit.unit_type;
     2     yanzuo     ( unit_type_t_mxu_c ):
     2     yanzuo      /* assign the priorities of non-SYM-MXUs based on their physical
     2     yanzuo       * location, not on their unit indices (mainly) */
     2     yanzuo      DECISION alp_unit.unit_index;
     2     yanzuo      ( < 2 ):
     2     yanzuo         TASK pri := 1;
     2     yanzuo      ELSE:
     2     yanzuo         TASK pri := 0x1000*hms_address_t_rack_r( alp_unit.hms_address )
     2     yanzuo                     + 0x100*hms_address_t_subrack_r( alp_unit.hms_address )
     2     yanzuo                     + ( alp_unit.unit_index / 2 );
     2     yanzuo      ENDDECISION;
     2     yanzuo 
     2     yanzuo      /* when adding 2nd ALP1 unit, do not change the existing priority
     2     yanzuo       * (calculated from the 1st ALP1 unit) if it is better than
     2     yanzuo       * the new priority */
     2     yanzuo      DECISION ( ui = 1 ) AND ( pri > clus_ptr->startup_priority );
     2     yanzuo      ( T ):
     2     yanzuo         TASK pri := clus_ptr->startup_priority;
     2     yanzuo      ENDDECISION;
     2     yanzuo 
     2     yanzuo     ELSE:
     2     yanzuo       /* Initialize other units in order of unit type + index */
     2     yanzuo       TASK pri := alp_unit.unit_type * 0x10000 + alp_unit.unit_index;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK clus_ptr->startup_priority := pri;
     2     yanzuo ENDPROCEDURE update_alp_cluster__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE trim_alp_cluster__r;
     2     yanzuo /*
     2     yanzuo  * Remove the given alp unit from cluster record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  clus_idx         alp_cluster_idx__t,
     2     yanzuo     IN  addr             phys_address_t;
     2     yanzuo DCL
     2     yanzuo     clus_ptr   alp_cluster_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK clus_ptr := jiafil_ptr__r( clus_idx );
     2     yanzuo   DECISION addr;
     2     yanzuo     ( clus_ptr->alp_unit(0).phys_addr ):
     2     yanzuo       TASK clus_ptr->alp_unit( 0 ) := clus_ptr->alp_unit( 1 );
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK clus_ptr->alp_unit(1).phys_addr := computer_t_phys_invalid_c;
     2     yanzuo   TASK clus_ptr->warming_in_progress := F;
     2     yanzuo   DECISION invalid_addr__r( clus_ptr->alp_unit(0).phys_addr );
     2     yanzuo     ( T ):
     2     yanzuo       /* The last alp unit in this cluster was removed. */
     2     yanzuo       CALL reset_jiafil_record__r( clus_ptr );
     2     yanzuo       /* If this was sym-mxu cluster, reset sym-mxu cluster index. */
     2     yanzuo       DECISION clus_idx;
     2     yanzuo         ( sym_mxu_cluster__pv ):
     2     yanzuo           TASK sym_mxu_cluster__pv := alp_cluster_idx__t_invalid_c;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE trim_alp_cluster__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alloc_jiifil_record__r;
     2     yanzuo /*
     2     yanzuo  * Allocate a free JIIFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec_idx      jiifil_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     n  dword,
     2     yanzuo     jii_ptr  jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK n := 0;
     2     yanzuo   WHILE n < jig_limits__t_n_funits_c;
     2     yanzuo     DECISION next_jiifil_rec__pv + 1;
  1135    jinncao       ( < jig_limits__t_n_funits_c ):
     2     yanzuo         TASK next_jiifil_rec__pv := next_jiifil_rec__pv + 1;
     2     yanzuo       ELSE:
     2     yanzuo         TASK next_jiifil_rec__pv := 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK jii_ptr := jiifil_ptr__r( next_jiifil_rec__pv );
     2     yanzuo     DECISION jii_ptr->rec_idx;
     2     yanzuo       ( 0 ): /* = free */
     2     yanzuo         TASK rec_idx := next_jiifil_rec__pv;
     2     yanzuo         RETURN T;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK n := n + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE alloc_jiifil_record__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE alloc_vci_bitmap__r;
     2     yanzuo /*
     2     yanzuo  * Allocate a free VCI bitmap for the given computer.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  comp             phys_address_t;
     2     yanzuo RETURNS
     2     yanzuo     vci_bitmap_idx__t;
     2     yanzuo DCL
   216      h10hu     n               dword,
     2     yanzuo     bitmap_rec_ptr       vci_bitmap_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK n := 0;
     2     yanzuo   WHILE n < jig_limits__t_n_vci_bm_c;
     2     yanzuo     TASK bitmap_rec_ptr := jibfil_ptr__r( next_bitmap_idx__pv );
     2     yanzuo     DECISION invalid_addr__r( bitmap_rec_ptr->owner );
     2     yanzuo       ( T ):
     2     yanzuo         TASK bitmap_rec_ptr->owner := comp;
     2     yanzuo         RETURN next_bitmap_idx__pv;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* rotate within range 1..n_bitmaps */
     2     yanzuo     DECISION next_bitmap_idx__pv;
     2     yanzuo       ( jig_limits__t_n_vci_bm_c ):
     2     yanzuo         TASK next_bitmap_idx__pv := 1;
     2     yanzuo       ELSE:
     2     yanzuo         TASK next_bitmap_idx__pv := next_bitmap_idx__pv + 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK n := n + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN 0;
     2     yanzuo ENDPROCEDURE alloc_vci_bitmap__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   189    lifsong PROCEDURE convert_vci_to_bitmap_pos__r;
   189    lifsong /*
   189    lifsong  * Convert vci to bitmap position in jibfil
   189    lifsong  **************************************************************************/
   189    lifsong FPAR
   189    lifsong     IN      comp_ptr     jii_comp_ptr__t,
   189    lifsong     IN      vci          vci_t;
   189    lifsong RETURNS
   189    lifsong    word;
   189    lifsong DCL
   189    lifsong    i        byte := 0,
   189    lifsong    b        word := 1,
   189    lifsong    pos      word;
   189    lifsong 
   189    lifsong START;
   754     yanzuo     TASK pos := vci & jig_limits__t_n_dsp_vci_mask_c;
   754     yanzuo 
   754     yanzuo     DECISION (comp_ptr->unit_type = unit_type_t_dmpg_c) AND 
   754     yanzuo              (g_rx_bigvcc_param.enable_flag = T);
   754     yanzuo     ( T ):
   754     yanzuo         DECISION (pos);
   754     yanzuo         ( < jig_limits__t_min_vci_c ):
   754     yanzuo             TASK pos := jig_limits__t_n_vcis_c;
   757     yanzuo         ELSE:
   754     yanzuo             TASK pos := word(pos - jig_limits__t_min_vci_c);
   754     yanzuo         ENDDECISION;
   754     yanzuo         RETURN pos;
   754     yanzuo     ENDDECISION;
   754     yanzuo                  
   754     yanzuo     DECISION one_pqu_check__r(comp_ptr->unit_type);/*CR16942, MPQU unit need special VCI assign mechanism*/
   754     yanzuo     (T):
   754     yanzuo         TASK b := 4;
   754     yanzuo         DECISION comp_ptr->unit_type;
   754     yanzuo         (unit_type_t_ster_c):
   754     yanzuo             TASK  i := 0;/*master and ster alwsys start from 24*/
   754     yanzuo         (unit_type_t_vetgr_c):
   754     yanzuo             TASK  i := 5 + (comp_ptr->unit_index MOD 3);/*vetgr always start from 25 26 27*/
   754     yanzuo         ELSE:  /*(unit_type_t_etgr_c, unit_type_t_a2sp_c, unit_type_t_dmpg_c, unit_type_t_tpg_c):*/
   754     yanzuo             TASK  i := 0 + (comp_ptr->unit_index MOD 4); /*slave always start from 25 26 27*/
   754     yanzuo         ENDDECISION;
   754     yanzuo     ENDDECISION;
   754     yanzuo     
   754     yanzuo     DECISION (pos < i+jig_limits__t_min_vci_c);
   754     yanzuo     (T):
   754     yanzuo         TASK pos := jig_limits__t_n_vcis_c;
   754     yanzuo     ELSE:
   754     yanzuo         TASK pos := word(word(pos - i - jig_limits__t_min_vci_c) / b);
   754     yanzuo     ENDDECISION;
   757     yanzuo 
   754     yanzuo     RETURN pos;
   754     yanzuo     
   189    lifsong ENDPROCEDURE convert_vci_to_bitmap_pos__r;
   189    lifsong 
   189    lifsong /**************************************************************************/
   189    lifsong PROCEDURE convert_bitmap_pos_to_vci;
   189    lifsong /*
   189    lifsong  * Convert bitmap position in jibfil to vci
   189    lifsong  **************************************************************************/
   189    lifsong FPAR
   189    lifsong     IN      comp_ptr     jii_comp_ptr__t,
   189    lifsong     IN      pos          word;
   189    lifsong RETURNS
   189    lifsong    vci_t;
   189    lifsong DCL
   189    lifsong    i        byte := 0,
   189    lifsong    b        byte := 1,
   189    lifsong    vci      vci_t;
   189    lifsong 
   189    lifsong START;
   189    lifsong    TASK vci := pos;
   754     yanzuo 
   754     yanzuo    DECISION one_pqu_check__r(comp_ptr->unit_type) AND
   754     yanzuo             (NOT ((comp_ptr->unit_type = unit_type_t_dmpg_c) AND 
   754     yanzuo                   (g_rx_bigvcc_param.enable_flag = T)));
   189    lifsong    (T):
   189    lifsong       TASK b := 4;
   189    lifsong       DECISION comp_ptr->unit_type;
   189    lifsong       (unit_type_t_ster_c):
   189    lifsong           TASK  i := 0;/*master and ster alwsys start from 24*/
   189    lifsong       (unit_type_t_vetgr_c):
   189    lifsong           TASK  i := 5 + (comp_ptr->unit_index MOD 3);/*vetgr always start from 25 26 27*/
   189    lifsong       ELSE:  /*(unit_type_t_etgr_c, unit_type_t_a2sp_c, unit_type_t_dmpg_c, unit_type_t_tpg_c):*/
   189    lifsong           TASK  i := 0 + (comp_ptr->unit_index MOD 4); /*slave always start from 25 26 27*/
   189    lifsong       ENDDECISION;
   189    lifsong    ENDDECISION;
   189    lifsong    TASK vci := vci * b + jig_limits__t_min_vci_c + i;
   579     z7zhou 
   189    lifsong    RETURN vci;
   189    lifsong ENDPROCEDURE convert_bitmap_pos_to_vci;
   189    lifsong 
   189    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE jii_write_local_record__r;
     2     yanzuo /*
     2     yanzuo  * Write the given record as such to JIIFIL.
     2     yanzuo  * Update other files and fields and variables which are
     2     yanzuo  * linked to the new record.
     2     yanzuo  * This procedure also updates ALP cluster record if needed.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo DCL
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     co_unit_ptr          jiifil_ptr__t,
     2     yanzuo     clus_ptr             jiafil_ptr__t,
     2     yanzuo     addr, co_unit_addr   phys_address_t,
   432     jamema     ustate                 unit_state_t,
     2     yanzuo     ci, proc_idx         dword;
     2     yanzuo 
     2     yanzuo START;
   359    lifsong 
   432     jamema   DECISION rec.is_level1_alp_unit = T AND ( unit_state_by_phys_addr__r( rec.procs(0).phys_addr, ustate ) = success_ec )
   432     jamema              AND (( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_se_c );
   432     jamema   ( T ):
   432     jamema   	  RETURN;
   432     jamema   ENDDECISION;
   432     jamema 
   432     jamema   /*For safety, if alp_cluster number is not enough and the return result of locate_cluster__r is not checked, record 0 will be used
   432     jamema   And it will cause system freeze and restart. Just small change to make system safe in A7,A8.*/
   432     jamema   DECISION rec.is_level1_alp_unit = T AND rec.cluster_idx = 0;
   432     jamema   ( T ):
   432     jamema       
   432     jamema       TASK dxsyslog_r( log_type_t_text_e_c,
   432     jamema                       @'JIGDAT: jii cluster is full'
   432     jamema                        'Procedure: jii_write_local_record__r'
   432     jamema                        'phy: 0x%X',
   432     jamema                        rec.procs(0).phys_addr);
   432     jamema       RETURN;
   432     jamema   ENDDECISION;
   432     jamema   
   432     jamema   /* if new record, find free place in JIIFIL. */
     2     yanzuo   DECISION rec.rec_idx;
    56     yanzuo   ( jiifil_idx__t_new_c ):
     2     yanzuo       DECISION alloc_jiifil_record__r( rec.rec_idx );
    56     yanzuo       ( F ):
     2     yanzuo           /* fatal error, JIIFIL is full */
     2     yanzuo           TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo                log_write_item_t(@ci),1,
     2     yanzuo                log_text_info_t(@'JIGDAT: JIIFIL IS FULL'));
     2     yanzuo           RETURN;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
    56     yanzuo   
     2     yanzuo   TASK jii_ptr      := jiifil_ptr__r( rec.rec_idx ),
     2     yanzuo        addr         := rec.procs(0).phys_addr,
     2     yanzuo        ci           := rec.cluster_idx,
     2     yanzuo        clus_ptr     := jiafil_ptr__r( ci ),
     2     yanzuo        co_unit_addr := rec.co_alp_unit_phys_addr;
     2     yanzuo   /* New ALP unit for this cluster? */
     2     yanzuo   DECISION rec.is_level1_alp_unit AND
     2     yanzuo            ( addr /= clus_ptr->alp_unit(0).phys_addr ) AND
     2     yanzuo            ( addr /= clus_ptr->alp_unit(1).phys_addr );
     2     yanzuo     ( T ):
     2     yanzuo       CALL update_alp_cluster__r( rec.cluster_idx, rec );
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* allocate VCI bitmaps if it has not been done yet. */
     2     yanzuo   TASK proc_idx := 0;
     2     yanzuo   WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
     2     yanzuo     DECISION valid_addr__r( rec.procs(proc_idx).phys_addr );
     2     yanzuo       ( T ):
     2     yanzuo         DECISION rec.procs(proc_idx).vci_bitmap_idx;
     2     yanzuo           ( vci_bitmap_idx__t_invalid_c ):
     2     yanzuo             TASK rec.procs(proc_idx).vci_bitmap_idx :=
     2     yanzuo                  alloc_vci_bitmap__r( rec.procs(proc_idx).phys_addr );
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK proc_idx := proc_idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   /* if adding/modifying 2N ALP unit, update co-unit data */
     2     yanzuo   DECISION co_unit_addr < computer_t_phys_not_defined_c
     2     yanzuo            AND
     2     yanzuo            jii_find_computer__r( co_unit_addr, co_unit_ptr,
     2     yanzuo            dummy_comp_ptr, dummy_jii_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       DECISION co_unit_ptr->co_alp_unit_phys_addr;
     2     yanzuo         ( /= addr ):
     2     yanzuo           /* Adding a co-unit for existing ALP1 unit */
     2     yanzuo           TASK co_unit_ptr->co_alp_unit_phys_addr := addr;
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* Make sure that only one of the two units
     2     yanzuo       * is marked as WO unit at a time. */
     2     yanzuo       TASK co_unit_ptr->is_wo_unit := NOT rec.is_wo_unit;
     2     yanzuo       /* for IP-NIU, we copy 2nd interface info from the 1st
     2     yanzuo       unit to the 2nd unit when interface ids are allocated
     2     yanzuo       for the first unit for the first time, or when
     2     yanzuo       the 2nd unit is added to the configuration. */
     2     yanzuo       DECISION rec.is_ip_niu;
     2     yanzuo         ( T ):
     2     yanzuo           /* Set extra interface to point to correct interface */
     2     yanzuo           /* Actually these are not procs, but it makes life easier */
     2     yanzuo           TASK rec.procs(0).interface_index := 0;
     2     yanzuo           TASK rec.procs(1).interface_index := 1;
     2     yanzuo           DECISION rec.interfaces(1).intf_id;
     2     yanzuo             ( 0, atm_interface_id_t_unspecif_c ):
     2     yanzuo               DECISION co_unit_ptr->interfaces(1).intf_id;
     2     yanzuo                 ( 0, atm_interface_id_t_unspecif_c ):
     2     yanzuo                 /* no need to copy anything */
     2     yanzuo                 ELSE:
     2     yanzuo                   TASK rec.interfaces(1) := co_unit_ptr->interfaces(1);
     2     yanzuo               ENDDECISION;
     2     yanzuo             ELSE:
     2     yanzuo               DECISION co_unit_ptr->interfaces(1).intf_id;
     2     yanzuo                 ( 0, atm_interface_id_t_unspecif_c ):
     2     yanzuo                   TASK co_unit_ptr->interfaces(1) := rec.interfaces(1);
     2     yanzuo               ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
   856   huantang 
   856   huantang   CALL jii_write_to_index_table__r(rec);
     2     yanzuo   /* write the data to JIIFIL. */
     2     yanzuo   TASK $jii_ptr := rec;
     2     yanzuo ENDPROCEDURE jii_write_local_record__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_wipe_conn_rec__r;
     2     yanzuo /*
     2     yanzuo  * Remove connection from JICFIL and free the associated
     2     yanzuo  * internal resources (of JIGGER): VCIs, xconn-ids
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  jic_ptr  jicfil_ptr__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ep_idx               byte := 0,
     2     yanzuo     jii_ptr, alp_ptr     jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     bit_idx              dword,
     2     yanzuo     bptr                 bytepointer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   WHILE ep_idx < 2;
     2     yanzuo     DECISION jii_find_computer__r( jic_ptr->half_conn(ep_idx).comp,
   490     yanzuo              jii_ptr, comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
     2     yanzuo       ( T ):
     2     yanzuo         /* mark VCI free in the VCI bitmap of the computer */
     2     yanzuo         DECISION jic_ptr->half_conn(ep_idx).vci;
     2     yanzuo           ( >= jig_limits__t_min_vci_c ):
   189    lifsong             TASK bit_idx := convert_vci_to_bitmap_pos__r(comp_ptr, jic_ptr->half_conn(ep_idx).vci);
     2     yanzuo             TASK bptr := @jibfil_ptr__r( comp_ptr->vci_bitmap_idx )->
     2     yanzuo                  bitmap( bit_idx >> 3 );
     2     yanzuo             TASK $bptr := $bptr & ~(1 << (bit_idx & 7));
     2     yanzuo         ENDDECISION;
     2     yanzuo         /* if NRT connection, mark xconn-id free */
     2     yanzuo         DECISION ( jic_ptr->serv_cat = int_serv_cat_t_i_nrt_mnw_c ) AND
     2     yanzuo                  ( jii_ptr->cluster_idx /= alp_cluster_idx__t_invalid_c );
     2     yanzuo           ( T ):
     2     yanzuo             DECISION jic_ptr->half_conn(ep_idx).xconn_id;
     2     yanzuo               ( >= jig_limits__t_min_xcid_c ):
     2     yanzuo                 TASK bit_idx := dword( jic_ptr->half_conn(ep_idx).xconn_id -
     2     yanzuo                      jig_limits__t_min_xcid_c );
     2     yanzuo                 TASK bptr := @jiafil_ptr__r( jii_ptr->cluster_idx )->
     2     yanzuo                      res_alp_xcids( bit_idx >> 3 );
     2     yanzuo                 TASK $bptr := $bptr & ~(1 << (bit_idx & 7));
     2     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK ep_idx := ep_idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK memset( bytepointer( jic_ptr ), 0, SIZEOF( $jic_ptr ));
     2     yanzuo ENDPROCEDURE jii_wipe_conn_rec__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_delete_local_record__r;
     2     yanzuo /*
     2     yanzuo  * Remove the given record from JIIFIL.
     2     yanzuo  * Adjust other data which may be linked to the removed record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  rec_idx          jiifil_idx__t;
     2     yanzuo DCL
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     co_unit_ptr          jiifil_ptr__t,
     2     yanzuo     co_unit_addr         phys_address_t,
     2     yanzuo     proc_idx             byte,
     2     yanzuo     jic_idx              dword,
     2     yanzuo     jic_ptr              jicfil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK jii_ptr := jiifil_ptr__r( rec_idx );
   856   huantang 
   869     z7zhou    /* Remove the connections of the unit from JICFIL and
     2     yanzuo   * mark free the associated VCCs and xconn-ids. */
     2     yanzuo   TASK jic_idx := 1,
     2     yanzuo        jic_ptr := jicfil_ptr__r( jic_idx );
     2     yanzuo   WHILE jic_idx <= jig_limits__t_n_conns_c;
     2     yanzuo     DECISION jic_ptr->toelib_conn_id;
     2     yanzuo       ( /= 0 ):
     2     yanzuo         TASK proc_idx := 0;
     2     yanzuo         WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
     2     yanzuo           DECISION jii_ptr->procs(proc_idx).phys_addr;
     2     yanzuo             ( jic_ptr->half_conn(0).comp, jic_ptr->half_conn(1).comp ):
     2     yanzuo               CALL jii_wipe_conn_rec__r( jic_ptr );
     2     yanzuo               TASK proc_idx := jiifil__t_n_comp_per_unit_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK proc_idx := proc_idx + 1;
     2     yanzuo         ENDWHILE;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK jic_idx := jic_idx + 1;
     2     yanzuo     TASK jic_ptr := ADDPTR( jic_ptr, 1 );
     2     yanzuo   ENDWHILE;
     2     yanzuo   /* if alp unit record is being removed, remove links to it */
     2     yanzuo   DECISION jii_ptr->is_level1_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       TASK co_unit_addr := jii_ptr->co_alp_unit_phys_addr;
     2     yanzuo       CALL trim_alp_cluster__r( jii_ptr->cluster_idx,
     2     yanzuo            jii_ptr->procs(0).phys_addr );
     2     yanzuo       DECISION jii_find_computer__r( co_unit_addr, co_unit_ptr,
     2     yanzuo                dummy_comp_ptr, dummy_jii_ptr );
     2     yanzuo         ( T ):
     2     yanzuo           TASK co_unit_ptr->is_wo_unit            := T,
     2     yanzuo                co_unit_ptr->co_alp_unit_updated   := F,
     2     yanzuo                co_unit_ptr->co_alp_unit_phys_addr :=
     2     yanzuo                computer_t_phys_invalid_c;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK proc_idx := 0;
     2     yanzuo   WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
     2     yanzuo     DECISION valid_addr__r( jii_ptr->procs(proc_idx).phys_addr );
     2     yanzuo       ( T ):
     2     yanzuo         CALL init_vci_bitmap__r(
     2     yanzuo              jibfil_ptr__r( jii_ptr->procs(proc_idx).vci_bitmap_idx ));
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK proc_idx := proc_idx + 1;
     2     yanzuo   ENDWHILE;
   869     z7zhou 
   869     z7zhou    CALL jii_delete_index_table__r($jii_ptr);
     2     yanzuo   /* mark the record free. */
     2     yanzuo   TASK jii_ptr->rec_idx := 0;
     2     yanzuo ENDPROCEDURE jii_delete_local_record__r;
     2     yanzuo 
     2     yanzuo 
   685    lifsong /**********************************************************************/
   773   huantang PROCEDURE flexi_mqpu_check__r;
   685    lifsong /*
   685    lifsong   When slave is in EX state, mater restart won't cause slave channel broken.
   685    lifsong */
   685    lifsong FPAR
   685    lifsong    IN    in_unit_type   unit_type_t;
   685    lifsong 
   685    lifsong RETURNS
   685    lifsong    bool;
   685    lifsong 
   685    lifsong START;
   685    lifsong    DECISION in_unit_type;
   685    lifsong    (unit_type_t_a2su_c, unit_type_t_dmcu_c, unit_type_t_tcu_c):
   685    lifsong       RETURN T;
   685    lifsong    ENDDECISION;
   685    lifsong    RETURN F;
   773   huantang ENDPROCEDURE flexi_mqpu_check__r;
   685    lifsong 
   685    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE mpqu_check__r;
     2     yanzuo /*
     2     yanzuo  * Check if the target unit is mpqu or not
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN    in_unit_type   unit_type_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION in_unit_type;
     2     yanzuo    (unit_type_t_a2su_c, unit_type_t_dmcu_c, unit_type_t_niwu_c,
     2     yanzuo    unit_type_t_tcu_c, unit_type_t_iws1e_c, unit_type_t_iws1t_c):
     2     yanzuo       RETURN T;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN F;
     2     yanzuo ENDPROCEDURE mpqu_check__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE one_pqu_check__r;
     2     yanzuo /*
     2     yanzuo  * Check if the target unit is 1pqu
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN    in_unit_type   unit_type_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    DECISION in_unit_type;
     2     yanzuo    (unit_type_t_ster_c, unit_type_t_vetgr_c, unit_type_t_etgr_c,
     2     yanzuo    unit_type_t_a2sp_c, unit_type_t_dmpg_c, unit_type_t_tpg_c):
     2     yanzuo       RETURN T;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN F;
     2     yanzuo ENDPROCEDURE one_pqu_check__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE bitmap_first_free__r;
     2     yanzuo /*
     2     yanzuo  * Scan the given bitmap from the given position and return
     2     yanzuo  * first free value encountered.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      bm_ptr       bytepointer,
     2     yanzuo     IN      lowest_value dword,
     2     yanzuo     IN      bm_size      dword, /* Total number of bits in the bitmap */
   600     qinggu     IN/OUT  pos_para     word;  /* Start position. Normally between
     2     yanzuo                                    lowest_value..lowest_value+bm_size-1.
     2     yanzuo                                    Values less than lowest_value mean
     2     yanzuo                                    that scanning is started from the
     2     yanzuo                                    beginning of the bitmap. */
     2     yanzuo RETURNS
     2     yanzuo     dword;
     2     yanzuo 
   600     qinggu DCL
  1437       pshu   bv, pos, blockbits  dword;
   600     qinggu 
     2     yanzuo START;
   600     qinggu   TASK pos := pos_para;
     2     yanzuo   DECISION pos;
     2     yanzuo     ( < lowest_value ):
     2     yanzuo       TASK pos := lowest_value;
     2     yanzuo     ( >= lowest_value + bm_size ):
     2     yanzuo       TASK pos := lowest_value + bm_size;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* convert 'pos' to range 0..bm_size */
     2     yanzuo   TASK pos := word( pos - lowest_value );
   600     qinggu 
   600     qinggu   /* set up bit mask to block lower-than-wanted bits:
   600     qinggu       pos&7==0 ==> mask is 0
   600     qinggu       pos&7==1 ==> mask is 0x1, ..., pos&7==7 ==> mask is 0x7F */  
   600     qinggu  TASK blockbits := dword((1 << (pos & 7)) - 1);
   600     qinggu 
   600     qinggu   /* scan 32 bits at a time until zero bit found */
   600     qinggu   WHILE (pos & 0xFFFFFFF8) + 32 <= bm_size AND
   600     qinggu         (blockbits | $dword_ptr__t(ADDPTR(bm_ptr, pos>>3))) = 0xFFFFFFFF;
   600     qinggu     TASK pos := (pos & 0xFFFFFFF8) + 32,
   600     qinggu          blockbits := 0;
   600     qinggu   ENDWHILE;
   600     qinggu   /* scan 8 bits at a time until zero bit found */
   600     qinggu   WHILE (pos & 0xFFFFFFF8) + 8 <= bm_size AND
   600     qinggu         (blockbits | $ADDPTR(bm_ptr, pos>>3)) = 0xFF;
   600     qinggu     TASK pos := (pos & 0xFFFFFFF8) + 8,
   600     qinggu          blockbits := 0;
   600     qinggu   ENDWHILE;
   600     qinggu 
   600     qinggu   DECISION pos < bm_size;
   600     qinggu   (T):
   600     qinggu     TASK bv := $ADDPTR(bm_ptr, pos>>3);
   600     qinggu     
   600     qinggu     WHILE pos < bm_size;
   600     qinggu       DECISION bv & (1 << (pos & 7));
   600     qinggu       (0):
     2     yanzuo         OUT scan_bitmap;
   600     qinggu       ENDDECISION;
   600     qinggu       TASK pos := pos + 1;
   600     qinggu 
   600     qinggu       DECISION (pos & 7) = 0 AND pos < bm_size;
   600     qinggu       (T):
   600     qinggu         TASK bv := $ADDPTR(bm_ptr, pos>>3);
   600     qinggu       ENDDECISION;
   600     qinggu     ENDWHILE scan_bitmap;
   600     qinggu   ENDDECISION;
   600     qinggu 
     2     yanzuo   /* convert pos back to nominal range and add 1 so that the
   600     qinggu    * next search starts from the next value instead of
   600     qinggu    * the one we are now returning.
   600     qinggu    */
   600     qinggu   TASK pos_para := pos + lowest_value + 1;
   600     qinggu   RETURN word( pos_para - 1 );
     2     yanzuo ENDPROCEDURE bitmap_first_free__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE add_if_id_to_bitmap__r;
     2     yanzuo /*
     2     yanzuo  * Turn on in the given bitmap the bit representing the specified
     2     yanzuo  * interface id.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  bitmap       interface_id_bitmap__t,
     2     yanzuo     IN      intf_id      word;
     2     yanzuo DCL
     2     yanzuo     ptr  bytepointer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION ( intf_id >= jig_limits__t_min_if_id_c ) AND
     2     yanzuo            ( intf_id <= jig_limits__t_max_if_id_c );
     2     yanzuo     ( T ):
     2     yanzuo       TASK ptr := ADDPTR( bytepointer( @bitmap ), intf_id >> 3 );
     2     yanzuo       TASK $ptr := $ptr | ( 1 << ( intf_id & 7 ));
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE add_if_id_to_bitmap__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE is_redundant_ipniu__r;
     2     yanzuo /*
     2     yanzuo  * This procedure checks if unit is redundant IP-NIU
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR IN/OUT unit_type      unit_type_t;
     2     yanzuo  RETURNS bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION unit_type;
     2     yanzuo     (unit_type_t_ipgop_c, unit_type_t_ipgep_c, unit_type_t_ipfep_c, unit_type_t_ips1p_c):
     2     yanzuo       RETURN T;
     2     yanzuo     ELSE:
     2     yanzuo       RETURN F;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE is_redundant_ipniu__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   359    lifsong PROCEDURE is_redundant_eipu_unit__r;
   206    lifsong /*
   359    lifsong  * This procedure checks if unit is redundant NPGEP, NPS1P or IWSE/TP
   206    lifsong  *
   206    lifsong  **************************************************************************/
   206    lifsong FPAR IN/OUT unit_type      unit_type_t;
   206    lifsong  RETURNS bool;
   206    lifsong 
   206    lifsong START;
   206    lifsong   DECISION unit_type;
   359    lifsong     (unit_type_t_npgep_c, unit_type_t_nps1p_c, unit_type_t_iwsep_c, unit_type_t_iwstp_c):
   206    lifsong       RETURN T;
   206    lifsong     ELSE:
   206    lifsong       RETURN F;
   206    lifsong   ENDDECISION;
   359    lifsong ENDPROCEDURE is_redundant_eipu_unit__r;
   206    lifsong 
   206    lifsong /**************************************************************************/
  1213   huantang PROCEDURE inquire_piu_name__r;
     2     yanzuo FPAR
  1172   weigchen    IN unit_type                 unit_type_t,         /* Unit type at parent level  */
  1172   weigchen    IN unit_index                unit_index_t,
  1172   weigchen    IN/OUT unit_name      piuname_t;
  1172   weigchen    
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     l_start_from           dword := hwi_first_search_c,
     2     yanzuo     l_piu_type             piu_type_t,
     2     yanzuo     l_piu_index_search_key piu_index_t,
     2     yanzuo     l_piu_loc_search_key   piu_coordinate_lib_a_t,
     2     yanzuo     l_hms_loc_search_key   piu_hms_id_lib_a_t,
     2     yanzuo     l_unit_piu_search_key  unit_id_lib_a_t,
     2     yanzuo     l_piu_data             piu_data_lib_a_t,
     2     yanzuo     l_piu_loc_data         piu_coordinate_lib_a_t,
     2     yanzuo     l_piu_hms_data         piu_hms_id_lib_a_t,
  1172   weigchen     /*l_name                 piuname_t,*/
  1222      tinyu     l_status               error_t:=success_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     /* Initial data */
     2     yanzuo    TASK memset( bytepointer(@l_piu_type), 0xff, SIZEOF(l_piu_type) );
     2     yanzuo    TASK memset( bytepointer(@l_piu_index_search_key), 0xff, SIZEOF(l_piu_index_search_key) );
     2     yanzuo    TASK memset( bytepointer(@l_piu_loc_search_key), 0xff, SIZEOF(l_piu_loc_search_key) );
     2     yanzuo    TASK memset( bytepointer(@l_hms_loc_search_key), 0xff, SIZEOF(l_hms_loc_search_key) );
     2     yanzuo    TASK memset( bytepointer(@l_unit_piu_search_key), 0xff, SIZEOF(l_unit_piu_search_key) );
     2     yanzuo    TASK memset( bytepointer(@l_piu_data), 0xff, SIZEOF(l_piu_data));
     2     yanzuo    TASK memset( bytepointer(@l_piu_loc_data), 0xff, SIZEOF(l_piu_loc_data) );
     2     yanzuo    TASK memset( bytepointer(@l_piu_hms_data), 0xff, SIZEOF(l_piu_hms_data) );
  1172   weigchen    TASK memset( bytepointer(@unit_name), 0xff, SIZEOF(unit_name));
  1172   weigchen       
  1172   weigchen    TASK l_unit_piu_search_key.unit_type  := unit_type,
  1172   weigchen         l_unit_piu_search_key.unit_index := unit_index;
     2     yanzuo    TASK l_status := hwi_piu_data_a_r ( l_start_from,
     2     yanzuo                                        l_piu_type,
     2     yanzuo                                        l_piu_index_search_key,
     2     yanzuo                                        l_piu_loc_search_key,
     2     yanzuo                                        l_hms_loc_search_key,
     2     yanzuo                                        l_unit_piu_search_key,
     2     yanzuo                                        piu_data_lib_a_ptr_t(@l_piu_data),
     2     yanzuo                                        piu_coordinate_lib_a_ptr_t(@l_piu_loc_data),
     2     yanzuo                                        piu_hms_id_lib_a_ptr_t(@l_piu_hms_data ) );
  1172   weigchen    DECISION l_status;
  1172   weigchen    ( /= success_ec ):
  1172   weigchen       TASK dxsyslog_r( log_type_t_text_e_c,
  1172   weigchen                       @'JIGDAT: fail to get piu data'
  1213   huantang                        'Procedure: inquire_piu_name__r'
  1172   weigchen                        'Unit Type: 0X%X, Status: 0X%X, HMS Address: %X %X %X',
  1172   weigchen                         l_piu_data.piu_type, l_status,
  1172   weigchen                         l_piu_hms_data.rack_hms_index, l_piu_hms_data.subrack_hms_index, l_piu_hms_data.hms_ppa );
  1172   weigchen    RETURN F;
  1172   weigchen    ENDDECISION;
     2     yanzuo 
  1172   weigchen    TASK l_status := hwi_piu_name_by_type_r (l_piu_data.piu_type, unit_name);
  1172   weigchen 
     2     yanzuo    DECISION l_status;
     2     yanzuo    ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
  1172   weigchen                       @'JIGDAT: fail to get piu name'
  1213   huantang                        'Procedure: inquire_piu_name__r'
     2     yanzuo                        'Unit Type: 0X%X, Status: 0X%X, HMS Address: %X %X %X',
     2     yanzuo                         l_piu_data.piu_type, l_status,
     2     yanzuo                         l_piu_hms_data.rack_hms_index, l_piu_hms_data.subrack_hms_index, l_piu_hms_data.hms_ppa );
  1172   weigchen    RETURN F;
     2     yanzuo    ENDDECISION;
  1172   weigchen 
  1172   weigchen 
  1172   weigchen    RETURN T;
  1213   huantang ENDPROCEDURE inquire_piu_name__r;
  1172   weigchen 
  1465       pshu 
  1465       pshu PROCEDURE get_piu_data_by_fu__r;
  1465       pshu FPAR
  1465       pshu    IN      unit_type     unit_type_t,         /* Unit type at parent level  */
  1465       pshu    IN      unit_index    unit_index_t,
  1465       pshu    IN/OUT  piu_data      piu_data_lib_a_t;
  1465       pshu    
  1465       pshu RETURNS
  1465       pshu    bool;
  1465       pshu 
  1465       pshu DCL
  1465       pshu     l_start_from           dword := hwi_first_search_c,
  1465       pshu     l_piu_type             piu_type_t,
  1465       pshu     l_piu_index_search_key piu_index_t,
  1465       pshu     l_unit_name                 piuname_t,
  1465       pshu     l_piu_loc_search_key   piu_coordinate_lib_a_t,
  1465       pshu     l_hms_loc_search_key   piu_hms_id_lib_a_t,
  1465       pshu     l_unit_piu_search_key  unit_id_lib_a_t,
  1465       pshu     l_piu_loc_data         piu_coordinate_lib_a_t,
  1465       pshu     l_piu_hms_data         piu_hms_id_lib_a_t,
  1465       pshu     l_status               error_t;
  1465       pshu 
  1465       pshu START;
  1465       pshu     /* Initial data */
  1465       pshu    TASK memset( bytepointer(@l_piu_type), 0xff, SIZEOF(l_piu_type) );
  1465       pshu    TASK memset( bytepointer(@l_piu_index_search_key), 0xff, SIZEOF(l_piu_index_search_key) );
  1465       pshu    TASK memset( bytepointer(@l_piu_loc_search_key), 0xff, SIZEOF(l_piu_loc_search_key) );
  1465       pshu    TASK memset( bytepointer(@l_hms_loc_search_key), 0xff, SIZEOF(l_hms_loc_search_key) );
  1465       pshu    TASK memset( bytepointer(@l_unit_piu_search_key), 0xff, SIZEOF(l_unit_piu_search_key) );
  1465       pshu    TASK memset( bytepointer(@piu_data), 0xff, SIZEOF(piu_data));
  1465       pshu    TASK memset( bytepointer(@l_piu_loc_data), 0xff, SIZEOF(l_piu_loc_data) );
  1465       pshu    TASK memset( bytepointer(@l_piu_hms_data), 0xff, SIZEOF(l_piu_hms_data) );
  1465       pshu    TASK memset( bytepointer(@l_unit_name), 0xff, SIZEOF(l_unit_name));
  1465       pshu       
  1465       pshu    TASK l_unit_piu_search_key.unit_type  := unit_type,
  1465       pshu         l_unit_piu_search_key.unit_index := unit_index;
  1465       pshu    TASK l_status := hwi_piu_data_a_r ( l_start_from,
  1465       pshu                                        l_piu_type,
  1465       pshu                                        l_piu_index_search_key,
  1465       pshu                                        l_piu_loc_search_key,
  1465       pshu                                        l_hms_loc_search_key,
  1465       pshu                                        l_unit_piu_search_key,
  1465       pshu                                        piu_data_lib_a_ptr_t(@piu_data),
  1465       pshu                                        piu_coordinate_lib_a_ptr_t(@l_piu_loc_data),
  1465       pshu                                        piu_hms_id_lib_a_ptr_t(@l_piu_hms_data ) );
  1465       pshu    DECISION l_status;
  1465       pshu    ( /= success_ec ):
  1465       pshu       TASK dxsyslog_r( log_type_t_text_e_c,
  1465       pshu                       @'JIGDAT: fail to get piu data'
  1465       pshu                        'Procedure: get_piu_piu_data_by_fu__r'
  1465       pshu                        'Unit Type: 0X%X, Status: 0X%X, HMS Address: %X %X %X',
  1465       pshu                         piu_data.piu_type, l_status,
  1465       pshu                         l_piu_hms_data.rack_hms_index, l_piu_hms_data.subrack_hms_index, l_piu_hms_data.hms_ppa );
  1465       pshu        RETURN F;
  1465       pshu    ENDDECISION;
  1465       pshu 
  1465       pshu    RETURN  T;
  1465       pshu  
  1465       pshu ENDPROCEDURE get_piu_data_by_fu__r;  
  1465       pshu 
  1465       pshu 
  1465       pshu 
  1465       pshu 
  1213   huantang PROCEDURE is_cdsp_dh__r;
  1213   huantang FPAR
  1213   huantang 	IN      unit_type  unit_type_t,
  1213   huantang 	IN      unit_index unit_index_t;
  1213   huantang RETURNS
  1213   huantang 	bool;
  1213   huantang DCL
  1213   huantang     l_name                 piuname_t;
  1172   weigchen 
  1213   huantang START;
  1213   huantang    DECISION inquire_piu_name__r(unit_type , unit_index, l_name);
  1213   huantang    ( F ):
  1213   huantang    	 TASK dxsyslog_r( log_type_t_text_e_c,
  1213   huantang                       @'JIGDAT: fail to get piu name'
  1213   huantang                        'Procedure: is_cdsp_dh__r'
  1213   huantang                        'Unit Type: 0X%X Unit Index: %d',
  1213   huantang                         unit_type, unit_index);
  1213   huantang    	RETURN F;
  1213   huantang    ENDDECISION;
  1213   huantang    DECISION memcmp(bytepointer(@l_name.piu_name),bytepointer(@'CDSP_DH'),7)  ;
  1213   huantang    ( /= 0 ):
  1213   huantang       RETURN F;
  1213   huantang    ENDDECISION;
  1172   weigchen 
  1213   huantang    RETURN T;
  1172   weigchen 
  1213   huantang ENDPROCEDURE is_cdsp_dh__r;
  1213   huantang 
  1213   huantang 
  1172   weigchen /**************************************************************************/
  1172   weigchen PROCEDURE inquire_app_mxu_1g6a_unit__r;
  1172   weigchen /*
  1172   weigchen  * Check the app unit.
  1172   weigchen  **************************************************************************/
  1172   weigchen FPAR
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t;
  1172   weigchen 
  1172   weigchen RETURNS
  1172   weigchen    bool;
  1172   weigchen 
  1172   weigchen DCL
  1172   weigchen 
  1172   weigchen     l_name                 piuname_t;
  1172   weigchen 
  1172   weigchen START;
  1172   weigchen 
  1217       j2he    DECISION inquire_piu_name__r (unit_type, unit_index, l_name);
  1172   weigchen    ( F ):
  1172   weigchen       TASK dxsyslog_r( log_type_t_text_e_c,
  1172   weigchen                       @'JIGDAT: fail to get MX1G6 piu name'
  1172   weigchen                        'Procedure: inquire_app_mxu_1g6a_unit__r');
  1172   weigchen       RETURN F;
  1172   weigchen    ENDDECISION;
  1172   weigchen 
  1172   weigchen    DECISION memcmp(bytepointer(@l_name.piu_name),bytepointer(@'MX1G6_A'), 7) = 0;
  1172   weigchen     ( F):
  1172   weigchen      RETURN F;
  1172   weigchen    ENDDECISION;
  1172   weigchen 
  1172   weigchen    RETURN T;
  1172   weigchen ENDPROCEDURE inquire_app_mxu_1g6a_unit__r;
  1172   weigchen 
  1172   weigchen /**************************************************************************/
  1172   weigchen PROCEDURE inquire_app_mxu_unit__r;
  1172   weigchen /*
  1172   weigchen  * Check the app unit.
  1172   weigchen  **************************************************************************/
  1172   weigchen FPAR
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t;
  1172   weigchen 
  1172   weigchen RETURNS
  1172   weigchen    bool;
  1172   weigchen 
  1172   weigchen DCL
  1172   weigchen 
  1172   weigchen     l_name                 piuname_t,
  1172   weigchen     l_is_app_unit          bool;
  1172   weigchen 
  1172   weigchen START;
  1172   weigchen 
  1217       j2he    DECISION inquire_piu_name__r (unit_type, unit_index, l_name);
  1172   weigchen    ( F ):
  1172   weigchen       TASK dxsyslog_r( log_type_t_text_e_c,
  1172   weigchen                       @'JIGDAT: fail to get name'
  1172   weigchen                        'Procedure: inquire_app_mxu_unit__r');
  1172   weigchen        RETURN F;
  1172   weigchen    ENDDECISION;
  1172   weigchen 
  1172   weigchen 
    54     yanzuo    DECISION memcmp(bytepointer(@l_name.piu_name),bytepointer(@'MX1G6   '),SIZEOF(l_name.piu_name)) /= 0 AND
    54     yanzuo             memcmp(bytepointer(@l_name.piu_name),bytepointer(@'MX1G6_A '),SIZEOF(l_name.piu_name)) /= 0;
    54     yanzuo    ( T ):
     2     yanzuo       TASK l_is_app_unit := F;
   200      fegao       
     2     yanzuo    ELSE:
     2     yanzuo       TASK l_is_app_unit := T;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN l_is_app_unit;
     2     yanzuo ENDPROCEDURE inquire_app_mxu_unit__r;
     2     yanzuo 
    38    lifsong 
     2     yanzuo /**************************************************************************/
    38    lifsong PROCEDURE is_sf10e__r;
    38    lifsong /*
    38    lifsong  * Check the sfu unit.
    38    lifsong  **************************************************************************/
    38    lifsong FPAR
    38    lifsong    IN in_sfu_index   unit_index_t;
    38    lifsong 
    38    lifsong RETURNS
    38    lifsong    bool;
    38    lifsong 
    38    lifsong DCL
  1172   weigchen 
    38    lifsong     l_name                 piuname_t,
    38    lifsong     l_is_sf10e_unit        bool;
    38    lifsong 
    38    lifsong START;
    38    lifsong 
  1213   huantang    DECISION inquire_piu_name__r (unit_type_t_sfu_c, in_sfu_index, l_name);
  1172   weigchen    ( F ):
    38    lifsong       TASK dxsyslog_r( log_type_t_text_e_c,
  1172   weigchen                       @'JIGDAT: fail to get name'
  1172   weigchen                        'Procedure: is_sf10e__r');
  1172   weigchen        RETURN F;
    38    lifsong    ENDDECISION;
    38    lifsong 
    38    lifsong    DECISION memcmp(bytepointer(@l_name.piu_name),bytepointer(@'SF10E   '),SIZEOF(l_name.piu_name));
    38    lifsong    ( /= 0):
    38    lifsong       TASK l_is_sf10e_unit := F;
    38    lifsong    ELSE:
    38    lifsong       TASK l_is_sf10e_unit := T;
    38    lifsong    ENDDECISION;
    38    lifsong 
    38    lifsong    RETURN l_is_sf10e_unit;
    38    lifsong ENDPROCEDURE is_sf10e__r;
    38    lifsong 
  1420       pshu PROCEDURE is_to_center_node__r;
  1420       pshu FPAR
  1420       pshu 	IN local_computer  phys_address_t,
  1420       pshu 	IN remot_computer  phys_address_t;
  1420       pshu RETURNS 
  1420       pshu    bool;
  1420       pshu DCL
  1420       pshu    center1   phys_address_t,
  1420       pshu    center2   phys_address_t,
  1420       pshu    error       error_t;
  1420       pshu START;
  1420       pshu     TASK error := get_center_node_addr__r(local_computer,center1,center2);
  1420       pshu 	DECISION(error);
  1420       pshu 	(success_ec):
  1420       pshu 	    RETURN ((center1= remot_computer) OR (center2= remot_computer));
  1420       pshu 	ELSE:
  1420       pshu 		RETURN F;
  1420       pshu 	ENDDECISION;
  1420       pshu ENDPROCEDURE is_to_center_node__r;
  1420       pshu 
  1420       pshu 
  1420       pshu 
   120    lifsong /******************************************************************************/
   216      h10hu PROCEDURE need_diff_priority_nrt_conns__r;
   120    lifsong /* check if the unit need create different priority for nrt conns
   120    lifsong ******************************************************************************/
   120    lifsong FPAR
   120    lifsong     IN  unit_type         unit_type_t;
   120    lifsong RETURNS
   120    lifsong     bool;
    38    lifsong 
   120    lifsong START;
   120    lifsong 
   120    lifsong     DECISION unit_type;
   617     qinggu     (unit_type_t_cacu_c,unit_type_t_rsmu_c,unit_type_t_cm_c, unit_type_t_mxu_c,
   359    lifsong      unit_type_t_npge_c, unit_type_t_npgep_c, unit_type_t_nps1_c, unit_type_t_nps1p_c, unit_type_t_iwse_c,
   440     z7zhou      unit_type_t_iwsep_c, unit_type_t_iwst_c, unit_type_t_iwstp_c, unit_type_t_npu_c, unit_type_t_ss7u_c, 
   440     z7zhou      unit_type_t_npup_c,unit_type_t_ss7up_c, unit_type_t_nip1_c ):
   120    lifsong         RETURN F;
   120    lifsong     ELSE:
   120    lifsong         RETURN T;
   120    lifsong     ENDDECISION;        
   120    lifsong 
   216      h10hu ENDPROCEDURE need_diff_priority_nrt_conns__r;
   120    lifsong 
    38    lifsong /**************************************************************************/
   617     qinggu PROCEDURE need_create_dsp_conns__r;
   617     qinggu /* check if there is DSP connections needing created for the unit
   617     qinggu ***************************************************************************/
   617     qinggu FPAR
   617     qinggu     IN  phys_addr       computer_t;
   617     qinggu RETURNS
   617     qinggu     bool;
   617     qinggu DCL
   617     qinggu     comps_ptr           computer_list_ptr__t,
   617     qinggu     comps_buf           computer_buf__t,
   660     qinggu     ec                  error_t,
   660     qinggu     i                   dword,
   660     qinggu     addr                computer_t;
   617     qinggu 
   617     qinggu START;
   617     qinggu 
   617     qinggu     TASK comps_ptr :=  computer_list_ptr__t(@comps_buf);
   617     qinggu     TASK ec := topo_dsp_of_comp_r( phys_addr, sizeof(computer_buf__t), $comps_ptr );
   617     qinggu 
   617     qinggu     DECISION ec ;
   617     qinggu      ( success_ec ):
   617     qinggu         DECISION ( comps_ptr->item_count /= 0 );
   660     qinggu         ( T ):
   617     qinggu             RETURN ( T );
   617     qinggu         ENDDECISION;
   617     qinggu      ELSE:
   617     qinggu         TASK dxsyslog_r( log_type_t_text_e_c,
   660     qinggu                       @'JIGDAT: need_create_dsp_conns__r topo_dsp_of_comp_r(%X) fails %X',
   617     qinggu                       phys_addr, ec );
   617     qinggu         RETURN F;
   617     qinggu     ENDDECISION;
   617     qinggu 
   660     qinggu     TASK ec := connected_computers_r( phys_addr, sizeof(computer_buf__t), $comps_ptr );
   660     qinggu     DECISION ec /= success_ec;
   660     qinggu     ( T ):
   660     qinggu         TASK dxsyslog_r( log_type_t_text_e_c,
   660     qinggu                       @'JIGDAT: need_create_dsp_conns__r connected_computers_r(%X) fails %X',
   660     qinggu                       phys_addr, ec );
   660     qinggu         RETURN F;
   660     qinggu     ENDDECISION;
   660     qinggu 
   660     qinggu     TASK i := 0;
   660     qinggu     WHILE ( i < comps_ptr->item_count );
   660     qinggu       TASK addr := $ADDPTR( comps_ptr->computer_list, i );
   660     qinggu       DECISION (addr > computer_t_max_phys_addr_c );
   660     qinggu       ( T ):
   660     qinggu         RETURN T;
   660     qinggu       ENDDECISION;
   660     qinggu       
   660     qinggu       TASK i := i + 1;
   660     qinggu     ENDWHILE search_dsp;
   660     qinggu 
   660     qinggu     RETURN F;
   660     qinggu 
   617     qinggu ENDPROCEDURE need_create_dsp_conns__r;
   617     qinggu 
   617     qinggu /**************************************************************************/
   359    lifsong PROCEDURE  iw8s1_unit_check__r;
     2     yanzuo /*
   359    lifsong  * Check if is iw8s1's functional unit
   359    lifsong  **************************************************************************/
   359    lifsong 
   359    lifsong FPAR 
   359    lifsong     IN unit_type unit_type_t;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong     bool;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong     RETURN  ( unit_type = unit_type_t_iwse_c OR 
   359    lifsong                    unit_type = unit_type_t_iwst_c OR 
   359    lifsong                    unit_type = unit_type_t_iwsep_c OR 
   359    lifsong                    unit_type = unit_type_t_iwstp_c);
   359    lifsong                    
   359    lifsong ENDPROCEDURE iw8s1_unit_check__r;
   359    lifsong 
   359    lifsong /**************************************************************************/
   359    lifsong PROCEDURE eipu_unit_check__r;
   359    lifsong /*
     2     yanzuo  * Check the EIPU unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1222      tinyu    IN      in_alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
   200      fegao 
     2     yanzuo    RETURN ( in_alp_unit.unit_type = unit_type_t_npge_c OR
     2     yanzuo             in_alp_unit.unit_type = unit_type_t_npgep_c OR
     2     yanzuo             in_alp_unit.unit_type = unit_type_t_nps1_c OR
   359    lifsong             in_alp_unit.unit_type = unit_type_t_nps1p_c OR
   359    lifsong             iw8s1_unit_check__r(in_alp_unit.unit_type));
     2     yanzuo 
   359    lifsong ENDPROCEDURE eipu_unit_check__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE app_mxu_unit_check__r;
     2     yanzuo /*
     2     yanzuo  * Check the app unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1349       pshu    IN  in_alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    RETURN (in_alp_unit.is_app_mxu_or_eipu = app_mxu__c);
     2     yanzuo ENDPROCEDURE app_mxu_unit_check__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE app_unit_check__r;
     2     yanzuo /*
     2     yanzuo  * Check the EIPU unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1349       pshu    IN   in_alp_unit     jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    RETURN ( in_alp_unit.is_app_mxu_or_eipu = app_mxu__c OR
     2     yanzuo             in_alp_unit.is_app_mxu_or_eipu = app_eipu__c );
     2     yanzuo 
     2     yanzuo ENDPROCEDURE app_unit_check__r;
     2     yanzuo 
     2     yanzuo PROCEDURE alp1_unit__r;
     2     yanzuo FPAR
     2     yanzuo    IN    in_unit_type     unit_type_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION in_unit_type;
     2     yanzuo     ( unit_type_t_mxu_c,
     2     yanzuo       unit_type_t_nis1_c,  unit_type_t_nis1p_c,
     2     yanzuo       unit_type_t_nis0_c,  unit_type_t_nis0p_c,
     2     yanzuo       unit_type_t_npge_c,  unit_type_t_npgep_c,
     2     yanzuo       unit_type_t_nps1_c,  unit_type_t_nps1p_c,
   359    lifsong       unit_type_t_iwse_c, unit_type_t_iwsep_c,
   359    lifsong       unit_type_t_iwst_c, unit_type_t_iwstp_c,
   561    lifsong       unit_type_t_npu_c, unit_type_t_npup_c,
     2     yanzuo       unit_type_t_ipfe_c,  unit_type_t_ipfep_c,
     2     yanzuo       unit_type_t_ipge_c,  unit_type_t_ipgep_c,
     2     yanzuo       unit_type_t_ipgo_c,  unit_type_t_ipgop_c,
     2     yanzuo       unit_type_t_ips1_c,  unit_type_t_ips1p_c
     2     yanzuo     ):
     2     yanzuo           RETURN T;
     2     yanzuo   ELSE:
     2     yanzuo   			  RETURN F;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE alp1_unit__r;
     2     yanzuo 
   359    lifsong PROCEDURE alp2_unit__r;
   359    lifsong FPAR
   359    lifsong    IN    in_unit_type     unit_type_t;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong    bool;
   359    lifsong 
   359    lifsong START;
   568    lifsong   RETURN ( in_unit_type = unit_type_t_nip1_c );
   359    lifsong ENDPROCEDURE alp2_unit__r;
   359    lifsong 
   359    lifsong PROCEDURE ip_niu_unit__r;
   359    lifsong FPAR
   359    lifsong    IN    in_unit_type     unit_type_t;
   359    lifsong    
   359    lifsong RETURNS
   359    lifsong    bool;
   359    lifsong 
   359    lifsong START;  
   359    lifsong   DECISION in_unit_type;
   359    lifsong    ( unit_type_t_ipfe_c,  unit_type_t_ipfep_c,
   359    lifsong      unit_type_t_ipge_c,  unit_type_t_ipgep_c,
   359    lifsong      unit_type_t_ipgo_c,  unit_type_t_ipgop_c,
   359    lifsong      unit_type_t_ips1_c,  unit_type_t_ips1p_c
   359    lifsong    ):
   359    lifsong       RETURN T;
   359    lifsong    ELSE:
   359    lifsong       RETURN F;
   359    lifsong    ENDDECISION;
   359    lifsong ENDPROCEDURE ip_niu_unit__r;
   359    lifsong 
   459     z7zhou 
   459     z7zhou /******************************************************************************/
   459     z7zhou PROCEDURE ss7u_unit_check__r;
   459     z7zhou /******************************************************************************/
   459     z7zhou FPAR
   459     z7zhou     IN  unit_type         unit_type_t;
   459     z7zhou RETURNS
   459     z7zhou     bool;
   459     z7zhou 
   459     z7zhou START;
   561    lifsong     RETURN (unit_type = unit_type_t_ss7u_c OR unit_type = unit_type_t_ss7up_c);
   561    lifsong ENDPROCEDURE ss7u_unit_check__r;
   459     z7zhou 
   561    lifsong /******************************************************************************/
   561    lifsong PROCEDURE npu_unit_check__r;
   561    lifsong /******************************************************************************/
   561    lifsong FPAR
   561    lifsong     IN  unit_type         unit_type_t;
   561    lifsong RETURNS
   561    lifsong     bool;
   459     z7zhou 
   561    lifsong START;
   561    lifsong     RETURN (unit_type = unit_type_t_npu_c OR unit_type = unit_type_t_npup_c);
   561    lifsong ENDPROCEDURE npu_unit_check__r;
   459     z7zhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE classify__r;
     2     yanzuo /*
     2     yanzuo  * Tell which kind of unit we have out of the following three:
     2     yanzuo  *  WO-ALP1 unit, ALP2 unit (=NIP1) or a normal tributary.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1222      tinyu     IN   unit_data  jiifil__t,
  1222      tinyu     IN   proc_index byte,
  1222      tinyu     IN   alp_unit   jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     unit_class__t;
     2     yanzuo 
     2     yanzuo DCL
  1222      tinyu     unit_class  unit_class__t;
     2     yanzuo 
     2     yanzuo START;
  1222      tinyu    TASK unit_class := unit_class__t_apc_trib_c;
     2     yanzuo    DECISION app_mxu_unit_check__r( alp_unit );
     2     yanzuo    ( T ):
     2     yanzuo       TASK unit_class := unit_class__t_app_trib_c;
     2     yanzuo    ENDDECISION;
   359    lifsong    DECISION unit_data.is_level1_alp_unit AND unit_data.is_wo_unit AND proc_index = 0;
     2     yanzuo    ( T ):
     2     yanzuo      TASK unit_class := unit_class__t_alp1_c;
     2     yanzuo    ENDDECISION;
     2     yanzuo    DECISION unit_data.is_level2_alp_unit;
     2     yanzuo    ( T ):
     2     yanzuo       TASK unit_class := unit_class__t_alp2_c;
     2     yanzuo    ENDDECISION;
     2     yanzuo    DECISION ( app_mxu_unit_check__r( unit_data ) OR
     2     yanzuo               eipu_unit_check__r( unit_data ))
   359    lifsong               AND ( NOT unit_data.is_wo_unit ) AND proc_index = 0;
     2     yanzuo    ( T ):
     2     yanzuo       TASK unit_class := unit_class__t_sp_app_c;
     2     yanzuo    ENDDECISION;
   359    lifsong    DECISION iw8s1_unit_check__r(unit_data.unit_type) AND proc_index = 1;
   359    lifsong    ( T ):
   482      h10hu       TASK unit_class := unit_class__t_eipu_trib_c;
   359    lifsong    ENDDECISION;
   359    lifsong    
     2     yanzuo    RETURN unit_class;
     2     yanzuo ENDPROCEDURE classify__r;
     2     yanzuo 
   359    lifsong PROCEDURE set_if_idx_by_mphy_num__r;
   359    lifsong FPAR
   359    lifsong     IN/OUT  rec_ptr  jiifil_ptr__t,
   359    lifsong     IN  mphy_number byte;
   359    lifsong 
   359    lifsong START;
   359    lifsong     DECISION mphy_number = 4;
   359    lifsong     ( T ):
   359    lifsong        /* the target unit is MPQU with 4 utopias */
   359    lifsong        /* map processors to interfaces */
   359    lifsong        TASK rec_ptr->procs(0).interface_index := 0,
   359    lifsong                rec_ptr->procs(1).interface_index := 1,
   359    lifsong                rec_ptr->procs(2).interface_index := 2,
   359    lifsong           	rec_ptr->procs(3).interface_index := 3;
   359    lifsong      ENDDECISION;
   359    lifsong 
   359    lifsong      DECISION mphy_number = 3;
   359    lifsong      ( T ):
   359    lifsong         /* the target unit is iws1 with 3 utopias */
   359    lifsong         /* map processors to interfaces */
   359    lifsong         TASK rec_ptr->procs(0).interface_index := 0,
   359    lifsong                 rec_ptr->procs(1).interface_index := 1,
   359    lifsong                 rec_ptr->procs(2).interface_index := 0,
   359    lifsong            	 rec_ptr->procs(3).interface_index := 2;
   359    lifsong       ENDDECISION;
   359    lifsong 
   359    lifsong       DECISION mphy_number = 2;
   359    lifsong       ( T ):
   359    lifsong          /* the target unit is al2s-b or iws1 or iw8s1 with 2 utopias */
   359    lifsong          /* decide which processors use the 2nd interface: */
   359    lifsong          DECISION iw8s1_unit_check__r(rec_ptr->unit_type);
   359    lifsong          ( T ):
   359    lifsong             TASK rec_ptr->procs(0).interface_index := 0,
   359    lifsong                     rec_ptr->procs(1).interface_index := 1,
   359    lifsong               		rec_ptr->procs(2).interface_index := 0,
   359    lifsong               		rec_ptr->procs(3).interface_index := 0;      
   359    lifsong           ELSE:
   359    lifsong             TASK rec_ptr->procs(0).interface_index := 0,
   359    lifsong              		rec_ptr->procs(1).interface_index := 1,
   359    lifsong               		rec_ptr->procs(2).interface_index := 0,
   359    lifsong               		rec_ptr->procs(3).interface_index := 1;
   359    lifsong           ENDDECISION;
   359    lifsong        ENDDECISION;
   359    lifsong 
   359    lifsong        DECISION mphy_number = 1;
   359    lifsong        ( T ):
   359    lifsong       	TASK rec_ptr->procs(0).interface_index := 0,
   359    lifsong           	   rec_ptr->procs(1).interface_index := 0,
   359    lifsong            	   rec_ptr->procs(2).interface_index := 0,
   359    lifsong            	   rec_ptr->procs(3).interface_index := 0;
   359    lifsong        ENDDECISION;
   359    lifsong ENDPROCEDURE set_if_idx_by_mphy_num__r;
   359    lifsong 
  1433    jinncao PROCEDURE check_is_interface_id_valid;
  1433    jinncao FPAR
  1433    jinncao 	IN      interface_id  word;
  1433    jinncao RETURNS
  1433    jinncao 	error_t;
  1433    jinncao DCL
  1433    jinncao 	result error_t := unsuccessful_ec;
  1433    jinncao 
  1433    jinncao START;
  1433    jinncao 	DECISION (interface_id >= jig_limits__t_min_if_id_c) 
  1433    jinncao 			AND (interface_id <= jig_limits__t_max_if_id_c);
  1433    jinncao 	(T):
  1433    jinncao 		TASK result := success_ec;
  1433    jinncao 	ELSE:
  1433    jinncao 		TASK result := unsuccessful_ec;
  1433    jinncao 	ENDDECISION;
  1433    jinncao 	
  1433    jinncao 	RETURN result;	
  1433    jinncao ENDPROCEDURE check_is_interface_id_valid;
  1433    jinncao 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE select_interface_ids__r;
     2     yanzuo /*
     2     yanzuo  * This procedure searches 1-3 free interface ids and writes
     2     yanzuo  * them to the given record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec_in_file  jiifil__t,
     2     yanzuo     IN      mphy_number  byte,
     2     yanzuo     IN/OUT  result       error_t;
     2     yanzuo 
     2     yanzuo DCL
   256     yanzuo     /* rec                  jiifil__t, */
   256     yanzuo     rec_ptr              jiifil_ptr__t,
   256     yanzuo     pah                  ptr_and_handle_t,
     2     yanzuo     bitmap               interface_id_bitmap__t,
     2     yanzuo     idx                  dword,
     2     yanzuo     n_interf             byte := 1,
     2     yanzuo     found                bool,
     2     yanzuo     intf_id              word,
     2     yanzuo     key                  jii_search_key__t,
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo 
     2     yanzuo     co_ipe_ptr           jiifil_ptr__t,
     2     yanzuo     co_ipe_comp_ptr      jii_comp_ptr__t,
     2     yanzuo     co_ipe_alp_ptr       jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     SET single_tl,
     2     yanzuo     msg_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( @bitmap ), 0, SIZEOF( bitmap ));
     2     yanzuo   /* copy the record to temp variable where it is updated */
   256     yanzuo   /* TASK rec := rec_in_file; */
   256     yanzuo   DECISION allocate_buffer_r( SIZEOF( jiifil__t ),
   256     yanzuo                                       0,
   256     yanzuo                                       pah );
   256     yanzuo   ( F ):
   256     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
   256     yanzuo                        @'JIGDAT: select_interface_ids__r error!'
   256     yanzuo                        ' status =%XH',
   256     yanzuo                        buffer_not_available_ec );
   256     yanzuo                        
   256     yanzuo       RETURN;
   256     yanzuo   ENDDECISION;  
   256     yanzuo 
   256     yanzuo   TASK rec_ptr := jiifil_ptr__t( pah.use_ptr.ptr );
   256     yanzuo   TASK memcpy( bytepointer( rec_ptr ),
   256     yanzuo                bytepointer( @rec_in_file),
   256     yanzuo                SIZEOF( jiifil__t ));
   256     yanzuo 
   359    lifsong   TASK set_if_idx_by_mphy_num__r(rec_ptr, mphy_number);
   359    lifsong   TASK n_interf := mphy_number;
   359    lifsong   DECISION rec_ptr->is_level2_alp_unit;
     2     yanzuo   ( T ):
   359    lifsong      TASK n_interf := 3;
     2     yanzuo       /* Set extra interfaces to point to correct interface   */
     2     yanzuo       /* Actually these are not procs, but it makes life easier */
   359    lifsong      TASK rec_ptr->procs(0).interface_index := 0, /* MXU-NIP      */
   359    lifsong              rec_ptr->procs(1).interface_index := 1, /* NIP-PQII (A) */
   359    lifsong              rec_ptr->procs(2).interface_index := 2; /* NIP-MXU  (B) */
     2     yanzuo   ENDDECISION;
     2     yanzuo 
   256     yanzuo   DECISION rec_ptr->is_ip_niu;
     2     yanzuo     ( T ):
     2     yanzuo       TASK n_interf := 2;
     2     yanzuo       /* Set extra interface to point to correct interface */
     2     yanzuo       /* Actually these are not procs, but it makes life easier */
   256     yanzuo       TASK rec_ptr->procs(0).interface_index := 0, /* MXU-IP  */
   256     yanzuo            rec_ptr->procs(1).interface_index := 1; /* IP -IPE */
     2     yanzuo   ENDDECISION;
     2     yanzuo 
   256     yanzuo   DECISION rec_ptr->reconfig_needed; /*release all the interface id so that they could be used again*/
    73     jamema   ( T ):
    73     jamema         TASK rec_in_file.interfaces(0).intf_id := atm_interface_id_t_unspecif_c;/*set the interface id to atm_interface_id_t_unspecif_c*/
    73     jamema         TASK rec_in_file.interfaces(1).intf_id := 0;/*set the interface id to 0, cant set others to atm_interface_id_t_unspecif_c, for PIG will think it was used*/
    73     jamema         TASK rec_in_file.interfaces(2).intf_id := 0;/*set the interface id to 0*/
    73     jamema         TASK rec_in_file.interfaces(3).intf_id := 0;/*set the interface id to 0*/        
    73     jamema 
   256     yanzuo         TASK rec_ptr->interfaces(0).intf_id := atm_interface_id_t_unspecif_c;/*set the interface id to atm_interface_id_t_unspecif_c*/
   256     yanzuo         TASK rec_ptr->interfaces(1).intf_id := 0;/*set the interface id to 0, cant set others to atm_interface_id_t_unspecif_c, for PIG will think it was used*/
   256     yanzuo         TASK rec_ptr->interfaces(2).intf_id := 0;/*set the interface id to 0*/
   256     yanzuo         TASK rec_ptr->interfaces(3).intf_id := 0;/*set the interface id to 0*/        
    73     jamema   ENDDECISION;
    73     jamema 
     2     yanzuo   /* mark all ids already in use to the bitmap. */
     2     yanzuo   TASK found := jii_find_first_comp__r( alp_cluster_idx__t_any_c, key,
     2     yanzuo        jii_ptr, dummy_comp_ptr, dummy_jii_ptr );
     2     yanzuo   WHILE found;
     2     yanzuo     CALL add_if_id_to_bitmap__r( bitmap, jii_ptr->interfaces(0).intf_id );
     2     yanzuo     CALL add_if_id_to_bitmap__r( bitmap, jii_ptr->interfaces(1).intf_id );
     2     yanzuo     CALL add_if_id_to_bitmap__r( bitmap, jii_ptr->interfaces(2).intf_id );
     2     yanzuo     CALL add_if_id_to_bitmap__r( bitmap, jii_ptr->interfaces(3).intf_id );
     2     yanzuo     TASK found := jii_find_next_comp__r( alp_cluster_idx__t_any_c, key,
     2     yanzuo          jii_ptr, dummy_comp_ptr,
     2     yanzuo          dummy_jii_ptr );
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK idx := 0, intf_id := jig_limits__t_min_if_id_c;
     2     yanzuo   WHILE idx < n_interf;
   256     yanzuo     TASK rec_ptr->interfaces(idx).intf_id :=
     2     yanzuo          bitmap_first_free__r( bytepointer( @bitmap ),
     2     yanzuo          0, jig_limits__t_max_if_id_c+1,
     2     yanzuo          intf_id );
  1433    jinncao          DECISION check_is_interface_id_valid(rec_ptr->interfaces(idx).intf_id);
  1433    jinncao          (unsuccessful_ec):
  1433    jinncao          	TASK dxsyslog_r( log_type_t_text_i_c,
  1433    jinncao                        @'JIGDAT: failed alloc interface, maxium reached'
  1433    jinncao                        ' jig_limits__t_min_if_id_c:%d'
  1433    jinncao                        'intf_id:%d',
  1433    jinncao                        jig_limits__t_min_if_id_c,
  1433    jinncao                        rec_ptr->interfaces(idx).intf_id);
  1433    jinncao                  TASK result := unsuccessful_ec;
  1433    jinncao                  RETURN;
  1433    jinncao          ENDDECISION;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   /* Redundand IPNIUs have same interface id for APC-IPE interface.
     2     yanzuo   If APC-IPE interface is already reserved for co-unit, then
     2     yanzuo   it can be copied here */
   256     yanzuo   DECISION is_redundant_ipniu__r(rec_ptr->unit_type);
     2     yanzuo     ( T ):
   256     yanzuo       DECISION (jii_find_computer__r(rec_ptr->co_alp_unit_phys_addr, co_ipe_ptr,
     2     yanzuo                co_ipe_comp_ptr, co_ipe_alp_ptr )
     2     yanzuo                AND
     2     yanzuo                co_ipe_ptr->interfaces(0).intf_id /= 0
     2     yanzuo                AND
     2     yanzuo                co_ipe_ptr->interfaces(0).intf_id /= atm_interface_id_t_unspecif_c);
     2     yanzuo         ( T ):
   256     yanzuo           TASK rec_ptr->interfaces(1).intf_id := co_ipe_ptr->interfaces(1).intf_id;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
    73     jamema 
   256     yanzuo   TASK rec_ptr->mphy_count := mphy_number;
   256     yanzuo   TASK rec_ptr->reconfig_needed := F; /*Always set the reconfig_needed back to false*/
    73     jamema   
   256     yanzuo   OUTPUT jig_write_jiifil_rec__s( $rec_ptr ) TO SELF;
     2     yanzuo   SET ( NOW+100, msg_timer );
   256     yanzuo   NEXTSTATE wait_update_cmd;
     2     yanzuo 
     2     yanzuo STATE wait_update_cmd;
     2     yanzuo 
   256     yanzuo   INPUT jig_write_jiifil_rec__s( $rec_ptr );
     2     yanzuo     RESET ( msg_timer );
   256     yanzuo     CALL jii_write_local_record__r( $rec_ptr );
  1439       pshu     CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,T,@'JIGMAS:JIGMAS:COMP=0x%04X, select interface ids'n'r    mphy_count: 0x%X'n'r    interface 0: 0x%X'n'r    interface 1: 0x%X'n'r    interface 2: 0x%X'n'r    interface 3: 0x%X'n'r',
  1320      tinyu                           rec_ptr->procs(0).phys_addr,
  1320      tinyu                           rec_ptr->mphy_count,
  1320      tinyu                           rec_ptr->interfaces(0).intf_id,
  1320      tinyu                           rec_ptr->interfaces(1).intf_id,
  1320      tinyu                           rec_ptr->interfaces(2).intf_id,
  1320      tinyu                           rec_ptr->interfaces(3).intf_id);
  1320      tinyu   
   256     yanzuo     TASK free_buffer_r( pah.use_handle.handle );
     2     yanzuo     TASK result := success_ec;
     2     yanzuo     RETURN;
     2     yanzuo 
     2     yanzuo   INPUT msg_timer;
   256     yanzuo     TASK free_buffer_r( pah.use_handle.handle );
     2     yanzuo     TASK result := message_waiting_timeout_ec;
     2     yanzuo     RETURN;
     2     yanzuo ENDSTATE wait_update_cmd;
     2     yanzuo ENDPROCEDURE select_interface_ids__r;
     2     yanzuo 
     2     yanzuo PROCEDURE set_app_eipu_flag__r;
     2     yanzuo /* set UNIT type*/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT jii      jiifil__t;
     2     yanzuo START;
   359    lifsong 
   359    lifsong    DECISION eipu_unit_check__r(jii);
   359    lifsong    (T):
   359    lifsong       TASK jii.is_app_mxu_or_eipu := app_eipu__c;
   359    lifsong       RETURN;
   359    lifsong    ENDDECISION;
   359    lifsong 
  1217       j2he    DECISION inquire_app_mxu_unit__r(jii.unit_type, jii.unit_index);
     2     yanzuo    (T):
     2     yanzuo       TASK jii.is_app_mxu_or_eipu := app_mxu__c;
   359    lifsong       RETURN;
   359    lifsong    ENDDECISION;   
     2     yanzuo 
   359    lifsong    TASK jii.is_app_mxu_or_eipu := not_app_unit__c;
     2     yanzuo ENDPROCEDURE set_app_eipu_flag__r;
     2     yanzuo 
   359    lifsong /**************************************************************************/
   359    lifsong PROCEDURE fill_funit_proc_info__r;
   359    lifsong /*
   359    lifsong  * fill functional unit's jiifil proc info
   359    lifsong  **************************************************************************/
     2     yanzuo 
   359    lifsong FPAR 
   359    lifsong     IN   unit            unit_it_t,
   359    lifsong     IN   addr           phys_address_t,        
   359    lifsong     IN   proc_idx      dword,        
   359    lifsong     IN/OUT  rec       jiifil__t;
   359    lifsong 
   359    lifsong START;   
   359    lifsong 
   359    lifsong     TASK rec.procs(proc_idx).unit_type  := unit.ttype,
   359    lifsong             rec.procs(proc_idx).unit_index := unit.index,
   359    lifsong             rec.procs(proc_idx).proc_index := proc_idx,
   359    lifsong             rec.procs(proc_idx).phys_addr  := addr;      
   359    lifsong ENDPROCEDURE fill_funit_proc_info__r;
   359    lifsong 
     2     yanzuo /**************************************************************************/
   359    lifsong PROCEDURE fill_funit_child_info__r;
   359    lifsong /*
   359    lifsong  * Get functional unit's child information for the new JIIFIL record.
   359    lifsong  **************************************************************************/
   359    lifsong FPAR 
   359    lifsong     IN   parent_unit          unit_it_t,
   359    lifsong     IN/OUT  rec          jiifil__t;
   359    lifsong 
   359    lifsong DCL 
   359    lifsong     ec                    error_t,
   359    lifsong     child_unit           unit_it_t,
   359    lifsong     tmp_child_unit    unit_it_t,    
   359    lifsong     child_addr          phys_address_t,    
   359    lifsong     hms_addr           hms_address_t,    
   359    lifsong     proc_idx             dword;    
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong     TASK ec := get_first_child_unit_r( parent_unit.ttype,
   359    lifsong        parent_unit.index,
   359    lifsong        child_unit.ttype,
   359    lifsong        child_unit.index );
   359    lifsong     WHILE ec = success_ec;
   359    lifsong     /*Jig won't add "SET" to jii proc as "SET" have no phy_addr*/
   359    lifsong     TASK ec := physical_address_r( child_unit.ttype,
   359    lifsong          child_unit.index,
   359    lifsong          child_addr );
   359    lifsong     DECISION ec;
   359    lifsong       ( success_ec ):
   359    lifsong         TASK ec := hms_addr_from_phys_addr_r( child_addr, hms_addr );
   359    lifsong     ENDDECISION;
   359    lifsong     DECISION ec;
   359    lifsong       ( success_ec ):
   359    lifsong         TASK proc_idx := hms_address_t_proc_idx_r( hms_addr );
   359    lifsong         CALL fill_funit_proc_info__r(child_unit, child_addr, proc_idx, rec);
   359    lifsong     ENDDECISION;
   359    lifsong     TASK tmp_child_unit := child_unit;
   359    lifsong     TASK ec := get_next_peer_r( tmp_child_unit.ttype,
   359    lifsong          tmp_child_unit.index,
   359    lifsong          child_unit.ttype,
   359    lifsong          child_unit.index );
   359    lifsong     ENDWHILE;
   359    lifsong  
   359    lifsong ENDPROCEDURE fill_funit_child_info__r;
   359    lifsong 
   359    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE fill_funit_info__r;
     2     yanzuo /*
     2     yanzuo  * Get functional unit information for the new JIIFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      phys_addr    phys_address_t,
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     ec                   error_t,
   359    lifsong     ui                    unit_it_t,
   359    lifsong     parent_unit       unit_it_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec := unit_type_and_index__r( phys_addr, ui );
   359    lifsong 
     2     yanzuo   TASK ec := get_parent_unit__r( ui.ttype, ui.index,
     2     yanzuo        parent_unit.ttype, parent_unit.index );
   359    lifsong        
     2     yanzuo   DECISION ec;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       TASK parent_unit := ui;
   359    lifsong       CALL fill_funit_proc_info__r(ui, phys_addr, 0, rec);
   581    jianyxu       TASK rec.is_center_unit := is_center_node_unit__r(phys_addr);
     2     yanzuo     ELSE:
   359    lifsong       CALL fill_funit_child_info__r(parent_unit, rec);
     2     yanzuo   ENDDECISION;
   359    lifsong   
     2     yanzuo   TASK rec.unit_type  := parent_unit.ttype,
   359    lifsong           rec.unit_index := parent_unit.index;
   359    lifsong        
     2     yanzuo   TASK ec := hms_addr_from_phys_addr__r( phys_addr, rec.hms_address );
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE fill_funit_info__r;
     2     yanzuo 
   359    lifsong PROCEDURE get_alp1_co_phys_addr__r;
   359    lifsong FPAR
   359    lifsong    IN/OUT  rec          jiifil__t;
   359    lifsong 
   359    lifsong DCL
   359    lifsong    co_unit_type         unit_type_t,
   359    lifsong    co_unit_index        unit_index_t;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    DECISION NOT rec.is_level1_alp_unit OR 
   359    lifsong                   unit_classification_r( rec.unit_type, unit_class_t_duplic_c ) /= success_ec;
   359    lifsong    ( T ):
   359    lifsong       TASK rec.co_alp_unit_phys_addr := computer_t_phys_invalid_c;
   359    lifsong       RETURN;
   359    lifsong    ENDDECISION;
   359    lifsong    
   359    lifsong    DECISION iw8s1_unit_check__r( rec.unit_type );
   359    lifsong    ( T ):
   359    lifsong       TASK co_unit_type := rec.procs(0).unit_type,
   359    lifsong               co_unit_index := rec.procs(0).unit_index ^ 1;
   359    lifsong    ELSE:
   359    lifsong       TASK co_unit_type := rec.unit_type,
   359    lifsong               co_unit_index := rec.unit_index ^ 1;      
   359    lifsong    ENDDECISION;
   359    lifsong    
   359    lifsong    DECISION physical_address_r( co_unit_type, co_unit_index, rec.co_alp_unit_phys_addr );
   359    lifsong    ( /= success_ec ):
   359    lifsong       TASK rec.co_alp_unit_phys_addr := computer_t_phys_invalid_c;
   359    lifsong    ENDDECISION;
   359    lifsong ENDPROCEDURE get_alp1_co_phys_addr__r;
   359    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE fill_atm_info__r;
     2     yanzuo /*
     2     yanzuo  * Get ATM related unit information for the new JIIFIL record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo 
     2     yanzuo START;
   359    lifsong 
   359    lifsong    CALL set_app_eipu_flag__r(rec);
   359    lifsong       
   359    lifsong    DECISION alp1_unit__r( rec.unit_type );
   359    lifsong    ( T ):
     2     yanzuo       TASK rec.is_level1_alp_unit := T;
   359    lifsong    ELSE:
   359    lifsong       DECISION alp2_unit__r( rec.unit_type );
   359    lifsong       ( T ):
   359    lifsong          TASK rec.is_level2_alp_unit := T;
   359    lifsong       ENDDECISION;
   359    lifsong    ENDDECISION;
   359    lifsong 
   359    lifsong    DECISION ip_niu_unit__r( rec.unit_type );
   359    lifsong    ( T ):
   359    lifsong       TASK rec.is_ip_niu := T;
   359    lifsong    ENDDECISION;
   359    lifsong   
     2     yanzuo   DECISION rec.is_level1_alp_unit;
   359    lifsong    ( T ):
   359    lifsong       TASK get_alp1_co_phys_addr__r( rec );
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE fill_atm_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE find_co_unit_hms_addr__r;
     2     yanzuo /*
     2     yanzuo  * Find out co unit hms address.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
  1222      tinyu    IN VIEWED      in_rec   jiifil__t,
     2     yanzuo    IN/OUT io_hms_addr  hms_address_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_phys_addr    phys_address_t;
     2     yanzuo 
     2     yanzuo START;
  1295      tinyu    DECISION ( physical_address_r( in_rec.procs(0).unit_type, in_rec.procs(0).unit_index ^ 1, l_phys_addr ) = success_ec OR
  1295      tinyu               physical_address_trial_r ( slice_id_t_other_slice_c, in_rec.procs(0).unit_type, in_rec.procs(0).unit_index ^ 1, l_phys_addr ) = success_ec )
     2     yanzuo             AND
     2     yanzuo             hms_addr_from_phys_addr__r( l_phys_addr, io_hms_addr ) = success_ec;
     2     yanzuo    ( T ):
     2     yanzuo       RETURN T;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN F;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE find_co_unit_hms_addr__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
    38    lifsong PROCEDURE map_sfu_index_to_sfu_port__r;
    38    lifsong /*
    38    lifsong  * Read the XML file to map the sfu index to sfu port.
    38    lifsong  **************************************************************************/
    38    lifsong FPAR
    38    lifsong    IN/OUT  io_port_nbr    fabric_port_number_t;
    38    lifsong 
    38    lifsong RETURNS
    38    lifsong    error_t;
    38    lifsong 
    38    lifsong DCL
    38    lifsong     xml_fname                character_ptr_t,            /* A pointer to the name of the file, where is the list of XML files */
    38    lifsong     xml_parser               xml_parser_ptr_t,    /* Pointer to parsed atm specific
    38    lifsong                                                            parameters file catalog XML file */
    38    lifsong     status                   error_t,
    38    lifsong     found_content_ptr,
    38    lifsong     parent_content_ptr       xml_content_ptr_t := NIL,   /* A pointer to correct content */
    38    lifsong     found_attribute_ptr      xml_attribute_ptr_t,
    38    lifsong     l_port_name              character_ptr_t;
    38    lifsong 
    38    lifsong START;
    38    lifsong 
    38    lifsong     TASK xml_fname := @'LFILES/HWP03AGX.XML';
    38    lifsong     TASK l_port_name := @'SFPIF2G5';
    38    lifsong     TASK status := xml_new_parser_from_file_r ( xml_fname,
    38    lifsong                                                  g_xml_buff_size__c,
    38    lifsong                                                  xml_parsing_mode_t_random_c,
    38    lifsong                                                  xml_parser );
    38    lifsong     DECISION status;
    38    lifsong     ( /=success_ec ):
    38    lifsong        RETURN status;
    38    lifsong     ENDDECISION;
    38    lifsong 
    38    lifsong     WHILE status = success_ec;
    38    lifsong         TASK status := xml_find_content_r ( xml_parser,
    38    lifsong                                              xml_ct_t_element_c,
    38    lifsong                                              @'int_port',
    38    lifsong                                              NIL, NIL, NIL, NIL,
    38    lifsong                                              found_content_ptr,
    38    lifsong                                              found_content_ptr );
    38    lifsong 
    38    lifsong         DECISION status;
    38    lifsong         ( /= success_ec):
    38    lifsong            RETURN status;
    38    lifsong         ENDDECISION;
    38    lifsong 
    38    lifsong         DECISION xml_find_attribute_r(found_content_ptr,@'name',NIL,NIL,found_attribute_ptr);
    38    lifsong         ( success_ec ):
    38    lifsong            DECISION strcmp(char_ptr_t(l_port_name), char_ptr_t(found_attribute_ptr->value));
    38    lifsong            ( 0 ):
    38    lifsong               DECISION xml_find_attribute_r(found_content_ptr,@'index',NIL,NIL,found_attribute_ptr);
    38    lifsong               ( success_ec ):
    38    lifsong                   DECISION atoi__r(char_ptr_t(found_attribute_ptr->value));
    38    lifsong                   ( = io_port_nbr ):
    38    lifsong                      DECISION xml_get_parent_element_r (found_content_ptr, parent_content_ptr);
    38    lifsong                      ( success_ec ):
    38    lifsong                           DECISION xml_find_attribute_r(parent_content_ptr,@'phys_port',NIL,NIL,found_attribute_ptr);
    38    lifsong                           ( success_ec ):
   197     jamema                               TASK io_port_nbr := atoi__r(char_ptr_t(found_attribute_ptr->value)) + (io_port_nbr MOD 2);
   464       p5li                               TASK status := xml_delete_parser_r (xml_parser);
    38    lifsong                               RETURN success_ec;
    38    lifsong                           ENDDECISION;
    38    lifsong                      ENDDECISION;
    38    lifsong                   ENDDECISION;
    38    lifsong               ENDDECISION;
    38    lifsong            ENDDECISION;
    38    lifsong         ENDDECISION;
    38    lifsong 
    38    lifsong     ENDWHILE;
    38    lifsong 
   464       p5li     TASK status := xml_delete_parser_r (xml_parser);
    38    lifsong     RETURN unsuccessful_ec;
    38    lifsong 
   684   huantang 
    38    lifsong ENDPROCEDURE map_sfu_index_to_sfu_port__r;
    38    lifsong 
    38    lifsong /**************************************************************************/
   684   huantang PROCEDURE get_unit_info_by_conn_data__r;
   684   huantang /*
   684   huantang  * Find out the unit information from connection data
   684   huantang  **************************************************************************/
   684   huantang 
   684   huantang FPAR
   684   huantang    IN VIEWED  connection_data      connection_data_lib_a_t,
   684   huantang    IN/OUT     ui                   unit_it_t;
   684   huantang RETURNS
   684   huantang    error_t;
   684   huantang 
   684   huantang DCL
   684   huantang     l_start_from           dword := hwi_first_search_c,
   684   huantang     l_hms_loc_search_key   piu_hms_id_lib_a_t,
   684   huantang     l_status               error_t,
   684   huantang     l_unit_data            unit_id_lib_a_t;
   684   huantang 
   684   huantang START;
   684   huantang     /* Initial data */
   684   huantang    TASK l_hms_loc_search_key.rack_hms_index    := connection_data.dest_hms.rack_hms_index,
   684   huantang         l_hms_loc_search_key.subrack_hms_index := connection_data.dest_hms.subrack_hms_index,
   684   huantang         l_hms_loc_search_key.hms_ppa           := connection_data.dest_hms.hms_ppa;
   684   huantang         
   684   huantang    TASK l_status := hwi_units_of_piu_a_r ( l_start_from,
   684   huantang                                        l_hms_loc_search_key,
   684   huantang                                        l_unit_data );
   684   huantang 
   684   huantang    TASK ui.ttype := l_unit_data.unit_type;
   684   huantang    TASK ui.index := l_unit_data.unit_index;
   684   huantang    RETURN l_status;                                
   684   huantang ENDPROCEDURE get_unit_info_by_conn_data__r;
   684   huantang 
   684   huantang 
   684   huantang 
   684   huantang /**************************************************************************/
     2     yanzuo PROCEDURE find_sfu_port_by_hms__r;
     2     yanzuo /*
     2     yanzuo  * Find out the SFU port with the given hms address.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN     in_hms_addr        hms_address_t,
     2     yanzuo    IN     in_port_type       piu_port_type_t,
   221     jamema    IN/OUT io_port_nbr        fabric_port_number_t;
   189    lifsong 
     2     yanzuo RETURNS
   359    lifsong    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     l_result               error_t := success_ec,
   439     z7zhou     l_cabling_error        error_t := alp_sfu_cabling_error__ec,
     2     yanzuo     l_start_point          dword,
     2     yanzuo     l_port_search_key      port_id_lib_a_t,
     2     yanzuo     l_connection_data      connection_data_lib_a_t,
     2     yanzuo     l_n_sfu_ports_found    byte := 0,
   684   huantang     l_port_number          fabric_port_number_t,
   684   huantang     ui                     unit_it_t;
     2     yanzuo 
     2     yanzuo START;
   359    lifsong 
     2     yanzuo    TASK l_start_point := hwi_first_search_c;
     2     yanzuo    TASK l_port_search_key.subrack_hms_addr.rack_hms_index :=
     2     yanzuo                            hms_address_t_rack_r( in_hms_addr );
     2     yanzuo 
     2     yanzuo    TASK l_port_search_key.subrack_hms_addr.subrack_hms_index :=
     2     yanzuo                            hms_address_t_subrack_r( in_hms_addr );
     2     yanzuo 
     2     yanzuo    TASK l_port_search_key.hms_ppa := hms_address_t_ppa_r( in_hms_addr);
     2     yanzuo 
     2     yanzuo    TASK l_port_search_key.port_index := 0xFFFF;
     2     yanzuo 
     2     yanzuo    TASK  l_port_search_key.port_type := in_port_type;
     2     yanzuo 
     2     yanzuo    WHILE l_result = success_ec;
   698   huantang 
   698   huantang find_next:
     2     yanzuo       TASK l_result := hwi_connection_data_a_r (
     2     yanzuo                            l_start_point,
     2     yanzuo                            l_port_search_key,
     2     yanzuo                            connection_data_lib_a_ptr_t( @l_connection_data ));
     2     yanzuo       DECISION ( l_result = success_ec ) AND
     2     yanzuo                ( l_connection_data.source_port_direc = piu_port_direc_t_to_swi_c );
     2     yanzuo       ( T ):
     2     yanzuo          /* With the current SFUs, fabric port number is the
     2     yanzuo          * index of the SFU port divided by 2. This will change
     2     yanzuo          * when/if some SFU ports are changed to non-redundant. */
    38    lifsong          TASK l_port_number := l_connection_data.dest_port_index;
   684   huantang 
   684   huantang          TASK l_result := get_unit_info_by_conn_data__r(l_connection_data,ui);
   684   huantang          DECISION l_result;
   684   huantang          (/= success_ec ):
   698   huantang             /* maybe the next one is OK */
   698   huantang             JOIN find_next;
   684   huantang          ENDDECISION;
   684   huantang 
   684   huantang          
   684   huantang          DECISION is_sf10e__r(ui.index) AND in_port_type = SFPIF2G5__c;
    38    lifsong          ( T ):
   221     jamema             TASK l_result := map_sfu_index_to_sfu_port__r (l_port_number);
   221     jamema             DECISION (l_result);
   221     jamema             ( /= success_ec ):
   221     jamema                  TASK dxsyslog_r( log_type_t_text_i_c,
   221     jamema                                @'JIGDAT: map_sfu_index_to_sfu_port__r error!'
   221     jamema                                 ' status =%XH prot index =%d',
   221     jamema                                  l_result, l_connection_data.dest_port_index );
   189    lifsong            ENDDECISION;
    38    lifsong          ENDDECISION;
    38    lifsong 
     2     yanzuo          TASK l_n_sfu_ports_found := l_n_sfu_ports_found + 1;
     2     yanzuo          DECISION l_n_sfu_ports_found;
     2     yanzuo          ( 1 ):
    38    lifsong             TASK io_port_nbr := l_port_number;
   359    lifsong             TASK l_cabling_error := success_ec;
     2     yanzuo          ELSE:
     2     yanzuo             /* Verify that unit is connected to the same port
     2     yanzuo             in both SFUs: */
    38    lifsong             DECISION l_port_number;
     2     yanzuo             ( /= io_port_nbr ):
     2     yanzuo                TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo                                @'JIGDAT: INCONSISTENT SFU CABLING DETECTED!'
     2     yanzuo                                 'Object unit hms=%XH port_nbr=%d',
     2     yanzuo                                  in_hms_addr, io_port_nbr );
   388    lifsong                TASK l_cabling_error := alp_sfu_cabling_error__ec;                                 
     2     yanzuo             ENDDECISION;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo    ENDWHILE;
    38    lifsong 
     2     yanzuo    RETURN l_cabling_error;
    38    lifsong 
     2     yanzuo ENDPROCEDURE find_sfu_port_by_hms__r;
     2     yanzuo 
  1274      tinyu PROCEDURE check_pair_sfu_port__r;
  1274      tinyu FPAR 
  1274      tinyu      IN port_nbr           fabric_port_number_t,
  1274      tinyu      IN co_port_nbr        fabric_port_number_t;
  1274      tinyu RETURNS
  1274      tinyu      bool;
  1274      tinyu 
  1274      tinyu START;
  1274      tinyu      DECISION (port_nbr = fabric_port_number_t_unspec_c) OR (co_port_nbr =fabric_port_number_t_unspec_c);
  1274      tinyu      (T):
  1274      tinyu          RETURN T;
  1274      tinyu      ENDDECISION;
  1274      tinyu      RETURN (port_nbr = co_port_nbr ^1);
  1274      tinyu ENDPROCEDURE check_pair_sfu_port__r;      
  1274      tinyu 
  1274      tinyu 
  1274      tinyu 
   359    lifsong PROCEDURE get_sfu_port_num__r;
     2     yanzuo FPAR
     2     yanzuo    IN/OUT io_jiifil_rec jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_port_type          piu_port_type_t,
   439     z7zhou    l_cabling_error      error_t := alp_sfu_cabling_error__ec,
   439     z7zhou    l_co_cabling_error   error_t := alp_sfu_cabling_error__ec,
     2     yanzuo    l_port_nbr           fabric_port_number_t := fabric_port_number_t_unspec_c,
     2     yanzuo    l_co_hms_addr        hms_address_t,
   359    lifsong    l_co_port_nbr        fabric_port_number_t := fabric_port_number_t_unspec_c;
     2     yanzuo 
   359    lifsong    
     2     yanzuo START;
   362    lifsong    DECISION app_unit_check__r( io_jiifil_rec );
     2     yanzuo    (T):
    38    lifsong       TASK  l_port_type  := SFPIF2G5__c;
   362    lifsong    ELSE:
    38    lifsong       TASK  l_port_type  := SFPIF__c;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
   359    lifsong   TASK l_cabling_error := find_sfu_port_by_hms__r( io_jiifil_rec.hms_address,
     2     yanzuo                                                     l_port_type,
   221     jamema                                                     l_port_nbr );
   359    lifsong                                                     
     2     yanzuo 
   221     jamema    TASK io_jiifil_rec.sfu_phy_port := l_port_nbr;
   197     jamema 
     2     yanzuo    DECISION ( app_unit_check__r( io_jiifil_rec ) );
     2     yanzuo    ( T ):
  1295      tinyu      TASK io_jiifil_rec.sfu_port_number := l_port_nbr ;
  1295      tinyu     /* For 2N APP unit, check whether their SFU port are mirror ports*/ 
  1295      tinyu      DECISION is_redundant_eipu_unit__r(io_jiifil_rec.unit_type)  
  1295      tinyu       		  OR io_jiifil_rec.unit_type = unit_type_t_mxu_c;
  1295      tinyu      (T):
  1295      tinyu           DECISION find_co_unit_hms_addr__r( io_jiifil_rec, l_co_hms_addr );
  1295      tinyu      	  ( T ):
  1295      tinyu               TASK l_co_cabling_error := find_sfu_port_by_hms__r( l_co_hms_addr,         
     2     yanzuo                                                              l_port_type,
   221     jamema                                                              l_co_port_nbr );
  1295      tinyu              
  1295      tinyu               DECISION check_pair_sfu_port__r(l_port_nbr , l_co_port_nbr);
  1295      tinyu               ( F ):
  1295      tinyu                    TASK dxsyslog_r( log_type_t_text_e_c,
  1295      tinyu                        @'JIGDAT: SFU port configure error!'
  1295      tinyu                          'unit type=%XH index=%d'
  1295      tinyu                          'sfu_port_number=%X, co_sfu_port_number=%X',
  1295      tinyu                          io_jiifil_rec.unit_type,
  1295      tinyu                          io_jiifil_rec.unit_index,
  1295      tinyu                          l_port_nbr, l_co_port_nbr);
  1295      tinyu                    RETURN port_failure_ec;
  1295      tinyu               ENDDECISION;       
  1295      tinyu              
  1274      tinyu           ENDDECISION;
  1295      tinyu            TASK io_jiifil_rec.sfu_port_number := io_jiifil_rec.sfu_port_number/2*2;
  1295      tinyu      ENDDECISION;
     2     yanzuo 
     2     yanzuo    ELSE: /* APC unit SFU port need divided by 2 */
     2     yanzuo       TASK io_jiifil_rec.sfu_port_number := l_port_nbr / 2;
     2     yanzuo    ENDDECISION;
     2     yanzuo 
   388    lifsong    DECISION l_cabling_error /= success_ec AND l_co_cabling_error /= success_ec;
   388    lifsong    ( T ):
   509    lifsong       TASK dxsyslog_r( log_type_t_text_i_c,
   667    lifsong                       @'JIGDAT: Fail to get pair unit SFU port both, please check cable configuration!'
   388    lifsong                        'Object unit type=%XH index=%d'
   388    lifsong                        'unit_error=%X, co_unit_error=%X',
   388    lifsong                         io_jiifil_rec.unit_type,
   388    lifsong                         io_jiifil_rec.unit_index,
   388    lifsong                         l_cabling_error, l_co_cabling_error);
   388    lifsong 
   388    lifsong       RETURN l_cabling_error;
   388    lifsong    ENDDECISION;
   388    lifsong 
   359    lifsong    RETURN success_ec;
   359    lifsong ENDPROCEDURE get_sfu_port_num__r;
   359    lifsong 
   359    lifsong /**************************************************************************/
   359    lifsong PROCEDURE locate_sfu_port__r;
   359    lifsong /*
   359    lifsong  * Find out which SFU port the given alp unit is connected to.
   359    lifsong  **************************************************************************/
   359    lifsong FPAR
   359    lifsong    IN/OUT io_jiifil_rec jiifil__t;
   359    lifsong 
   359    lifsong RETURNS
   359    lifsong    error_t;
   359    lifsong 
   359    lifsong DCL 
   359    lifsong    ec error_t,
   359    lifsong    l_co_unit_ptr        jiifil_ptr__t;
   359    lifsong 
   359    lifsong START;
   359    lifsong 
   359    lifsong    TASK ec := get_sfu_port_num__r(io_jiifil_rec);
   359    lifsong    DECISION ec;
   359    lifsong    ( /= success_ec ):
   359    lifsong    	RETURN ec;
   359    lifsong    ENDDECISION;
   359    lifsong 
     2     yanzuo    /* if the co-unit of this unit exists in JIIFIL and has
     2     yanzuo       different SFU port number, show a warning: */
     2     yanzuo    DECISION spare_unit_existence_r( io_jiifil_rec.unit_type,
     2     yanzuo                                     io_jiifil_rec.unit_index ) = success_ec
     2     yanzuo             AND
     2     yanzuo             jii_find_unit__r( io_jiifil_rec.unit_type,
     2     yanzuo                               io_jiifil_rec.unit_index ^ 1,
     2     yanzuo                               l_co_unit_ptr, dummy_comp_ptr, dummy_jii_ptr )
     2     yanzuo             AND
     2     yanzuo             l_co_unit_ptr->sfu_port_number /= io_jiifil_rec.sfu_port_number;
     2     yanzuo    ( T ):
     2     yanzuo       /* 2N MXU/EIPU units has different SFU port number, warning not need */
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_i_c,
     2     yanzuo                      @'JIGDAT: SFU CABLING DIFFERS IN A 2N UNIT PAIR!'
     2     yanzuo                       'Object unit type=%XH index=%d',
     2     yanzuo                        io_jiifil_rec.unit_type,
     2     yanzuo                        io_jiifil_rec.unit_index );
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN success_ec;
     2     yanzuo ENDPROCEDURE locate_sfu_port__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE locate_mxu__r;
     2     yanzuo /*
     2     yanzuo  * This procedure initializes the cluster idx of the given unit
     2     yanzuo  * by finding out which MXU the unit is connected to,
     2     yanzuo  * and then by locating the ALP cluster index of that MXU.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  jiifil_rec   jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result               error_t := success_ec,
     2     yanzuo     start_point          dword,
     2     yanzuo     port_search_key      port_id_lib_a_t,
     2     yanzuo     connection_data      connection_data_lib_a_t,
     2     yanzuo     conn_unit_hms_addr   hms_address_t,
     2     yanzuo     conn_unit_addr       phys_address_t,
     2     yanzuo     mxu_ptr              jiifil_ptr__t,
     2     yanzuo     pn                   piu_port_name_t,
     2     yanzuo     l_co_mxu_addr        unit_address_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo       TASK start_point := hwi_first_search_c;
     2     yanzuo       TASK port_search_key.subrack_hms_addr.rack_hms_index :=
     2     yanzuo            hms_address_t_rack_r( jiifil_rec.hms_address ),
     2     yanzuo            port_search_key.subrack_hms_addr.subrack_hms_index :=
     2     yanzuo            hms_address_t_subrack_r( jiifil_rec.hms_address ),
     2     yanzuo            port_search_key.hms_ppa :=
     2     yanzuo            hms_address_t_ppa_r( jiifil_rec.hms_address );
     2     yanzuo       /* find port type value of "MXPIF" port type */
     2     yanzuo       TASK memset( bytepointer(@pn.port_name), 32, SIZEOF(pn.port_name));
     2     yanzuo       TASK memcpy( bytepointer(@pn.port_name), bytepointer(@'MXPIF'), 5);
     2     yanzuo       TASK pn.string_len := 5;
     2     yanzuo       DECISION hwi_port_type_by_name_a_r( pn, port_search_key.port_type );
     2     yanzuo         ( /= success_ec ):
     2     yanzuo           RETURN unsuccessful_ec; /* xxx */
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK port_search_key.port_index := 0xFFFF;
     2     yanzuo       TASK result := success_ec;
     2     yanzuo       WHILE result = success_ec;
     2     yanzuo         TASK result := hwi_connection_data_a_r (
     2     yanzuo              start_point,
     2     yanzuo              port_search_key,
     2     yanzuo              connection_data_lib_a_ptr_t( @connection_data ));
     2     yanzuo         DECISION ( result = success_ec ) AND
     2     yanzuo                  ( connection_data.source_port_direc =
     2     yanzuo                  piu_port_direc_t_to_swi_c );
     2     yanzuo           ( T ):
     2     yanzuo             TASK hms_address_t_make_r (
     2     yanzuo                  conn_unit_hms_addr,
     2     yanzuo                  hms_rack_t(connection_data.dest_hms.rack_hms_index),
     2     yanzuo                  hms_subrack_t(connection_data.dest_hms.subrack_hms_index),
     2     yanzuo                  hms_ppa_t(connection_data.dest_hms.hms_ppa));
     2     yanzuo             DECISION hms_addr_to_phys_addr_r( conn_unit_hms_addr,
     2     yanzuo                      conn_unit_addr );
     2     yanzuo               ( success_ec ):
     2     yanzuo                 DECISION jii_find_computer__r( conn_unit_addr, mxu_ptr,
     2     yanzuo                          dummy_comp_ptr,
     2     yanzuo                          dummy_jii_ptr );
     2     yanzuo                   ( T ):
  1050       pshu                      DECISION((jiifil_rec.cluster_idx = alp_cluster_idx__t_invalid_c)
  1050       pshu                               OR (jiifil_rec.cluster_idx = mxu_ptr->cluster_idx));
  1050       pshu                      (T):
  1050       pshu                         TASK jiifil_rec.cluster_idx := mxu_ptr->cluster_idx;
  1050       pshu                      ELSE:
  1050       pshu                         
  1050       pshu                         TASK dxsyslog_r( log_type_t_text_e_c,
  1050       pshu                                     @'JIGDAT: unit connect to different pair of MXUs'
  1050       pshu                                      'HMS: %X'
  1050       pshu                                      'Cluster =%X, other Cluster=%X',
  1050       pshu                                      jiifil_rec.hms_address,
  1050       pshu                                      jiifil_rec.cluster_idx,
  1050       pshu                                      mxu_ptr->cluster_idx);
  1050       pshu                         /*TASK jiifil_rec.cluster_idx := 
  1050       pshu                         alp_cluster_idx__t_invalid_c; */
  1050       pshu                         RETURN alp_cluster_missing__ec;
  1050       pshu                      ENDDECISION;   
     2     yanzuo                 ENDDECISION;
     2     yanzuo               ELSE:
     2     yanzuo                 /* try the next cable */
     2     yanzuo                 TASK result := success_ec;
     2     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo       ENDWHILE; /* cable queries */
     2     yanzuo 
  1050       pshu       DECISION (jiifil_rec.cluster_idx /= alp_cluster_idx__t_invalid_c);
  1050       pshu       (T):
  1050       pshu          RETURN success_ec;
  1050       pshu       ENDDECISION;
     2     yanzuo       DECISION jiifil_rec.unit_type = unit_type_t_mxu_c AND
     2     yanzuo                physical_address_r(jiifil_rec.unit_type, jiifil_rec.unit_index^1, l_co_mxu_addr) = success_ec AND
     2     yanzuo                jii_find_computer__r( l_co_mxu_addr, mxu_ptr, dummy_comp_ptr, dummy_jii_ptr ) AND
     2     yanzuo                mxu_ptr->cluster_idx /= 0;
     2     yanzuo       ( T ):
     2     yanzuo          TASK jiifil_rec.cluster_idx := mxu_ptr->cluster_idx;
     2     yanzuo 
     2     yanzuo          RETURN success_ec;
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       DECISION app_unit_check__r( jiifil_rec );
     2     yanzuo       ( T ):
     2     yanzuo          DECISION jii_find_computer__r( jiifil_rec.co_alp_unit_phys_addr, mxu_ptr,
     2     yanzuo                          dummy_comp_ptr,
     2     yanzuo                          dummy_jii_ptr ) AND mxu_ptr->cluster_idx /= 0;
     2     yanzuo          ( T ):
     2     yanzuo             TASK jiifil_rec.cluster_idx := mxu_ptr->cluster_idx;
     2     yanzuo 
     2     yanzuo             RETURN success_ec;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* cannot place the unit to any existing ALP cluster. */
     2     yanzuo       RETURN alp_cluster_missing__ec;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE locate_mxu__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE locate_cluster__r;
     2     yanzuo /*
     2     yanzuo  * Locate the ALP cluster the given unit belongs to.
     2     yanzuo  * Or select a new ALP cluster index, if this is the
     2     yanzuo  * first unit in its cluster. Do not update ALP cluster
     2     yanzuo  * records yet, though.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     clus_ptr             alp_cluster_ptr__t,
     2     yanzuo     clus_idx, free_idx   alp_cluster_idx__t,
     2     yanzuo     ec                   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec := locate_mxu__r( rec );
     2     yanzuo   DECISION ( ec = alp_cluster_missing__ec ) AND rec.is_level1_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo       TASK ec := success_ec;
     2     yanzuo       TASK clus_idx := 1, free_idx := 0;
     2     yanzuo       WHILE clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo         TASK clus_ptr := jiafil_ptr__r( clus_idx );
     2     yanzuo         DECISION rec.procs(0).phys_addr;
     2     yanzuo           ( clus_ptr->alp_unit(0).phys_addr,
     2     yanzuo           clus_ptr->alp_unit(1).phys_addr ):
     2     yanzuo             OUT clus_loop;
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION invalid_addr__r( clus_ptr->alp_unit(0).phys_addr )
     2     yanzuo                  AND ( free_idx = 0 );
     2     yanzuo           ( T ):
     2     yanzuo             TASK free_idx := clus_idx;
     2     yanzuo         ENDDECISION;
     2     yanzuo         TASK clus_idx := clus_idx + 1;
     2     yanzuo       ENDWHILE clus_loop;
     2     yanzuo #if (F) /* (rdox) */
     2     yanzuo           /* RDOX test phase: cluster idx=HMS subrack index */
     2     yanzuo           TASK free_idx := hms_address_t_subrack_r( rec.hms_address );
     2     yanzuo #endif
     2     yanzuo       DECISION clus_idx;
     2     yanzuo         ( <= jig_limits__t_n_clus_c ):
     2     yanzuo           TASK rec.cluster_idx := clus_idx;
     2     yanzuo         ELSE:
     2     yanzuo           DECISION free_idx;
     2     yanzuo             ( > 0 ):
     2     yanzuo               TASK rec.cluster_idx := free_idx;
     2     yanzuo             ELSE:
   655    lifsong               TASK ec := out_of_cluster_ids__ec,
   655    lifsong                        rec.cluster_idx := alp_cluster_idx__t_invalid_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE locate_cluster__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_build_record__r;
     2     yanzuo /*
     2     yanzuo  * This procedure collects information and builds a JIIFIL
     2     yanzuo  * record for the given unit.
     2     yanzuo  * It is called by the master via jii_store_figseb_req__r
     2     yanzuo  * or directly during WO-OMU start phase 3.
     2     yanzuo  *
     2     yanzuo  * The given unit must be either non-hierarchical computer, or
     2     yanzuo  * the master processor of a hierarchical unit.
     2     yanzuo  * In case of a hierarchical unit, all child units will
     2     yanzuo  * be added to the record.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      phys_addr    phys_address_t,
     2     yanzuo     IN      fig_hms      fig_msg_header_t,
     2     yanzuo     IN      add_alp1_only    bool,
     2     yanzuo     IN/OUT  rec          jiifil__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     hms_addr             hms_address_t;
     2     yanzuo 
     2     yanzuo START;
   655    lifsong 
   655    lifsong    CALL init_empty_jiifil_rec__r( rec );
   655    lifsong    /* if physical address is not valid, try to convert
   655    lifsong    * HMS address to physical and then use that. */
   655    lifsong    DECISION invalid_addr__r( phys_addr );
     2     yanzuo     ( T ):
     2     yanzuo       TASK hms_address_t_make_ext_r(
     2     yanzuo            hms_addr,
     2     yanzuo            hms_processor_index_t   ( fig_hms.extended_addr ),
     2     yanzuo            hms_address_t_rack_r    ( fig_hms.hms_address ),
     2     yanzuo            hms_address_t_subrack_r ( fig_hms.hms_address ),
     2     yanzuo            hms_address_t_ppa_r     ( fig_hms.hms_address ));
   200      fegao 
     2     yanzuo       TASK ec := hms_addr_to_phys_addr__r( hms_addr, phys_addr );
   655    lifsong    ENDDECISION;
   165    lifsong 
   655    lifsong    DECISION ec;
   655    lifsong    ( /= success_ec ):
   655    lifsong       RETURN ec;
   655    lifsong    ENDDECISION;
   655    lifsong   
   655    lifsong    TASK ec := fill_funit_info__r( phys_addr, rec );
   655    lifsong    DECISION ec;
   655    lifsong    ( /= success_ec ):
   655    lifsong       RETURN ec;
   655    lifsong    ENDDECISION;   
   655    lifsong    
   655    lifsong    TASK fill_atm_info__r( rec );
   655    lifsong    
   655    lifsong    DECISION add_alp1_only AND rec.is_level1_alp_unit = F;
   655    lifsong    ( T ):
   655    lifsong        RETURN alp_cluster_missing__ec;
   655    lifsong    ENDDECISION;
   655    lifsong    
   655    lifsong    /* Select alp cluster index (but do not add new records
   655    lifsong    * to JIAFIL -- jii_write_local_record__r will do it.)
   655    lifsong    */
   655    lifsong    TASK ec := locate_cluster__r( rec );
   655    lifsong    DECISION ec;
   655    lifsong    ( /= success_ec ):
   655    lifsong       RETURN ec;
   655    lifsong    ENDDECISION;   
   655    lifsong    
   655    lifsong    DECISION rec.is_level1_alp_unit;
   655    lifsong    ( T ):
   655    lifsong        /* find out via HWILIB the SFU port where this unit
   655    lifsong        * is connected to. */
   655    lifsong        TASK ec := locate_sfu_port__r( rec );
   655    lifsong        TASK rec.sd4_init_needed := T;
   655    lifsong    ENDDECISION;
   655    lifsong    
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE jii_build_record__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE count_res_rel_flags__r;
     2     yanzuo /*
     2     yanzuo  * This procedure counts how many computers in the specified cluster
     2     yanzuo  * still have the res_release_needed flag set (in JIIFIL data).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  cluster_idx  alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     dword;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     count                dword := 0,
     2     yanzuo     key                  jii_search_key__t,
     2     yanzuo     found                bool,
     2     yanzuo     jii_comp_ptr         jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK found := jii_find_first_comp__r( cluster_idx, key,
     2     yanzuo        dummy_jii_ptr,
     2     yanzuo        jii_comp_ptr,
     2     yanzuo        dummy_jii_ptr );
     2     yanzuo   WHILE found;
     2     yanzuo     DECISION jii_comp_ptr->res_release_needed;
     2     yanzuo       ( T ):
     2     yanzuo         TASK count := count + 1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK found := jii_find_next_comp__r( cluster_idx, key, dummy_jii_ptr,
     2     yanzuo          jii_comp_ptr, dummy_jii_ptr );
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN count;
     2     yanzuo ENDPROCEDURE count_res_rel_flags__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE update_co_ipniu__r;
     2     yanzuo FPAR
     2     yanzuo   IN/OUT  upd_jii     jiifil__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     co_ipe_ptr           jiifil_ptr__t,
     2     yanzuo     co_ipe_comp_ptr      jii_comp_ptr__t,
     2     yanzuo     co_ipe_alp_ptr       jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION is_redundant_ipniu__r(upd_jii.unit_type)
     2     yanzuo            AND
     2     yanzuo            (upd_jii.removing_unit = F);
     2     yanzuo     ( T ):
     2     yanzuo       DECISION jii_find_computer__r(upd_jii.co_alp_unit_phys_addr, co_ipe_ptr,
     2     yanzuo                co_ipe_comp_ptr, co_ipe_alp_ptr );
     2     yanzuo         ( T ):
     2     yanzuo           TASK co_ipe_ptr->interfaces(1).intf_exists  :=
     2     yanzuo                upd_jii.interfaces(1).intf_exists;
     2     yanzuo           TASK co_ipe_ptr->interfaces(1).intf_id  :=
     2     yanzuo                upd_jii.interfaces(1).intf_id;
     2     yanzuo           TASK co_ipe_ptr->interfaces(1).intf_reported  :=
     2     yanzuo                upd_jii.interfaces(1).intf_reported;
     2     yanzuo           TASK co_ipe_ptr->procs( 1 ).vp_reported :=
     2     yanzuo                upd_jii.procs( 1 ).vp_reported;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE update_co_ipniu__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_update_local_record__r;
     2     yanzuo /*
     2     yanzuo  * Copy the specified fields from the given JIIFIL record
     2     yanzuo  * to the actual JIIFIL. Also update ALP cluster structures
     2     yanzuo  * and global variables indicated by the bits in 'fields' structure.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  r            jiifil__t,
     2     yanzuo     IN      proc_idx     hms_processor_index_t,
     2     yanzuo     IN      fields       jii_fields__t,
     2     yanzuo     IN      timestamp    jig_timestamp__t,
     2     yanzuo     IN/OUT  alp_clus     alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     curr_field            jii_field__t,
     2     yanzuo     j                     jiifil_ptr__t,
     2     yanzuo     alp1_blockage_cleared bool := F,
     2     yanzuo     job_done              bool := F,
    73     jamema     idx                   byte;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK alp_clus   := alp_cluster_idx__t_invalid_c,
     2     yanzuo        j          := jiifil_ptr__r( r.rec_idx ),
     2     yanzuo        curr_field := jii_fields__t_first_r( fields );
     2     yanzuo   DECISION timestamp;
     2     yanzuo     ( 0 ):
     2     yanzuo       TASK timestamp := curr_timestamp__r();
     2     yanzuo   ENDDECISION;
  1439       pshu   CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,T,@'jii_update_local_record COMP=0x%04X ',j->procs( proc_idx ).phys_addr);
     2     yanzuo   WHILE ( curr_field /= jii_field__t_last_c );
     2     yanzuo     DECISION curr_field;
     2     yanzuo       ( jii_field__t_vpi_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'VPI: %d-->%d ',j->procs( proc_idx ).vpi,r.procs( proc_idx ).vpi);
     2     yanzuo         TASK j->procs( proc_idx ).vpi := r.procs( proc_idx ).vpi;
     2     yanzuo       ( jii_field__t_maxintvci_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@': max_intconn_vci%d-->%d ',j->procs( proc_idx ).max_intconn_vci,r.procs( proc_idx ).max_intconn_vci);
     2     yanzuo         TASK j->procs( proc_idx ).max_intconn_vci :=
     2     yanzuo              r.procs( proc_idx ).max_intconn_vci;
     2     yanzuo       ( jii_field__t_mphy_port_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'mphy_port: %d-->%d ',j->procs( proc_idx ).mphy_port,r.procs( proc_idx ).mphy_port);
     2     yanzuo         TASK j->procs( proc_idx ).mphy_port := r.procs( proc_idx ).mphy_port;
     2     yanzuo       ( jii_field__t_spi3_port_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'spi3_port: %d-->%d ',j->procs( proc_idx ).spi3_port,r.procs( proc_idx ).spi3_port);
     2     yanzuo         TASK j->procs( proc_idx ).spi3_port := r.procs( proc_idx ).spi3_port;
     2     yanzuo       ( jii_field__t_subport_c ):
     2     yanzuo         TASK j->procs( proc_idx ).scheduler_subport :=
     2     yanzuo              r.procs( proc_idx ).scheduler_subport;
    73     jamema        ( jii_field__t_reconfig_needed_c ):
  1222      tinyu          CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'reconfig_needed: %d-->%d ',j->reconfig_needed,r.reconfig_needed);
    73     jamema          TASK j->reconfig_needed := r.reconfig_needed;
    73     jamema        ( jii_field__t_release_mpqu_c):
    73     jamema          TASK idx :=0 ;
  1222      tinyu          CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'jii_field__t_release_mpqu_c Release all computer');
    73     jamema          WHILE idx < jiifil__t_n_comp_per_unit_c;
    73     jamema             DECISION(j->procs(idx).phys_addr /= computer_t_phys_not_defined_c);
    73     jamema             ( T ):
    73     jamema                TASK j->procs(idx).res_release_needed := T, 
   429    lifsong                j->procs(idx).res_release_attempts_left := jig_limits__t_rel_attempts_c;
    73     jamema             ENDDECISION;
   429    lifsong             TASK idx := idx+1;
    73     jamema          ENDWHILE;
    73     jamema #if (test_logs)         
    73     jamema          TASK dxsyslog_r( log_type_t_text_t_c,
    73     jamema                   @'JIGMAS: reconfig needed');
    73     jamema #endif                  
     2     yanzuo       ( jii_field__t_pconf_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'port_conf_needed: %d-->%d ',j->port_conf_needed,r.port_conf_needed);
     2     yanzuo         TASK j->port_conf_needed := r.port_conf_needed;
     2     yanzuo         TASK job_done := T;
     2     yanzuo         /* when WO-ALP1 unit port conf gets completed, it may be
     2     yanzuo         possible to start port conf tasks in other ALP1 clusters. */
     2     yanzuo         TASK alp1_blockage_cleared := j->is_level1_alp_unit
     2     yanzuo              AND j->is_wo_unit AND (j->port_conf_needed = F);
     2     yanzuo       ( jii_field__t_pconf_compl_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'port_conf_completed: %d-->%d ',j->port_conf_completed,r.port_conf_completed);
     2     yanzuo         TASK j->port_conf_completed := r.port_conf_completed;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_pconf_ts_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'port_conf_timestamp: %d-->%d ',j->port_conf_timestamp,r.port_conf_timestamp);
     2     yanzuo         TASK j->port_conf_timestamp := timestamp;
     2     yanzuo       ( jii_field__t_pconf2_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'port_conf_ph2_needed: %d-->%d ',j->port_conf_ph2_needed,r.port_conf_ph2_needed);
     2     yanzuo         TASK j->port_conf_ph2_needed := r.port_conf_ph2_needed;
     2     yanzuo       ( jii_field__t_pconf2_ts_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'port_conf_ph2_timestamp: %d-->%d ',j->port_conf_ph2_timestamp,r.port_conf_ph2_timestamp);
     2     yanzuo         TASK j->port_conf_ph2_timestamp := timestamp;
     2     yanzuo       ( jii_field__t_fpga_need_c):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'fpga_needed: %d-->%d ',j->fpga_needed,r.fpga_needed);
     2     yanzuo         TASK j->fpga_needed := r.fpga_needed;
     2     yanzuo       ( jii_field__t_sym_mxu_c):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'sym_mxu_flag: %d-->%d ',j->sym_mxu_flag,r.sym_mxu_flag);
     2     yanzuo         TASK j->sym_mxu_flag := r.sym_mxu_flag;
     2     yanzuo       ( jii_field__t_tm_fpga_xconn_c):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'tm_fpga_xconn_needed: %d-->%d ',j->tm_fpga_xconn_needed,r.tm_fpga_xconn_needed);
     2     yanzuo         TASK j->tm_fpga_xconn_needed := r.tm_fpga_xconn_needed;
     2     yanzuo       ( jii_field__t_if_init_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'if_init_needed: %d-->%d ',j->procs( proc_idx ).if_init_needed,r.procs( proc_idx ).if_init_needed);
     2     yanzuo         TASK j->procs( proc_idx ).if_init_needed :=
     2     yanzuo              r.procs( proc_idx ).if_init_needed;
     2     yanzuo       ( jii_field__t_if_init_compl_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'if_init_completed: %d-->%d ',j->procs( proc_idx ).if_init_completed,r.procs( proc_idx ).if_init_completed);
     2     yanzuo         TASK j->procs( proc_idx ).if_init_completed :=
     2     yanzuo              r.procs( proc_idx ).if_init_completed;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_if_init_ts_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'if_init_timestamp: %d-->%d ',j->procs( proc_idx ).if_init_timestamp,r.procs( proc_idx ).if_init_timestamp);
     2     yanzuo         TASK j->procs( proc_idx ).if_init_timestamp := timestamp;
     2     yanzuo       ( jii_field__t_if_init2_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'if_init_ph2_needed: %d-->%d ',j->procs( proc_idx ).if_init_ph2_needed,r.procs( proc_idx ).if_init_ph2_needed);
     2     yanzuo         TASK j->procs( proc_idx ).if_init_ph2_needed :=
     2     yanzuo              r.procs( proc_idx ).if_init_ph2_needed;
     2     yanzuo       ( jii_field__t_if_init2_ts_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'if_init_ph2_timestamp: %d-->%d ',j->procs( proc_idx ).if_init_ph2_timestamp,r.procs( proc_idx ).if_init_ph2_timestamp);
     2     yanzuo         TASK j->procs( proc_idx ).if_init_ph2_timestamp := timestamp;
     2     yanzuo       ( jii_field__t_vp_exists_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'vp_exists: %d-->%d ',j->procs( proc_idx ).vp_exists,r.procs( proc_idx ).vp_exists);
     2     yanzuo         TASK j->procs( proc_idx ).vp_exists :=
     2     yanzuo              r.procs( proc_idx ).vp_exists;
     2     yanzuo       ( jii_field__t_vp_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'vp_reporting_needed: %d-->%d ',j->procs( proc_idx ).vp_reporting_needed,r.procs( proc_idx ).vp_reporting_needed);
     2     yanzuo         TASK j->procs( proc_idx ).vp_reporting_needed :=
     2     yanzuo              r.procs( proc_idx ).vp_reporting_needed;
     2     yanzuo       ( jii_field__t_vp_ext1_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'vp_reporting_needed ext1: %d-->%d ',j->procs( 1 ).vp_reporting_needed,r.procs( 1 ).vp_reporting_needed);
     2     yanzuo         TASK j->procs( 1 ).vp_reporting_needed :=
     2     yanzuo              r.procs( 1 ).vp_reporting_needed;
     2     yanzuo       ( jii_field__t_vp_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'vp_reported: %d-->%d ',j->procs( proc_idx ).vp_reported,r.procs( proc_idx ).vp_reported);
     2     yanzuo         TASK j->procs( proc_idx ).vp_reported :=
     2     yanzuo              r.procs( proc_idx ).vp_reported;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_vp_ext1_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'vp_reported ext1: %d-->%d ',j->procs( 1 ).vp_reported,r.procs( 1 ).vp_reported);
     2     yanzuo         TASK j->procs( 1 ).vp_reported :=
     2     yanzuo              r.procs( 1 ).vp_reported;
     2     yanzuo       ( jii_field__t_hc_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_needed: %d-->%d ',j->procs( proc_idx ).half_conns_needed,r.procs( proc_idx ).half_conns_needed);
     2     yanzuo         TASK j->procs( proc_idx ).half_conns_needed :=
     2     yanzuo              r.procs( proc_idx ).half_conns_needed;
     2     yanzuo       ( jii_field__t_hc_created_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_created: %d-->%d ',j->procs( proc_idx ).half_conns_created,r.procs( proc_idx ).half_conns_created);
     2     yanzuo         TASK j->procs( proc_idx ).half_conns_created :=
     2     yanzuo              r.procs( proc_idx ).half_conns_created;
     2     yanzuo         TASK job_done := T;
    98    lifsong       ( jii_field__t_hc_ph2_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_ph2_needed: %d-->%d ',j->procs( proc_idx ).half_conns_ph2_needed,r.procs( proc_idx ).half_conns_ph2_needed);
    98    lifsong         TASK j->procs( proc_idx ).half_conns_ph2_needed :=
    98    lifsong              r.procs( proc_idx ).half_conns_ph2_needed;
    98    lifsong       ( jii_field__t_hc_ph2_created_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_ph2_created: %d-->%d ',j->procs( proc_idx ).half_conns_ph2_created,r.procs( proc_idx ).half_conns_ph2_created);
    98    lifsong         TASK j->procs( proc_idx ).half_conns_ph2_created :=
    98    lifsong              r.procs( proc_idx ).half_conns_ph2_created;
    98    lifsong         TASK job_done := T;        
   617     qinggu       ( jii_field__t_hc_dsp_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_dsp_needed: %d-->%d ',j->procs( proc_idx ).half_conns_dsp_needed,r.procs( proc_idx ).half_conns_dsp_needed);
   617     qinggu         TASK j->procs( proc_idx ).half_conns_dsp_needed :=
   617     qinggu              r.procs( proc_idx ).half_conns_dsp_needed;
   617     qinggu       (jii_field__t_hc_dsp_created_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'half_conns_dsp_created: %d-->%d ',j->procs( proc_idx ).half_conns_dsp_created,r.procs( proc_idx ).half_conns_dsp_created);
   617     qinggu         TASK j->procs( proc_idx ).half_conns_dsp_created :=
   617     qinggu              r.procs( proc_idx ).half_conns_dsp_created;
   617     qinggu         TASK job_done := T;      
     2     yanzuo       ( jii_field__t_apc_init1_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'apc_init_needed: %d-->%d ',j->apc_init_needed,r.apc_init_needed);
     2     yanzuo         TASK j->apc_init_needed := r.apc_init_needed;
     2     yanzuo       ( jii_field__t_apc_init2_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'apc_init_ph2_needed: %d-->%d ',j->apc_init_ph2_needed,r.apc_init_ph2_needed);
     2     yanzuo         TASK j->apc_init_ph2_needed := r.apc_init_ph2_needed;
     2     yanzuo       ( jii_field__t_sd4_init_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'sd4_init_needed: %d-->%d ',j->sd4_init_needed,r.sd4_init_needed);
     2     yanzuo         TASK j->sd4_init_needed := r.sd4_init_needed;
     2     yanzuo       ( jii_field__t_coalp_upd_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'co_alp_unit_updated: %d-->%d ',j->co_alp_unit_updated,r.co_alp_unit_updated);
     2     yanzuo         TASK j->co_alp_unit_updated := r.co_alp_unit_updated;
     2     yanzuo       ( jii_field__t_alpwrm_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'alp_warmup_needed: %d-->%d ',j->alp_warmup_needed,r.alp_warmup_needed);
     2     yanzuo         TASK j->alp_warmup_needed := r.alp_warmup_needed;
     2     yanzuo       ( jii_field__t_allow_trib_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'trib_startup_allowed: %d-->%d ',j->trib_startup_allowed,r.trib_startup_allowed);
     2     yanzuo         TASK j->trib_startup_allowed := r.trib_startup_allowed;
     2     yanzuo       ( jii_field__t_trib_rst_needed_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'trib_restart_needed: %d-->%d ',j->trib_restart_needed,r.trib_restart_needed);
     2     yanzuo         TASK j->trib_restart_needed := r.trib_restart_needed;
     2     yanzuo       ( jii_field__t_rdy_for_rep_c ):
  1504      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'ready_for_reporting: %d-->%d ',j->ready_for_reporting,r.ready_for_reporting);
     2     yanzuo         TASK j->ready_for_reporting := r.ready_for_reporting;
     2     yanzuo       ( jii_field__t_res_rel_need_c ):
     2     yanzuo         DECISION ( j->procs( proc_idx ).res_release_needed = T ) AND
     2     yanzuo                  ( r.procs( proc_idx ).res_release_needed = F ) AND
     2     yanzuo                  ( count_res_rel_flags__r( r.cluster_idx ) = 1 );
     2     yanzuo           ( T ):
     2     yanzuo             TASK jiafil_ptr__r( r.cluster_idx )->restart_in_progress := F;
  1222      tinyu             CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'cluster %d restart_in_progress set to F',r.cluster_idx);
     2     yanzuo             TASK alp_clus := r.cluster_idx;
     2     yanzuo         ENDDECISION;
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'res_release_needed: %d-->%d ',j->procs( proc_idx ).res_release_needed,r.procs( proc_idx ).res_release_needed);
     2     yanzuo         TASK j->procs( proc_idx ).res_release_needed :=
     2     yanzuo              r.procs( proc_idx ).res_release_needed;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_res_rel_att_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'res_release_attempts_left: %d-->%d ',j->procs( proc_idx ).res_release_attempts_left,r.procs( proc_idx ).res_release_attempts_left);
     2     yanzuo         TASK j->procs( proc_idx ).res_release_attempts_left :=
     2     yanzuo              r.procs( proc_idx ).res_release_attempts_left;
     2     yanzuo       ( jii_field__t_start_att_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'start_attempts_left: %d-->%d ',j->procs( proc_idx ).start_attempts_left,r.procs( proc_idx ).start_attempts_left);
     2     yanzuo         TASK j->procs( proc_idx ).start_attempts_left :=
     2     yanzuo              r.procs( proc_idx ).start_attempts_left;
     2     yanzuo       ( jii_field__t_warmup_ts_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'warmup_timestamp: %d-->%d ',j->warmup_timestamp,r.warmup_timestamp);
     2     yanzuo         TASK j->warmup_timestamp := timestamp;
     2     yanzuo       /* interface stuff: : */
     2     yanzuo       ( jii_field__t_i1_mphy_sch_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 0 mphy: %d-->%d ',j->interfaces(0).mphy_port,r.interfaces(0).mphy_port);
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 0 scheduler_subport: %d-->%d ',j->interfaces(0).scheduler_subport,r.interfaces(0).scheduler_subport);
     2     yanzuo         TASK j->interfaces(0).mphy_port :=
     2     yanzuo              r.interfaces(0).mphy_port,
     2     yanzuo              j->interfaces(0).scheduler_subport :=
     2     yanzuo              r.interfaces(0).scheduler_subport;
     2     yanzuo       ( jii_field__t_i1_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 0 intf_reporting_needed: %d-->%d ',j->interfaces(0).intf_reporting_needed,r.interfaces(0).intf_reporting_needed);
     2     yanzuo         TASK j->interfaces(0).intf_reporting_needed :=
     2     yanzuo              r.interfaces(0).intf_reporting_needed;
     2     yanzuo       ( jii_field__t_i1_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 0 intf_reported: %d-->%d ',j->interfaces(0).intf_reported,r.interfaces(0).intf_reported);
     2     yanzuo         TASK j->interfaces(0).intf_reported :=
     2     yanzuo              r.interfaces(0).intf_reported;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_i1_exists_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 0 intf_exists: %d-->%d ',j->interfaces(0).intf_exists,r.interfaces(0).intf_exists);
     2     yanzuo         TASK j->interfaces(0).intf_exists :=
     2     yanzuo              r.interfaces(0).intf_exists;
     2     yanzuo       ( jii_field__t_i2_mphy_sch_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 1 mphy: %d-->%d ',j->interfaces(1).mphy_port,r.interfaces(1).mphy_port);
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 1 scheduler_subport: %d-->%d ',j->interfaces(1).scheduler_subport,r.interfaces(1).scheduler_subport);
     2     yanzuo         TASK j->interfaces(1).mphy_port :=
     2     yanzuo              r.interfaces(1).mphy_port,
     2     yanzuo              j->interfaces(1).scheduler_subport :=
     2     yanzuo              r.interfaces(1).scheduler_subport;
     2     yanzuo       ( jii_field__t_i2_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 1 intf_reporting_needed: %d-->%d ',j->interfaces(1).intf_reporting_needed,r.interfaces(1).intf_reporting_needed);
     2     yanzuo         TASK j->interfaces(1).intf_reporting_needed :=
     2     yanzuo              r.interfaces(1).intf_reporting_needed;
     2     yanzuo       ( jii_field__t_i2_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 1 intf_reported: %d-->%d ',j->interfaces(1).intf_reported,r.interfaces(1).intf_reported);
     2     yanzuo         TASK j->interfaces(1).intf_reported :=
     2     yanzuo              r.interfaces(1).intf_reported;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_i2_exists_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 1 intf_exists: %d-->%d ',j->interfaces(1).intf_exists,r.interfaces(1).intf_exists);
     2     yanzuo         TASK j->interfaces(1).intf_exists :=
     2     yanzuo              r.interfaces(1).intf_exists;
     2     yanzuo       ( jii_field__t_i3_mphy_sch_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 2 mphy: %d-->%d ',j->interfaces(2).mphy_port,r.interfaces(2).mphy_port);
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 2 scheduler_subport: %d-->%d ',j->interfaces(2).scheduler_subport,r.interfaces(2).scheduler_subport);
     2     yanzuo         TASK j->interfaces(2).mphy_port :=
     2     yanzuo              r.interfaces(2).mphy_port,
     2     yanzuo              j->interfaces(2).scheduler_subport :=
     2     yanzuo              r.interfaces(2).scheduler_subport;
     2     yanzuo       ( jii_field__t_i3_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 2 intf_reporting_needed: %d-->%d ',j->interfaces(2).intf_reporting_needed,r.interfaces(2).intf_reporting_needed);
     2     yanzuo         TASK j->interfaces(2).intf_reporting_needed :=
     2     yanzuo              r.interfaces(2).intf_reporting_needed;
     2     yanzuo       ( jii_field__t_i3_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 2 intf_reported: %d-->%d ',j->interfaces(2).intf_reported,r.interfaces(2).intf_reported);
     2     yanzuo         TASK j->interfaces(2).intf_reported :=
     2     yanzuo              r.interfaces(2).intf_reported;
     2     yanzuo         TASK job_done := T;
     2     yanzuo       ( jii_field__t_i3_exists_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 2 intf_exists: %d-->%d ',j->interfaces(2).intf_exists,r.interfaces(2).intf_exists);
     2     yanzuo         TASK j->interfaces(2).intf_exists :=
     2     yanzuo              r.interfaces(2).intf_exists;
   470    lifsong       ( jii_field__t_i4_mphy_sch_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 3 mphy: %d-->%d ',j->interfaces(3).mphy_port,r.interfaces(3).mphy_port);
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 3 scheduler_subport: %d-->%d ',j->interfaces(3).scheduler_subport,r.interfaces(3).scheduler_subport);
   470    lifsong         TASK j->interfaces(3).mphy_port :=
   470    lifsong              r.interfaces(3).mphy_port,
   470    lifsong              j->interfaces(3).scheduler_subport :=
   470    lifsong              r.interfaces(3).scheduler_subport;
   470    lifsong       ( jii_field__t_i4_rep_need_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 3 intf_reporting_needed: %d-->%d ',j->interfaces(3).intf_reporting_needed,r.interfaces(3).intf_reporting_needed);
   470    lifsong         TASK j->interfaces(3).intf_reporting_needed :=
   470    lifsong              r.interfaces(3).intf_reporting_needed;
   470    lifsong       ( jii_field__t_i4_reported_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 3 intf_reported: %d-->%d ',j->interfaces(3).intf_reported,r.interfaces(3).intf_reported);
   470    lifsong         TASK j->interfaces(3).intf_reported :=
   470    lifsong              r.interfaces(3).intf_reported;
   470    lifsong         TASK job_done := T;
   470    lifsong       ( jii_field__t_i4_exists_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'interface 3 intf_exists: %d-->%d ',j->interfaces(3).intf_exists,r.interfaces(3).intf_exists);
   470    lifsong         TASK j->interfaces(3).intf_exists :=
   470    lifsong              r.interfaces(3).intf_exists;             
     2     yanzuo       ( jii_field__t_ipniu_co_upd_c):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'update_co_ipniu__r');
     2     yanzuo         TASK update_co_ipniu__r(r);
     2     yanzuo       /* global variable control */
     2     yanzuo       ( jii_field__t_setg_sd4_init_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'sd4_init_done__pv : T');
     2     yanzuo         TASK sd4_init_done__pv := T;
     2     yanzuo         /* kick off task in all clusters */
     2     yanzuo         TASK alp_clus := alp_cluster_idx__t_any_c;
     2     yanzuo       ( jii_field__t_setg_symmxu_apc_c ):
     2     yanzuo         DECISION sym_mxu_apc_init_done__pv;
     2     yanzuo           ( F ):
     2     yanzuo             TASK sym_mxu_apc_init_done__pv := T;
  1222      tinyu             CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'sym_mxu_apc_init_done__pv : T');
     2     yanzuo             /* kick off task in all clusters */
     2     yanzuo             TASK alp_clus := alp_cluster_idx__t_any_c;
     2     yanzuo         ENDDECISION;
     2     yanzuo       /* cluster flag control */
     2     yanzuo       ( jii_field__t_clus_warmup_on_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'cluster %d  : warming_in_progress : T<--%d ',r.cluster_idx,jiafil_ptr__r( r.cluster_idx )->warming_in_progress);
     2     yanzuo         TASK jiafil_ptr__r( r.cluster_idx )->warming_in_progress := T;
     2     yanzuo       ( jii_field__t_clus_warmup_off_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'cluster %d  : warming_in_progress : F<--%d ',r.cluster_idx,jiafil_ptr__r( r.cluster_idx )->warming_in_progress);
     2     yanzuo         TASK jiafil_ptr__r( r.cluster_idx )->warming_in_progress := F;
     2     yanzuo         /* maybe some tasks can now be started in this cluster.. */
     2     yanzuo         TASK alp_clus := r.cluster_idx;
     2     yanzuo       ( jii_field__t_clus_rst_on_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'cluster %d  : restart_in_progress : T<--%d ',r.cluster_idx,jiafil_ptr__r( r.cluster_idx )->restart_in_progress);
     2     yanzuo         TASK jiafil_ptr__r( r.cluster_idx )->restart_in_progress := T;
     2     yanzuo       ( jii_field__t_clus_rst_off_c ):
  1222      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@'cluster %d  : restart_in_progress : F<--%d ',r.cluster_idx,jiafil_ptr__r( r.cluster_idx )->restart_in_progress);
     2     yanzuo         TASK jiafil_ptr__r( r.cluster_idx )->restart_in_progress := F;
     2     yanzuo         /* maybe some tasks can now be started in this cluster.. */
     2     yanzuo         TASK alp_clus := r.cluster_idx;
  1222      tinyu         ELSE: 
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* previous field handled: */
     2     yanzuo     TASK curr_field := jii_fields__t_next_r( fields, curr_field );
     2     yanzuo   ENDWHILE;
  1222      tinyu   CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,F,@' job_done:%d'n'r',job_done);
     2     yanzuo   DECISION job_done;
     2     yanzuo     ( T ):
     2     yanzuo       TASK jiafil_ptr__r( j->cluster_idx )->resources_exist := T;
     2     yanzuo       TASK j->procs(proc_idx).start_attempts_left :=
     2     yanzuo            jig_limits__t_max_startatt_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION /* ( alp_clus /= alp_cluster_idx__t_invalid_c )
     2     yanzuo            AND */ alp1_blockage_cleared;
     2     yanzuo     ( T ):
     2     yanzuo       TASK alp_clus := alp_cluster_idx__t_any_c;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN alp_clus /= alp_cluster_idx__t_invalid_c;
     2     yanzuo ENDPROCEDURE jii_update_local_record__r;
     2     yanzuo 
     2     yanzuo PROCEDURE jii_clear_sd4_flags__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  results  fig_cf_succ_list_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword := 0,
   733    lifsong     status             bool,
     2     yanzuo     skey                 jii_search_key__t,
   165    lifsong     jii_ptr              jiifil_ptr__t := NIL;
     2     yanzuo 
     2     yanzuo START;
   485     yanzuo   DECISION results.nr_of_ports > fig_cf_succ_list_t_max_c;
   485     yanzuo   ( T ):
   485     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
   485     yanzuo                        @'JIGDAT: Input SD ports count is incorrect!'
   485     yanzuo                         'port count = %d',
   485     yanzuo                         results.nr_of_ports );
   485     yanzuo       RETURN;
   485     yanzuo   ENDDECISION;
   485     yanzuo 
   805    lifsong   DECISION results.nr_of_ports;
   805    lifsong   ( 0 ):
   805    lifsong       RETURN;
   805    lifsong   ENDDECISION;
   805    lifsong   
   733    lifsong   TASK status := jii_find_first_comp__r( alp_cluster_idx__t_any_c,
     2     yanzuo        skey,
     2     yanzuo        jii_ptr,
     2     yanzuo        dummy_comp_ptr,
     2     yanzuo        dummy_jii_ptr );
   733    lifsong   WHILE (status AND jii_ptr /= NIL) ;
     2     yanzuo     DECISION jii_ptr->is_level1_alp_unit AND jii_ptr->is_wo_unit;
     2     yanzuo       ( T ):
   733    lifsong         TASK jii_ptr->sd4_init_needed := T;
     2     yanzuo         TASK idx := 0;
     2     yanzuo         WHILE idx < results.nr_of_ports;
   165    lifsong           
   221     jamema           DECISION(results.fig_conf(idx).conf_status = success_ec);
   165    lifsong           ( T ):
   221     jamema              DECISION(app_unit_check__r($jii_ptr));/*For APP unit, phy ports are reported from FIG*/
   221     jamema              ( T ):
   221     jamema                   DECISION(results.fig_conf(idx).port = jii_ptr->sfu_phy_port);
   221     jamema                   ( T ):
   221     jamema                       TASK jii_ptr->sd4_init_needed := F;
   221     jamema                       OUT port_loop;
   221     jamema                   ENDDECISION;
   221     jamema              ELSE:                      /*For APC unit, logic port + index are reported from FIG*/
   221     jamema                   DECISION(results.fig_conf(idx).port = jii_ptr->sfu_port_number);
   221     jamema                   ( T ):
   221     jamema                       TASK jii_ptr->sd4_init_needed := F;
   221     jamema                       OUT port_loop;
   221     jamema                   ENDDECISION;
   221     jamema              ENDDECISION;
     2     yanzuo           ENDDECISION;
   857     z7zhou          
     2     yanzuo           TASK idx := idx + 1;
     2     yanzuo         ENDWHILE port_loop;
     2     yanzuo     ENDDECISION;
   733    lifsong     TASK status := jii_find_next_comp__r( alp_cluster_idx__t_any_c,
     2     yanzuo          skey,
     2     yanzuo          jii_ptr,
     2     yanzuo          dummy_comp_ptr,
     2     yanzuo          dummy_jii_ptr );
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE jii_clear_sd4_flags__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_update_half_conn_states__r;
     2     yanzuo /*
     2     yanzuo  * This procedure updates the 'exists' flags of the specified
     2     yanzuo  * half-connections in JICFIL to the given value.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  conn_ids           jig_id_array__t,
     2     yanzuo     IN/OUT  comps              jig_id_array__t,
     2     yanzuo     IN/OUT  xconn_ids          jig_id_array__t,
     2     yanzuo     IN      exist_state        bool,
     2     yanzuo     IN      conn_id            conn_id_t,
     2     yanzuo     IN/OUT  last_conn_ptr      jicfil_ptr__t;
     2     yanzuo DCL
   617     qinggu     idx, comp_idx, hc_idx      dword,
   617     qinggu     jic_ptr                    jicfil_ptr__t := NIL,
   617     qinggu     hms1, hms2                 hms_address_t,
   617     qinggu     jii_ptr_1, jii_ptr_2, d    jiifil_ptr__t,
   617     qinggu     comp_ptr_1, comp_ptr_2     jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo START;
   617     qinggu   TASK idx        := 0,
   617     qinggu        comp_idx   := 0,
  1410      tinyu        hc_idx     := 0,
   617     qinggu        hms1       := hms_address_t_not_defined_c,
   617     qinggu        hms2       := hms_address_t_not_defined_c;
   617     qinggu 
     2     yanzuo   /* get a pointer to the given connection in case the loop
     2     yanzuo   doesn't have update anything: */
     2     yanzuo   DECISION conn_ids.n_items = 0 AND
     2     yanzuo            NOT jii_find_conn__r( conn_id, last_conn_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       TASK last_conn_ptr := NIL;
     2     yanzuo   ENDDECISION;
     2     yanzuo   WHILE ( idx < conn_ids.n_items );
     2     yanzuo     DECISION jii_find_conn__r( conn_ids.item(idx), jic_ptr );
     2     yanzuo       ( T ):
     2     yanzuo         DECISION comp_idx;
     2     yanzuo           ( < comps.n_items ):
  1407     z7zhou             DECISION jic_ptr->half_conn(0).comp =
  1407     z7zhou                      jic_ptr->half_conn(1).comp;
  1407     z7zhou             ( F ):
  1407     z7zhou               TASK hc_idx := byte( jic_ptr->half_conn(1).comp =
  1407     z7zhou                                    comps.item(comp_idx) );
  1407     z7zhou             ELSE: /* for intra-unit connection */
  1407     z7zhou 	      /* xcid could distinguish the established endpoint. */
  1407     z7zhou               TASK hc_idx := byte( jic_ptr->half_conn(1).xconn_id =
  1407     z7zhou                                    xconn_ids.item(comp_idx) );
  1407     z7zhou               DECISION exist_state;
  1407     z7zhou               ( F ): 
  1407     z7zhou 	          /*, so, ... free another endpoint at the same time */
  1407     z7zhou                   TASK jic_ptr->half_conn( hc_idx^1 ).exists := exist_state;
  1407     z7zhou               ENDDECISION;
  1407     z7zhou             ENDDECISION;
  1407     z7zhou 
     2     yanzuo             TASK jic_ptr->half_conn( hc_idx ).exists := exist_state;
  1407     z7zhou         
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION idx;
     2     yanzuo           ( < xconn_ids.n_items ):
     2     yanzuo             TASK jic_ptr->half_conn( hc_idx ).xconn_id :=
     2     yanzuo                  xconn_ids.item( idx );
     2     yanzuo         ENDDECISION;
   600     qinggu         DECISION exist_state;
   600     qinggu           ( T ):
   617     qinggu             TASK jic_ptr->half_conn( hc_idx ).creat_time := time_of_day_rw;
   600     qinggu           ELSE:
   617     qinggu             TASK jic_ptr->half_conn( hc_idx ).creat_time := 0;
   600     qinggu         ENDDECISION;
   600     qinggu 
   617     qinggu         DECISION jic_ptr->half_conn(0).exists AND
   617     qinggu                  jic_ptr->half_conn(1).exists;
   617     qinggu          ( T ):
   617     qinggu             DECISION( hms_slv_addr_from_phys_addr_r( jic_ptr->half_conn(0).comp, hms1)
   617     qinggu                             = success_ec AND
   617     qinggu               hms_slv_addr_from_phys_addr_r( jic_ptr->half_conn(1).comp, hms2) = success_ec AND
   617     qinggu               jii_find_computer__r( jic_ptr->half_conn(0).comp, jii_ptr_1, comp_ptr_1, d ) AND
   617     qinggu               jii_find_computer__r( jic_ptr->half_conn(1).comp, jii_ptr_2, comp_ptr_2, d ) );
   617     qinggu             ( T ):
   617     qinggu                 OUTPUT int_xconn_create_ack_s( success_ec, hms1, hms2,
   617     qinggu                                            jic_ptr->toelib_conn_id,
   617     qinggu                                            comp_ptr_1->vpi,
   617     qinggu                                            jic_ptr->half_conn(0).vci,
   617     qinggu                                            comp_ptr_2->vpi,
   617     qinggu                                            jic_ptr->half_conn(1).vci )
   617     qinggu                    TO tomprb_pid,
   617     qinggu                    SET DESTROY_MSG_IF_NOT_WO_STATE = T,
   617     qinggu                        DONT_CARE = T;
   617     qinggu             ELSE:
   617     qinggu               TASK dxsyslog_r( log_type_t_text_e_c,
   617     qinggu                     @'JIGDAT: handling conn data error! conn:%06X', jic_ptr->toelib_conn_id );
   617     qinggu             ENDDECISION;
   617     qinggu         ENDDECISION;
   617     qinggu 
     2     yanzuo         TASK last_conn_ptr := jic_ptr;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo     /* If there are more conn_ids than addresses, assume that
     2     yanzuo     the remaining half conns are associated with the last
     2     yanzuo     (or the only) computer. */
     2     yanzuo     TASK comp_idx := comp_idx + byte( comp_idx+1 < comps.n_items );
     2     yanzuo   ENDWHILE;
     2     yanzuo ENDPROCEDURE jii_update_half_conn_states__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE verify_cabling_info__r;
     2     yanzuo /*
    40       p5li  * Verify MXU/SFU cabling of the given unit. If the unit belongs to a new 
    40       p5li  * cluster, io_clus_changed is set.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
    40       p5li     IN/OUT  io_rec          jiifil__t,
    40       p5li     IN/OUT  io_clus_changed  bool;
  1050       pshu 
  1050       pshu RETURNS error_t;
  1050       pshu 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t,
    40       p5li     clus_idx               dword;
     2     yanzuo 
     2     yanzuo START;
    40       p5li   TASK clus_idx := io_rec.cluster_idx;
    40       p5li   TASK io_clus_changed := F;
    40       p5li   
    40       p5li   TASK ec := locate_cluster__r( io_rec );
    40       p5li   DECISION ec;
    40       p5li   ( success_ec ):
    40       p5li     DECISION clus_idx /= io_rec.cluster_idx;
     2     yanzuo     ( T ):
    40       p5li       TASK io_clus_changed := T;
    40       p5li       DECISION io_rec.is_level1_alp_unit;
    40       p5li       ( T ):
    40       p5li         CALL trim_alp_cluster__r( clus_idx, io_rec.procs(0).phys_addr );
    40       p5li       ENDDECISION;
    40       p5li     ENDDECISION;
    40       p5li   ELSE:
    40       p5li     TASK dxsyslog_r( log_type_t_text_e_c,
    40       p5li          @'JIGDAT: locating cluster error!'
    40       p5li          'unit type=%XH idx=%d status=%XH',
    40       p5li          io_rec.unit_type, io_rec.unit_index, ec);
  1050       pshu     RETURN ec;
     2     yanzuo   ENDDECISION;
    40       p5li   
     2     yanzuo 
    40       p5li   DECISION io_rec.is_level1_alp_unit;
    40       p5li   ( T ):
     2     yanzuo       /* find out via HWILIB the SFU port where this unit
     2     yanzuo       * is connected to. */
    40       p5li       TASK ec := locate_sfu_port__r( io_rec );
     2     yanzuo   ENDDECISION;
  1050       pshu 
  1050       pshu   RETURN ec;
     2     yanzuo ENDPROCEDURE verify_cabling_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_setup_unit_removal__r;
     2     yanzuo /*
     2     yanzuo  * Set up the required tasks that need to be done before the given
     2     yanzuo  * unit can be removed. (Basically, sets flags to enable resource
     2     yanzuo  * releasing task for each computer of the given unit.)
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT    units     conf_units_t,
     2     yanzuo     IN/OUT     clus_idx  alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     unit_idx             dword := 0,
     2     yanzuo     tributary_found      bool  := F,
     2     yanzuo     key                  jii_search_key__t,
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     trib_ptr             jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK clus_idx := alp_cluster_idx__t_invalid_c;
     2     yanzuo   WHILE unit_idx < units.count;
     2     yanzuo     DECISION jii_find_unit__r( units.tbl( unit_idx ).unit_type,
     2     yanzuo              units.tbl( unit_idx ).unit_index,
     2     yanzuo              jii_ptr, comp_ptr, dummy_jii_ptr );
     2     yanzuo       ( T ):
     2     yanzuo         DECISION jii_ptr->is_level1_alp_unit AND
     2     yanzuo                  invalid_addr__r( jii_ptr->co_alp_unit_phys_addr );
     2     yanzuo           ( T ):
     2     yanzuo             /* Removing an ALP unit without co-unit is not allowed
     2     yanzuo             * if it still has some tributary units left. */
     2     yanzuo             TASK tributary_found := jii_find_first_comp__r (
     2     yanzuo                  jii_ptr->cluster_idx,
     2     yanzuo                  key,
     2     yanzuo                  trib_ptr,
     2     yanzuo                  dummy_comp_ptr,
     2     yanzuo                  dummy_jii_ptr );
     2     yanzuo             WHILE tributary_found;
     2     yanzuo               /* active OMU and the unit itself do not prevent removal. */
     2     yanzuo               DECISION trib_ptr->procs(0).phys_addr;
     2     yanzuo                 ( own_unit_phys_addr,
     2     yanzuo                 jii_ptr->procs(0).phys_addr ):
     2     yanzuo                 /* continue the loop */
     2     yanzuo                 ELSE:
     2     yanzuo                   DECISION trib_ptr->is_level1_alp_unit;
     2     yanzuo                     ( T ):
     2     yanzuo                     /* another ALP1 unit -- ok to remove this */
     2     yanzuo                     ELSE:
     2     yanzuo                       OUT find_trib_loop;
     2     yanzuo                   ENDDECISION;
     2     yanzuo               ENDDECISION;
     2     yanzuo               TASK tributary_found := jii_find_next_comp__r(
     2     yanzuo                    jii_ptr->cluster_idx,
     2     yanzuo                    key,
     2     yanzuo                    trib_ptr,
     2     yanzuo                    dummy_comp_ptr,
     2     yanzuo                    dummy_jii_ptr );
     2     yanzuo             ENDWHILE find_trib_loop;
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION tributary_found;
     2     yanzuo           ( T ):
     2     yanzuo             /* cannot allow removal of this unit. */
     2     yanzuo             TASK ec := alp_tributary_exists__ec;
     2     yanzuo           ELSE:
     2     yanzuo             TASK comp_ptr->res_release_needed := T;
     2     yanzuo             TASK jii_ptr->removing_unit := T;
     2     yanzuo             /* These are to allow unit removal even though unit has never been up */
     2     yanzuo             TASK comp_ptr->res_release_attempts_left := jig_limits__t_rel_attempts_c;
     2     yanzuo             TASK comp_ptr->start_attempts_left := jig_limits__t_max_startatt_c;
     2     yanzuo             TASK clus_idx := jii_ptr->cluster_idx;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK unit_idx := unit_idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE jii_setup_unit_removal__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_setup_cluster_restart__r;
     2     yanzuo /*
     2     yanzuo  * Mark ALP cluster as being restarted, and turn on tributary restart
     2     yanzuo  * and resource releasing flags for all computers in the cluster.
     2     yanzuo  *
     2     yanzuo  * This function is called by master during synchronized JIIFIL
     2     yanzuo  * update, so it's ok to modify tributary unit flags directly.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  clus_idx         alp_cluster_idx__t,
     2     yanzuo     IN  include_act_sym  bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     key                  jii_search_key__t,
     2     yanzuo     ustate               unit_state_t,
     2     yanzuo     found                bool,
     2     yanzuo     jii_ptr              jiifil_ptr__t,
   216      h10hu     jii_comp_ptr         jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK jiafil_ptr__r( clus_idx )->restart_in_progress := T;
     2     yanzuo   TASK found := jii_find_first_comp__r( clus_idx, key,
     2     yanzuo                                         jii_ptr,
     2     yanzuo                                         jii_comp_ptr,
     2     yanzuo                                         dummy_jii_ptr );
   799     z7zhou 
   799     z7zhou                                      
     2     yanzuo   WHILE found;
  1314   chunchen 
     2     yanzuo     /* update 'is_wo_unit' flag so that the tributary
     2     yanzuo        units are restarted in the correct order: */
     2     yanzuo     DECISION ( NOT jii_ptr->is_level1_alp_unit ) AND
     2     yanzuo              ( jii_comp_ptr->proc_index = 0 );
     2     yanzuo       ( T ):
     2     yanzuo         TASK jii_ptr->is_wo_unit :=
     2     yanzuo              ( unit_state_by_phys_addr__r( jii_comp_ptr->phys_addr,
     2     yanzuo              ustate ) = success_ec )
     2     yanzuo              AND
     2     yanzuo              (( ustate | unit_state_t_mainstate_bm_c ) =
     2     yanzuo              unit_state_t_wo_c );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION include_act_sym OR
     2     yanzuo              ( jii_comp_ptr->phys_addr /= own_unit_phys_addr );
     2     yanzuo      ( T ):
     2     yanzuo         /* recovery has already restarted the SP-ALP1 unit, no need to force it */
  1314   chunchen         /* if unit is in se-nh or se-ou state do not need restart*/
  1314   chunchen           DECISION ( check_unit_in_se_state__r(jii_comp_ptr->phys_addr));
  1314   chunchen           ( F):
  1314   chunchen           TASK jii_ptr->trib_restart_needed := NOT jii_ptr->is_level1_alp_unit;
  1314   chunchen           ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
   671   huantang     TASK jii_comp_ptr->res_release_needed        := T;
   652   huantang     
   652   huantang     TASK jii_comp_ptr->res_release_attempts_left := jig_limits__t_rel_attempts_c;
     2     yanzuo 
   652   huantang 
     2     yanzuo     TASK found := jii_find_next_comp__r( clus_idx, key, jii_ptr,
     2     yanzuo                                          jii_comp_ptr, dummy_jii_ptr );
     2     yanzuo   ENDWHILE;
     2     yanzuo ENDPROCEDURE jii_setup_cluster_restart__r;
     2     yanzuo 
     2     yanzuo PROCEDURE order_unit_anns__r;
     2     yanzuo FPAR
     2     yanzuo     IN  utype            unit_type_t,
     2     yanzuo     IN  is_alp           bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     own_pid  pid,
     2     yanzuo     status   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK own_pid := SELF;
     2     yanzuo   TASK set_pid_computer_r( own_pid, own_unit_phys_addr );
     2     yanzuo   TASK status := re_event_subscribe_r( utype,
     2     yanzuo        unit_index_t_any_index_c,
     2     yanzuo        pidptr_t( @own_pid ),
     2     yanzuo        re_service_t_state_ch_exec_c,
     2     yanzuo        swover_step_t_not_applicable_c,
     2     yanzuo        re_ann_priority_t_normal_c,
     2     yanzuo        re_distr_width_t_single_unit_c,
     2     yanzuo        re_notif_tmo__c );
     2     yanzuo   DECISION is_alp;
     2     yanzuo     ( T ):
     2     yanzuo       TASK status := re_event_subscribe_r( utype,
     2     yanzuo            unit_index_t_any_index_c,
     2     yanzuo            pidptr_t( @own_pid ),
     2     yanzuo            re_service_t_unit_rst_imm_c,
     2     yanzuo            swover_step_t_not_applicable_c,
     2     yanzuo            re_ann_priority_t_normal_c,
     2     yanzuo            re_distr_width_t_single_unit_c,
     2     yanzuo            re_notif_tmo__c );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN status;
     2     yanzuo ENDPROCEDURE order_unit_anns__r;
     2     yanzuo 
   655    lifsong /**************************************************************************/
   655    lifsong PROCEDURE order_comp_anns_of_unit__r;
   655    lifsong /*
   655    lifsong  * Order state change notifications and rst_imm for all computers  in one JII rec
   655    lifsong  **************************************************************************/
   655    lifsong FPAR
   655    lifsong    IN/OUT   unit jiifil__t;
   655    lifsong 
   655    lifsong RETURNS
   655    lifsong    error_t;
   655    lifsong 
   655    lifsong DCL
   655    lifsong    i  byte,
   655    lifsong    ec  error_t := unsuccessful_ec;
   655    lifsong    
   655    lifsong START;
   655    lifsong 
   655    lifsong    TASK i := 0;
   655    lifsong    WHILE i < jiifil__t_n_comp_per_unit_c;
   655    lifsong    
   655    lifsong       DECISION valid_addr__r( unit.procs(i).phys_addr );
   655    lifsong       ( T ):
   655    lifsong          TASK ec := order_unit_anns__r( unit.procs(i).unit_type,
   655    lifsong                                 unit.is_level1_alp_unit OR
   655    lifsong                                 unit.is_level2_alp_unit );
   655    lifsong       ENDDECISION;
   655    lifsong       
   655    lifsong       TASK i := i + 1;
   655    lifsong    ENDWHILE;
   655    lifsong    
   655    lifsong    RETURN ec;
   655    lifsong ENDPROCEDURE order_comp_anns_of_unit__r;
   655    lifsong 
   595    lifsong PROCEDURE clear_tasks_when_alp_restart__r;
   595    lifsong FPAR
   595    lifsong    IN/OUT alp_jii  jiifil__t;
   595    lifsong 
   595    lifsong START;
   742   huantang    TASK  alp_jii.port_conf_needed := F;
   742   huantang    TASK  alp_jii.port_conf_ph2_needed := F;
  1096       pshu    TASK  alp_jii.port_conf_completed  := F;
   595    lifsong    TASK  alp_jii.apc_init_needed         := F;
   595    lifsong    TASK  alp_jii.procs(0).if_init_needed := F;
  1531       pshu    TASK  alp_jii.procs(0).if_init_ph2_needed := F; 
   595    lifsong    TASK  alp_jii.procs(0).vp_reporting_needed := F;
   595    lifsong    TASK  alp_jii.procs(0).half_conns_needed := F;
  1531       pshu    TASK  alp_jii.procs(0).half_conns_ph2_needed := F;
  1531       pshu 
   595    lifsong ENDPROCEDURE clear_tasks_when_alp_restart__r;
   595    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_alp_restart__r;
     2     yanzuo /*
     2     yanzuo  * This procedure adjusts JIIFIL contents as necessary when ALP1 unit
     2     yanzuo  * gets restarted.
     2     yanzuo  * - co_alp_unit updating flag is cleared from the WO-ALP1 unit
     2     yanzuo  * - warming_in_progress flag is cleared from JIAFIL
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN obju_type            unit_type_t,
     2     yanzuo    IN obju_idx             unit_index_t,
     2     yanzuo    IN in_alp_restarting    bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    jii_ptr                 jiifil_ptr__t,
  1427       pshu    co_unit_ptr             jiifil_ptr__t,
     2     yanzuo    comp_ptr                jii_comp_ptr__t,
     2     yanzuo    alp_ptr                 jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION jii_find_unit__r( obju_type, obju_idx,
     2     yanzuo            jii_ptr, comp_ptr, alp_ptr );
   504     z7zhou     ( T ):        
   504     z7zhou       DECISION jii_ptr->is_level1_alp_unit AND (comp_ptr = @jii_ptr->procs(0));
     2     yanzuo         ( T ):
  1427       pshu           DECISION( valid_addr__r(jii_ptr->co_alp_unit_phys_addr) AND 
  1427       pshu                     jii_find_computer__r(jii_ptr->co_alp_unit_phys_addr,
  1427       pshu                                          co_unit_ptr,comp_ptr,alp_ptr));
  1427       pshu           (T):
  1427       pshu                TASK co_unit_ptr->co_alp_unit_updated := F;
     2     yanzuo           ENDDECISION;
     2     yanzuo           /*STOP APC initialization if the unit is restarting, contiune initialization
     2     yanzuo           when next related fig_service_req_msg_s comes*/
     2     yanzuo           DECISION   in_alp_restarting;
   595    lifsong           (T):   
   595    lifsong             TASK clear_tasks_when_alp_restart__r($jii_ptr);
     2     yanzuo           ENDDECISION;
   742   huantang           TASK jii_ptr->co_alp_unit_updated  := F;
  1531       pshu           TASK jii_ptr->ready_for_reporting := F;
     2     yanzuo           TASK jii_ptr->trib_startup_allowed := F;
   733    lifsong    
     2     yanzuo           TASK jiafil_ptr__r( jii_ptr->cluster_idx )->warming_in_progress := F;
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* NIP1 sends ATM interface param request before
     2     yanzuo       figseb service request, so we must prevent JIGGER
     2     yanzuo       from responding to it too early: */
     2     yanzuo       DECISION jii_ptr->is_level2_alp_unit;
     2     yanzuo         ( T ):
     2     yanzuo           TASK jii_ptr->port_conf_completed := F;
     2     yanzuo       ENDDECISION;
  1427       pshu       CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,T,
  1427       pshu                             @'jii_store_alp_restart__r called for unit type-index 0x%x %d',obju_type,obju_idx);
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE jii_store_alp_restart__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
   685    lifsong PROCEDURE clear_mpqu_slave_if_ph2__r;
     2     yanzuo 
   685    lifsong FPAR
   685    lifsong    IN/OUT jii jiifil__t;
   685    lifsong 
   685    lifsong START;
   685    lifsong 
   773   huantang    DECISION flexi_mqpu_check__r(jii.unit_type);
   685    lifsong    ( T ):
   685    lifsong       TASK jii.procs(1).if_init_ph2_needed  := F,
   685    lifsong             jii.procs(2).if_init_ph2_needed  := F,
   685    lifsong             jii.procs(3).if_init_ph2_needed  := F;
   685    lifsong    ENDDECISION;
   685    lifsong    
   685    lifsong  ENDPROCEDURE clear_mpqu_slave_if_ph2__r;
   685    lifsong  
   834    lifsong PROCEDURE get_jig_pair_pid__r;
   685    lifsong 
   834    lifsong FPAR
   834    lifsong    IN/OUT jig_pair_pid           pid;
   834    lifsong 
   834    lifsong RETURNS error_t;
   834    lifsong 
   834    lifsong DCL
   834    lifsong    ec                               error_t,
   834    lifsong    phys_to_log_addr     phys_to_logical_address_t;
   834    lifsong 
   834    lifsong START;
   834    lifsong 
   834    lifsong    TASK jig_pair_pid := SELF;
   834    lifsong 
   834    lifsong    TASK phys_to_log_addr.phys_addr := own_unit_phys_addr;
   834    lifsong    
   834    lifsong    TASK ec := phys_to_logical_address_r( phys_to_log_addr );
   834    lifsong    DECISION ec;
   834    lifsong    ( /=success_ec ):
   834    lifsong       TASK dxsyslog_r( log_type_t_text_e_c,
   834    lifsong                                  @'JIGDAT: get_jig_pair_pid__r, phys_to_logical_address_r failed!'
   834    lifsong                                  'ec=0X%XH',
   834    lifsong                                  ec);
   834    lifsong       RETURN ec;
   834    lifsong    ENDDECISION;
   834    lifsong 
   834    lifsong    TASK set_pid_computer_r (jig_pair_pid, phys_to_log_addr.logl_addr);
   834    lifsong 
   834    lifsong    RETURN  ec;                       
   834    lifsong ENDPROCEDURE get_jig_pair_pid__r;
   834    lifsong 
  1305       pshu 
  1305       pshu 
  1305       pshu PROCEDURE set_boot_state__r;
  1305       pshu FPAR
  1305       pshu 	IN/OUT  jii              jiifil__t,
  1305       pshu 	IN      is_boot_loading  bool;
  1305       pshu DCL
  1305       pshu     proc_index             byte;
  1305       pshu START;
  1305       pshu 	TASK jii.procs(0).boot_loading := is_boot_loading;
  1323       pshu ENDPROCEDURE set_boot_state__r;
  1305       pshu 
  1305       pshu 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_figseb_req__r;
     2     yanzuo /*
     2     yanzuo  * This procedure stores FIGSEB service request and its parameters
     2     yanzuo  * into the data structures so that the work management module
     2     yanzuo  * can give out the appropriate port configuration tasks at the
     2     yanzuo  * right moment.
     2     yanzuo  *
     2     yanzuo  * The procedure must be called in both WO and SP units to
     2     yanzuo  * ensure consistency of data structures.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     /* DE71 fig_service_req_msg_s */
     2     yanzuo     IN      fig_msg_header fig_msg_header_t,
     2     yanzuo     IN      uxhw_type      ux_hw_block_type_t,
     2     yanzuo 
     2     yanzuo     /* mphy_port_number_t_min_c indicates Chorus flash boot */
     2     yanzuo     IN      reset_phase    fig_reset_phase_t,
     2     yanzuo 
     2     yanzuo     /* OUT: cluster where the unit belongs to */
     2     yanzuo     IN/OUT  cluster_idx    alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo     /* Return value tells if JIIFIL was modified. */
     2     yanzuo     bool;
     2     yanzuo DCL
     2     yanzuo     phase                  byte,
     2     yanzuo     jii                    jiifil__t,
    46       p5li     own_unit_jii           jiifil__t,
   630    lifsong     comp                   jii_comp_ptr__t := NIL,
   630    lifsong     alp, jii_ptr           jiifil_ptr__t := NIL,
   630    lifsong     co_alp_ptr             jiifil_ptr__t := NIL,
     2     yanzuo     ts                     jig_timestamp__t,
     2     yanzuo     ustate, ustate2        unit_state_t,
     2     yanzuo     wo_unit_index          unit_index_t,
     2     yanzuo     write_data             bool := F,
     2     yanzuo     flash_sw_request       bool,
     2     yanzuo     conf_need              bool,
     2     yanzuo     allow_act_sym_restart  bool := T,
     2     yanzuo     flag_ptr               bool_ptr__t,
     2     yanzuo     ignore_flag            bool,
    40       p5li     cluster_changed        bool := F,
     2     yanzuo     jig_pair_pid           pid,
     2     yanzuo     ec                     error_t := success_ec,
   117    lifsong     rxsprb                 pid,
  1054    lifsong     rumman                 pid;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     msg_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo     /* PR 28428ES08P, SP-OMU would be too busy to answer supervisor for some
     2     yanzuo        special configuration, SP-master ignores this message.
     2     yanzuo        WO-master would send update message to both WO and SP later. */
     2     yanzuo     DECISION IS_IN_WO_STATE;
     2     yanzuo     ( F ):
     2     yanzuo        SET ( NOW + 100, msg_timer );
     2     yanzuo        NEXTSTATE wait_for_cmd;
     2     yanzuo     ENDDECISION;
  1454       hhou     
     2     yanzuo     TASK flash_sw_request := ( reset_phase = fig_reset_phase_t_cho_flash_c );
     2     yanzuo     /* new unit? */
     2     yanzuo     DECISION jii_find_hms__r( fig_msg_header, jii_ptr, comp, alp );
     2     yanzuo     ( T ):
   200      fegao     
     2     yanzuo        TASK jii := $jii_ptr;
     2     yanzuo        /* Operator may have modified cabling since this unit info
     2     yanzuo         * was stored to JIIFIL. Verify that alp cluster idx
     2     yanzuo         * is still right; for alp units, verify fabric port number */
  1050       pshu        TASK  ec := verify_cabling_info__r( jii, cluster_changed );
     2     yanzuo     ELSE:
   612    lifsong        DECISION jii_ptr = NIL;
   612    lifsong        ( T ):
   612    lifsong          TASK ec := jii_build_record__r( computer_t_phys_not_defined_c,
   612    lifsong                                           fig_msg_header, F, jii );
   612    lifsong          TASK jii.rec_idx := jiifil_idx__t_new_c;
   612    lifsong        ELSE:
   630    lifsong          TASK ec := unsuccessful_ec;
   612    lifsong        ENDDECISION;
   612    lifsong        
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1454       hhou 
  1038      myang    DECISION ( jii.procs(0).unit_type = unit_type_t_dmpg_c ) AND 
  1038      myang                     ( is_piu_type_cdsp_dh__r( fig_msg_header.hms_address ) = F ) AND 
  1038      myang                     ( rx_bigvcc_enabled__r() = T );
  1038      myang    (T):
  1038      myang        TASK dxsyslog_r( log_type_t_text_e_c,
  1038      myang                         @'JIGDAT: DMPG is not DH type (rxbigvcc enabled)!' );
  1038      myang    ENDDECISION;
  1038      myang        
  1038      myang 
     2     yanzuo     DECISION ec;
     2     yanzuo     ( success_ec ):
  1462       hhou        DECISION ( if_rnc_support_this_piu__r(fig_msg_header.hms_address));
  1462       hhou        (F):
  1462       hhou            CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,
  1462       hhou                            @'JIGMAS:Unit HMS=%04X is not supported in current SW, See 3741 alarm'n'r', 
  1462       hhou                            fig_msg_header.hms_address);
  1462       hhou            TASK ec := success_ec, write_data := F;                                            
  1462       hhou            JOIN figsrv_req_send_msg; 
  1462       hhou        ENDDECISION;
  1462       hhou 
   115    lifsong        DECISION ( jii.procs(0).unit_type = unit_type_t_mxu_c ) AND
   115    lifsong                 ( unit_state_by_phys_addr__r( jii.procs(0).phys_addr, ustate ) = success_ec ) AND
   115    lifsong                 ( ustate = unit_state_t_woex_c OR
   115    lifsong                   ustate = unit_state_t_spex_c OR
   115    lifsong                   ustate = unit_state_t_blex_c OR
   115    lifsong                   ustate = unit_state_t_teex_c );
   115    lifsong 
   115    lifsong        ( T ):
   115    lifsong           TASK make_pid_r( rxsprb, 0xC000, 0x3AB, 0, 0 );
   115    lifsong           OUTPUT processor_restart_notif_s( fig_msg_header.hms_address, 
   115    lifsong                                             jii.procs(0).unit_type, 
   115    lifsong                                             jii.procs(0).unit_index, 
   115    lifsong                                             reset_nature_t_sw_mas_reset_c ) TO rxsprb;
   117    lifsong           TASK make_pid_r( rumman, 0xC000, 0x3F6, 0, 0 );
   117    lifsong           OUTPUT processor_restart_notif_s( fig_msg_header.hms_address, 
   117    lifsong                                             jii.procs(0).unit_type, 
   117    lifsong                                             jii.procs(0).unit_index, 
   117    lifsong                                             reset_nature_t_sw_mas_reset_c ) TO rumman;
   834    lifsong           TASK ec := success_ec, write_data := F;                                            
   834    lifsong           JOIN figsrv_req_send_msg;                           
   115    lifsong        ENDDECISION;
   115    lifsong        
     2     yanzuo        DECISION flash_sw_request OR
   590       p5li                 reset_phase /= fig_reset_phase_t_by_leader_c;
     2     yanzuo        ( T ):
     2     yanzuo           TASK phase    := 1,
     2     yanzuo                flag_ptr := @jii.port_conf_needed,
     2     yanzuo                ts       := jii.port_conf_timestamp;
     2     yanzuo        ELSE:
     2     yanzuo           TASK phase    := 2,
     2     yanzuo                flag_ptr := @jii.port_conf_ph2_needed,
     2     yanzuo                ts       := jii.port_conf_ph2_timestamp;
     2     yanzuo        ENDDECISION;
     2     yanzuo        /* if the request was sent by flash sw, the unit is in
     2     yanzuo         * boot loading mode. */
     2     yanzuo 
  1305       pshu        CALL set_boot_state__r(jii,flash_sw_request);
  1305       pshu 
     2     yanzuo        /* Decide whether unit should be handled as active or not. */
     2     yanzuo        DECISION unit_state_by_phys_addr__r( jii.procs(0).phys_addr,
     2     yanzuo                                             ustate );
     2     yanzuo        ( /= success_ec ):
     2     yanzuo           TASK ustate := unit_state_t_se_c;
     2     yanzuo        ELSE:
     2     yanzuo           TASK ustate := (ustate | unit_state_t_mainstate_bm_c);
     2     yanzuo 
     2     yanzuo           /* For some unknown reason, the fig_service_req_s of a sp alp unit
     2     yanzuo              will comes before wo alp unit, in this situation, jii_find_computer__r
     2     yanzuo              will get a null point to the ALP unit, it can cause JIG crash.
     2     yanzuo              Now ignore this request, UXMANA will send the request again later. */
     2     yanzuo 
     2     yanzuo           DECISION  jii.is_level1_alp_unit AND
     2     yanzuo                      ustate = unit_state_t_sp_c;
     2     yanzuo           ( T ):
     2     yanzuo               DECISION jii_find_computer__r( jii.co_alp_unit_phys_addr, co_alp_ptr,
     2     yanzuo                                              dummy_comp_ptr, dummy_jii_ptr );
     2     yanzuo               ( F ):
   834    lifsong                   TASK ec := success_ec, write_data := F;                                                        
   834    lifsong                   JOIN figsrv_req_send_msg;
     2     yanzuo               ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo 
     2     yanzuo           /* Handle a TE-ALP unit or SFU which does not have co-unit
     2     yanzuo            * or whose co-unit is separated as a WO unit. */
     2     yanzuo           DECISION ( jii.is_level1_alp_unit OR
     2     yanzuo                      jii.unit_type = unit_type_t_sfu_c )
     2     yanzuo                    AND
   799     z7zhou                    (ustate = unit_state_t_te_c OR
   799     z7zhou                      ustate = unit_state_t_bl_c)
     2     yanzuo                    AND
     2     yanzuo                    ( active_unit_index_r( jii.unit_type,
     2     yanzuo                                           jii.unit_index,
     2     yanzuo                                           wo_unit_index ) /= success_ec
     2     yanzuo                      OR
     2     yanzuo                      wo_unit_index = jii.unit_index )
     2     yanzuo                    AND
     2     yanzuo                    ( invalid_addr__r( jii.co_alp_unit_phys_addr )
     2     yanzuo                      OR
     2     yanzuo                      /*This check is added for trail situation, when SP-MXU has been sent to trail side,
     2     yanzuo                      WO-MXU in original side can be changed to TE-EX if required*/
     2     yanzuo                      ( unit_state_by_phys_addr__r(
     2     yanzuo                          jii.co_alp_unit_phys_addr, ustate2 ) /= success_ec)
     2     yanzuo                      /**/
     2     yanzuo                      OR
     2     yanzuo                      ( unit_state_by_phys_addr__r(
     2     yanzuo                          jii.co_alp_unit_phys_addr, ustate2 ) = success_ec
     2     yanzuo                        AND
     2     yanzuo                        (( ustate2 | unit_state_t_mainstate_bm_c )
     2     yanzuo                         = unit_state_t_se_c )));
     2     yanzuo           ( T ):
     2     yanzuo              TASK ustate := unit_state_t_wo_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo           /* Handle TE-NIP1 as WO unit */
     2     yanzuo           DECISION jii.is_level2_alp_unit AND
     2     yanzuo                    ((ustate | unit_state_t_mainstate_bm_c)
     2     yanzuo                     = unit_state_t_te_c );
     2     yanzuo           ( T ):
     2     yanzuo              TASK ustate := unit_state_t_wo_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK conf_need := (ustate /= unit_state_t_se_c) AND
     2     yanzuo                 (ustate /= unit_state_t_tr_c);
     2     yanzuo 
     2     yanzuo        /* At fault swithover, pare mxu unit restart, it might get
     2     yanzuo           fig_service_request at SP state, then the port_config_needed is
     2     yanzuo           set to T and apc_init_needed set to F, then swithover happened,
     2     yanzuo           it turns to WO state, and it get fig_service_request again, then it
     2     yanzuo           will ignore this request. So that the apc initialization will missed.
     2     yanzuo           Now here check also apc_init_needed flag when unit at WO state and
     2     yanzuo           ph 1 */
     2     yanzuo 
     2     yanzuo        DECISION ustate = unit_state_t_wo_c AND phase = 1 ;
     2     yanzuo        ( T ):
     2     yanzuo           TASK ignore_flag := $flag_ptr AND jii.apc_init_needed;
     2     yanzuo        ELSE:
     2     yanzuo           TASK ignore_flag := $flag_ptr;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /* Was this a resending of a pending or recently-serviced request? */
     2     yanzuo        DECISION ( jii.procs(0).start_attempts_left > 0 )
     2     yanzuo                 AND
     2     yanzuo                 ( ustate = unit_state_t_wo_c ) = jii.is_wo_unit
     2     yanzuo                 AND
     2     yanzuo                 ( ignore_flag
     2     yanzuo                   OR
     2     yanzuo                   dword( curr_timestamp__r() - ts ) <
    40       p5li                   jig_timestamp__t_expiration_c )
    40       p5li                 AND NOT cluster_changed;
     2     yanzuo        ( T ):
     2     yanzuo           /* yes; nothing needs to be done. */
     2     yanzuo        ELSE:
     2     yanzuo           CALL fig_service_req_log__r( fig_msg_header, reset_phase, jii.procs(0).phys_addr );
     2     yanzuo           /* Store parameters for the message which will be sent to UAMPRB. */
     2     yanzuo           TASK jii.fig_req_uxhwb_type := uxhw_type,
     2     yanzuo                jii.fig_req_rphase     := reset_phase;
     2     yanzuo           TASK write_data     := T,
     2     yanzuo                jii.is_wo_unit := (ustate = unit_state_t_wo_c);
     2     yanzuo 
     2     yanzuo           DECISION phase;
     2     yanzuo           ( 1 ):
     2     yanzuo              /* reset flags to unit restart state */
     2     yanzuo              TASK jii.co_alp_unit_updated          := F,
     2     yanzuo                   jii.port_conf_needed             := conf_need,
     2     yanzuo                   jii.port_conf_completed          := F,
     2     yanzuo                   jii.port_conf_ph2_needed         := F,
     2     yanzuo                   jii.fpga_needed                  := F,
     2     yanzuo                   jii.tm_fpga_xconn_needed         := F,
     2     yanzuo                   jii.sym_mxu_flag                 := F,
     2     yanzuo                   jii.apc_init_needed              := F,
     2     yanzuo                   jii.apc_init_ph2_needed          := F,
     2     yanzuo                   jii.alp_warmup_needed            := F,
     2     yanzuo                   jii.ready_for_reporting          := F,
     2     yanzuo                   jii.trib_restart_needed          := F,
     2     yanzuo                   jii.procs(0).if_init_completed   := F,
     2     yanzuo                   jii.procs(0).if_init_ph2_needed  := F,
   702    lifsong                   jii.procs(0).start_attempts_left := jig_limits__t_max_startatt_c;
   702    lifsong                   
   702    lifsong              TASK clear_mpqu_slave_if_ph2__r(jii);
     2     yanzuo 
     2     yanzuo              /* WO APC unit and WO/SP app unit */
     2     yanzuo              /*Add test state because APC in TE unit also need be configured by 17518ES11P*/
     2     yanzuo              DECISION jii.is_level1_alp_unit AND ( jii.is_wo_unit OR (ustate = unit_state_t_te_c) OR app_unit_check__r( jii ));
     2     yanzuo              ( T ):
     2     yanzuo                 DECISION app_unit_check__r( jii );
     2     yanzuo                 ( T ):
     2     yanzuo                    TASK jii.apc_init_needed := F;
     2     yanzuo                 ELSE:
     2     yanzuo                    TASK jii.apc_init_needed := conf_need;
     2     yanzuo                 ENDDECISION;
     2     yanzuo 
     2     yanzuo                 DECISION ( app_mxu_unit_check__r( jii )); /* AND jii.sym_mxu_flag ) ; */
     2     yanzuo                 ( T ):
     2     yanzuo                    DECISION sym_mxu_apc_init_done__pv;
     2     yanzuo                    ( F ):
     2     yanzuo                       TASK sym_mxu_apc_init_done__pv := T;
     2     yanzuo                    ENDDECISION;
     2     yanzuo                 ENDDECISION;
     2     yanzuo              ENDDECISION;
     2     yanzuo 
     2     yanzuo              DECISION (jii.is_level1_alp_unit AND jii.is_wo_unit) OR app_unit_check__r( jii );
     2     yanzuo              ( T ):
     2     yanzuo                 TASK jii.procs(0).res_release_needed :=
     2     yanzuo                          ( jii.rec_idx /= jiifil_idx__t_new_c ) AND
     2     yanzuo                          jiafil_ptr__r( jii.cluster_idx )->resources_exist;
   519    lifsong                 DECISION iw8s1_unit_check__r(jii.unit_type);
   519    lifsong                 ( T ):
   519    lifsong                   TASK jii.procs(1).res_release_needed := jii.procs(0).res_release_needed;
   519    lifsong                 ENDDECISION;
     2     yanzuo              ENDDECISION;
     2     yanzuo 
     2     yanzuo              DECISION jii.is_level2_alp_unit;
     2     yanzuo              ( T ):
     2     yanzuo                 TASK jii.procs(0).res_release_needed :=
     2     yanzuo                          ( jii.rec_idx /= jiifil_idx__t_new_c ) AND
     2     yanzuo                          jii.procs(0).half_conns_created;
     2     yanzuo                 TASK jii.apc_init_needed := conf_need;
     2     yanzuo              ENDDECISION;
     2     yanzuo 
     2     yanzuo              /* if WO-MXU gets restarted before tributary startup
     2     yanzuo                 is allowed, there is no need to restart A-SYM unit
     2     yanzuo                 since nothing has been reported yet and other units
     2     yanzuo                 haven't gotten their message connections yet. */
  1303      tinyu              
  1303      tinyu              TASK allow_act_sym_restart := NOT jii.sd4_init_needed;
     2     yanzuo              TASK jii.trib_startup_allowed := F;
     2     yanzuo              DECISION ( jii.unit_type = unit_type_t_sfu_c ) AND
     2     yanzuo                       jii.is_wo_unit;
     2     yanzuo              ( T ):
     2     yanzuo                 TASK jii.sd4_init_needed := conf_need;
     2     yanzuo              ENDDECISION;
     2     yanzuo           ELSE: /* phase 2 */
     2     yanzuo              TASK jii.port_conf_ph2_needed := conf_need;
  1529   huantang        		 DECISION app_unit_check__r( jii ) ;
     2     yanzuo              ( T ):
     2     yanzuo                 TASK jii.procs(0).res_release_needed :=
     2     yanzuo                          ( jii.rec_idx /= jiifil_idx__t_new_c ) AND
     2     yanzuo                          jiafil_ptr__r( jii.cluster_idx )->resources_exist;
     2     yanzuo              ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo     ( alp_cluster_missing__ec ):
     2     yanzuo        /* cannot store unit data yet because its ALP unit
     2     yanzuo         * is not present in JIIFIL. Ignore the request.
     2     yanzuo         */
     2     yanzuo        TASK ec := success_ec, write_data := F;
     2     yanzuo 
     2     yanzuo     ELSE:
     2     yanzuo        /* unit was not recognized: notify self about unknown unit */
     2     yanzuo #if (F)
     2     yanzuo        TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo                          log_write_item_t(@ec), 1,
     2     yanzuo                          log_text_info_t(@'JIGDAT: JII_BUILD_REC ERROR:'));
     2     yanzuo #endif
     2     yanzuo     ENDDECISION;
     2     yanzuo 
   834    lifsong figsrv_req_send_msg:
   834    lifsong     DECISION get_jig_pair_pid__r(jig_pair_pid);
     2     yanzuo     ( /= success_ec ):
   834    lifsong       TASK ec := success_ec, write_data := F;
     2     yanzuo     ENDDECISION;
   834    lifsong     
     2     yanzuo     DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo        DECISION write_data;
     2     yanzuo        ( T ):
     2     yanzuo           OUTPUT jig_write_jiifil_rec__s( jii ) TO jig_pair_pid,
     2     yanzuo                  SET DELIVERY_RANGE = 3;
     2     yanzuo        ELSE:
     2     yanzuo           OUTPUT jig_continue__s TO jig_pair_pid,
     2     yanzuo                  SET DELIVERY_RANGE = 3;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo        OUTPUT jig_unknown_unit__s( fig_msg_header,
     2     yanzuo                                    uxhw_type, reset_phase,
     2     yanzuo                                    sar_type_t(0) ) TO jig_pair_pid,
     2     yanzuo                                    SET DELIVERY_RANGE = 3;
     2     yanzuo     ENDDECISION;
     2     yanzuo     SET ( NOW + 100, msg_timer );
     2     yanzuo     NEXTSTATE wait_for_cmd;
     2     yanzuo 
     2     yanzuo STATE wait_for_cmd;
     2     yanzuo 
     2     yanzuo   /*
     2     yanzuo   * Both WO and SP master receive and write the data
     2     yanzuo   * initialized by the WO master process.
     2     yanzuo   */
     2     yanzuo   INPUT jig_write_jiifil_rec__s( jii );
     2     yanzuo     DCL
     2     yanzuo        dummy_fig_hms_header   fig_msg_header_t,
     2     yanzuo        a_sym_found            bool,
     2     yanzuo        a_sym_ptr              jiifil_ptr__t,
  1218       j2he        omu_mxu_ptr         jiifil_ptr__t,       
  1218       j2he        omu_comp_ptr           jii_comp_ptr__t,
  1218       j2he        omu_sym_found 	 bool,
     2     yanzuo        status                 error_t,
     2     yanzuo        l_alp_restarting       bool := F;
     2     yanzuo     /* When adding new unit, order recovery announcements
     2     yanzuo     - state change notifications to catch moving of some unit
     2     yanzuo     from own slice to the other slice
     2     yanzuo     - ALP1 unit restart notifications
     2     yanzuo     */
     2     yanzuo     DECISION jii.rec_idx = jiifil_idx__t_new_c AND IS_IN_WO_STATE;
     2     yanzuo       ( T ):
   655    lifsong          TASK status :=  order_comp_anns_of_unit__r(jii);
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK cluster_idx := jii.cluster_idx;
    51    lifsong 
     2     yanzuo     CALL jii_write_local_record__r( jii );
  1320      tinyu     CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,T,
  1439       pshu    @'JIGMAS:COMP=0x%04X, jii_store_figseb_req__r'n'r    sd4_init_needed : 0x%X 'n'r    jii.co_alp_unit_updated: 0x%X 'n'r    port_conf_needed:  0x%X 'n'r    port_conf_completed: 0x%X 'n'r    port_conf_ph2_needed: 0x%X 'n'r    fpga_needed: 0x%X 'n'r    tm_fpga_xconn_needed 3: 0x%X 'n'r    sym_mxu_flag: 0x%X 'n'r    apc_init_needed: 0x%X 'n'r    apc_init_ph2_needed : 0x%X 'n'r    alp_warmup_needed : 0x%X 'n'r    ready_for_reporting: 0x%X 'n'r    trib_restart_needed: 0x%X 'n'r    trib_restart_needed: 0x%X 'n'r    procs(0).if_init_completed : 0x%X 'n'r    procs(0).if_init_ph2_needed: 0x%X 'n'r    procs(0).res_release_needed: 0x%X 'n'r'
  1320      tinyu          ,jii.procs(0).phys_addr
  1320      tinyu          ,jii.sd4_init_needed 
  1320      tinyu          ,jii.co_alp_unit_updated
  1320      tinyu          ,jii.port_conf_needed 
  1320      tinyu          ,jii.port_conf_completed 
  1320      tinyu          ,jii.port_conf_ph2_needed 
  1320      tinyu          ,jii.fpga_needed
  1320      tinyu          ,jii.tm_fpga_xconn_needed                  
  1320      tinyu          ,jii.sym_mxu_flag                  
  1320      tinyu          ,jii.apc_init_needed                 
  1320      tinyu          ,jii.apc_init_ph2_needed    
  1320      tinyu          ,jii.alp_warmup_needed    
  1320      tinyu          ,jii.ready_for_reporting   
  1320      tinyu          ,jii.trib_restart_needed 
  1320      tinyu          ,jii.trib_restart_needed    
  1320      tinyu          ,jii.procs(0).if_init_completed    
  1320      tinyu          ,jii.procs(0).if_init_ph2_needed    
  1320      tinyu          ,jii.procs(0).res_release_needed  );
     2     yanzuo     /* Ensure that cluster warmup indicator is off if ALP1 unit has been
     2     yanzuo     restarted. This prevents the ALP1 cluster from getting stuck
     2     yanzuo     because of one missing unit restart notification. */
     2     yanzuo     DECISION jii.is_level1_alp_unit AND
     2     yanzuo              jii.port_conf_needed AND
     2     yanzuo              cluster_idx /= alp_cluster_idx__t_invalid_c AND
     2     yanzuo              jiafil_ptr__r(cluster_idx)->warming_in_progress;
     2     yanzuo       ( T ):
     2     yanzuo         CALL jii_store_alp_restart__r( jii.unit_type, jii.unit_index, l_alp_restarting);
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION jii.is_level1_alp_unit AND jii.is_wo_unit;
   361    lifsong     ( T ):
     2     yanzuo         /* if we just added an ALP unit, and active OMU is not
     2     yanzuo         * yet present in JIIFIL (ie. sym-mxu is not known),
     2     yanzuo         * try to add it: */
   494     yanzuo         DECISION ( unit_type_t_mxu_c = jii.unit_type AND
   494     yanzuo                    alp_cluster_idx__t_invalid_c = sym_mxu_cluster__pv );
   494     yanzuo         ( T ):
     2     yanzuo             /* see if active OMU info is already in JIIFIL: */
     2     yanzuo             TASK a_sym_found := jii_find_computer__r( own_unit_phys_addr,
     2     yanzuo                  a_sym_ptr,
     2     yanzuo                  dummy_comp_ptr,
     2     yanzuo                  dummy_jii_ptr );
     2     yanzuo             /* Try to init active OMU record. It only works if the
     2     yanzuo             SYM-MXU is present in JIIFIL. */
     2     yanzuo 
     2     yanzuo             TASK ec := jii_build_record__r( own_unit_phys_addr,
     2     yanzuo                  dummy_fig_hms_header, F,
    46       p5li                  own_unit_jii );
     2     yanzuo             DECISION ec;
   754     yanzuo             ( success_ec ):
     2     yanzuo                 /* No need to sync the update with spare OMU
     2     yanzuo                 because it cannot be up yet. */
     2     yanzuo 
     2     yanzuo                 /* Update A-SYM cluster idx or add it to JIIFIL
     2     yanzuo                 * depending on whether it already exists there.
     2     yanzuo                 */
    46       p5li                 TASK sym_mxu_cluster__pv := own_unit_jii.cluster_idx;
    46       p5li                 TASK sym_mxu_is_app__pv := app_unit_check__r( jii );
     2     yanzuo                 DECISION a_sym_found;
   754     yanzuo                 ( T ):
     2     yanzuo                     TASK a_sym_ptr->cluster_idx := sym_mxu_cluster__pv;
   754     yanzuo                 ELSE:
    46       p5li                     TASK own_unit_jii.rec_idx := jiifil_idx__t_new_c;
    46       p5li                     CALL jii_write_local_record__r( own_unit_jii );
     2     yanzuo                 ENDDECISION;
  1218       j2he                 
  1218       j2he                 TASK omu_sym_found := jii_find_computer__r( own_unit_phys_addr,
  1218       j2he                  											a_sym_ptr,
  1218       j2he                  											omu_comp_ptr,
  1218       j2he                  											omu_mxu_ptr );
  1185       j2he 
  1218       j2he 		  DECISION if_bigvcc_bigdma_permit__r(omu_mxu_ptr->unit_type, omu_mxu_ptr->unit_index);
  1185       j2he 		  ( T ):
  1185       j2he                     CALL set_rx_bigvcc__r();
  1384   weigchen                     TASK g_bigdma_enable := T;
  1185       j2he                 ENDDECISION;
  1172   weigchen                
  1120   weigchen                 CALL register_type_of_app_mxu__r();
   754     yanzuo             ELSE:
   754     yanzuo                 TASK dxsyslog_r( log_type_t_text_i_c,
   754     yanzuo                                 @'JIGDAT: JII build fail!'
  1062       pshu                                 'unit address=%XH, error=%XH',
   754     yanzuo                                 own_unit_phys_addr, ec);
   754     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RESET ( msg_timer );
     2     yanzuo     RETURN T;
     2     yanzuo 
     2     yanzuo   /* Do not modify data. Do something to prevent the unit from
     2     yanzuo   * sending more requests (maybe separate it?)
     2     yanzuo   */
     2     yanzuo   INPUT jig_unknown_unit__s( fig_msg_header, uxhw_type, reset_phase, ? );
     2     yanzuo     RESET ( msg_timer );
  1140      tinyu     /*CALL stop_figseb_requests__r( fig_msg_header, uxhw_type, reset_phase );*/
  1140      tinyu     CALL stop_figseb_requests__r( fig_msg_header);
     2     yanzuo     RETURN F;
     2     yanzuo 
     2     yanzuo   /* Do nothing. */
     2     yanzuo   INPUT jig_continue__s;
     2     yanzuo     RESET ( msg_timer );
     2     yanzuo     RETURN F;
     2     yanzuo 
     2     yanzuo   /* Something went wrong. */
     2     yanzuo   INPUT msg_timer;
   630    lifsong 
   630    lifsong     TASK dxsyslog_r( log_type_t_text_i_c,
   630    lifsong          @'JIGDAT: JIGDAT: MSG_TIMER EXPIRED!'
   630    lifsong          'unit_hms=%XH',fig_msg_header.hms_address);         
     2     yanzuo     RETURN F;
     2     yanzuo ENDSTATE wait_for_cmd;
     2     yanzuo ENDPROCEDURE jii_store_figseb_req__r;
     2     yanzuo 
   733    lifsong PROCEDURE fig_service_req_reached__r;
   733    lifsong FPAR
   733    lifsong    IN jii_ptr jiifil_ptr__t;
   733    lifsong 
   733    lifsong RETURNS
   733    lifsong    bool;
   733    lifsong 
   733    lifsong START;
   733    lifsong 
   733    lifsong    RETURN ( jii_ptr->port_conf_needed OR jii_ptr->port_conf_completed );
   733    lifsong    
   733    lifsong ENDPROCEDURE fig_service_req_reached__r;
   733    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_atm_param_req__r;
     2     yanzuo /*
     2     yanzuo  * This procedure stores ATM interface parameter request
     2     yanzuo  * into the data structures so that the work management module
     2     yanzuo  * can give out the internal interface initialization
     2     yanzuo  * task at the right moment.
     2     yanzuo  *
     2     yanzuo  * The procedure must be called in both WO and SP units to
     2     yanzuo  * ensure consistency of data structures.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     /* IN: parameters from the original query */
     2     yanzuo     IN      fig_msg_header fig_msg_header_t,
     2     yanzuo     IN      boot_loading   bool,
     2     yanzuo     IN      sar_type       sar_type_t,
     2     yanzuo     /* OUT: cluster where the unit belongs to */
     2     yanzuo     IN/OUT  cluster_idx    alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool; /* indicates whether new data was stored. */
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     jii                  jiifil__t,
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     phys_addr            unit_address_t,
     2     yanzuo     hms_addr             hms_address_t,
     2     yanzuo     alp                  jiifil_ptr__t,
     2     yanzuo     ts                   jig_timestamp__t,
     2     yanzuo     op_pending           bool,
     2     yanzuo     check_pconf          bool := F,
     2     yanzuo     flag_ptr             bool_ptr__t,
   834    lifsong     ustate               unit_state_t,
   834    lifsong     jig_pair_pid       pid,
   834    lifsong     write_data        bool := F,
   834    lifsong     ec                     error_t := success_ec;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     msg_timer;
     2     yanzuo 
     2     yanzuo START;
   834    lifsong 
   834    lifsong     DECISION IS_IN_WO_STATE;
   834    lifsong     ( F ):
   834    lifsong        SET ( NOW + 500, msg_timer );
   834    lifsong        NEXTSTATE wait_for_update_msg;
   834    lifsong     ENDDECISION;
   834    lifsong     
     2     yanzuo     TASK jii_ptr := NIL;
     2     yanzuo     /* find unit info from JIIFIL */
     2     yanzuo     DECISION jii_find_hms__r( fig_msg_header, jii_ptr, comp_ptr, alp )
     2     yanzuo              AND
     2     yanzuo              /* verify that the request type matches with the
     2     yanzuo                 configured unit type (DMX/Chorus): */
     2     yanzuo              ( sar_type = sar_type_t_mssar_c ) =
   834    lifsong              ( unit_classification_r( comp_ptr->unit_type, unit_class_t_dmx_c ) = success_ec );
     2     yanzuo      ( T ):
   733    lifsong         DECISION fig_service_req_reached__r(jii_ptr);
   733    lifsong         ( F ):
   834    lifsong              TASK ec := success_ec, write_data := F;
   834    lifsong              JOIN atm_param_req_send_msg; 
   733    lifsong         ENDDECISION;
     2     yanzuo         /* extract the data to local variable for modifications */
     2     yanzuo         TASK jii := $jii_ptr;
   155    lifsong         
   155    lifsong         DECISION jii.unit_type = unit_type_t_mxu_c;
   155    lifsong         ( T ):
   155    lifsong            DECISION sym_mxu_cluster__pv = alp_cluster_idx__t_invalid_c OR
   155    lifsong                     sym_mxu_is_app__pv /= app_mxu_unit_check__r( jii );
   155    lifsong            ( T ):
   834    lifsong                TASK ec := success_ec, write_data := F;
   834    lifsong                JOIN atm_param_req_send_msg; 
   155    lifsong            ENDDECISION;   
   155    lifsong         ENDDECISION;
   155    lifsong         
     2     yanzuo         TASK comp_ptr := @jii.procs( comp_ptr->proc_index );
     2     yanzuo         TASK comp_ptr->has_pqsar := (sar_type = sar_type_t_pqii_sar_c) OR (sar_type = sar_type_t_pqiii_sar_c);
     2     yanzuo 
     2     yanzuo         /*CR16906 JIGGER need to diffrenciate the loading phase of slave units*/
     2     yanzuo         DECISION comp_ptr->proc_index /= 0;
     2     yanzuo         (T):
     2     yanzuo             TASK comp_ptr->boot_loading := boot_loading;
     2     yanzuo         ENDDECISION;
     2     yanzuo 
     2     yanzuo 
  1151   huantang         DECISION unit_state_by_phys_addr__r( comp_ptr->phys_addr, ustate ) = success_ec AND
     2     yanzuo                  (ustate | unit_state_t_mainstate_bm_c) = unit_state_t_se_c;
     2     yanzuo          ( T ):
  1151   huantang             TASK ec := success_ec, write_data := F;
  1151   huantang             JOIN atm_param_req_send_msg; 
     2     yanzuo         ENDDECISION;
  1151   huantang         DECISION ( boot_loading OR
     2     yanzuo                    ((NOT comp_ptr->vp_reporting_needed) AND
     2     yanzuo                     (NOT comp_ptr->vp_reported)));
     2     yanzuo          ( T ):
     2     yanzuo             TASK ts := comp_ptr->if_init_timestamp;
     2     yanzuo             TASK op_pending := comp_ptr->if_init_needed AND
     2     yanzuo                      comp_ptr->start_attempts_left > 0;
     2     yanzuo             TASK flag_ptr := @comp_ptr->if_init_needed;
     2     yanzuo             TASK check_pconf := T;
     2     yanzuo          ELSE:
     2     yanzuo             TASK ts := comp_ptr->if_init_ph2_timestamp;
     2     yanzuo             TASK op_pending := comp_ptr->if_init_ph2_needed AND
     2     yanzuo                      comp_ptr->start_attempts_left > 0;
     2     yanzuo             TASK flag_ptr := @comp_ptr->if_init_ph2_needed;
     2     yanzuo         ENDDECISION;
     2     yanzuo 
     2     yanzuo         /* Ignore parameter request until FIGSEB service request
     2     yanzuo            has arrived and cleared if_init_completed flag,
     2     yanzuo            or until the unit has sent the request several times.
     2     yanzuo          */
     2     yanzuo         DECISION check_pconf
     2     yanzuo                  AND
     2     yanzuo                  comp_ptr->proc_index = 0
     2     yanzuo                  AND
     2     yanzuo                  jii.procs(0).if_init_completed
     2     yanzuo                  AND
     2     yanzuo                  $bytepointer(@jii.procs(0).if_init_completed) < 5;
     2     yanzuo          ( T ):
     2     yanzuo             TASK $bytepointer(@jii.procs(0).if_init_completed) :=
     2     yanzuo                      $bytepointer(@jii.procs(0).if_init_completed) + 1;
   834    lifsong              TASK ec := success_ec, write_data := F;
     2     yanzuo          ELSE:
     2     yanzuo             /* was this a resending of a recently-serviced request? */
     2     yanzuo             DECISION op_pending OR
     2     yanzuo                      ( dword( curr_timestamp__r() - ts ) <=
     2     yanzuo                        jig_timestamp__t_expiration_c );
     2     yanzuo              ( T ):
   834    lifsong                    TASK ec := success_ec, write_data := F;
     2     yanzuo              ELSE:
     2     yanzuo                 CALL int_interf_param_req_log__r( fig_msg_header, boot_loading, comp_ptr->phys_addr );
     2     yanzuo                 TASK $flag_ptr := T;
     2     yanzuo 
   590       p5li                 /* do not touch start_attempts_left if res release
   382     yanzuo                    is already going on... */
   590       p5li                 /* if res release done,restore start_attempts_left then update JII file;
   382     yanzuo                 otherwise jigger ignores ATM interface request in case that FIGSEB send this request before port configuration job begin */
   590       p5li                 
   590       p5li                 DECISION (NOT comp_ptr->res_release_needed) OR (comp_ptr->proc_index > 0);
   382     yanzuo                  ( T ):
   382     yanzuo                     TASK comp_ptr->start_attempts_left := jig_limits__t_max_startatt_c;
   382     yanzuo                 ENDDECISION;
  1521       pshu                 TASK ec := success_ec, write_data := T;
  1521       pshu 
     2     yanzuo             ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo      ELSE:
     2     yanzuo         /*
     2     yanzuo          * If the unit is not yet present in JIIFIL but exists in
     2     yanzuo          * the configuration in a valid state, do not take any action.
     2     yanzuo          * It should eventually send a port configuration request.
     2     yanzuo          */
     2     yanzuo         TASK hms_address_t_make_ext_r(
     2     yanzuo                hms_addr,
     2     yanzuo                hms_processor_index_t   ( fig_msg_header.extended_addr ),
     2     yanzuo                hms_address_t_rack_r    ( fig_msg_header.hms_address ),
     2     yanzuo                hms_address_t_subrack_r ( fig_msg_header.hms_address ),
     2     yanzuo                hms_address_t_ppa_r     ( fig_msg_header.hms_address ));
     2     yanzuo         DECISION jii_ptr = NIL
     2     yanzuo                  AND
     2     yanzuo                  hms_addr_to_phys_addr__r( hms_addr, phys_addr ) = success_ec
     2     yanzuo                  AND
     2     yanzuo                  unit_state_by_phys_addr__r( phys_addr, ustate ) = success_ec
     2     yanzuo                  AND
     2     yanzuo                  (ustate | unit_state_t_mainstate_bm_c) /= unit_state_t_se_c;
     2     yanzuo          ( T ):
     2     yanzuo             /* ignore this request for now */
   834    lifsong             TASK ec := success_ec, write_data := F;
     2     yanzuo          ELSE:
     2     yanzuo             /* The computer is separated, or not in the current HW configuration. */
   834    lifsong             TASK ec := unsuccessful_ec, write_data := F;
   834    lifsong         ENDDECISION;
   834    lifsong     ENDDECISION;
   834    lifsong     
   834    lifsong atm_param_req_send_msg:    
   834    lifsong     DECISION get_jig_pair_pid__r(jig_pair_pid);
   834    lifsong     ( /= success_ec ):
   834    lifsong        TASK ec := success_ec, write_data := F;
   834    lifsong     ENDDECISION;
   834    lifsong     
   834    lifsong     DECISION ec;
   834    lifsong     ( success_ec ):
   834    lifsong        DECISION write_data;
   834    lifsong        ( T ):
   834    lifsong           OUTPUT jig_write_jiifil_rec__s( jii ) TO jig_pair_pid, 
   834    lifsong                                                 SET DELIVERY_RANGE = 3;
   834    lifsong        ELSE:
   834    lifsong           OUTPUT jig_continue__s TO jig_pair_pid,
   834    lifsong                                   SET DELIVERY_RANGE = 3;
   834    lifsong        ENDDECISION;
   834    lifsong     ELSE:
   834    lifsong           OUTPUT jig_unknown_unit__s( fig_msg_header,
     2     yanzuo                                         ux_hw_block_type_t( 0 ),
     2     yanzuo                                         0,
   834    lifsong                                         sar_type ) TO jig_pair_pid,
   834    lifsong                                          SET DELIVERY_RANGE = 3;
     2     yanzuo     ENDDECISION;
   834    lifsong     
     2     yanzuo     SET ( NOW + 500, msg_timer );
     2     yanzuo     NEXTSTATE wait_for_update_msg;
     2     yanzuo 
     2     yanzuo STATE wait_for_update_msg
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT jig_unknown_unit__s( fig_msg_header, ?, ?, sar_type );
     2     yanzuo     RESET ( msg_timer );
     2     yanzuo     TASK cluster_idx := alp_cluster_idx__t_any_c;
     2     yanzuo     RETURN stop_if_param_requests__r( fig_msg_header, sar_type );
     2     yanzuo 
     2     yanzuo   /*
     2     yanzuo    * Both WO and SP master receive and store the record
     2     yanzuo    * initialized by the WO master process.
     2     yanzuo    */
     2     yanzuo   INPUT jig_write_jiifil_rec__s( jii );
     2     yanzuo     RESET ( msg_timer );
     2     yanzuo     TASK cluster_idx := jii.cluster_idx;
     2     yanzuo     CALL jii_write_local_record__r( jii );
  1316       pshu 
  1316       pshu 
  1439       pshu     CALL jig_debug_log__r(jig_dbglog_msk__t_jii_mdf__c,T,@'JIGMAS:COMP=0x%04X, jii_store_atm_param_req__r'n'r    boot_loading : 0x%X'n'r    if_init_needed : 0x%X'n'r    if_init_ph2_needed : 0x%X'n'r    start_attempts_left : 0x%X'n'r',
  1320      tinyu 			 jii.procs(fig_msg_header.extended_addr).phys_addr,
  1320      tinyu 			 jii.procs(fig_msg_header.extended_addr).boot_loading,
  1320      tinyu 			 jii.procs(fig_msg_header.extended_addr).if_init_needed,
  1320      tinyu 			 jii.procs(fig_msg_header.extended_addr).if_init_ph2_needed,
  1316       pshu 			jii.procs(fig_msg_header.extended_addr).start_attempts_left);
  1316       pshu 
     2     yanzuo     RETURN T;
     2     yanzuo 
     2     yanzuo   INPUT jig_continue__s;
     2     yanzuo     /* the request was ignored. */
     2     yanzuo     RESET ( msg_timer );
     2     yanzuo     TASK cluster_idx := alp_cluster_idx__t_invalid_c;
     2     yanzuo     RETURN F;
     2     yanzuo 
     2     yanzuo   INPUT msg_timer;
     2     yanzuo     RETURN F;
     2     yanzuo ENDSTATE wait_for_update_msg;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE jii_store_atm_param_req__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_fpga_para_req__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo /*FIGSEB ask FPGA parameters*/
     2     yanzuo FPAR
     2     yanzuo    IN       in_unit_type      unit_type_t,
     2     yanzuo    IN       in_unit_index     unit_index_t,
     2     yanzuo    IN/OUT   io_cluster_idx    alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo    bool;
     2     yanzuo DCL
   216      h10hu    l_jii_ptr, l_alp_ptr    jiifil_ptr__t;
     2     yanzuo START;
     2     yanzuo    DECISION jii_find_unit__r( in_unit_type, in_unit_index,
     2     yanzuo            l_jii_ptr, dummy_comp_ptr, l_alp_ptr );
     2     yanzuo    (T):
     2     yanzuo       TASK  l_jii_ptr->fpga_needed :=T;
     2     yanzuo       TASK  io_cluster_idx := l_jii_ptr->cluster_idx;
     2     yanzuo       RETURN T;
     2     yanzuo    ELSE:
     2     yanzuo       TASK  l_jii_ptr->fpga_needed :=F;
     2     yanzuo       RETURN F;
     2     yanzuo    ENDDECISION;
     2     yanzuo ENDPROCEDURE jii_store_fpga_para_req__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_apc_init_req__r;
     2     yanzuo /*
     2     yanzuo  * This procedure stores APC 2nd phase init request and its parameters
     2     yanzuo  * into the data structures so that the work management module
     2     yanzuo  * can give out the initialization task at the right moment.
     2     yanzuo  *
     2     yanzuo  * The procedure must be called in both WO and SP units to
     2     yanzuo  * ensure consistency of data structures.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      unit_info       unit_it_t,
     2     yanzuo     IN      apc_manager_pid pid,
     2     yanzuo     IN/OUT  cluster_idx     alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
     2     yanzuo     jii_ptr, alp_ptr     jiifil_ptr__t,
     2     yanzuo     ec                   error_t := unsuccessful_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* todo: WHISKY sends ready_for_2nd_init msg using process_id 2,
     2     yanzuo   * but the init request must be sent to process_id 0.
     2     yanzuo   * Using the name service would avoid that problem but it brings
     2     yanzuo   * problems of its own. It would be best if WHISKY would send the
     2     yanzuo   * ready_for_2nd_init msg using the same id which receives the
     2     yanzuo   * 2nd phase init requests.
     2     yanzuo   */
     2     yanzuo   TASK set_pid_process_id_r( apc_manager_pid, 0 ); /* hack */
     2     yanzuo   DECISION jii_find_unit__r( unit_info.ttype, unit_info.index,
     2     yanzuo            jii_ptr, dummy_comp_ptr, alp_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       DECISION jii_ptr->is_level1_alp_unit;
     2     yanzuo         ( T ):
     2     yanzuo           TASK ec := success_ec;
     2     yanzuo           TASK jii_ptr->apc_init_ph2_needed := T;
     2     yanzuo           TASK cluster_idx := jii_ptr->cluster_idx;
     2     yanzuo           TASK jiafil_ptr__r( jii_ptr->cluster_idx )->apc_manager_pid :=
     2     yanzuo                apc_manager_pid;
     2     yanzuo       ENDDECISION;
     2     yanzuo       DECISION jii_ptr->is_level2_alp_unit;
     2     yanzuo         ( T ):
     2     yanzuo           TASK ec := success_ec;
     2     yanzuo           TASK jii_ptr->apc_init_ph2_needed := T;
     2     yanzuo           TASK cluster_idx := jii_ptr->cluster_idx;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec = success_ec;
     2     yanzuo ENDPROCEDURE jii_store_apc_init_req__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_sp_warmup_req__r;
     2     yanzuo /*
     2     yanzuo  * This procedure stores SP unit warmup request
     2     yanzuo  * into the data structures so that the work management module
     2     yanzuo  * can give out the warm-up task at a suitable moment.
     2     yanzuo  *
     2     yanzuo  * The procedure must be called in both WO and SP units to
     2     yanzuo  * ensure consistency of data structures.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      sp_unit_addr phys_address_t,
     2     yanzuo     IN/OUT  cluster_idx  alp_cluster_idx__t,
     2     yanzuo     IN/OUT  is_alp1_unit  bool,
     2     yanzuo     IN/OUT  is_app_unit   bool;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo DCL
   216      h10hu     jii_ptr, alp_ptr     jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK cluster_idx := alp_cluster_idx__t_invalid_c;
     2     yanzuo   TASK is_alp1_unit := F;
     2     yanzuo   TASK is_app_unit := F;
     2     yanzuo 
     2     yanzuo   DECISION jii_find_computer__r( sp_unit_addr,
     2     yanzuo            jii_ptr, dummy_comp_ptr, alp_ptr );
     2     yanzuo   ( F ):
     2     yanzuo       RETURN F;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   DECISION jii_ptr->is_level1_alp_unit;
     2     yanzuo   ( T ):
     2     yanzuo     TASK is_alp1_unit := T;					
     2     yanzuo     TASK is_app_unit :=	app_unit_check__r($jii_ptr);
     2     yanzuo 
     2     yanzuo     DECISION ( NOT jii_ptr->alp_warmup_needed ) AND
     2     yanzuo               ( NOT is_app_unit );
     2     yanzuo     ( T ):
     2     yanzuo        /* change this flag only when in first sp warmup request*/
     2     yanzuo        TASK jii_ptr->apc_init_needed := T;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     TASK jii_ptr->alp_warmup_needed := T;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK cluster_idx := jii_ptr->cluster_idx;
     2     yanzuo   RETURN T;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE jii_store_sp_warmup_req__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_rugger_readiness__r;
     2     yanzuo /*
     2     yanzuo  * RUGGER is ready for reporting -- adjust data structures accordingly.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      rugger_pid   pid,
     2     yanzuo     IN/OUT  cluster_idx  alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK core_ready_for_reporting__pv := T,
     2     yanzuo        rugger_pid__pv               := rugger_pid,
     2     yanzuo        cluster_idx                  := alp_cluster_idx__t_any_c;
     2     yanzuo   RETURN T;
     2     yanzuo ENDPROCEDURE jii_store_rugger_readiness__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_cac_readiness__r;
     2     yanzuo /*
     2     yanzuo  * CIUDAD is ready for reporting in some ALP1 unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      brt_pid   pid,
     2     yanzuo     IN      brt_comp     phys_address_t,
     2     yanzuo     IN/OUT  cluster_idx  alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     jii_ptr, alp_ptr  jiifil_ptr__t,
     2     yanzuo     comp_ptr          jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* if message was sent with physical address (initial testing phase)
     2     yanzuo   use the sender address (which can be faked with ZOSD)
     2     yanzuo   instead of SENDER_PHYS_COMPUTER: */
     2     yanzuo   DECISION valid_addr__r( get_pid_computer_r( brt_pid ));
     2     yanzuo     ( T ):
     2     yanzuo       TASK brt_comp := get_pid_computer_r( brt_pid );
     2     yanzuo   ENDDECISION;
  1096       pshu   DECISION jii_find_computer__r( brt_comp, jii_ptr, comp_ptr, alp_ptr ) AND
  1096       pshu            jii_ptr->port_conf_completed ;
     2     yanzuo     ( T ):
     2     yanzuo       DECISION app_unit_check__r( $jii_ptr ) ;
     2     yanzuo       ( T ):
     2     yanzuo             /*Arthur changed*/
     2     yanzuo          TASK jii_ptr->procs(0).half_conns_needed := T;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK  jii_ptr->ready_for_reporting := T,
     2     yanzuo             jii_ptr->trib_startup_allowed := T,
     2     yanzuo             cluster_idx := jii_ptr->cluster_idx;
     2     yanzuo       RETURN T;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN F;
     2     yanzuo ENDPROCEDURE jii_store_cac_readiness__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_store_trial_move__r;
     2     yanzuo /*
     2     yanzuo  * This procedure makes the required changes to JIIFIL
     2     yanzuo  * when a unit is moved to the other trial slice.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  obju_type        unit_type_t,
     2     yanzuo     IN  obju_idx         unit_index_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     alp_ptr              jiifil_ptr__t,
     2     yanzuo     procidx              byte := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION jii_find_unit__r( obju_type, obju_idx,
     2     yanzuo            jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       WHILE procidx < jiifil__t_n_comp_per_unit_c;
     2     yanzuo         TASK jii_ptr->procs(procidx).start_attempts_left := 0;
     2     yanzuo         TASK procidx := procidx + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo       DECISION jii_ptr->is_level1_alp_unit AND
     2     yanzuo                jii_ptr->co_alp_unit_updated AND
     2     yanzuo                alp_ptr /= NIL;
     2     yanzuo         ( T ):
     2     yanzuo           TASK alp_ptr->co_alp_unit_updated := F;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK jii_ptr->co_alp_unit_updated := F;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE jii_store_trial_move__r;
     2     yanzuo 
   754     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE select_vci__r;
     2     yanzuo /*
     2     yanzuo  * Select the next free VCI under the specified computer.
   754     yanzuo  * For RX BigVCC, VCI range is 
   754     yanzuo  *     jig_limits__t_min_vci_c to rx_bigvcc_min_vci - 1 for DMPG to other units
   754     yanzuo  *     rx_bigvcc_min_vci to rx_bigvcc_sub_vci - 1 for CDSP-DH DSP to ICSU
   754     yanzuo  *     rx_bigvcc_sub_vci to rx_bigvcc_max_vci - 1 for CDSP-DH DSP to DSP
   754     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
   754     yanzuo     IN      comp             phys_address_t,
   754     yanzuo     IN      own_unit         unit_it_t,
   754     yanzuo     IN      target_unit      unit_it_t,       
   754     yanzuo     IN/OUT  next_vcis        next_vci_table__t;
   754     yanzuo     
     2     yanzuo RETURNS
     2     yanzuo     vci_t;
     2     yanzuo DCL
   820       pshu     comp_ptr             jii_comp_ptr__t := NIL,
   820       pshu     alp_ptr                 jiifil_ptr__t := NIL,
     2     yanzuo     vci_bm_ptr           bytepointer,
   579     z7zhou     vci                  vci_t := 0,
   758     yanzuo     max_vci              vci_t := 0;
     2     yanzuo 
     2     yanzuo START;
   754     yanzuo     DECISION jii_find_computer__r( comp, dummy_jii_ptr,
  1450       pshu                                    comp_ptr, alp_ptr ) AND alp_ptr/=NIL;
   754     yanzuo     ( F ):
   754     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
   754     yanzuo                          @'JIGDAT: jii find computer fail'
   754     yanzuo                          'comp: %XH',
   754     yanzuo                          comp);
   754     yanzuo         RETURN vci;
   754     yanzuo     ENDDECISION;
   754     yanzuo 
   754     yanzuo     TASK vci_bm_ptr := bytepointer( @jibfil_ptr__r( comp_ptr->vci_bitmap_idx )->bitmap );
   754     yanzuo 
   758     yanzuo     DECISION ( comp_ptr->max_intconn_vci /= 0 );
     2     yanzuo     ( T ):
   765   huantang         TASK max_vci := comp_ptr->max_intconn_vci + 1;
   758     yanzuo     ELSE:
   758     yanzuo         TASK max_vci := jig_limits__t_n_vcis_c;
   754     yanzuo     ENDDECISION;
   758     yanzuo     
   758     yanzuo     DECISION ( g_rx_bigvcc_param.enable_flag = T ) AND
   758     yanzuo              ( own_unit.ttype = unit_type_t_dmpg_c );
   758     yanzuo     ( T ):
   758     yanzuo         TASK max_vci := g_rx_bigvcc_param.min_vci;
   758     yanzuo     ENDDECISION;
   754     yanzuo 
   754     yanzuo     DECISION ( g_rx_bigvcc_param.enable_flag = T ) AND
   754     yanzuo              ( own_unit.ttype = unit_type_t_dsp_c ) AND
   758     yanzuo              ( target_unit.ttype = unit_type_t_icsu_c ) AND
   758     yanzuo              ( next_vcis( comp ) <= vci_t(g_rx_bigvcc_param.min_vci - jig_limits__t_min_vci_c) );
   754     yanzuo     ( T ):
   758     yanzuo         TASK next_vcis( comp ) := vci_t(g_rx_bigvcc_param.min_vci - jig_limits__t_min_vci_c);
   758     yanzuo         TASK max_vci := g_rx_bigvcc_param.sub_vci;
   758     yanzuo     ENDDECISION;
   754     yanzuo 
   754     yanzuo     DECISION ( g_rx_bigvcc_param.enable_flag = T ) AND
   754     yanzuo              ( own_unit.ttype = unit_type_t_dsp_c ) AND
   758     yanzuo              ( target_unit.ttype = unit_type_t_dsp_c ) AND
   758     yanzuo              ( next_vcis( comp ) <= vci_t(g_rx_bigvcc_param.sub_vci - jig_limits__t_min_vci_c) );
   754     yanzuo     ( T ):
   758     yanzuo         TASK next_vcis( comp ) := vci_t(g_rx_bigvcc_param.sub_vci - jig_limits__t_min_vci_c);
   758     yanzuo         TASK max_vci := g_rx_bigvcc_param.max_vci;
   758     yanzuo     ENDDECISION;
   754     yanzuo 
   758     yanzuo     TASK vci := bitmap_first_free__r( vci_bm_ptr,
   758     yanzuo                                       0,
   758     yanzuo                                       jig_limits__t_n_vcis_c,
   758     yanzuo                                       next_vcis( comp ) );
   758     yanzuo     TASK vci := convert_bitmap_pos_to_vci(comp_ptr, vci);
   754     yanzuo 
   758     yanzuo     DECISION ( vci >= max_vci ) OR
   758     yanzuo              ( vci = 0 );
   758     yanzuo     (T):
   758     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
   765   huantang                          @'JIGDAT: No more bitmap free messaging channel!'
   856   huantang                          'unit type=%XH idx=%d max=%03XH vci=%03XH',
   758     yanzuo                          comp_ptr->unit_type, comp_ptr->unit_index,
   758     yanzuo                          max_vci, vci);
   758     yanzuo         TASK vci := 0;
   758     yanzuo         RETURN vci;
   754     yanzuo     ENDDECISION;
   754     yanzuo 
   754     yanzuo 
   820       pshu     DECISION app_mxu_unit_check__r($alp_ptr);
   820       pshu     (T):
   820       pshu         TASK vci := convert_dsp_vci__r(own_unit, vci);
   820       pshu     ENDDECISION;
   820       pshu     
   754     yanzuo     RETURN vci;
   754     yanzuo         
     2     yanzuo ENDPROCEDURE select_vci__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE select_xconn_id__r;
     2     yanzuo /*
     2     yanzuo  * Select next free ALP connection identifier from the cluster
     2     yanzuo  * of the given computer.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      dest_comp        phys_address_t,
     2     yanzuo     IN/OUT  next_xcids       next_xconn_id_table__t;
     2     yanzuo RETURNS
     2     yanzuo     jig_xconn_id__t;
     2     yanzuo DCL
     2     yanzuo     jii_ptr, alp_ptr     jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     bitmap_ptr           bytepointer,
     2     yanzuo     xcid                 jig_xconn_id__t := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION jii_find_computer__r( dest_comp, jii_ptr, comp_ptr, alp_ptr )
     2     yanzuo            AND
     2     yanzuo            ( alp_ptr /= NIL );
     2     yanzuo     ( T ):
     2     yanzuo       TASK bitmap_ptr := bytepointer( @jiafil_ptr__r( jii_ptr->cluster_idx )
     2     yanzuo            ->res_alp_xcids );
     2     yanzuo       TASK xcid := bitmap_first_free__r( bitmap_ptr,
     2     yanzuo            jig_limits__t_min_xcid_c,
     2     yanzuo            jig_limits__t_n_xcids_c,
     2     yanzuo            next_xcids(
     2     yanzuo            jii_ptr->cluster_idx ));
     2     yanzuo       DECISION xcid;
   102    lifsong         ( >= jig_limits__t_n_xcids_c + jig_limits__t_min_xcid_c ):
     2     yanzuo           TASK xcid := jig_xconn_id__t_invalid__c;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN xcid;
     2     yanzuo ENDPROCEDURE select_xconn_id__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE update_vcc_bitmap__r;
     2     yanzuo /*
     2     yanzuo  * Turn on the bit representing the specified VCI in the VCI bitmap
     2     yanzuo  * of the specified unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  target_comp  phys_address_t,
     2     yanzuo     IN  vci          vci_t,
     2     yanzuo     IN  new_value    byte;
     2     yanzuo DCL
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     bm_ptr               vci_bitmap_ptr__t,
     2     yanzuo     bptr                 bytepointer,
   111    lifsong     mask                 byte,
   111    lifsong     pos                  word;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION jii_find_computer__r( target_comp, dummy_jii_ptr,
     2     yanzuo            comp_ptr, dummy_jii_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       TASK bm_ptr := jibfil_ptr__r(  comp_ptr->vci_bitmap_idx );
     2     yanzuo       TASK bptr := bytepointer( @bm_ptr->bitmap );
   111    lifsong       TASK pos := convert_vci_to_bitmap_pos__r(comp_ptr, vci);
   111    lifsong       DECISION ( pos >= 0) AND ( pos < jig_limits__t_n_vcis_c );
   111    lifsong       (F):
   111    lifsong          TASK dxsyslog_r(
   111    lifsong               log_type_t_text_e_c,
   111    lifsong               @'JIGDAT: Update vcc bitmap failed!!'
   111    lifsong               '  Unit Type = %03X, Unit Index = %03X, Vci = %3X',
   111    lifsong               comp_ptr->unit_type, comp_ptr->unit_index, vci );
   111    lifsong       ELSE:
   111    lifsong          TASK bptr := ADDPTR( bptr,
   111    lifsong               dword( pos ) >> 3 );
   111    lifsong          TASK mask := 1 << ( dword( pos ) & 7 );
   111    lifsong          DECISION new_value;
   111    lifsong            ( 0 ):
   111    lifsong              TASK $bptr := $bptr & (0xFF ^ mask);
   111    lifsong            ELSE:
   111    lifsong              TASK $bptr := $bptr | mask;
   111    lifsong          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE update_vcc_bitmap__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE update_xcid_bitmap__r;
     2     yanzuo /*
     2     yanzuo  * Set/clear bit in reserved xconnid bitmap.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  target_comp  phys_address_t,
     2     yanzuo     IN  xcid         jig_xconn_id__t,
     2     yanzuo     IN  new_value    byte;
     2     yanzuo DCL
     2     yanzuo     jii_ptr              jiifil_ptr__t,
     2     yanzuo     clus_ptr             alp_cluster_ptr__t,
     2     yanzuo     mask                 byte,
     2     yanzuo     bptr                 bytepointer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION xcid >= jig_limits__t_min_xcid_c AND
     2     yanzuo            jii_find_computer__r( target_comp, jii_ptr,
     2     yanzuo            dummy_comp_ptr, dummy_jii_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       TASK clus_ptr := jiafil_ptr__r( jii_ptr->cluster_idx );
     2     yanzuo       TASK bptr := bytepointer( @clus_ptr->res_alp_xcids );
     2     yanzuo       TASK xcid := jig_xconn_id__t( xcid - jig_limits__t_min_xcid_c );
     2     yanzuo       TASK bptr := ADDPTR( bptr, xcid >> 3 );
     2     yanzuo       TASK mask := 1 << (xcid & 7);
     2     yanzuo       DECISION new_value;
     2     yanzuo         ( 0 ):
     2     yanzuo           TASK $bptr := $bptr & (0xFF ^ mask);
     2     yanzuo         ELSE:
     2     yanzuo           TASK $bptr := $bptr | mask;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE update_xcid_bitmap__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE write_jicfil_resdata__r;
     2     yanzuo /*
     2     yanzuo  * Write the resources selected for the specified connection
     2     yanzuo  * to JICFIL and JIAFIL and JIBFIL (VCI bitmaps).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN         src_comp  phys_address_t,
     2     yanzuo     IN/OUT     res       jig_one_vcc_resources__t;
     2     yanzuo DCL
     2     yanzuo     local_ep, remote_ep  byte,
   216      h10hu     jic_ptr              jicfil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION jii_find_conn__r( res.conn_id, jic_ptr )
     2     yanzuo            OR
     2     yanzuo            jii_add_conn__r( res.conn_id, jic_ptr );
     2     yanzuo     ( T ):
     2     yanzuo       /* Write VCIs and xconn_ids to JICFIL. */
  1407     z7zhou 
   433       p5li       
   433       p5li       /* If DSP address is got from TOELIB, convert it to DMPG address */
  1407     z7zhou       TASK res.target_comp := res.target_comp & computer_t_max_phys_addr_c;
  1407     z7zhou       /* sort record by dsp index in case intra-dmpg dsp connection. */
  1407     z7zhou       DECISION src_comp = res.target_comp;
   433       p5li       ( T ):
  1407     z7zhou         TASK local_ep := byte((res.vci & jig_limits__t_n_dsp_vci_even_min_c) = 0);
  1407     z7zhou       ELSE:
  1407     z7zhou         TASK local_ep := byte( jic_ptr->half_conn(1).comp = src_comp );
  1407     z7zhou         DECISION local_ep;
  1407     z7zhou           ( > 1 ):
  1407     z7zhou             TASK write_to_log(log_type_t_byte_e_c,
  1407     z7zhou                  log_write_item_t(@local_ep),1,
  1407     z7zhou                  log_text_info_t(@'JIGDAT: BAD EP INDEX'));
  1407     z7zhou             DECISION jic_ptr->half_conn(1).comp = src_comp;
  1407     z7zhou               ( T ):
  1407     z7zhou                 TASK local_ep := 1;
  1407     z7zhou               ELSE:
  1407     z7zhou                 TASK local_ep := 0;
  1407     z7zhou             ENDDECISION;
  1407     z7zhou         ENDDECISION;
   433       p5li       ENDDECISION;
  1407     z7zhou 
  1407     z7zhou       TASK remote_ep := local_ep ^ 1;
   433       p5li       
     2     yanzuo       TASK jic_ptr->toelib_conn_id := res.conn_id,
     2     yanzuo            jic_ptr->serv_cat       := res.serv_category;
     2     yanzuo       TASK jic_ptr->half_conn(local_ep).comp      := src_comp,
     2     yanzuo            jic_ptr->half_conn(local_ep).vci       := res.vci,
     2     yanzuo            jic_ptr->half_conn(local_ep).xconn_id  := res.xconn_id;
     2     yanzuo       TASK jic_ptr->half_conn(remote_ep).comp     := res.target_comp,
     2     yanzuo            jic_ptr->half_conn(remote_ep).vci      := res.remote_vci,
     2     yanzuo            jic_ptr->half_conn(remote_ep).xconn_id := res.remote_xconn_id;
     2     yanzuo         /* update prev/next conn links (if they exist) */
     2     yanzuo #if (F)
     2     yanzuo           CALL jii_link_conns__r( jic_ptr );
     2     yanzuo #endif
     2     yanzuo       /* update VCC bitmaps. */
     2     yanzuo       DECISION res.vci;
     2     yanzuo         ( /= 0 ):
     2     yanzuo           CALL update_vcc_bitmap__r( src_comp, res.vci, 1 );
     2     yanzuo       ENDDECISION;
     2     yanzuo       DECISION res.remote_vci;
     2     yanzuo         ( /= 0 ):
     2     yanzuo           CALL update_vcc_bitmap__r( res.target_comp, res.remote_vci, 1 );
     2     yanzuo       ENDDECISION;
     2     yanzuo       DECISION res.serv_category;
     2     yanzuo         ( int_serv_cat_t_i_nrt_mnw_c ):
     2     yanzuo           CALL update_xcid_bitmap__r( src_comp, res.xconn_id, 1 );
     2     yanzuo           CALL update_xcid_bitmap__r( res.target_comp, res.remote_xconn_id, 1 );
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       /* cannot add connection to JICFIL -- write error log */
     2     yanzuo       TASK write_to_log(log_type_t_byte_e_c,
     2     yanzuo            log_write_item_t(@local_ep),1,
     2     yanzuo            log_text_info_t(@'JIGDAT: FAILED TO ADD CONNECTION TO JICFIL'));
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE write_jicfil_resdata__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   120    lifsong PROCEDURE is_hc_created;
   120    lifsong /*
   120    lifsong  * Check if jigclu hc create task is finished( ph1[ph2] hc creation) for the given computer. 
   120    lifsong  **************************************************************************/
   120    lifsong FPAR 
   120    lifsong     IN      comp_ptr     jii_comp_ptr__t;
   120    lifsong     
   120    lifsong RETURNS
   120    lifsong     bool;
   120    lifsong 
   120    lifsong START;
   120    lifsong     DECISION comp_ptr = NIL;
   120    lifsong     ( T ):
   120    lifsong       RETURN F;
   120    lifsong     ENDDECISION;
   120    lifsong     
   216      h10hu     DECISION need_diff_priority_nrt_conns__r(comp_ptr->unit_type);
   120    lifsong     ( T ):
   673     z7zhou        RETURN comp_ptr->half_conns_created AND comp_ptr->half_conns_ph2_created;
   120    lifsong     ELSE:
   120    lifsong        RETURN comp_ptr->half_conns_created;
   120    lifsong     ENDDECISION;
   120    lifsong     
   120    lifsong ENDPROCEDURE is_hc_created;
   120    lifsong 
   754     yanzuo 
   754     yanzuo /***********************************************************************
   754     yanzuo  * get own unit_info and target unit info                              *
   754     yanzuo  ***********************************************************************/
   579     z7zhou PROCEDURE find_conn_own_unit_type__r;
   579     z7zhou FPAR
   754     yanzuo 	IN          conn_id        conn_id_t,
  1407     z7zhou 	IN          target_addr       phys_address_t,
   754     yanzuo 	IN/OUT      own_type       unit_type_t,
   754     yanzuo 	IN/OUT      own_index      unit_index_t,
   754     yanzuo 	IN/OUT      target_type    unit_type_t,
   754     yanzuo 	IN/OUT      target_index   unit_index_t;
   754     yanzuo 	
   579     z7zhou RETURNS 
   579     z7zhou   error_t;
   754     yanzuo   
   579     z7zhou DCL
  1407     z7zhou 	  ep1_addr           phys_address_t,
   579     z7zhou 	  edge_buf             edge_buf__t,
   579     z7zhou 	  ec                   error_t,
  1407     z7zhou     edge_ptr             edge_ptr__t,
  1407     z7zhou     addr_mask           computer_t;
   754     yanzuo     
   579     z7zhou START;
  1407     z7zhou 
  1407     z7zhou     DECISION target_addr < computer_t_max_phys_addr_c;
  1407     z7zhou     ( T ):
  1407     z7zhou         TASK addr_mask := computer_t_max_phys_addr_c;
  1407     z7zhou     ELSE:
  1407     z7zhou         TASK addr_mask := computer_t_any_c;
  1407     z7zhou     ENDDECISION;
  1407     z7zhou     
   754     yanzuo     TASK edge_ptr := edge_ptr__t( @edge_buf );
   579     z7zhou     TASK ec := conn_attributes_r( conn_id ,
   754     yanzuo                                   SIZEOF( edge_buf ),
   754     yanzuo                                   $edge_ptr );
   579     z7zhou     DECISION ec;
   754     yanzuo     ( success_ec ):
  1407     z7zhou         TASK ep1_addr := edge_ptr->vertex_end_list->vertex_end->
   754     yanzuo                            vertex->vertex_attr.address;
   754     yanzuo 
   754     yanzuo         /* DSP physical address is 
   754     yanzuo            0x8000 | DMPG physical address or 0x9000 | DMPG physical address,
   754     yanzuo            DSP physical address & 0xFFF to restore DMPG physical address */
   754     yanzuo            
  1407     z7zhou         DECISION ((ep1_addr&addr_mask) = (target_addr&addr_mask));
  1407     z7zhou         ( T ):
   754     yanzuo             TASK own_type := edge_ptr->vertex_end_list->next->
   754     yanzuo                              vertex_end->vertex->vertex_attr.unit_type,
   754     yanzuo                  own_index := edge_ptr->vertex_end_list->next->
   754     yanzuo                               vertex_end->vertex->vertex_attr.unit_index;
   754     yanzuo                              
   754     yanzuo             TASK target_type := edge_ptr->vertex_end_list-> 
   754     yanzuo                                 vertex_end->vertex->vertex_attr.unit_type,
   754     yanzuo                  target_index := edge_ptr->vertex_end_list->
   754     yanzuo                                  vertex_end->vertex->vertex_attr.unit_index;
   754     yanzuo         ELSE:
   754     yanzuo             TASK own_type := edge_ptr->vertex_end_list->
   754     yanzuo                              vertex_end->vertex->vertex_attr.unit_type,
   754     yanzuo                  own_index := edge_ptr->vertex_end_list->
   754     yanzuo                               vertex_end->vertex->vertex_attr.unit_index;
   754     yanzuo 
   754     yanzuo             TASK target_type := edge_ptr->vertex_end_list->next->
   754     yanzuo                                 vertex_end->vertex->vertex_attr.unit_type,
   754     yanzuo                  target_index := edge_ptr->vertex_end_list->next->
   754     yanzuo                                  vertex_end->vertex->vertex_attr.unit_index;
   579     z7zhou         ENDDECISION;
   579     z7zhou     ENDDECISION;
   754     yanzuo     
   579     z7zhou     RETURN ec;
   754     yanzuo     
   579     z7zhou ENDPROCEDURE find_conn_own_unit_type__r;
   754     yanzuo 
   754     yanzuo 
   120    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE collect_vcc_resources__r;
     2     yanzuo /*
     2     yanzuo  * Collect information on the specified connections of the specified
     2     yanzuo  * computer. Allocate any missing VCI/xconn-id resources at the same time.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      src_addr            phys_address_t,
     2     yanzuo     IN      wanted_exist_status bool,
     2     yanzuo     IN/OUT  vccs_params         jig_vccs_params__t,
     2     yanzuo     IN/OUT  vccs_resources      jig_vccs_resources__t,
     2     yanzuo     IN/OUT  update_needed       bool;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
   361    lifsong     next_vcis, pre_next_vcis next_vci_table__t,
     2     yanzuo     next_xconn_ids       next_xconn_id_table__t,
     2     yanzuo     vci                  vci_t,
     2     yanzuo     xcid                 jig_xconn_id__t,
     2     yanzuo     addr                 phys_address_t,
     2     yanzuo     jic_ptr              jicfil_ptr__t,
     2     yanzuo     jii_ptr              jiifil_ptr__t, /* target unit */
     2     yanzuo     comp_ptr             jii_comp_ptr__t, /* dummy */
     2     yanzuo     alp_ptr              jiifil_ptr__t, /* alp1 unit of target unit */
     2     yanzuo     i, n, ep_idx         dword,
     2     yanzuo     exists               bool,
     2     yanzuo     data_incomplete      bool,
   579     z7zhou  
   754     yanzuo     own_unit             unit_it_t,
   754     yanzuo     target_unit          unit_it_t,
   754     yanzuo     
   754     yanzuo     ec                   error_t,
  1407     z7zhou     allocated_for_this   bool,
  1407     z7zhou     hc_idx               byte;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo #if (F)
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo            @'JIGDAT: Resource allocation'
     2     yanzuo            '  src addr=%04X, n_conns=%d',
     2     yanzuo            src_addr, vccs_params.item_count );
     2     yanzuo #endif
   754     yanzuo     TASK update_needed := F;
   754     yanzuo 
   754     yanzuo     TASK memset( bytepointer( @next_vcis ), 0, SIZEOF( next_vcis ));
   754     yanzuo     TASK memset( bytepointer( @pre_next_vcis ), 0, SIZEOF( pre_next_vcis ));
   754     yanzuo     TASK memset( bytepointer( @next_xconn_ids ), 0, SIZEOF( next_xconn_ids ));
   754     yanzuo     /* fill in the general info part */
   754     yanzuo     DECISION jii_find_computer__r( src_addr, jii_ptr, comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
     2     yanzuo     ( T ):
   754     yanzuo         TASK vccs_resources.common.alp1_unit_addr  := alp_ptr->procs(0).phys_addr,
   754     yanzuo              vccs_resources.common.co_alp1_addr    := alp_ptr->co_alp_unit_phys_addr,
   754     yanzuo              vccs_resources.common.co_alp1_updated := alp_ptr->co_alp_unit_updated,
   754     yanzuo              vccs_resources.common.mphy_port       := comp_ptr->mphy_port,
   754     yanzuo              vccs_resources.common.vpi             := comp_ptr->vpi;
     2     yanzuo     ENDDECISION;
   754     yanzuo 
   754     yanzuo     TASK i := 0, n := 0;
   754     yanzuo     WHILE i < vccs_params.item_count;
   754     yanzuo         TASK exists             := F,
   754     yanzuo              allocated_for_this := F,
   754     yanzuo              data_incomplete    := F;
   754     yanzuo 
   754     yanzuo         TASK vccs_resources.res(n).conn_id :=
   754     yanzuo              vccs_params.vcc(i).conn_id,
   754     yanzuo              vccs_resources.res(n).target_comp :=
   754     yanzuo              vccs_params.vcc(i).target_computer,
   754     yanzuo              vccs_resources.res(n).vci := 0;
   754     yanzuo 
  1407     z7zhou         /* BigVCC: distinguish xconn between DSP to DSP and DSP to ICSU,
  1407     z7zhou                    different xconn allocate different VCI range, 
  1407     z7zhou                    used to map to different BigVCC in MXU */
  1407     z7zhou         /* For DSP<->DSP connections, change the VCI according to target DSP. 
  1407     z7zhou            if DSP-0, VCI|0X40000 if DSP-1, VCI|0X80000*/  
  1407     z7zhou  
  1407     z7zhou         TASK own_unit.ttype := unit_type_t_any_type_c,
  1407     z7zhou              own_unit.index := 0;
  1407     z7zhou  
  1407     z7zhou         TASK target_unit.ttype := unit_type_t_any_type_c,
  1407     z7zhou              target_unit.index := 0;
  1407     z7zhou 
  1407     z7zhou  
  1407     z7zhou         DECISION( vccs_resources.res(n).conn_id>= jig_limits__t_n_dsp_conns_min_c);
  1407     z7zhou         (T):
  1407     z7zhou             /* own_unit is always src_addr, and target_unit is always remote */
  1407     z7zhou             TASK ec := find_conn_own_unit_type__r( vccs_resources.res(n).conn_id,
  1407     z7zhou                                                    vccs_params.vcc(i).target_computer,
  1407     z7zhou                                                    own_unit.ttype, /*src*/
  1407     z7zhou                                                    own_unit.index,
  1407     z7zhou                                                    target_unit.ttype,/*target*/
  1407     z7zhou                                                    target_unit.index );
  1407     z7zhou         ENDDECISION;  
  1407     z7zhou 
  1407     z7zhou         /* Reserve resources for both endpoints of the connection.
  1407     z7zhou          * ep_idx round:
  1407     z7zhou          *    0:    endpoint for src_addr
  1407     z7zhou          *    1:    remote endpoint
  1407     z7zhou          */
  1407     z7zhou 
   754     yanzuo         /* find the connection from JICFIL. */
  1407     z7zhou 
  1407     z7zhou 
  1407     z7zhou 
   754     yanzuo         DECISION jii_find_conn__r( vccs_params.vcc(i).conn_id, jic_ptr );
   754     yanzuo         ( F ):
   754     yanzuo             TASK jic_ptr := NIL; /* just in case */
  1407     z7zhou         ELSE:
  1407     z7zhou             /* in case jic record exists, choose out the half_conn for
  1407     z7zhou              * srcd_addr so it can be handled when ep_idx is 0.
  1407     z7zhou              */
  1407     z7zhou             DECISION jic_ptr->half_conn(0).comp = src_addr;
  1407     z7zhou             ( T ):
  1407     z7zhou                 TASK hc_idx := 0;
  1407     z7zhou             ELSE:
  1407     z7zhou                 TASK hc_idx := 1;
  1407     z7zhou             ENDDECISION;
  1407     z7zhou             
  1407     z7zhou             DECISION (jic_ptr->half_conn(0).comp = 
  1407     z7zhou                       jic_ptr->half_conn(1).comp);
  1407     z7zhou             ( T ):
  1407     z7zhou                 TASK hc_idx := (own_unit.index MOD 2);
  1407     z7zhou             ENDDECISION;
   754     yanzuo         ENDDECISION;
   754     yanzuo 
  1407     z7zhou 
   754     yanzuo         TASK ep_idx := 0,
   754     yanzuo              addr   := src_addr;
   754     yanzuo 
  1407     z7zhou 
  1407     z7zhou 
   754     yanzuo         WHILE ep_idx < 2;
   754     yanzuo             TASK jii_ptr := NIL;
   754     yanzuo             DECISION jic_ptr /= NIL;
     2     yanzuo             ( T ):
  1407     z7zhou                 TASK vci := jic_ptr->half_conn(hc_idx).vci;
  1407     z7zhou                 TASK xcid := jic_ptr->half_conn(hc_idx).xconn_id;
  1407     z7zhou                 TASK addr := jic_ptr->half_conn(hc_idx).comp;
   754     yanzuo                 DECISION wanted_exist_status;
   754     yanzuo                 ( T ):
   754     yanzuo                     /* If the caller wants existing connections, include
   754     yanzuo                      * the VCCs where either end of the connection exists.
   754     yanzuo                      * Otherwise connections are not removed from the hardware
   754     yanzuo                      * fully during unit removal.
   754     yanzuo                     */
  1407     z7zhou                     TASK exists := exists OR jic_ptr->half_conn(hc_idx).exists;
   754     yanzuo                 ELSE:
   754     yanzuo                     /* non-existing connections: only return the ones
   754     yanzuo                      * where the target unit endpoint doesn't exist. */
  1407     z7zhou                     DECISION ep_idx;
  1407     z7zhou                     ( 0 ):
  1407     z7zhou                         TASK exists := jic_ptr->half_conn(hc_idx).exists;
   754     yanzuo                     ENDDECISION;
   754     yanzuo                 ENDDECISION;
     2     yanzuo             ELSE:
   754     yanzuo                 TASK vci := 0;
   754     yanzuo             ENDDECISION;
     2     yanzuo 
   754     yanzuo             DECISION vci;
   754     yanzuo             ( 0 ):
   754     yanzuo                 /* Select resources (but don't mark them as in use yet
   754     yanzuo                  * because this code is run in both units, and the
   754     yanzuo                  * WO unit has the final say about what resources
   754     yanzuo                  * will be reserved.)
   754     yanzuo                 */
   754     yanzuo 
   754     yanzuo                 /* select VCI for the source computer */
   754     yanzuo                 /* if target computer half-conn creation phase is
   754     yanzuo                    over, select VCI for it, too. */
   754     yanzuo                 DECISION ( addr = src_addr ) 
   754     yanzuo                          OR ( jii_find_computer__r( addr, jii_ptr, comp_ptr, alp_ptr ) AND is_hc_created(comp_ptr) );
   754     yanzuo                 ( T ):
     2     yanzuo #if (F)
   754     yanzuo                     DECISION addr;
     2     yanzuo                     ( /= src_addr ):
   754     yanzuo                         TASK dxsyslog_r( log_type_t_text_t_c,
   754     yanzuo                                          @'JIGDAT: allocating remote VCI!!'
   754     yanzuo                                          'src_addr = %04X, remote_addr = %04X',
   754     yanzuo                                          src_addr, addr );
   754     yanzuo                     ENDDECISION;
     2     yanzuo #endif
   754     yanzuo 
  1407     z7zhou                 DECISION (ep_idx );
  1407     z7zhou                 (0):
  1407     z7zhou                    TASK vci := select_vci__r( addr, own_unit, target_unit, next_vcis );
  1407     z7zhou                 (1):
  1407     z7zhou                    TASK vci := select_vci__r( addr, target_unit, own_unit, next_vcis );              
  1407     z7zhou                 ENDDECISION;
   754     yanzuo 
  1407     z7zhou                 DECISION vci;
  1407     z7zhou                 (0):
  1407     z7zhou                    TASK dxsyslog_r( log_type_t_text_e_c,
  1407     z7zhou                             @'JIGDAT: select_vci__r!'
  1407     z7zhou                              '  src_addr: %04X  target_addr: %04X'
  1407     z7zhou                              '  addr: %04X      conn: %04X'
  1407     z7zhou                              '  ep_idx: %d    vci: %04X',
  1407     z7zhou                             src_addr, vccs_params.vcc(i).target_computer,
  1407     z7zhou                             addr,vccs_params.vcc(i).conn_id,
  1407     z7zhou                             ep_idx, vci );
   754     yanzuo                 ENDDECISION;
  1407     z7zhou                          
   754     yanzuo 
   754     yanzuo                 TASK allocated_for_this := ( vci /= 0 );
   754     yanzuo             ENDDECISION;
   754     yanzuo             
     2     yanzuo           /* if NRT conn, allocate xconn ids if not yet allocated */
     2     yanzuo           TASK xcid := 0;
     2     yanzuo           DECISION ( vccs_params.vcc(i).serv_category =
     2     yanzuo                    int_serv_cat_t_i_nrt_mnw_c );
     2     yanzuo             ( T ):
     2     yanzuo               DECISION jic_ptr /= NIL;
  1407     z7zhou               ( T ):
  1407     z7zhou                   TASK xcid := jic_ptr->half_conn(hc_idx).xconn_id;
     2     yanzuo               ENDDECISION;
     2     yanzuo               DECISION xcid;
  1407     z7zhou               ( 0 ):
     2     yanzuo                   TASK xcid := select_xconn_id__r( addr, next_xconn_ids );
     2     yanzuo                   DECISION xcid;
  1407     z7zhou                   ( /= 0 ):
     2     yanzuo                       TASK allocated_for_this := T;
  1407     z7zhou                   ELSE:
     2     yanzuo                       TASK data_incomplete := T;
     2     yanzuo #if (F)
     2     yanzuo                           TASK dxsyslog_r(
     2     yanzuo                                log_type_t_text_e_c,
     2     yanzuo                                @'JIGDAT: XCID allocation failure!!'
     2     yanzuo                                '  src_addr = %04X, addr = %04X',
     2     yanzuo                                src_addr, addr );
     2     yanzuo #endif
     2     yanzuo                   ENDDECISION;
     2     yanzuo               ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* store selected/existing resources to result structure */
  1407     z7zhou          
  1407     z7zhou       DECISION ep_idx;
  1407     z7zhou         ( 0 ):
     2     yanzuo           TASK vccs_resources.res(n).vci      := vci,
     2     yanzuo                vccs_resources.res(n).xconn_id := xcid;
  1407     z7zhou         ( 1 ):
     2     yanzuo           TASK vccs_resources.res(n).remote_vci       := vci,
     2     yanzuo                vccs_resources.res(n).remote_xconn_id  := xcid;
     2     yanzuo           DECISION jii_ptr /= NIL /* if we already had to look
     2     yanzuo                    this computer up, no need
     2     yanzuo                    to do it again. */
     2     yanzuo                    OR
     2     yanzuo                    jii_find_computer__r( addr, jii_ptr, comp_ptr,
     2     yanzuo                    alp_ptr );
     2     yanzuo             ( T ):
     2     yanzuo               /* Tilly: WO-APP unit has different SFU port with SP-APP unit */
     2     yanzuo                 DECISION alp_ptr /= NIL;
     2     yanzuo                 ( T ):
     2     yanzuo                    DECISION app_unit_check__r( $jii_ptr );
     2     yanzuo                    ( T ):
     2     yanzuo                       TASK vccs_resources.res(n).dest_fabric_port :=
     2     yanzuo                            jii_ptr->sfu_port_number;
     2     yanzuo                       TASK vccs_resources.res(n).dest_alp_cluster :=
     2     yanzuo                            jii_ptr->cluster_idx;
     2     yanzuo                     ELSE:
     2     yanzuo                        TASK vccs_resources.res(n).dest_fabric_port :=
     2     yanzuo                             alp_ptr->sfu_port_number;
     2     yanzuo                        TASK vccs_resources.res(n).dest_alp_cluster :=
     2     yanzuo                             alp_ptr->cluster_idx;
     2     yanzuo                    ENDDECISION;
     2     yanzuo                 ELSE:
     2     yanzuo                   /* no WO-ALP1 unit - do not update result table */
     2     yanzuo                   TASK data_incomplete := T;
     2     yanzuo               ENDDECISION;
     2     yanzuo           ELSE:
     2     yanzuo              /* Target unit is not present in JIIFIL -- do not
     2     yanzuo                 reserve resources for its connection */
     2     yanzuo              TASK data_incomplete := T;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK ep_idx := ep_idx + 1,
  1407     z7zhou            addr   := vccs_params.vcc(i).target_computer & computer_t_max_phys_addr_c,
  1407     z7zhou            hc_idx := (hc_idx ^ 1);
     2     yanzuo     ENDWHILE; /* handling both half conns */
     2     yanzuo     /* now we have filled target record. Check if we want to
     2     yanzuo      * keep it.. */
     2     yanzuo     DECISION ( NOT data_incomplete ) AND
     2     yanzuo              ( exists = wanted_exist_status ) AND
     2     yanzuo              ( vccs_resources.res(n).vci /= 0 );
     2     yanzuo       ( T ):
     2     yanzuo         TASK vccs_resources.res(n).conn_id :=
     2     yanzuo              vccs_params.vcc(i).conn_id;
     2     yanzuo         TASK vccs_resources.res(n).serv_category :=
     2     yanzuo              vccs_params.vcc(i).serv_category;
     2     yanzuo #if (T)
     2     yanzuo         /* extra check for badness in resource allocation --
     2     yanzuo            can be removed at some point */
     2     yanzuo         DECISION vccs_params.vcc(i).serv_category =
     2     yanzuo                  int_serv_cat_t_i_nrt_mnw_c
     2     yanzuo                  AND
     2     yanzuo                  ( vccs_resources.res(n).xconn_id = 0
     2     yanzuo                    OR
     2     yanzuo                    vccs_resources.res(n).remote_xconn_id = 0 );
     2     yanzuo         ( T ):
     2     yanzuo            TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                             @'JIGDAT: BAD NRT VCC RESOURCE ALLOCATION!'
     2     yanzuo                              '  addr: %04X  other_addr: %04X'
     2     yanzuo                              '  vci : %04X  other_vci : %04X'
     2     yanzuo                              '  xcid: %04X  other_xcid: %04X'
     2     yanzuo                              '  res_index = %d / %d',
     2     yanzuo                             src_addr, addr,
     2     yanzuo                             vccs_resources.res(n).vci,
     2     yanzuo                             vccs_resources.res(n).remote_vci,
     2     yanzuo                             vccs_resources.res(n).xconn_id,
     2     yanzuo                             vccs_resources.res(n).remote_xconn_id,
     2     yanzuo                             n, vccs_params.item_count );
     2     yanzuo         ENDDECISION;
     2     yanzuo #endif
     2     yanzuo         TASK n := n + 1;
     2     yanzuo         TASK update_needed := update_needed OR allocated_for_this;
   361    lifsong         TASK pre_next_vcis := next_vcis;          /*save the previous pointer in case need to rollback the value, PR29327ESPE01*/
   361    lifsong 
   361    lifsong       ELSE:
   361    lifsong         TASK next_vcis := pre_next_vcis; /*rollback the value if the connection will not be created, PR29327ESPE01*/
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK i := i + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK vccs_resources.item_count := n;
     2     yanzuo   RETURN success_ec;
     2     yanzuo ENDPROCEDURE collect_vcc_resources__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE select_vcc_resources__r;
     2     yanzuo /*
     2     yanzuo  * This procedure goes through the given connections, allocates
     2     yanzuo  * them VCIs and xconn-ids if needed, and updates the data
     2     yanzuo  * structures accordingly (in case resources had to be allocated).
     2     yanzuo  * The list of VCC resources is then returned to the caller
     2     yanzuo  * (with RT connections filtered out, if the caller so desired.)
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN         src_addr            phys_address_t,
     2     yanzuo     IN         wanted_exist_status bool,
     2     yanzuo     IN         nrt_conns_only      bool,
     2     yanzuo     IN/OUT     vccs_params         jig_vccs_params__t,
     2     yanzuo     IN/OUT     vccs_resources      jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
  1222      tinyu     /*i, n                 dword,*/
     2     yanzuo     ec                   error_t,
     2     yanzuo     update_needed        bool;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     msg_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec := collect_vcc_resources__r( src_addr,
     2     yanzuo        wanted_exist_status,
     2     yanzuo        vccs_params,
     2     yanzuo        vccs_resources,
     2     yanzuo        update_needed );
     2     yanzuo   DECISION update_needed;
     2     yanzuo     ( T ):
     2     yanzuo       OUTPUT jig_update_vcc_resources__s( src_addr,
   876       pshu              vccs_resources ) TO SELF;
     2     yanzuo     ELSE:
     2     yanzuo       OUTPUT jig_continue__s TO SELF;
     2     yanzuo   ENDDECISION;
     2     yanzuo   SET ( NOW + 500, msg_timer );
     2     yanzuo   NEXTSTATE waiting;
     2     yanzuo 
     2     yanzuo STATE waiting
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT jig_update_vcc_resources__s( src_addr,
     2     yanzuo         vccs_resources );
     2     yanzuo     DCL
  1222      tinyu        i  dword ;
  1222      tinyu     
  1222      tinyu     TASK i := 0;   
     2     yanzuo     WHILE i < vccs_resources.item_count;
     2     yanzuo       CALL write_jicfil_resdata__r( src_addr, vccs_resources.res( i ));
     2     yanzuo       TASK i := i + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     OUTPUT jig_continue__s TO SELF;
     2     yanzuo     SET ( NOW + 500, msg_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_continue__s;
  1222      tinyu   DCL
  1222      tinyu        i,n  dword ;
     2     yanzuo     RESET ( msg_timer );
  1222      tinyu     
     2     yanzuo     /* if the client is only interested in NRT connections,
     2     yanzuo     * remove all RT connections from the result data.
     2     yanzuo     */
     2     yanzuo     DECISION nrt_conns_only;
     2     yanzuo       ( T ):
     2     yanzuo         TASK i := 0, n := 0;
     2     yanzuo         WHILE i < vccs_resources.item_count;
     2     yanzuo           DECISION vccs_resources.res(i).serv_category;
     2     yanzuo             ( int_serv_cat_t_i_nrt_mnw_c ):
     2     yanzuo               DECISION n;
     2     yanzuo                 ( < i ):
     2     yanzuo                   TASK vccs_resources.res(n) := vccs_resources.res(i);
     2     yanzuo               ENDDECISION;
     2     yanzuo               TASK n := n+1;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK i := i+1;
     2     yanzuo         ENDWHILE;
     2     yanzuo         TASK vccs_resources.item_count := n;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN success_ec;
     2     yanzuo 
     2     yanzuo   INPUT msg_timer;
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting;
     2     yanzuo ENDPROCEDURE select_vcc_resources__r;
     2     yanzuo 
   223    lifsong 
     2     yanzuo /**************************************************************************/
   223    lifsong PROCEDURE get_one_exist_vcc_res__r;
   223    lifsong /*
   223    lifsong  * This procedure only get one existing vcc res( local half) from given src, target addr and the conn_id.
   223    lifsong  **************************************************************************/
   223    lifsong FPAR
   223    lifsong     IN         src_addr            phys_address_t,
   223    lifsong     IN         nrt_conns_only      bool,
   223    lifsong     IN/OUT  vccs_param        jig_one_vcc_params__t,
   223    lifsong     IN/OUT  common jig_vcc_res_common__t,
   223    lifsong     IN/OUT  res jig_one_vcc_resources__t;
   223    lifsong 
   223    lifsong RETURNS
   223    lifsong     error_t;
   223    lifsong 
   223    lifsong DCL
   223    lifsong     jic_ptr               jicfil_ptr__t := NIL,
   223    lifsong     jii_ptr                jiifil_ptr__t := NIL,
   223    lifsong     comp_ptr           jii_comp_ptr__t := NIL, 
   223    lifsong     alp_ptr              jiifil_ptr__t := NIL,
   223    lifsong     ep_idx               byte := 0,
   223    lifsong     exists                bool := F,
   223    lifsong     addr                 phys_address_t;
   223    lifsong 
   223    lifsong START;
   223    lifsong 
   223    lifsong     DECISION nrt_conns_only AND vccs_param.serv_category /= int_serv_cat_t_i_nrt_mnw_c;
   223    lifsong     ( T ):
   223    lifsong         RETURN  invalid_param_ec;
   223    lifsong     ENDDECISION;  
   223    lifsong     DECISION ( jii_find_computer__r( src_addr, jii_ptr, comp_ptr, alp_ptr ) AND ( jii_ptr /= NIL AND comp_ptr /= NIL AND alp_ptr /=NIL ) )
   223    lifsong                 AND ( jii_find_conn__r( vccs_param.conn_id, jic_ptr ) AND jic_ptr /= NIL );
   223    lifsong     ( T ):
   223    lifsong         TASK common.alp1_unit_addr  := alp_ptr->procs(0).phys_addr,
   223    lifsong                 common.co_alp1_addr    := alp_ptr->co_alp_unit_phys_addr,
   223    lifsong                 common.co_alp1_updated := alp_ptr->co_alp_unit_updated,
   223    lifsong                 common.mphy_port       := comp_ptr->mphy_port,
   223    lifsong                 common.vpi             := comp_ptr->vpi;
   223    lifsong         WHILE ep_idx < 2;
   223    lifsong             TASK addr := jic_ptr->half_conn(ep_idx).comp;
   223    lifsong             DECISION addr = src_addr
   223    lifsong                           AND jic_ptr->half_conn(ep_idx).exists ;
   223    lifsong             ( T ):
   223    lifsong                 TASK exists := T;
   223    lifsong                 TASK res.conn_id := vccs_param.conn_id,
   223    lifsong                         res.target_comp := addr,
   223    lifsong                         res.vci := jic_ptr->half_conn(ep_idx).vci,
   223    lifsong                         res.xconn_id := jic_ptr->half_conn(ep_idx).xconn_id,
   223    lifsong                         res.serv_category := vccs_param.serv_category;
   223    lifsong                 DECISION app_unit_check__r( $jii_ptr );
   223    lifsong                 ( T ):
   223    lifsong                     TASK res.dest_fabric_port := jii_ptr->sfu_port_number,
   223    lifsong                             res.dest_alp_cluster := jii_ptr->cluster_idx;
   223    lifsong                 ELSE:
   223    lifsong                     TASK res.dest_fabric_port := alp_ptr->sfu_port_number,
   223    lifsong                             res.dest_alp_cluster := alp_ptr->cluster_idx;
   223    lifsong                 ENDDECISION;      
   223    lifsong             ELSE:
   223    lifsong                 DECISION addr /= src_addr
   223    lifsong                              AND jic_ptr->half_conn( ep_idx ^ 1).exists;
   223    lifsong                 ( T ):
   223    lifsong                     TASK res.remote_vci := jic_ptr->half_conn(ep_idx).vci,
   223    lifsong                             res.remote_xconn_id := jic_ptr->half_conn(ep_idx).xconn_id;
   223    lifsong                 ENDDECISION;
   223    lifsong             ENDDECISION;
   223    lifsong             TASK ep_idx := ep_idx + 1;
   223    lifsong         ENDWHILE;
   223    lifsong         DECISION exists;
   223    lifsong         ( T ):
   223    lifsong             RETURN success_ec;
   223    lifsong         ENDDECISION;
   223    lifsong     ENDDECISION;
   223    lifsong     
   223    lifsong     RETURN unsuccessful_ec;
   223    lifsong ENDPROCEDURE get_one_exist_vcc_res__r;
   223    lifsong 
  1407     z7zhou 
  1407     z7zhou PROCEDURE set_one_vcc_resource__r;
  1407     z7zhou FPAR
  1407     z7zhou     IN      ep_idx                  byte,
  1407     z7zhou     IN      jic_ptr                 jicfil_ptr__t,
  1407     z7zhou     IN/OUT  one_vcc_res             jig_one_vcc_resources__t;
  1407     z7zhou 
  1407     z7zhou 
  1407     z7zhou DCL
  1407     z7zhou     jii_ptr, alp_ptr     jiifil_ptr__t;
  1407     z7zhou 
  1407     z7zhou START;
  1407     z7zhou     TASK one_vcc_res.conn_id          :=  jic_ptr->toelib_conn_id,
  1407     z7zhou          one_vcc_res.target_comp      :=  jic_ptr->half_conn(ep_idx^1).comp,
  1407     z7zhou  
  1407     z7zhou          /* set vci=0 or remote_vci=0 to indicate if the half-connection
  1407     z7zhou          does not exists in HW (or VCLtp is not reserved). */
  1407     z7zhou          one_vcc_res.vci              :=  jic_ptr->half_conn(ep_idx).vci *
  1407     z7zhou          byte( jic_ptr->half_conn(ep_idx).exists ),
  1407     z7zhou          one_vcc_res.remote_vci       :=  jic_ptr->half_conn(ep_idx^1).vci *
  1407     z7zhou          byte( jic_ptr->half_conn(ep_idx^1).exists ),
  1407     z7zhou          one_vcc_res.xconn_id         :=  jic_ptr->half_conn(ep_idx).xconn_id,
  1407     z7zhou          one_vcc_res.remote_xconn_id  :=  jic_ptr->half_conn(ep_idx^1).xconn_id,
  1407     z7zhou          one_vcc_res.serv_category    :=  jic_ptr->serv_cat;
  1407     z7zhou          
  1407     z7zhou      DECISION jii_find_computer__r( one_vcc_res.target_comp,
  1407     z7zhou               jii_ptr, dummy_comp_ptr, alp_ptr ) AND alp_ptr /= NIL;
  1407     z7zhou        ( T ):
  1407     z7zhou          TASK one_vcc_res.dest_fabric_port := alp_ptr->sfu_port_number,
  1407     z7zhou               one_vcc_res.dest_alp_cluster := alp_ptr->cluster_idx;
  1407     z7zhou        ELSE:
  1407     z7zhou          TASK one_vcc_res.dest_fabric_port := 0xFF,
  1407     z7zhou               one_vcc_res.dest_alp_cluster := alp_cluster_idx__t_invalid_c;
  1407     z7zhou      ENDDECISION;
  1407     z7zhou 
  1407     z7zhou ENDPROCEDURE set_one_vcc_resource__r;    
  1407     z7zhou 
   223    lifsong /**************************************************************************/
     2     yanzuo PROCEDURE jii_list_vccs__r;
     2     yanzuo /*
     2     yanzuo  * This procedure returns the connections of given unit
     2     yanzuo  * which exist in JICFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      src_addr            phys_address_t,
     2     yanzuo     IN      wanted_exist_status bool,
     2     yanzuo     IN      nrt_conns_only      bool,
     2     yanzuo     IN/OUT  vcc_res             jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     i, n                 dword,
     2     yanzuo     ep_idx               byte,
  1407     z7zhou     jic_ptr              jicfil_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK i := 1, n := 0;
     2     yanzuo   TASK jic_ptr := jicfil_ptr__r( i );
     2     yanzuo   WHILE i <= jig_limits__t_n_conns_c;
     2     yanzuo     TASK ep_idx := byte( src_addr = jic_ptr->half_conn(1).comp );
     2     yanzuo     DECISION jic_ptr->toelib_conn_id /= 0
     2     yanzuo              AND
     2     yanzuo              (( src_addr = computer_t_any_c ) OR
     2     yanzuo              ( src_addr = jic_ptr->half_conn(ep_idx).comp ))
     2     yanzuo              AND
     2     yanzuo              ( wanted_exist_status =
     2     yanzuo              ( jic_ptr->half_conn(0).exists OR
     2     yanzuo              jic_ptr->half_conn(1).exists ))
     2     yanzuo              AND
     2     yanzuo              (( NOT nrt_conns_only ) OR
     2     yanzuo              jic_ptr->serv_cat = int_serv_cat_t_i_nrt_mnw_c );
     2     yanzuo       ( T ):
  1407     z7zhou         CALL set_one_vcc_resource__r(ep_idx, jic_ptr, vcc_res.res(n));
  1407     z7zhou  
  1407     z7zhou         TASK n := n + 1;
     2     yanzuo 
  1407     z7zhou         DECISION ((jic_ptr->toelib_conn_id >= jig_limits__t_n_dsp_conns_min_c) AND
  1407     z7zhou                   (jic_ptr->half_conn(0).comp = jic_ptr->half_conn(1).comp));
  1407     z7zhou         (T):
  1407     z7zhou            TASK ep_idx := ep_idx^1;
  1407     z7zhou            CALL set_one_vcc_resource__r(ep_idx, jic_ptr, vcc_res.res(n));
  1407     z7zhou            TASK n := n + 1;
  1407     z7zhou 
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK jic_ptr := ADDPTR( jic_ptr, 1 );
     2     yanzuo     TASK i := i + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK vcc_res.item_count := n;
     2     yanzuo   RETURN success_ec;
     2     yanzuo ENDPROCEDURE jii_list_vccs__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_core_ready_for_reporting__r;
     2     yanzuo /*
     2     yanzuo  * Tell if core (RUGGER) is ready for reporting.
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN core_ready_for_reporting__pv;
     2     yanzuo ENDPROCEDURE jii_core_ready_for_reporting__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_sd4_init_done__r;
     2     yanzuo /*
     2     yanzuo  * Tell if first SFU SD4G initializations have been completed.
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN sd4_init_done__pv;
     2     yanzuo ENDPROCEDURE jii_sd4_init_done__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_sym_mxu_apc_init_done__r;
     2     yanzuo /*
     2     yanzuo  * Tell if SYM-MXU APC initialization has been done.
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN sym_mxu_apc_init_done__pv;
     2     yanzuo ENDPROCEDURE jii_sym_mxu_apc_init_done__r;
     2     yanzuo 
     2     yanzuo PROCEDURE set_sym_mxu_cluster__pv__r;
     2     yanzuo RETURNS bool;
     2     yanzuo DCL
     2     yanzuo       l_status       bool:=F,
     2     yanzuo       l_jii_ptr      jiifil_ptr__t,
     2     yanzuo       l_comp_ptr     jii_comp_ptr__t,
     2     yanzuo       l_alp_ptr      jiifil_ptr__t;
     2     yanzuo START;
     2     yanzuo    DECISION jii_find_computer__r(own_unit_phys_addr,l_jii_ptr,l_comp_ptr,l_alp_ptr);
     2     yanzuo    (T):
     2     yanzuo       TASK sym_mxu_cluster__pv := l_jii_ptr->cluster_idx;
     2     yanzuo #if (test_logs) /* (test_logs) */
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo            @'JIGDAT:set_sym_mxu_cluster__pv__r: '
     2     yanzuo            'SYM CLUSTER PV VALUE = %X',
     2     yanzuo            sym_mxu_cluster__pv );
     2     yanzuo #endif
     2     yanzuo       TASK l_status:=T;
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN l_status;
     2     yanzuo ENDPROCEDURE set_sym_mxu_cluster__pv__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jii_sym_mxu_cluster__r;
     2     yanzuo /*
     2     yanzuo  * Tell the cluster id of SYM-MXU units.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   RETURN sym_mxu_cluster__pv;
     2     yanzuo ENDPROCEDURE jii_sym_mxu_cluster__r;
     2     yanzuo 
   664     qinggu /**************************************************************************/
   664     qinggu PROCEDURE jii_is_sym_mxu_app__r;
   664     qinggu /*
   664     qinggu  * Tell the cluster id of SYM-MXU units.
   664     qinggu  **************************************************************************/
   664     qinggu 
   664     qinggu RETURNS
   664     qinggu     bool;
   664     qinggu 
   664     qinggu START;
   664     qinggu   RETURN sym_mxu_is_app__pv;
   685    lifsong ENDPROCEDURE jii_is_sym_mxu_app__r;
   664     qinggu 
     2     yanzuo /**************************************************************************
     2     yanzuo This procedure acquires traffic management parameters for a NRT connection.
     2     yanzuo *************************************************************************/
     2     yanzuo PROCEDURE get_traf_manag_params__r;
     2     yanzuo FPAR
     2     yanzuo     /* input parameters: */
  1222      tinyu     /*IN      comp_unit_type    unit_type_t,*/
     2     yanzuo     IN      comp_unit_index   unit_index_t,
     2     yanzuo     IN      comp_vpi          vpi_t,
     2     yanzuo     IN      comp_mphy         mphy_port_number_t,
     2     yanzuo     IN      alp_unit_type     unit_type_t,
     2     yanzuo     IN      alp_unit_index    unit_index_t,
     2     yanzuo 
     2     yanzuo     /* output parameters: */
     2     yanzuo     IN/OUT  tm_params_apc     alp_tp_streams_t,
     2     yanzuo     IN/OUT  tm_params_apc_inw alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     serv_pid               pid,
     2     yanzuo     serv_attr              attr_group_t,
     2     yanzuo     int_traf_conf_para_egr int_traf_conf_para_t,
   216      h10hu     int_traf_conf_para_ing int_traf_conf_para_t;
     2     yanzuo 
     2     yanzuo DCL SAVE
     2     yanzuo     req_group              message_group_t;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     SET single_tl,
     2     yanzuo     ack_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION get_service__r( central_cac_tp_to_tmp__c, serv_pid, serv_attr );
     2     yanzuo     ( F ):
     2     yanzuo       RETURN unsuccessful_ec;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK int_traf_conf_para_egr.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo        int_traf_conf_para_egr.traf_param.max_frame_size := 0,
     2     yanzuo        int_traf_conf_para_egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo        int_traf_conf_para_egr.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo        int_traf_conf_para_egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo   TASK int_traf_conf_para_ing.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo        int_traf_conf_para_ing.traf_param.max_frame_size := 0,
     2     yanzuo        int_traf_conf_para_ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo        int_traf_conf_para_ing.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo        int_traf_conf_para_ing.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo   /* This code may be executed by many hands at the same time,
     2     yanzuo   so we must not increase THE global variable 'req_group' directly
     2     yanzuo   or compare received message group values to it.
     2     yanzuo   Also, the values we write to it must be within 1..MAX. */
     2     yanzuo   TASK serv_attr.group_number := req_group;
     2     yanzuo   DECISION serv_attr.group_number;
     2     yanzuo     ( >= jig_limits__t_max_msg_group_c ):
     2     yanzuo       TASK serv_attr.group_number := 0;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK serv_attr.group_number := serv_attr.group_number + 1;
     2     yanzuo   TASK req_group := serv_attr.group_number;
     2     yanzuo 
  1124   huantang   OUTPUT central_cac_tmp_apc_s( comp_mphy,
     2     yanzuo            comp_vpi,
     2     yanzuo            alp_unit_type,
     2     yanzuo            alp_unit_index,
     2     yanzuo            int_traf_conf_para_egr,
     2     yanzuo            int_traf_conf_para_ing )
     2     yanzuo            TO serv_pid,
     2     yanzuo            SET ATTRIBUTES = serv_attr;
     2     yanzuo #if (test_logs) /* (test_logs) */
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo            @'JIGDAT:CENTRAL_CAC_TP_TO_TMP SENT: '
     2     yanzuo            '  alp unit type %X',
     2     yanzuo            alp_unit_type );
     2     yanzuo #endif
     2     yanzuo   SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT central_cac_tmp_apc_ack_s( tm_params_apc, tm_params_apc_inw, status );
     2     yanzuo     DCL
     2     yanzuo        status error_t;
     2     yanzuo     DECISION ARRIVED_GROUP;
     2     yanzuo       ( 0, serv_attr.group_number ):
     2     yanzuo       /* ok */
     2     yanzuo       ELSE:
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION status;
     2     yanzuo       ( success_ec ):
     2     yanzuo       ELSE:
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              NIL,0,
     2     yanzuo              log_text_info_t(@'JIGDAT:TRAFFICK PARAMS CONVERSION FAILED'));
     2     yanzuo         TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo              log_write_item_t(@comp_unit_index),2,
     2     yanzuo              log_text_info_t(@'JIGDAT: TARGET UNIT IDX,TYPE:'));
     2     yanzuo         TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo              log_write_item_t(@status),1,
     2     yanzuo              log_text_info_t(@'JIGDAT: RECEIVED ERROR CODE:'));
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     RETURN status;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
     2     yanzuo          log_text_info_t(@'JIGDAT:NO RESPONSE TO TRAFFICK...'));
     2     yanzuo     TASK write_to_log(log_type_t_empty_e_c,NIL, 0,
     2     yanzuo          log_text_info_t(@'JIGDAT:...PARAMETER CONVERSION'));
     2     yanzuo     TASK write_to_log(log_type_t_word_e_c,
     2     yanzuo          log_write_item_t(@comp_unit_index),2,
     2     yanzuo          log_text_info_t(@'JIGDAT: TARGET UNIT IDX,TYPE:'));
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE get_traf_manag_params__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE init_service_table__r;
     2     yanzuo /* This procedure initializes service_table with service names
     2     yanzuo  * which are used to get service from Name Server
     2     yanzuo  **************************************************************************/
     2     yanzuo   START;
     2     yanzuo     TASK memset( bytepointer( @service_table ), 0, SIZEOF( serv_table__t ));
     2     yanzuo     /* KARJAA */
     2     yanzuo     TASK service_table.service( central_cac__c          ).service_name := 'central_cac_apc_mapping_as';
     2     yanzuo     /* KARJAA */
     2     yanzuo     TASK service_table.service( central_cac_tp_to_tmp__c).service_name := 'central_cac_tp_to_tmp_apc_as';
     2     yanzuo     /* XVALUE */
     2     yanzuo     TASK service_table.service( atm_config_params__c    ).service_name := 'atm_configuration_parameters_as';
     2     yanzuo     /* UAMPRB */
     2     yanzuo     TASK service_table.service( utopia_addr_inq__c      ).service_name := 'utopia_address_inquiry_as';
     2     yanzuo     /* PIGPRB */
     2     yanzuo     TASK service_table.service( atm_inter_notif__c      ).service_name := 'atm_interface_notif_as';
     2     yanzuo     /* RBROKE */
     2     yanzuo     TASK service_table.service( atm_res_broker__c       ).service_name := 'atm_resource_handling_as';
     2     yanzuo     /* RUGGER */
     2     yanzuo     TASK service_table.service( atm_log_res_handling__c ).service_name := 'atm_log_res_handling_as';
     2     yanzuo 
     2     yanzuo ENDPROCEDURE init_service_table__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_inq_service__r;
     2     yanzuo /*
     2     yanzuo  * This routine provides the pid and service attributes of a specific
     2     yanzuo  * service. It can provide real service information
     2     yanzuo  * acquired from name service, or data provided via JIHEXT.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     IN      service_code    dword,
     2     yanzuo     IN      inquire_always  bool,
     2     yanzuo     IN/OUT  server_pid      pid,
     2     yanzuo     IN/OUT  server_attr     attr_group_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     serv_comp            computer_t,
     2     yanzuo     serv_fam             family_id_t,
     2     yanzuo 
     2     yanzuo     service_found        bool :=F;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( @server_attr ), 0, SIZEOF( server_attr ));
     2     yanzuo 
     2     yanzuo   DECISION service_code;
     2     yanzuo   ( central_cac__c, central_cac_tp_to_tmp__c,
     2     yanzuo     atm_config_params__c, utopia_addr_inq__c,
     2     yanzuo     atm_inter_notif__c, atm_res_broker__c,
     2     yanzuo     atm_log_res_handling__c, intconn_topology_mgr__c ):
     2     yanzuo 
     2     yanzuo     DECISION (service_table.service(service_code).service_provider /= NULL)
     2     yanzuo              AND
     2     yanzuo              (NOT inquire_always);
     2     yanzuo       ( T ):
     2     yanzuo         /* Service already read from Name Server */
     2     yanzuo         TASK server_pid    := service_table.service(service_code).service_provider;
     2     yanzuo         TASK server_attr   := service_table.service(service_code).service_attr;
     2     yanzuo         TASK service_found := T;
     2     yanzuo       ELSE:
     2     yanzuo        DECISION service_code;
     2     yanzuo          ( intconn_topology_mgr__c ):
     2     yanzuo            /* TOMPRB has no suitable service in Name Server */
     2     yanzuo             TASK serv_comp            := own_unit_log_addr,
     2     yanzuo                  serv_fam             := tomprb_p,
     2     yanzuo                  server_attr.delivery := computer_t_width_wo_c,
     2     yanzuo                  server_attr.attr     := msg_attr_t_normal_priority_c;
     2     yanzuo             TASK make_pid_r( server_pid, serv_comp, serv_fam, 0, 0 );
     2     yanzuo             TASK service_table.service(intconn_topology_mgr__c).service_provider := server_pid;
     2     yanzuo             TASK service_table.service(intconn_topology_mgr__c).service_attr := server_attr;
     2     yanzuo             TASK service_found := T;
     2     yanzuo           ELSE:
     2     yanzuo             /* Try to find service from Name Server */
     2     yanzuo             DECISION get_service_r(service_table.service(service_code).service_name,
     2     yanzuo                                    server_pid, server_attr);
     2     yanzuo 
     2     yanzuo               (success_ec):
     2     yanzuo                 TASK service_table.service(service_code).service_provider := server_pid;
     2     yanzuo                 TASK service_table.service(service_code).service_attr := server_attr;
     2     yanzuo                 TASK service_found := T;
     2     yanzuo               ELSE:
     2     yanzuo                  /* log res handling is running outside OMU -- suppress log
     2     yanzuo                     if core units are not ready yet */
     2     yanzuo                  DECISION service_code /= atm_log_res_handling__c
     2     yanzuo                           OR
     2     yanzuo                           core_ready_for_reporting__pv;
     2     yanzuo                  ( T ):
     2     yanzuo                     TASK dxsyslog_r(
     2     yanzuo                            log_type_t_text_e_c,
     2     yanzuo                            @'JIGDAT: Service not found!'
     2     yanzuo                             'Service: %s',
     2     yanzuo                            bytepointer(@service_table.service(service_code).service_name) );
     2     yanzuo                  ENDDECISION;
     2     yanzuo            ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   RETURN service_found;
     2     yanzuo ENDPROCEDURE get_inq_service__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_service__r;
     2     yanzuo /*
     2     yanzuo  * This routine is only front-end to get_inq_service__r
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo FPAR
     2     yanzuo     IN      service_code    dword,
     2     yanzuo     IN/OUT  server_pid      pid,
     2     yanzuo     IN/OUT  server_attr     attr_group_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo   RETURN get_inq_service__r(service_code, F, server_pid, server_attr);
     2     yanzuo 
     2     yanzuo ENDPROCEDURE get_service__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE hconns_operation__r;
     2     yanzuo /*
     2     yanzuo  * Send a half-connection request to WHISKY and wait for its response.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      wo_mxu_addr  computer_t,
     2     yanzuo     IN      sp_mxu_addr  computer_t,
     2     yanzuo     IN      update_sp    bool,
     2     yanzuo     IN      req_mode     request_mode_t,
     2     yanzuo 
     2     yanzuo     IN      mphy_port    mphy_port_number_t,
     2     yanzuo     IN      vpi          vpi_t,
     2     yanzuo 
     2     yanzuo     IN/OUT  hconns       vc_half_conn_array_t,
     2     yanzuo     IN/OUT  tm_params    alp_tp_streams_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     curr_addr            phys_address_t,
     2     yanzuo     msg_group            message_group_t := 0,
     2     yanzuo     my_req_idx           dword,
     2     yanzuo     whisky               pid,
     2     yanzuo     ustate               unit_state_t,
     2     yanzuo     done                 bool := F,
     2     yanzuo     wo_result            error_t,
     2     yanzuo     waiting_wo           bool := T,
     2     yanzuo     waiting_sp           bool := F;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     ack_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* todo: read the APC manager pid of the target
     2     yanzuo   ALP cluster from JIAFIL */
     2     yanzuo   TASK curr_addr := wo_mxu_addr;
     2     yanzuo   /* if the ALP1 unit is separated, no need to send any
     2     yanzuo   commands there. */
     2     yanzuo   DECISION unit_state_by_phys_addr__r( wo_mxu_addr, ustate );
     2     yanzuo     ( success_ec ):
     2     yanzuo       TASK ustate := ustate | unit_state_t_mainstate_bm_c;
     2     yanzuo       DECISION ustate;
     2     yanzuo         ( unit_state_t_se_c, unit_state_t_tr_c ):
     2     yanzuo           RETURN success_ec;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION update_sp;
     2     yanzuo     ( T ):
     2     yanzuo       TASK curr_addr := sp_mxu_addr;
     2     yanzuo       TASK waiting_sp := T;
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK make_pid_r( whisky, curr_addr, whisky_p, 0, 0 );
     2     yanzuo   TASK curr_whisky_req_idx__pv := curr_whisky_req_idx__pv + 1,
     2     yanzuo        my_req_idx := curr_whisky_req_idx__pv;
     2     yanzuo   WHILE NOT done;
  1124   huantang     TASK set_pid_computer_r( whisky, curr_addr );
     2     yanzuo     OUTPUT alp_config_tps_streams_s( req_mode,
     2     yanzuo            my_req_idx,
     2     yanzuo            mphy_port,
     2     yanzuo            vpi,
     2     yanzuo            hconns,
     2     yanzuo            tp_in_topology_t_uc_c,
     2     yanzuo            atm_usage_tag_t_ic_ud_c,
     2     yanzuo            abled_flag_t_enabled_c /* tm_params.ing_able */,
     2     yanzuo            abled_flag_t_enabled_c /* tm_params.egr_able */,
     2     yanzuo 
     2     yanzuo            tm_params.ingress_sel,
     2     yanzuo            tm_params.egress_sel,
     2     yanzuo 
     2     yanzuo            tm_params.gen_ing_stream,
     2     yanzuo            tm_params.gen_egr_stream,
     2     yanzuo            tm_params.egr_subport,
     2     yanzuo 
     2     yanzuo            tm_params.ing_stream.cl0,
     2     yanzuo            tm_params.ing_stream.cl1,
     2     yanzuo            tm_params.ing_stream.cl234,
     2     yanzuo 
     2     yanzuo            tm_params.egr_stream.spt1_cl0,
     2     yanzuo            tm_params.egr_stream.spt1_cl1,
     2     yanzuo            tm_params.egr_stream.spt1_cl234,
     2     yanzuo            tm_params.egr_stream.spt2s,
     2     yanzuo            tm_params.egr_stream.spt2n )
     2     yanzuo            TO whisky, SET GROUP = msg_group;
     2     yanzuo     DECISION curr_addr;
     2     yanzuo       ( wo_mxu_addr ):
     2     yanzuo         TASK done := T;
     2     yanzuo       ELSE:
     2     yanzuo         TASK curr_addr := wo_mxu_addr;
     2     yanzuo     ENDDECISION;
     2     yanzuo   ENDWHILE;
     2     yanzuo   /* Sometimes ack takes even 5 seconds */
     2     yanzuo   SET ( NOW + (3 * ack_waiting_time__c)/2, ack_timer );
     2     yanzuo   NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT alp_config_tps_streams_ack_s( status, req_idx, ?, ?, hconns_result );
     2     yanzuo     DCL
     2     yanzuo        hconns_result     vc_half_conn_array_t,
     2     yanzuo        status            error_t,
     2     yanzuo        req_idx           dword;
     2     yanzuo     DECISION req_idx;
     2     yanzuo       ( /= my_req_idx ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* Find out the sender of the message.
     2     yanzuo     In module testing mode, JIHEXT puts the sender to group field. */
  1124   huantang     TASK curr_addr := get_pid_computer_r( SENDER );
     2     yanzuo     DECISION curr_addr;
     2     yanzuo       ( wo_mxu_addr ):
     2     yanzuo         TASK wo_result := status,
     2     yanzuo              waiting_wo := F,
     2     yanzuo              hconns := hconns_result; /* update 'official' result */
     2     yanzuo       ( sp_mxu_addr ):
     2     yanzuo         /* todo: check SP ack status, set alarm if status<>success_ec */
     2     yanzuo         TASK waiting_sp := F;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION waiting_wo OR waiting_sp;
     2     yanzuo       ( T ):
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     /* all acks received, exit */
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     RETURN wo_result;
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     /* todo: retry, then target alarms to the unit(s)
     2     yanzuo     which did not respond */
     2     yanzuo     DECISION waiting_wo;
     2     yanzuo       ( T ):
     2     yanzuo         /* WO unit did not respond */
     2     yanzuo         RETURN message_waiting_timeout_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN wo_result;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE hconns_operation__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE set_xcon_center__r;
     2     yanzuo /*
     2     yanzuo  * Find out the connections of the given unit from TOELIB, and check the
     2     yanzuo  * target&remot unit is center or not
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      in_conn_id   conn_id_t,
     2     yanzuo     IN/OUT  is_center    bool;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo TYPE edge_buf_1__t
     2     yanzuo   CONSTANT
     2     yanzuo     size_c = 1000;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( size_c ) OF byte;
     2     yanzuo ENDTYPE edge_buf_1__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE edge_ptr_1__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     POINTER (edge_t);
     2     yanzuo ENDTYPE edge_ptr_1__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     edge_buf             edge_buf_1__t,
     2     yanzuo     edge_ptr             edge_ptr_1__t,
   857     z7zhou     ec                   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /*
     2     yanzuo   * Set up the data structures required
     2     yanzuo   * by TOELIB routines.
     2     yanzuo   */
   857     z7zhou   TASK edge_ptr  := edge_ptr_1__t( @edge_buf );
     2     yanzuo 
   857     z7zhou   TASK ec := conn_attributes_r( in_conn_id,
     2     yanzuo                                          SIZEOF( edge_buf ),
     2     yanzuo                                          $edge_ptr );
   857     z7zhou     DECISION ec;
   857     z7zhou     ( success_ec ):  
   857     z7zhou            TASK is_center := F;
   857     z7zhou            
     2     yanzuo            DECISION edge_ptr->vertex_end_list->vertex_end->vertex->vertex_attr.node_type;
     2     yanzuo            (node_type_t_center_c, node_type_t_sym_c):
     2     yanzuo             TASK  is_center := T;
     2     yanzuo            ENDDECISION;
   857     z7zhou            
     2     yanzuo            DECISION edge_ptr->vertex_end_list->next->vertex_end->vertex->vertex_attr.node_type;
     2     yanzuo            (node_type_t_center_c, node_type_t_sym_c):
     2     yanzuo             TASK  is_center := T;
     2     yanzuo            ENDDECISION;
     2     yanzuo 
   857     z7zhou    ENDDECISION;
   857     z7zhou 
   857     z7zhou     RETURN ec;
   857     z7zhou     
     2     yanzuo ENDPROCEDURE set_xcon_center__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE create_halfconns_in_hw__r;
     2     yanzuo /*
     2     yanzuo  * Send a half-connection creation request to WHISKY and wait for its
     2     yanzuo  * response. If some half-connections could not be created, modify the
     2     yanzuo  * corresponding records in the resource table by replacing conn_id
     2     yanzuo  * with conn_id_t_undefined_c. Ie. modify entry res_table_startpos +
     2     yanzuo  * index of the failed connection in WHISKY request.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      wo_mxu_addr        computer_t,
     2     yanzuo     IN      sp_mxu_addr        computer_t,
     2     yanzuo     IN      update_sp          bool,
     2     yanzuo     IN/OUT  tm_params          alp_tp_streams_t,
     2     yanzuo     IN      vpi                vpi_t,
     2     yanzuo     IN      mphy_port          mphy_port_number_t,
     2     yanzuo     IN      n_halfconns_in_req dword,
     2     yanzuo     IN/OUT  vccs               jig_vccs_resources__t,
     2     yanzuo     IN      res_start_pos      dword;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword,
     2     yanzuo     err                  error_t,
     2     yanzuo     is_center            bool,
     2     yanzuo     hconns               vc_half_conn_array_t;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     ack_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* workaround for KARJAA bug */
     2     yanzuo   DECISION ( byte( tm_params.gen_ing_stream.cl__id ) > 1 )
     2     yanzuo            AND
     2     yanzuo            ( tm_params.ing_stream.cl234.cl__EBS_wght = 0 );
     2     yanzuo     ( T ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGGER: bad EBS_wght parameter detected!'
     2     yanzuo            'MXU addr=%04X mphy=%02X vpi=%02X',
     2     yanzuo            wo_mxu_addr, mphy_port, vpi );
     2     yanzuo       TASK tm_params.ing_stream.cl234.cl__EBS_wght := 100;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* fill the half-conn table to be passed to WHISKY */
     2     yanzuo   TASK memset( bytepointer( @hconns ), 0, SIZEOF( hconns ));
     2     yanzuo   TASK idx := 0;
     2     yanzuo   WHILE idx < n_halfconns_in_req;
   857     z7zhou     TASK err := set_xcon_center__r( vccs.res(idx).conn_id,
     2     yanzuo                                     is_center);
     2     yanzuo     DECISION err;
     2     yanzuo     (/= success_ec):
     2     yanzuo        RETURN err;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     TASK hconns.item( idx ).vci :=
     2     yanzuo          vccs.res( idx+res_start_pos ).vci,
     2     yanzuo          hconns.item( idx ).local_conn_id :=
     2     yanzuo          vccs.res( idx+res_start_pos ).xconn_id,
     2     yanzuo          hconns.item( idx ).xconn_info.remote_connid :=
     2     yanzuo          vccs.res( idx+res_start_pos ).remote_xconn_id,
     2     yanzuo          hconns.item( idx ).exists := F;
     2     yanzuo 
   694      h10hu     /*to support sf10e,fabric port bit 7 mask to decide RT/NRT for AMGSEB;this change doesn't harm other sfu category*/
   694      h10hu     DECISION ( tm_params.gen_ing_stream.cl__id );
   694      h10hu     (0:2):     
   694      h10hu       TASK hconns.item( idx ).xconn_info.fabric_port := (vccs.res( idx+res_start_pos ).dest_fabric_port) | fabric_port_number_t_hi_pri_c;
   694      h10hu     ELSE:
   694      h10hu       TASK hconns.item( idx ).xconn_info.fabric_port := (vccs.res( idx+res_start_pos ).dest_fabric_port) & fabric_port_number_t_pri_out_c;
   694      h10hu     ENDDECISION;
   694      h10hu 
     2     yanzuo     TASK hconns.item( idx ).central_leaf := is_center;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   TASK hconns.item_count := idx;
     2     yanzuo   TASK err := hconns_operation__r ( wo_mxu_addr,
     2     yanzuo        sp_mxu_addr,
     2     yanzuo        update_sp,
     2     yanzuo        request_mode_t_create_c,
     2     yanzuo        mphy_port,
     2     yanzuo        vpi,
     2     yanzuo        hconns,
     2     yanzuo        tm_params );
     2     yanzuo   /* remove failed connections from vcc resource array. */
     2     yanzuo   DECISION err;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo            @'JIGGER: half-conn creation failed (%04X)!'
     2     yanzuo            'WO addr=%04X  SP addr=%04X  update_sp=%d'
  1420       pshu            'mphy port=%02X vpi=%d vci= %x',
     2     yanzuo            err,
     2     yanzuo            wo_mxu_addr, sp_mxu_addr, update_sp,
  1420       pshu            mphy_port, vpi,hconns.item(0).vci );
     2     yanzuo   ENDDECISION;
     2     yanzuo   TASK idx := 0;
     2     yanzuo   WHILE idx < hconns.item_count;
     2     yanzuo     DECISION ( err = success_ec ) AND ( NOT hconns.item(idx).exists );
     2     yanzuo       ( T ):
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo              @'Conn not in HW! MXU=%03X MP=%02X VCC=%d,%03X'
     2     yanzuo              'connid=%04X idx=%d/%d'
     2     yanzuo              'xc=%04X rem_xc=%04X dest_fab_port=%02X',
     2     yanzuo              wo_mxu_addr, mphy_port, vpi,
     2     yanzuo              vccs.res( idx+res_start_pos ).vci,
     2     yanzuo 
     2     yanzuo              vccs.res( res_start_pos + idx ).conn_id,
     2     yanzuo              idx+1, hconns.item_count,
     2     yanzuo              vccs.res( res_start_pos + idx ).xconn_id,
     2     yanzuo              vccs.res( res_start_pos + idx ).remote_xconn_id,
     2     yanzuo              vccs.res( res_start_pos + idx ).dest_fabric_port );
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( err /= success_ec ) OR ( NOT hconns.item(idx).exists );
     2     yanzuo       ( T ):
     2     yanzuo         TASK vccs.res( res_start_pos + idx ).conn_id :=
     2     yanzuo              conn_id_t_undefined_c;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK idx := idx + 1;
     2     yanzuo   ENDWHILE;
     2     yanzuo   RETURN err;
     2     yanzuo ENDPROCEDURE create_halfconns_in_hw__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jigdat_read_globals__r;
     2     yanzuo /*
     2     yanzuo  * Return JIGDAT global variable values.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  gv  jig_globals__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK memset( bytepointer( @gv ), 0, SIZEOF( gv ));
     2     yanzuo   TASK gv.version_info             := 1,
     2     yanzuo        gv.sd4_init_done            := sd4_init_done__pv,
     2     yanzuo        gv.sym_mxu_apc_init_done    := sym_mxu_apc_init_done__pv,
     2     yanzuo        gv.core_ready_for_reporting := core_ready_for_reporting__pv,
     2     yanzuo        gv.sym_mxu_cluster          := sym_mxu_cluster__pv;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE jigdat_read_globals__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE jigdat_set_global__r;
     2     yanzuo /*
     2     yanzuo  * Modify JIGDAT global variable
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  var_id           jig_var_id__t,
     2     yanzuo     IN  var_value        dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION var_id;
     2     yanzuo     ( jig_var_id__t_sd4_init_done ):
     2     yanzuo       TASK sd4_init_done__pv := bool( var_value );
     2     yanzuo     ( jig_var_id__t_sym_mxu_clus ):
     2     yanzuo       TASK sym_mxu_cluster__pv := var_value;
     2     yanzuo     ( jig_var_id__t_sym_apc_init_done ):
     2     yanzuo       TASK sym_mxu_apc_init_done__pv := bool( var_value );
     2     yanzuo     ( jig_var_id__t_core_ready_rep ):
     2     yanzuo       TASK core_ready_for_reporting__pv := bool( var_value );
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE jigdat_set_global__r;
     2     yanzuo 
     2     yanzuo /******************************************************************************
     2     yanzuo This procedure reads the state of the given unit type and index and masks the
     2     yanzuo resolved state so that only the main state is returned.
     2     yanzuo ******************************************************************************/
     2     yanzuo PROCEDURE unit_main_state__r;
     2     yanzuo FPAR
     2     yanzuo    IN           in_target_unit        unit_it_t,
     2     yanzuo    IN/OUT       io_unit_main_state    unit_state_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_result          error_t,
     2     yanzuo    l_unit_tmp_state  unit_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    TASK l_result := unit_state_r( in_target_unit.ttype,
     2     yanzuo                                   in_target_unit.index,
     2     yanzuo                                   l_unit_tmp_state );
     2     yanzuo 
     2     yanzuo    TASK io_unit_main_state := bit_or_r( l_unit_tmp_state,
     2     yanzuo                                         unit_state_t_mainstate_bm_c );
     2     yanzuo 
     2     yanzuo    RETURN l_result;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE unit_main_state__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE get_path_info__r;
     2     yanzuo /*
   359    lifsong  * Create interface via RS3PRB/KREIVI/RSKPRB
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN       in_unit        jiifil__t,
     2     yanzuo    IN       in_alp_unit    jiifil__t,
     2     yanzuo    IN       in_proc_idx    byte,
     2     yanzuo    IN/OUT   io_path_info   half_cconn_phy_info_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_unit           unit_it_t,
     2     yanzuo    l_alp            unit_it_t,
     2     yanzuo    l_unit_state     unit_state_t,
     2     yanzuo    l_alp_unit_state unit_state_t,
     2     yanzuo    l_if_idx         byte,
     2     yanzuo    l_ec             error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo    TASK memset( bytepointer( @io_path_info ), 0, SIZEOF( half_cconn_phy_info_t ));
     2     yanzuo    TASK l_unit.ttype := in_unit.unit_type,
   359    lifsong         l_unit.index := in_unit.unit_index;
   359    lifsong    TASK get_alp_unit_for_brt__r( l_alp, in_alp_unit );
     2     yanzuo 
     2     yanzuo    TASK l_if_idx := in_unit.procs(in_proc_idx).interface_index;
     2     yanzuo 
     2     yanzuo    TASK l_ec := unit_main_state__r( l_unit, l_unit_state);
     2     yanzuo 
     2     yanzuo    TASK l_ec := unit_main_state__r( l_alp, l_alp_unit_state );
     2     yanzuo 
     2     yanzuo    TASK io_path_info.nb_parts              := 2,
     2     yanzuo         io_path_info.mphy_part             := 1,
     2     yanzuo         io_path_info.if_owner.ttype        := in_unit.procs(in_proc_idx).unit_type,
     2     yanzuo         io_path_info.if_owner.index        := in_unit.procs(in_proc_idx).unit_index,
     2     yanzuo         /* Target unit info */
     2     yanzuo         io_path_info.fu_data(0).fu_type    := in_unit.procs(in_proc_idx).unit_type,
     2     yanzuo         io_path_info.fu_data(0).fu_index   := in_unit.procs(in_proc_idx).unit_index,
     2     yanzuo         io_path_info.fu_data(0).unit_state := l_unit_state,
     2     yanzuo         /* ALP unit info */
   359    lifsong         io_path_info.fu_data(1).fu_type    := l_alp.ttype,
   359    lifsong         io_path_info.fu_data(1).fu_index   := l_alp.index,
     2     yanzuo         io_path_info.fu_data(1).unit_state := l_alp_unit_state;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    DECISION in_unit.unit_type;
     2     yanzuo    ( unit_type_t_mxu_c ):
     2     yanzuo       TASK io_path_info.fu_data(0).fu_info.mxu.mphy_port.mphy_type        := mphy_type_t_mxu_c,
     2     yanzuo            io_path_info.fu_data(0).fu_info.mxu.mphy_port.mphy_port_number := in_unit.interfaces(l_if_idx).mphy_port,
     2     yanzuo            io_path_info.fu_data(0).fu_info.mxu.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo       TASK io_path_info.fu_data(1).fu_type    := in_unit.unit_type,
     2     yanzuo            io_path_info.fu_data(1).fu_index   := in_unit.unit_index,
     2     yanzuo            io_path_info.fu_data(1).unit_state := l_unit_state;
     2     yanzuo 
     2     yanzuo       TASK io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_type        := mphy_type_t_mxu_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_port_number := in_unit.interfaces(l_if_idx).mphy_port,
     2     yanzuo            io_path_info.fu_data(1).fu_info.mxu.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo    ( unit_type_t_nps1_c, unit_type_t_nps1p_c ):
     2     yanzuo       TASK io_path_info.fu_data(0).fu_info.nps1x.mphy_port.mphy_type        := mphy_type_t_unspecified_c,
     2     yanzuo            io_path_info.fu_data(0).fu_info.nps1x.mphy_port.mphy_port_number := mphy_port_number_t_unspec_c,
     2     yanzuo            io_path_info.fu_data(0).fu_info.nps1x.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo       TASK io_path_info.fu_data(1).fu_info.nps1x.mphy_port.mphy_type        := mphy_type_t_mxu_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.nps1x.mphy_port.mphy_port_number := mphy_port_number_t_unspec_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.nps1x.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo    ( unit_type_t_npge_c, unit_type_t_npgep_c ):
     2     yanzuo       TASK io_path_info.fu_data(0).fu_info.npgex.mphy_port.mphy_type        := mphy_type_t_unspecified_c,
     2     yanzuo            io_path_info.fu_data(0).fu_info.npgex.mphy_port.mphy_port_number := mphy_port_number_t_unspec_c,
     2     yanzuo            io_path_info.fu_data(0).fu_info.npgex.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo       TASK io_path_info.fu_data(1).fu_info.npgex.mphy_port.mphy_type        := mphy_type_t_mxu_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.npgex.mphy_port.mphy_port_number := mphy_port_number_t_unspec_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.npgex.sfu_port                   := in_unit.sfu_port_number;
     2     yanzuo 
   886    lifsong    ( unit_type_t_iwse_c, unit_type_t_iwsep_c, unit_type_t_iwst_c, unit_type_t_iwstp_c,
   886    lifsong      unit_type_t_npu_c, unit_type_t_npup_c ):
   359    lifsong       TASK io_path_info.fu_data(0).fu_info.npux.mphy_port.mphy_type        := mphy_type_t_unspecified_c,
   359    lifsong            io_path_info.fu_data(0).fu_info.npux.mphy_port.mphy_port_number := mphy_port_number_t_unspec_c,
   359    lifsong            io_path_info.fu_data(0).fu_info.npux.sfu_port                   := in_unit.sfu_port_number;
   886    lifsong  
   359    lifsong       TASK io_path_info.fu_data(1).fu_info.npux.mphy_port.mphy_type        := mphy_type_t_mxu_c,
   482      h10hu            io_path_info.fu_data(1).fu_info.npux.sfu_port                   := in_unit.sfu_port_number,
   482      h10hu            io_path_info.fu_data(1).fu_info.npux.mphy_port.mphy_port_number := in_unit.interfaces(in_unit.procs(in_proc_idx).interface_index).mphy_port;
   393      h10hu         
   359    lifsong 
     2     yanzuo    ( unit_type_t_nip1_c ): /* For NIP case, RS3PRB has no idea about towards_mxu_c, it only cares mxu_c */
     2     yanzuo       TASK io_path_info.fu_data(0).fu_info.nip1.mphy_port.mphy_type         := mphy_type_t_unspecified_c;
     2     yanzuo       TASK io_path_info.fu_data(0).fu_info.nip1.mphy_port.mphy_port_number  := mphy_port_number_t_unspec_c;
     2     yanzuo       TASK io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_type          := mphy_type_t_mxu_c,
     2     yanzuo            io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_port_number   := in_unit.interfaces(l_if_idx).mphy_port,
     2     yanzuo            io_path_info.fu_data(1).fu_info.mxu.sfu_port                     := in_alp_unit.sfu_port_number;
     2     yanzuo 
     2     yanzuo    ELSE:
   886    lifsong       DECISION in_unit.unit_type;
   886    lifsong       ( unit_type_t_ss7u_c, unit_type_t_ss7up_c ):
   886    lifsong         TASK io_path_info.fu_data(1).fu_info.npux.mphy_port.mphy_type          := mphy_type_t_mxu_c,
   886    lifsong             io_path_info.fu_data(1).fu_info.npux.mphy_port.mphy_port_number   := in_unit.interfaces(l_if_idx).mphy_port,
   886    lifsong             io_path_info.fu_data(1).fu_info.npux.sfu_port                     := in_alp_unit.sfu_port_number;
   886    lifsong       ELSE:
   886    lifsong         TASK io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_type          := mphy_type_t_mxu_c,
   886    lifsong             io_path_info.fu_data(1).fu_info.mxu.mphy_port.mphy_port_number   := in_unit.interfaces(l_if_idx).mphy_port,
   886    lifsong             io_path_info.fu_data(1).fu_info.mxu.sfu_port                     := in_alp_unit.sfu_port_number;
   886    lifsong       ENDDECISION;
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo    RETURN;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE get_path_info__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_xconn_remove_1__r;
     2     yanzuo /*
     2     yanzuo  * Remove nrt internal xcross connection via RS3PRB/KREIVI, called by CONN hand
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT  io_brtpid          pid,
     2     yanzuo    IN      in_path_info       half_cconn_phy_info_t,
     2     yanzuo    IN      in_dta             conn_hand_data__t,
     2     yanzuo    IN      in_ep_idx          byte;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_update_list                 update_list_t,
     2     yanzuo    l_dest_conn_info              xconn_dest_info_t,
     2     yanzuo    l_traf_para                   atm_aal2_traf_para_t,
     2     yanzuo    ustate               unit_state_t;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo    ack_timer;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    TASK l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
     2     yanzuo         l_traf_para.para.intern.ing.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo         l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
     2     yanzuo         l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo         l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.egr.category                  := int_serv_cat_t_i_nrt_mnw_c,
     2     yanzuo         l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
     2     yanzuo         l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo         l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo         l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo /*Unit can not perform BRT xconn remove.*/
     2     yanzuo 
     2     yanzuo   	DECISION alp1_unit__r(in_dta.endpoint(in_ep_idx).unit_info.ttype) AND
     2     yanzuo   	         unit_state_r( in_dta.endpoint(in_ep_idx).unit_info.ttype, in_dta.endpoint(in_ep_idx).unit_info.index, ustate )
     2     yanzuo   	            = success_ec AND
     2     yanzuo   	         ((ustate | unit_state_t_mainstate_bm_c) = unit_state_t_se_c OR
     2     yanzuo   	          (ustate | unit_state_t_mainstate_bm_c) = unit_state_t_tr_c);
     2     yanzuo 	( T ):
     2     yanzuo 		RETURN success_ec;
     2     yanzuo     	ENDDECISION;
     2     yanzuo 
     2     yanzuo    TASK memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo    TASK l_dest_conn_info.fabric_port   := in_dta.endpoint(in_ep_idx^1).sfu_port,
     2     yanzuo         l_dest_conn_info.remote_connid := in_dta.endpoint(in_ep_idx^1).xconn_id;
     2     yanzuo    OUTPUT int_half_xc_release_req_s ( in_dta.endpoint(in_ep_idx).tpi,
     2     yanzuo                                       in_dta.endpoint(in_ep_idx).xconn_id,
     2     yanzuo                                       l_dest_conn_info,
     2     yanzuo                                       l_traf_para,
     2     yanzuo                                       cdvt_t_unspecified_c,
     2     yanzuo                                       atm_usage_tag_t_ic_ud_c,
     2     yanzuo                                       atm_cre_state_t_new_object_c,
     2     yanzuo                                       in_path_info,
     2     yanzuo                                       l_update_list ) TO io_brtpid;
     2     yanzuo    SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo    INPUT int_half_xc_release_ack_s( l_tpi, l_ec);
  1222      tinyu DCL
  1222      tinyu    l_tpi                         tpi_t,
  1222      tinyu    l_ec                          error_t;
     2     yanzuo    RESET (ack_timer);
     2     yanzuo    RETURN l_ec;
     2     yanzuo 
     2     yanzuo    INPUT ack_timer;
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE brt_xconn_remove_1__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE brt_xconn_create__r;
     2     yanzuo /*
     2     yanzuo  * Batch create nrt internal xcross connection via RS3PRB/KREIVI,
     2     yanzuo  for SP-APP unit, the xconn request will sent to WO-APP unit too
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo    IN/OUT   io_brtpid               pid,
     2     yanzuo    IN       in_tpi                  tpi_t,
     2     yanzuo    IN       in_path_info            half_cconn_phy_info_t,
     2     yanzuo    IN       in_one_vcc_res    jig_one_vcc_resources__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_update_list                    update_list_t,
     2     yanzuo    l_dest_conn_info              xconn_dest_info_t,
   216      h10hu    l_traf_para                      atm_aal2_traf_para_t;
     2     yanzuo TIMER
     2     yanzuo    ack_timer;
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    TASK  l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
     2     yanzuo          l_traf_para.para.intern.ing.category                  := in_one_vcc_res.serv_category,
     2     yanzuo          l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
     2     yanzuo          l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo          l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.egr.category                  := in_one_vcc_res.serv_category,
     2     yanzuo          l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
     2     yanzuo          l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
     2     yanzuo          l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
     2     yanzuo          l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo    TASK  memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
     2     yanzuo    TASK  l_dest_conn_info.fabric_port   := in_one_vcc_res.dest_fabric_port,
     2     yanzuo          l_dest_conn_info.remote_connid := in_one_vcc_res.remote_xconn_id;
     2     yanzuo 
     2     yanzuo    OUTPUT   int_half_xc_create_req_s ( in_tpi,
     2     yanzuo                                        in_one_vcc_res.xconn_id,
     2     yanzuo                                                 l_dest_conn_info,
     2     yanzuo                                                 atm_cre_state_t_new_object_c,
     2     yanzuo                                                 atm_usage_tag_t_ic_ud_c,
     2     yanzuo                                                 l_traf_para,
     2     yanzuo                                                 end_point_t_not_in_segment_c,
     2     yanzuo                                                 traffic_shaping_t (.
     2     yanzuo                                                 shaping_option_t_none_c,
     2     yanzuo                                                 shaping_option_t_none_c .),
     2     yanzuo                                                 abled_flag_t_disabled_c,
     2     yanzuo                                                 abled_flag_t_disabled_c,
     2     yanzuo                                                 abled_flag_t_enabled_c,
     2     yanzuo                                                 cdvt_t_unspecified_c,
     2     yanzuo                                                 rm_owner_id_t_unspecified_c,
     2     yanzuo                                                 in_path_info,
     2     yanzuo                                                 l_update_list ) TO io_brtpid;
     2     yanzuo    SET ( NOW + (6*ack_waiting_time__c)/5, ack_timer );
     2     yanzuo    NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
   961    lifsong    INPUT int_half_xc_create_ack_s( ack_tpi,l_ec);
  1222      tinyu    DCL 
  1222      tinyu    l_ec                             error_t,
  1222      tinyu    ack_tpi  tpi_t; 
   961    lifsong      
   961    lifsong    DECISION ack_tpi.level = in_tpi.level AND
   961    lifsong             ack_tpi.interf = in_tpi.interf AND
   961    lifsong 	    ack_tpi.vpi = in_tpi.vpi AND
   961    lifsong 	    ack_tpi.vci = in_tpi.vci;
   961    lifsong    ( T ):		    
   961    lifsong       RESET (ack_timer);
   961    lifsong       RETURN l_ec;
   961    lifsong    ELSE:
   961    lifsong    	NEXTSTATE -;      
   961    lifsong    ENDDECISION;   
   961    lifsong    
   961    lifsong    INPUT hand_supervision_msg_s;
     2     yanzuo 
   961    lifsong       OUTPUT hand_supervision_ack_s TO SENDER,
   961    lifsong              SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
   961    lifsong       NEXTSTATE -;
   961    lifsong       
   961    lifsong    INPUT ack_timer;
     2     yanzuo    RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE brt_xconn_create__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1177      myang PROCEDURE brt_xconns_create__r;
  1177      myang /*
  1177      myang  * Batch create nrt internal xcross connection,
  1177      myang  for SP-APP unit, the xconn request will sent to WO-APP unit too
  1177      myang  **************************************************************************/
  1177      myang FPAR
  1177      myang    IN/OUT   io_brtpid               pid,
  1177      myang    IN/OUT     app_half_conns                  app_half_conn_array_t,
  1177      myang    IN/OUT    io_vccs  jig_vccs_resources__t,
  1177      myang    IN       in_path_info            half_cconn_phy_info_t,
  1177      myang    IN    in_start_offset    dword;
  1177      myang RETURNS
  1177      myang     error_t;
  1177      myang 
  1177      myang DCL
  1177      myang    l_update_list                    update_list_t,
  1222      tinyu    l_totalerr               dword,   
  1177      myang    l_isfirsterr      bool,
  1177      myang    l_traf_para                      atm_aal2_traf_para_t;
  1177      myang TIMER
  1177      myang    ack_timer;
  1177      myang START;
  1177      myang 
  1177      myang   
  1177      myang    TASK  l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
  1177      myang          l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
  1177      myang          l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
  1177      myang          l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
  1177      myang          l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
  1177      myang          l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
  1177      myang          l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
  1177      myang          l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
  1177      myang          l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
  1177      myang 
  1177      myang 
  1177      myang    TASK  memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
  1177      myang    
  1177      myang                            
  1177      myang    OUTPUT   int_half_xcs_create_req_s ( app_half_conns,
  1177      myang                                                 atm_cre_state_t_new_object_c,
  1177      myang                                                 atm_usage_tag_t_ic_ud_c,
  1177      myang                                                 l_traf_para,
  1177      myang                                                 end_point_t_not_in_segment_c,
  1177      myang                                                 traffic_shaping_t (.
  1177      myang                                                 shaping_option_t_none_c,
  1177      myang                                                 shaping_option_t_none_c .),
  1177      myang                                                 abled_flag_t_disabled_c,
  1177      myang                                                 abled_flag_t_disabled_c,
  1177      myang                                                 abled_flag_t_enabled_c,
  1177      myang                                                 cdvt_t_unspecified_c,
  1177      myang                                                 rm_owner_id_t_unspecified_c,
  1177      myang                                                 in_path_info,
  1177      myang                                                 0,                                                
  1177      myang                                                 l_update_list ) TO io_brtpid;
  1177      myang 
  1177      myang    SET ( NOW + (3 * ack_waiting_time__c)/2, ack_timer );
  1177      myang    NEXTSTATE waiting_ack;
  1177      myang 
  1177      myang STATE waiting_ack;
  1177      myang    INPUT int_half_xcs_create_ack_s( ack_half_conns,ref_id,status);
  1177      myang    DCL  
  1177      myang     ack_half_conns      app_half_conn_array_t,
  1222      tinyu     ref_id,idx          dword,
  1177      myang     status               error_t;
  1177      myang     
  1177      myang     DECISION app_half_conns.item(0).tpi.level  = ack_half_conns.item(0).tpi.level AND
  1177      myang 	 app_half_conns.item(0).tpi.interf = ack_half_conns.item(0).tpi.interf AND
  1177      myang 	 app_half_conns.item(0).tpi.vpi    = ack_half_conns.item(0).tpi.vpi AND
  1177      myang 	 app_half_conns.item(0).tpi.vci    = ack_half_conns.item(0).tpi.vci;
  1177      myang    ( F ):
  1177      myang    	NEXTSTATE -;
  1177      myang    ENDDECISION;
  1177      myang 
  1177      myang   TASK idx := 0, l_totalerr := 0, l_isfirsterr := T;
  1177      myang   WHILE idx < ack_half_conns.item_count;
  1177      myang     DECISION (ack_half_conns.item(idx).status = success_ec);
  1177      myang       ( F ):
  1177      myang       	DECISION (l_isfirsterr);
  1177      myang       	( T ):
  1177      myang       	        TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang 	             @'Client returns create status:0x%04X but conn not created'
  1177      myang 	             'idx=0x%X interface=0x%04X vpi=0x%04X,vci=0x%04X',
  1177      myang 	             status,
  1177      myang 		     idx,
  1177      myang 	             ack_half_conns.item(idx).tpi.interf,             
  1177      myang 	             ack_half_conns.item(idx).tpi.vpi,
  1177      myang 	             ack_half_conns.item(idx).tpi.vci);
  1177      myang              	TASK l_isfirsterr := F;
  1177      myang       	ENDDECISION;
  1177      myang         TASK io_vccs.res(in_start_offset+idx ).conn_id := conn_id_t_undefined_c;
  1177      myang         TASK l_totalerr := l_totalerr + 1;
  1177      myang     ENDDECISION;
  1177      myang     TASK idx := idx + 1;
  1177      myang   ENDWHILE;
  1177      myang 
  1177      myang   DECISION (status = success_ec);
  1177      myang 	(F):
  1177      myang         	TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang                          @'JIGDAT: batch xconn create failed'
  1177      myang                           'error code: 0x%x, num : 0x%x',
  1177      myang                            status, l_totalerr);
  1177      myang   ENDDECISION;
  1177      myang   
  1177      myang       RESET (ack_timer);
  1177      myang       RETURN status;        
  1177      myang    
  1177      myang    INPUT hand_supervision_msg_s;
  1177      myang 
  1177      myang       OUTPUT hand_supervision_ack_s TO SENDER,
  1177      myang              SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
  1177      myang       NEXTSTATE -;
  1177      myang       
  1177      myang    INPUT ack_timer;
  1177      myang 			TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang                        @'JIGCLU: cre message_waiting_timeout_ec.'
  1177      myang                         'tpi: 0X%X,0X%X,0X%X',
  1177      myang                          app_half_conns.item(0).tpi.interf,           
  1177      myang                          app_half_conns.item(0).tpi.vpi,
  1177      myang                          app_half_conns.item(0).tpi.vci);
  1177      myang    RETURN message_waiting_timeout_ec;
  1177      myang ENDSTATE waiting_ack;
  1177      myang ENDPROCEDURE brt_xconns_create__r;
  1177      myang 
  1177      myang PROCEDURE brt_xconns_remove__r;
  1177      myang /*
  1177      myang   *  Batch remove nrt internal xcross connection via RS3PRB/KREIVI, called by CLUSTER hand
  1177      myang   *  for SP-APP unit, the xconn request will sent to WO-APP unit too
  1177      myang  **************************************************************************/
  1177      myang FPAR
  1177      myang    IN/OUT   io_brtpid      pid,
  1177      myang    IN/OUT     app_half_conns                  app_half_conn_array_t,
  1177      myang    IN/OUT    io_vccs  jig_vccs_resources__t,   
  1177      myang    IN 		in_path_info   half_cconn_phy_info_t,
  1177      myang    IN    in_start_offset    dword;
  1177      myang RETURNS
  1177      myang    error_t;
  1177      myang 
  1177      myang DCL
  1177      myang    l_update_list           update_list_t,
  1177      myang    idx, l_totalerr               dword,   
  1177      myang    l_isfirsterr      bool,
  1177      myang    l_traf_para             atm_aal2_traf_para_t;
  1177      myang TIMER
  1177      myang    ack_timer;
  1177      myang START;
  1177      myang       TASK  l_traf_para.form                                      := atm_aal2_traf_para_t_intern_c,
  1177      myang             l_traf_para.para.intern.ing.traf_param.max_frame_size := 0,
  1177      myang             l_traf_para.para.intern.ing.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
  1177      myang             l_traf_para.para.intern.ing.frame_disc_epd            := abled_flag_t_disabled_c,
  1177      myang             l_traf_para.para.intern.ing.frame_disc_ppd            := abled_flag_t_disabled_c,
  1177      myang             l_traf_para.para.intern.egr.traf_param.max_frame_size := 0,
  1177      myang             l_traf_para.para.intern.egr.traf_param.avg_cell_rate  := cell_rate_t_unspecified_c,
  1177      myang             l_traf_para.para.intern.egr.frame_disc_epd            := abled_flag_t_disabled_c,
  1177      myang             l_traf_para.para.intern.egr.frame_disc_ppd            := abled_flag_t_disabled_c;
  1177      myang 
  1177      myang 
  1177      myang 	TASK 	memset( bytepointer( @l_update_list ), 0, SIZEOF( l_update_list ));
  1177      myang 
  1177      myang 	OUTPUT 	int_half_xcs_release_req_s (	app_half_conns,
  1177      myang                                       				l_traf_para,
  1177      myang                                       				cdvt_t_unspecified_c,
  1177      myang                                       				atm_usage_tag_t_ic_ud_c,
  1177      myang                                       				atm_cre_state_t_new_object_c,
  1177      myang                                       				in_path_info,
  1177      myang 								0,
  1177      myang                                       				l_update_list ) TO io_brtpid;
  1177      myang         SET ( NOW + (3 * ack_waiting_time__c)/2, ack_timer );
  1177      myang         NEXTSTATE waiting_ack;
  1177      myang 
  1177      myang STATE waiting_ack;
  1177      myang 
  1177      myang 	INPUT int_half_xcs_release_ack_s( ack_half_conns,ref_id,status);
  1177      myang         DCL  
  1177      myang          ack_half_conns      app_half_conn_array_t,
  1177      myang          ref_id               dword,
  1177      myang          status               error_t;
  1177      myang 
  1177      myang 
  1177      myang   TASK idx := 0, l_totalerr := 0, l_isfirsterr := T;
  1177      myang   WHILE idx < ack_half_conns.item_count;
  1177      myang     DECISION (ack_half_conns.item(idx).status = success_ec);
  1177      myang       ( F ):
  1177      myang       	DECISION (l_isfirsterr);
  1177      myang       	( T ):
  1177      myang       	        TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang 	             @'Client returns release status:0x%04X but conn not created'
  1177      myang 	             'idx=0x%X interface=0x%04X vpi=0x%04X,vci=0x%04X',
  1177      myang 	             status,
  1177      myang 		     idx,
  1177      myang 	             ack_half_conns.item(idx).tpi.interf,             
  1177      myang 	             ack_half_conns.item(idx).tpi.vpi,
  1177      myang 	             ack_half_conns.item(idx).tpi.vci);
  1177      myang              	TASK l_isfirsterr := F;
  1177      myang       	ENDDECISION;
  1177      myang         TASK io_vccs.res(in_start_offset+idx ).conn_id := conn_id_t_undefined_c;
  1177      myang         TASK l_totalerr := l_totalerr + 1;
  1177      myang     ENDDECISION;
  1177      myang     TASK idx := idx + 1;
  1177      myang   ENDWHILE;
  1177      myang 
  1177      myang   DECISION (status = success_ec);
  1177      myang 	(F):
  1177      myang         	TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang                          @'JIGDAT: batch xconn release failed'
  1177      myang                           'error code: 0x%x, num : 0x%x',
  1177      myang                            status, l_totalerr);
  1177      myang   ENDDECISION;
  1177      myang   
  1177      myang  	RESET (ack_timer);
  1177      myang 	RETURN status;
  1177      myang 
  1177      myang 	INPUT hand_supervision_msg_s;
  1177      myang     OUTPUT hand_supervision_ack_s TO SENDER,
  1177      myang              SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
  1177      myang       NEXTSTATE -;
  1177      myang       	
  1177      myang      INPUT ack_timer;
  1177      myang 			TASK dxsyslog_r( log_type_t_text_e_c,
  1177      myang                        @'JIGDAT: rel message_waiting_timeout_ec.'
  1177      myang                         'tpi: 0X%X,0X%X,0X%X',
  1177      myang                          app_half_conns.item(0).tpi.interf,           
  1177      myang                          app_half_conns.item(0).tpi.vpi,
  1177      myang                          app_half_conns.item(0).tpi.vci);
  1177      myang       RETURN message_waiting_timeout_ec;
  1177      myang ENDSTATE waiting_ack;
  1177      myang 
  1177      myang ENDPROCEDURE brt_xconns_remove__r;
  1177      myang 
  1177      myang /**************************************************************************/
     2     yanzuo PROCEDURE   get_brt_pid__r;
     2     yanzuo /**************************************************************************/
     2     yanzuo FPAR
   361    lifsong    IN       unit_type      unit_type_t,
   361    lifsong    IN       unit_addr      phys_address_t,
   361    lifsong    IN/OUT   l_brtpid    pid;
     2     yanzuo START;
     2     yanzuo    DECISION unit_type ;
     2     yanzuo    ( unit_type_t_mxu_c ):
     2     yanzuo       TASK make_pid_r( l_brtpid, unit_addr, rs3prb_p, 0, 0 );
     2     yanzuo    ( unit_type_t_npge_c, unit_type_t_npgep_c, unit_type_t_nps1_c, unit_type_t_nps1p_c ):
     2     yanzuo       TASK make_pid_r( l_brtpid, unit_addr, kreivi_p, 0, 0 );
   470    lifsong    ( unit_type_t_iwse_c,unit_type_t_iwsep_c,unit_type_t_iwst_c,unit_type_t_iwstp_c,
   470    lifsong      unit_type_t_npu_c, unit_type_t_npup_c):
   366    lifsong       TASK make_pid_r( l_brtpid, unit_addr, rskprb_p, 0, 0 );
     2     yanzuo    ELSE:
     2     yanzuo    	TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo              @'unit type is not right in get_brt_pid__r! unit_type=%02X',
     2     yanzuo              unit_type );
     2     yanzuo    ENDDECISION;
     2     yanzuo ENDPROCEDURE   get_brt_pid__r;
     2     yanzuo 
   359    lifsong PROCEDURE set_vpi__r;
   359    lifsong FPAR
   359    lifsong    IN/OUT io_unit jiifil__t,
   359    lifsong    IN         proc_idx       byte;
   359    lifsong    
   359    lifsong START;   
   359    lifsong    DECISION mpqu_check__r(io_unit.unit_type) OR iw8s1_unit_check__r(io_unit.unit_type);
   359    lifsong    ( T ):
   359    lifsong        TASK io_unit.procs(proc_idx).vpi := 0;
   359    lifsong    ELSE: 
   359    lifsong        TASK io_unit.procs(proc_idx).vpi := proc_idx;
   359    lifsong    ENDDECISION;
   359    lifsong ENDPROCEDURE set_vpi__r;
   359    lifsong 
   508    lifsong PROCEDURE is_center_node_unit__r;
   508    lifsong FPAR
   508    lifsong     IN unit_addr  phys_address_t;
   508    lifsong 
   508    lifsong RETURNS
   508    lifsong     bool;
   508    lifsong 
   508    lifsong DCL
   508    lifsong     node_type   node_type_t;   
   508    lifsong 
   508    lifsong START;    
   508    lifsong 
   508    lifsong     DECISION node_type_r(unit_addr, node_type);
   508    lifsong     ( /= success_ec ):
   508    lifsong       RETURN F;
   508    lifsong     ENDDECISION;
   508    lifsong 
   508    lifsong     DECISION node_type;
   520    lifsong     ( node_type_t_center_c, node_type_t_sym_c ):
   508    lifsong       RETURN T;
   508    lifsong     ENDDECISION;
   508    lifsong     
   508    lifsong     RETURN F;    
   508    lifsong     
   508    lifsong ENDPROCEDURE is_center_node_unit__r;
   508    lifsong 
  1420       pshu /**************************************************************************
  1420       pshu This procedure get center node unit and return one or two center node unit address.
  1420       pshu *************************************************************************/
  1420       pshu PROCEDURE get_center_node_addr__r;
  1420       pshu FPAR
  1420       pshu 
  1420       pshu     IN      unit_addr   phys_address_t,
  1420       pshu     OUT  active_node    phys_address_t,
  1420       pshu     OUT  standby_node   phys_address_t;    
  1420       pshu 
  1420       pshu RETURNS
  1420       pshu     error_t;
  1420       pshu     
  1420       pshu DCL
  1420       pshu     comps_buf       computer_buf__t,
  1420       pshu     comps_ptr      computer_list_ptr__t,
  1420       pshu     ui0              unit_it_t,
  1420       pshu     ui1              unit_it_t,
  1420       pshu     active_index        unit_index_t,
  1420       pshu     result          error_t;
  1420       pshu     
  1420       pshu START;
  1420       pshu 
  1420       pshu 
  1420       pshu     TASK active_node := computer_t_phys_invalid_c;
  1420       pshu     TASK standby_node := computer_t_phys_invalid_c;
  1420       pshu     
  1420       pshu     TASK comps_ptr :=  computer_list_ptr__t(@comps_buf);
  1420       pshu     TASK result := center_nodes_r( unit_addr, sizeof(computer_list_t) + 2*sizeof(computer_t), $comps_ptr );
  1420       pshu     DECISION result;
  1420       pshu     (/=success_ec):
  1420       pshu        RETURN result;
  1420       pshu     ENDDECISION;
  1420       pshu 
  1420       pshu     DECISION comps_ptr->item_count;
  1420       pshu     (2):
  1420       pshu        TASK result:=unit_type_and_index_trial_r(slice_id_t_both_slices_c,$ADDPTR( comps_ptr->computer_list, 0),ui0);
  1420       pshu        DECISION result;
  1420       pshu        (/=success_ec):
  1420       pshu          RETURN result;
  1420       pshu        ENDDECISION;
  1420       pshu        
  1420       pshu        TASK result:=unit_type_and_index_trial_r(slice_id_t_both_slices_c,$ADDPTR( comps_ptr->computer_list, 1),ui1);
  1420       pshu        DECISION result;
  1420       pshu        (/=success_ec):
  1420       pshu          RETURN result;
  1420       pshu        ENDDECISION;
  1420       pshu        /*
  1420       pshu        active_unit_index_r:
  1420       pshu        If the given unit is not 2N redundant, the rcy_nonex_type_ec error code is returned. 
  1420       pshu        If both units of a duplicated unit type exist, the active unit must be in the WO state. Otherwise, an error code is returned. 
  1420       pshu        If either of the units of a 2N redundant pair is missing, the index ot the existing unit is returned, regardless of its state.
  1420       pshu        It supports trial,active unit of own slice is returned in case of trial
  1420       pshu        */
  1420       pshu        TASK result:= active_unit_index_r(ui0.ttype,ui0.index,active_index);
  1420       pshu        DECISION result;
  1420       pshu        (success_ec):
  1420       pshu          DECISION active_index;
  1420       pshu          (ui0.index):
  1420       pshu            TASK active_node := $ADDPTR( comps_ptr->computer_list, 0);
  1420       pshu            TASK standby_node := $ADDPTR( comps_ptr->computer_list, 1);         
  1420       pshu          (ui1.index):
  1420       pshu            TASK active_node := $ADDPTR( comps_ptr->computer_list, 1);
  1420       pshu            TASK standby_node := $ADDPTR( comps_ptr->computer_list, 0);                
  1420       pshu          ELSE:/*trap the invalid unit index*/
  1420       pshu            RETURN unsuccessful_ec;
  1420       pshu          ENDDECISION;
  1420       pshu        ELSE:
  1420       pshu          RETURN result;
  1420       pshu        ENDDECISION;    
  1420       pshu     
  1420       pshu     (1):/*only active node found*/    
  1420       pshu        TASK active_node := $ADDPTR( comps_ptr->computer_list, 0);
  1420       pshu     ELSE:/*this shall not happen*/
  1420       pshu        RETURN unsuccessful_ec;
  1420       pshu     ENDDECISION;
  1420       pshu     
  1420       pshu     RETURN success_ec;
  1420       pshu 
  1420       pshu ENDPROCEDURE get_center_node_addr__r;
   559    lifsong /**************************************************************************/
   559    lifsong PROCEDURE get_xcon_unit__r;
   559    lifsong /* To findout the unit is APC or APP related, and also get unit iformation*/
   559    lifsong /**************************************************************************/
   559    lifsong FPAR
   559    lifsong 	IN			in_addr	phys_address_t,
   559    lifsong 	IN       	manager_pid pid,
   559    lifsong 	IN/OUT	is_app		bool,
   559    lifsong 	IN/OUT	target_unit		jiifil__t,
   559    lifsong 	IN/OUT	alp_unit		jiifil__t;
   559    lifsong RETURNS error_t;
   559    lifsong DCL
   559    lifsong 	l_status		error_t;
   559    lifsong TIMER
   559    lifsong    ack_timer;
   559    lifsong    
   559    lifsong START;
   559    lifsong 	OUTPUT	jig_xcon_unit_req__s(in_addr) TO manager_pid;
   559    lifsong 	SET(NOW + 100, ack_timer );
   559    lifsong 	 NEXTSTATE wait_acks;
   559    lifsong STATE	wait_acks;
   559    lifsong 	INPUT	jig_xcon_unit_ack__s(is_app, target_unit, alp_unit, l_status);
   559    lifsong 	RESET (ack_timer);
   559    lifsong 	RETURN l_status;
   559    lifsong 	
   559    lifsong 	INPUT	ack_timer;
   559    lifsong 	RETURN message_waiting_timeout_ec;
   559    lifsong ENDSTATE;
   559    lifsong ENDPROCEDURE get_xcon_unit__r;
   559    lifsong 
   561    lifsong PROCEDURE  is_unit_in_ex_state__r;
   561    lifsong FPAR
   561    lifsong    IN      phys_addr    phys_address_t;
   561    lifsong RETURNS
   561    lifsong    bool;
   561    lifsong DCL
   561    lifsong    unit_state unit_state_t;
   561    lifsong    
   561    lifsong START;
   561    lifsong 
   685    lifsong    RETURN  ( unit_state_by_phys_addr__r( phys_addr, unit_state ) = success_ec
   799     z7zhou                     AND ( unit_state = unit_state_t_woex_c OR 
  1358    jinncao                               unit_state = unit_state_t_spex_c  OR
  1358    jinncao                               unit_state = unit_state_t_spup_c  OR 
   799     z7zhou                               unit_state = unit_state_t_teex_c  OR
   799     z7zhou                               unit_state = unit_state_t_blex_c OR
   799     z7zhou                               unit_state = unit_state_t_blid_c ));
   561    lifsong                   
   561    lifsong ENDPROCEDURE is_unit_in_ex_state__r;
   561    lifsong 
  1367       pshu 
  1367       pshu PROCEDURE  is_unit_ready_for_nrt_create__r;
  1367       pshu FPAR
  1367       pshu    IN      phys_addr    phys_address_t;
  1367       pshu RETURNS
  1367       pshu    bool;
  1367       pshu DCL
  1367       pshu     jii_ptr, alp_ptr     jiifil_ptr__t,
  1367       pshu     comp_ptr             jii_comp_ptr__t;
  1367       pshu START;
  1367       pshu 
  1367       pshu    DECISION jii_find_computer__r(phys_addr,jii_ptr,comp_ptr,alp_ptr);
  1367       pshu    (T):
  1367       pshu 
  1367       pshu 	  RETURN comp_ptr->half_conns_created;
  1367       pshu    ELSE:
  1367       pshu       RETURN F;
  1367       pshu    ENDDECISION;
  1367       pshu                  
  1367       pshu ENDPROCEDURE is_unit_ready_for_nrt_create__r;
  1367       pshu 
   617     qinggu PROCEDURE set_tomprb_pid__r;
   617     qinggu /***************************************************************************/
   617     qinggu START;
   617     qinggu     TASK make_pid_r(tomprb_pid, computer_t_rel_own_unit_c, tomprb_p, 0, 0 );
   617     qinggu ENDPROCEDURE set_tomprb_pid__r;
   617     qinggu 
  1119       j2he PROCEDURE add_service__r;
  1119       j2he FPAR
  1119       j2he     IN	service_name	    service_name_t;
   617     qinggu 
  1119       j2he RETURNS
  1119       j2he     error_t;
  1119       j2he 
  1119       j2he DCL
  1119       j2he     serv_info              service_information_t,
  1119       j2he     far_self__pid         pid,
  1119       j2he     ec			   error_t;
  1119       j2he 
  1119       j2he START;
  1119       j2he 
  1119       j2he     TASK memset( bytepointer( @serv_info ), 0, SIZEOF( serv_info ));
  1119       j2he 
  1119       j2he     TASK far_self__pid := SELF;
  1119       j2he     TASK set_pid_computer_r( far_self__pid, own_unit_log_addr );
  1119       j2he 
  1119       j2he     TASK serv_info.server              := far_self__pid,
  1119       j2he         serv_info.service_attr.replaceable := T,
  1119       j2he         serv_info.msg_attr.delivery        := computer_t_width_wosp_c,
  1119       j2he         serv_info.msg_attr.attr            :=
  1119       j2he                   msg_attr_t_normal_priority_c + msg_attr_t_destroy_if_not_wo_c,
  1119       j2he         serv_info.service_name := service_name;
  1119       j2he 
  1119       j2he     TASK ec := add_service_r( serv_info );
  1119       j2he 
  1119       j2he     RETURN ec;
  1119       j2he 
  1119       j2he ENDPROCEDURE add_service__r;
  1119       j2he 
  1384   weigchen PROCEDURE is_ne_rnc__r;
   754     yanzuo 
  1120   weigchen RETURNS
  1185       j2he    bool;   
  1166   weigchen         
  1038      myang     
  1120   weigchen START;
  1038      myang    
  1172   weigchen     /* DECISION ( sym_mxu_is_app__pv = T )  AND 
  1172   weigchen    		             ( nw_element = nw_elem_t_rnc_c );*/
  1384   weigchen     RETURN  ( nw_element = nw_elem_t_rnc_c );
  1384   weigchen 
  1384   weigchen ENDPROCEDURE is_ne_rnc__r;
  1384   weigchen 
  1384   weigchen 
  1384   weigchen /*route:is_ne_rnc2600__r
  1384   weigchen   * check the  whether ne type is rnc2600.
  1384   weigchen   * note:It think the default value as rnc2600 when ny error occured.
  1384   weigchen  **************************************************************************/
  1384   weigchen PROCEDURE is_ne_rnc2600__r;
  1384   weigchen 
  1384   weigchen RETURNS
  1384   weigchen    bool;
  1384   weigchen    
  1384   weigchen DCL
  1384   weigchen     g_ne_logical_conf       prm_t,
  1384   weigchen     ne_type_class   word,
  1421       pshu     ne_type_id      word;
  1384   weigchen     
  1384   weigchen 
  1384   weigchen START;
  1384   weigchen     TASK  ne_type_class := pr_cl_t_system_funct_configur; /* = 2*/
  1384   weigchen     TASK  ne_type_id := pr_nr_t_ne_logical_configuratio;     /*= 1248*/
  1384   weigchen 
  1384   weigchen 
  1384   weigchen     DECISION (read_parameter( ne_type_class,
  1384   weigchen                       ne_type_id, g_ne_logical_conf ) = TRUE );
  1384   weigchen      ( F ):
  1384   weigchen       	TASK dxsyslog_r( log_type_t_text_e_c,
  1384   weigchen                         @'JIGDAT: Read Prfile Failed');
  1384   weigchen        	RETURN T;
  1038      myang     ENDDECISION;
  1038      myang 
   754     yanzuo 
  1384   weigchen 	DECISION g_ne_logical_conf;
  1384   weigchen 	( ne_rnc2600__c ):
  1384   weigchen 		RETURN T;
  1384   weigchen 	ELSE:
  1384   weigchen 		RETURN F;   
  1384   weigchen 	ENDDECISION;
  1384   weigchen     
  1384   weigchen ENDPROCEDURE is_ne_rnc2600__r;
  1120   weigchen 
  1465       pshu PROCEDURE get_ne_type__r;
  1465       pshu RETURNS prm_t;
  1465       pshu DCL
  1465       pshu     ne_logical_conf       prm_t;
  1465       pshu START;
  1465       pshu     TASK ne_logical_conf := ne_rnc196__c;
  1465       pshu     DECISION (read_parameter(pr_cl_t_system_funct_configur,
  1465       pshu                              pr_nr_t_ne_logical_configuratio,
  1465       pshu                              ne_logical_conf) /= TRUE);
  1465       pshu     (T):
  1465       pshu 
  1465       pshu         TASK dxsyslog_r( log_type_t_text_e_c,
  1465       pshu                         @'JIGDAT: Read Prfile Failed in get_ne_type__r');
  1465       pshu     ENDDECISION;
  1465       pshu     RETURN ne_logical_conf;
  1465       pshu ENDPROCEDURE get_ne_type__r;
  1465       pshu 
  1465       pshu PROCEDURE get_ne_cap_upgrade__r;
  1465       pshu RETURNS prm_t;
  1465       pshu DCL
  1465       pshu     cap_upgrade       prm_t;    
  1465       pshu START;
  1465       pshu 
  1465       pshu     DECISION (read_parameter( pr_cl_t_system_funct_configur,
  1465       pshu         pr_nr_t_up_cap_upgrade, cap_upgrade ) /= TRUE );
  1465       pshu     ( T ):
  1465       pshu         TASK cap_upgrade := 0;
  1465       pshu         TASK dxsyslog_r( log_type_t_text_e_c,
  1465       pshu                         @'JIGDAT: Reading cap upgrade  failed.'
  1465       pshu                          'Procedure:    read_cap_upgrade__r ');
  1465       pshu     ENDDECISION;
  1465       pshu     
  1465       pshu     RETURN cap_upgrade;
  1465       pshu ENDPROCEDURE read_cap_upgrade__r;
  1465       pshu 
  1185       j2he PROCEDURE if_bigvcc_bigdma_permit__r;
  1120   weigchen 
  1185       j2he 
  1185       j2he FPAR
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t;
  1185       j2he     
  1185       j2he RETURNS
  1185       j2he    bool;
  1185       j2he 
  1185       j2he START;
  1185       j2he     
  1384   weigchen    DECISION is_ne_rnc__r();
  1384   weigchen      ( F ):
  1384   weigchen          RETURN F;
  1384   weigchen    ENDDECISION;
  1384   weigchen 
  1384   weigchen    DECISION is_ne_rnc2600__r();
  1185       j2he     ( F ):
  1185       j2he        RETURN F;
  1185       j2he    ENDDECISION;
  1185       j2he 
  1185       j2he    RETURN T;
  1185       j2he 
  1185       j2he ENDPROCEDURE if_bigvcc_bigdma_permit__r;
  1185       j2he 
  1185       j2he PROCEDURE init_rx_bigvcc_param__r;
  1185       j2he 
  1185       j2he START;
  1185       j2he     TASK g_rx_bigvcc_param.enable_flag := F,
  1185       j2he          g_rx_bigvcc_param.min_vci := 0,
  1185       j2he          g_rx_bigvcc_param.sub_vci := 0,
  1185       j2he          g_rx_bigvcc_param.max_vci := 0;
  1185       j2he 
  1185       j2he          RETURN;
  1185       j2he ENDPROCEDURE init_rx_bigvcc_param__r;
  1185       j2he 
  1120   weigchen PROCEDURE read_rx_bigvcc_xvalue__r;
  1120   weigchen FPAR
  1120   weigchen     IN  xva_pid      pid,
  1120   weigchen     IN  xva_attr     attr_group_t;
  1120   weigchen 
  1120   weigchen RETURNS
  1120   weigchen     bool;
  1120   weigchen     
  1120   weigchen TIMER
  1120   weigchen    ack_timer;
  1120   weigchen   
  1120   weigchen START;
   754     yanzuo     OUTPUT get_rx_bigvcc_param_req_s
   754     yanzuo            TO xva_pid, SET ATTRIBUTES = xva_attr;
   754     yanzuo 
   754     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
   754     yanzuo     NEXTSTATE waiting_ack;
   754     yanzuo 
   754     yanzuo STATE waiting_ack;
   754     yanzuo 
   997    mingdwu   INPUT get_rx_bigvcc_param_ack_s( status, int_min_vci, int_sub_vci, ?, int_max_vci, ?, ? );
   754     yanzuo     DCL
   754     yanzuo       status error_t,
   754     yanzuo       int_min_vci    vci_t,
   754     yanzuo       int_sub_vci    vci_t,
   754     yanzuo       int_max_vci    vci_t;
  1038      myang 
  1120   weigchen 
  1120   weigchen     RESET ( ack_timer );
  1120   weigchen 
   754     yanzuo     DECISION status;
   754     yanzuo     ( success_ec ):
   754     yanzuo         TASK g_rx_bigvcc_param.min_vci := int_min_vci,
   754     yanzuo              g_rx_bigvcc_param.sub_vci := int_sub_vci,
   754     yanzuo              g_rx_bigvcc_param.max_vci := int_max_vci;
  1120   weigchen         RETURN T;
  1120   weigchen     ELSE:
  1120   weigchen         TASK dxsyslog_r( log_type_t_text_e_c,
  1120   weigchen                         @'JIGDAT: get rxBigVCC param error: %XH!', status);
  1120   weigchen         RETURN F;
  1120   weigchen     ENDDECISION;
  1120   weigchen    
  1120   weigchen  INPUT ack_timer;
  1352   weigchen  
  1120   weigchen      RETURN F;
  1120   weigchen  ENDSTATE waiting_ack;
  1120   weigchen ENDPROCEDURE read_rx_bigvcc_xvalue__r;
  1120   weigchen          
  1120   weigchen PROCEDURE get_rx_bigvcc_vci_param__r;
   759     yanzuo 
  1120   weigchen RETURNS
  1120   weigchen     bool;
  1120   weigchen     
  1120   weigchen DCL
  1120   weigchen     xva_pid         pid,
  1120   weigchen     xva_attr        attr_group_t,
  1120   weigchen     retry_counter   word;
   759     yanzuo 
  1120   weigchen START;
   759     yanzuo 
  1120   weigchen     DECISION get_service__r( atm_config_params__c, xva_pid, xva_attr );
  1120   weigchen     ( F ):
   754     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
  1120   weigchen                         @'JIGDAT: get xvalue pid error!' );
  1120   weigchen         RETURN F;
   754     yanzuo     ENDDECISION;
  1120   weigchen     
  1120   weigchen     TASK retry_counter := 0;
   754     yanzuo 
  1120   weigchen     WHILE retry_counter < 3;
  1120   weigchen     	DECISION read_rx_bigvcc_xvalue__r(xva_pid, xva_attr);
  1120   weigchen         ( F ):
  1120   weigchen         	TASK retry_counter := retry_counter + 1;
  1120   weigchen         ( T ):
  1120   weigchen         	RETURN T;
  1120   weigchen        ENDDECISION;
  1120   weigchen     ENDWHILE;
   754     yanzuo 
  1120   weigchen    RETURN F;
  1038      myang 
  1120   weigchen ENDPROCEDURE get_rx_bigvcc_vci_param__r;
   754     yanzuo 
   754     yanzuo 
   754     yanzuo 
  1038      myang PROCEDURE get_rx_bigvcc_param__r;
   754     yanzuo /**************************************************************************/
   754     yanzuo FPAR
   754     yanzuo     IN/OUT      io_rx_bigvcc_param    rx_bigvcc_param__t;
   754     yanzuo 
   754     yanzuo START;
   754     yanzuo     TASK io_rx_bigvcc_param.enable_flag := g_rx_bigvcc_param.enable_flag,
   754     yanzuo          io_rx_bigvcc_param.min_vci := g_rx_bigvcc_param.min_vci,
   754     yanzuo          io_rx_bigvcc_param.sub_vci := g_rx_bigvcc_param.sub_vci,
   754     yanzuo          io_rx_bigvcc_param.max_vci := g_rx_bigvcc_param.max_vci;
   754     yanzuo        
   754     yanzuo     RETURN;
  1038      myang ENDPROCEDURE get_rx_bigvcc_param__r;
   754     yanzuo 
  1120   weigchen 
  1404   weigchen PROCEDURE register_rx_bigvcc_name__r; 
  1404   weigchen 
  1404   weigchen DCL
  1404   weigchen     ec                     error_t;
  1404   weigchen    
  1404   weigchen START;
  1404   weigchen 
  1404   weigchen      /***************************************************************************
  1404   weigchen 	 *  Register a name_service "rx_bigvcc_enable_as", so that other PRB can
  1404   weigchen 	 *  know the RX BigVCC is on.
  1404   weigchen 	 *Note:In A14, this name service is not used for rxbigvcc feature.
  1404   weigchen 	 * But DAQTOR prb@DMPG can't read prfile(2,1248) to distinguish the ne is whether or not 
  1404   weigchen 	 * RNC2600. So it read this  name servie to get RNC26000 flag.
  1404   weigchen 	 ***************************************************************************/  
  1404   weigchen     TASK ec := add_service__r( 'rx_bigvcc_enable_as' );
  1404   weigchen 
  1404   weigchen     DECISION ec;
  1404   weigchen     ( /= success_ec ):
  1404   weigchen        
  1404   weigchen         TASK dxsyslog_r( log_type_t_text_e_c,
  1404   weigchen                          @'JIGDAT: add service error!'
  1404   weigchen                          'rx_bigvcc_enable_as : %XH', ec);
  1404   weigchen         RETURN ;
  1404   weigchen     ENDDECISION;
  1404   weigchen 
  1404   weigchen     RETURN ;
  1404   weigchen     
  1404   weigchen ENDPROCEDURE register_rx_bigvcc_name__r;
  1404   weigchen 
  1404   weigchen 
  1120   weigchen PROCEDURE set_rx_bigvcc__r;
  1120   weigchen 
  1120   weigchen START;
  1120   weigchen 
  1404   weigchen 	CALL init_rx_bigvcc_param__r();
  1120   weigchen 
  1404   weigchen      CALL register_rx_bigvcc_name__r();
  1404   weigchen 
  1404   weigchen 	DECISION get_rx_bigvcc_vci_param__r();
  1120   weigchen       ( F ):
  1404   weigchen 		    RETURN;
  1404   weigchen 	 ENDDECISION;
  1384   weigchen    
  1404   weigchen 	 TASK g_rx_bigvcc_param.enable_flag := T;
  1404   weigchen 	 RETURN;
  1120   weigchen 
  1120   weigchen ENDPROCEDURE set_rx_bigvcc__r;
  1120   weigchen 
  1120   weigchen PROCEDURE register_type_of_app_mxu__r;   
  1120   weigchen DCL
  1120   weigchen     ec                     error_t;
  1120   weigchen     
  1120   weigchen START;
  1120   weigchen     DECISION sym_mxu_is_app__pv;
  1120   weigchen     ( T ):
  1120   weigchen        TASK ec := add_service__r( 'mxu_type_1g6_as' );
  1120   weigchen         
  1120   weigchen        DECISION ec;
  1120   weigchen        ( /= success_ec ):
  1120   weigchen           TASK dxsyslog_r( log_type_t_text_e_c,
  1120   weigchen                                 @'JIGDAT: add service error!'
  1120   weigchen                                 'mxu_type_1g6 : %XH', ec);
  1120   weigchen        ENDDECISION;
  1120   weigchen     ENDDECISION; 
  1120   weigchen     
  1120   weigchen ENDPROCEDURE register_type_of_app_mxu__r;
  1120   weigchen 
   758     yanzuo PROCEDURE convert_dsp_vci__r;
   758     yanzuo /*************************************************************************/
   758     yanzuo FPAR
   758     yanzuo     IN      own_unit     unit_it_t,
   758     yanzuo     IN      vci          vci_t;
   758     yanzuo RETURNS
   758     yanzuo    vci_t;
   758     yanzuo DCL
   758     yanzuo    res      byte;
   758     yanzuo 
   758     yanzuo START;
   758     yanzuo     DECISION own_unit.ttype;
   758     yanzuo     ( unit_type_t_dsp_c ):
   758     yanzuo         TASK res := own_unit.index MOD 2;
   758     yanzuo         DECISION ( res );
   758     yanzuo         ( 0 ):
   758     yanzuo             TASK vci:= vci | jig_limits__t_n_dsp_vci_even_min_c;
   758     yanzuo         ELSE:
   758     yanzuo             TASK vci:= vci | jig_limits__t_n_dsp_vci_odd_min_c;
   758     yanzuo         ENDDECISION;
   758     yanzuo     ENDDECISION;
   758     yanzuo     
   758     yanzuo     RETURN vci;
   758     yanzuo ENDPROCEDURE convert_dsp_vci__r;
   758     yanzuo 
   759     yanzuo PROCEDURE rx_bigvcc_enabled__r;
   759     yanzuo RETURNS
   759     yanzuo    bool;
   759     yanzuo 
   759     yanzuo START;
   759     yanzuo 
   759     yanzuo     RETURN g_rx_bigvcc_param.enable_flag;
   759     yanzuo     
   759     yanzuo ENDPROCEDURE rx_bigvcc_enabled__r;
   759     yanzuo 
  1038      myang /****************************************************************************/
  1038      myang PROCEDURE hms_to_piu_type__r;
  1038      myang /*
  1038      myang  *  This procedure changes the HMS-address to Plug-in unit type.
  1038      myang  *  Returns the error_t if something fails in library calls.
  1038      myang  *
  1038      myang  *****************************************************************************/
  1038      myang FPAR
  1038      myang     IN p_hms            hms_address_t,  /* HMS addr. of the client unit */
  1038      myang     IN p_error_allowed  bool,
  1038      myang     IN/OUT p_piu_type   piu_type_t;     /*  type code of plug in unit   */
  1038      myang 
  1038      myang RETURNS error_t;
  1038      myang 
  1038      myang DCL
  1038      myang     start_from              dword := hwi_first_search_c,    /* start searching at the beging */
  1038      myang     piu_index_search_key    piu_index_t,
  1038      myang     piu_loc_search_key      piu_coordinate_lib_a_t,
  1038      myang     unit_piu_search_key     unit_id_lib_a_t,
  1038      myang     piu_data                piu_data_lib_a_t,       /* piu data */
  1038      myang     piu_loc_data            piu_coordinate_lib_a_t, /* cordinate result data */
  1038      myang     piu_hms_data            piu_hms_id_lib_a_t,     /* piu hms data */
  1038      myang     stat                    error_t := success_ec;
  1038      myang 
  1038      myang DCL SAVE
  1038      myang     HMS_loc_search_key      piu_hms_id_lib_a_t;
  1038      myang 
  1038      myang START;
  1038      myang     /* Initial data */
  1038      myang     TASK memset( bytepointer(@p_piu_type), 0xFF, SIZEOF(p_piu_type) );
  1038      myang     TASK memset( bytepointer(@piu_index_search_key), 0xFF, SIZEOF(piu_index_search_key) );
  1038      myang     TASK memset( bytepointer(@piu_loc_search_key), 0xFF, SIZEOF(piu_loc_search_key) );
  1038      myang     TASK memset( bytepointer(@HMS_loc_search_key), 0xFF, SIZEOF(HMS_loc_search_key) );
  1038      myang     TASK memset( bytepointer(@unit_piu_search_key), 0xFF, SIZEOF(unit_piu_search_key) );
  1038      myang     TASK memset( bytepointer(@piu_data), 0xFF, SIZEOF(piu_data) );
  1038      myang     TASK memset( bytepointer(@piu_loc_data), 0xFF, SIZEOF(piu_loc_data) );
  1038      myang     TASK memset( bytepointer(@piu_hms_data), 0xFF, SIZEOF(piu_hms_data) );
  1038      myang 
  1038      myang     /* Fill the rack, subrack and  plug-in unit position address acording to hms address */
  1038      myang     TASK HMS_loc_search_key.rack_hms_index := word( hms_address_t_rack_r ( p_hms ) ),
  1038      myang          HMS_loc_search_key.subrack_hms_index := word( hms_address_t_subrack_r ( p_hms ) ),
  1038      myang          HMS_loc_search_key.hms_ppa := hms_address_t_ppa_r ( p_hms );
  1038      myang 
  1038      myang     /*
  1038      myang      *  Routine returns; type code, index,
  1038      myang      *  position address, configuration state and
  1038      myang      *  upper level data field of plug in unit
  1038      myang      *  to piu_data variable.
  1038      myang      */
  1038      myang     TASK stat := hwi_piu_data_a_r ( start_from,
  1038      myang                                     p_piu_type,
  1038      myang                                     piu_index_search_key,
  1038      myang                                     piu_loc_search_key,
  1038      myang                                     HMS_loc_search_key,
  1038      myang                                     unit_piu_search_key,
  1038      myang                                     piu_data_lib_a_ptr_t(@piu_data),
  1038      myang                                     piu_coordinate_lib_a_ptr_t(@piu_loc_data),
  1038      myang                                     piu_hms_id_lib_a_ptr_t(@piu_hms_data ) );
  1038      myang     DECISION stat;
  1038      myang     ( success_ec ):
  1038      myang         TASK p_piu_type := piu_data.piu_type;
  1038      myang     ( hcm_piu_does_not_exist_ec ):
  1038      myang     ( hcm_search_completed_ec ):
  1038      myang         DECISION p_error_allowed;
  1038      myang         ( T ):
  1038      myang             TASK dxsyslog_r( log_type_t_text_e_c,
  1038      myang                              @'UAMPRO: HWI plug in unit data not found.'
  1038      myang                               'Procedure:       hms_to_piu_type__r'
  1038      myang                               'Status:          0x%X'
  1038      myang                               'HMS rack index:  0x%X'
  1038      myang                               'HMS srack index: 0x%X'
  1038      myang                               'HMS ppa index:   0x%X',
  1038      myang                               stat, HMS_loc_search_key.rack_hms_index,
  1038      myang                               HMS_loc_search_key.subrack_hms_index,
  1038      myang                               HMS_loc_search_key.hms_ppa );
  1038      myang         ENDDECISION;
  1038      myang     ( hcm_illegal_sea_key_comb_ec ):
  1038      myang         TASK dxsyslog_r( log_type_t_text_e_c,
  1038      myang                          @'UAMPRO: HWI illegal search key.'
  1038      myang                           'Procedure:       hms_to_piu_type__r'
  1038      myang                           'Status:          0x%X'
  1038      myang                           'HMS rack index:  0x%X'
  1038      myang                           'HMS srack index: 0x%X'
  1038      myang                           'HMS ppa index:   0x%X',
  1038      myang                           stat, HMS_loc_search_key.rack_hms_index,
  1038      myang                           HMS_loc_search_key.subrack_hms_index,
  1038      myang                           HMS_loc_search_key.hms_ppa );
  1038      myang     ELSE:
  1038      myang         TASK dxsyslog_r( log_type_t_text_e_c,
  1038      myang                          @'UAMPRO: HWI plug in unit data search fails.'
  1038      myang                           'Procedure:       hms_to_piu_type__r'
  1038      myang                           'Status:          0x%X'
  1038      myang                           'HMS rack index:  0x%X'
  1038      myang                           'HMS srack index: 0x%X'
  1038      myang                           'HMS ppa index:   0x%X',
  1038      myang                           stat, HMS_loc_search_key.rack_hms_index,
  1038      myang                           HMS_loc_search_key.subrack_hms_index,
  1038      myang                           HMS_loc_search_key.hms_ppa );
  1038      myang     ENDDECISION;
  1038      myang 
  1038      myang     RETURN stat;
  1038      myang 
  1038      myang ENDPROCEDURE hms_to_piu_type__r;
  1038      myang 
  1038      myang /****************************************************************************/
  1038      myang PROCEDURE get_piu_name__r;
  1038      myang /*
  1038      myang  *  This procedure resolves the the Plug-in unit name of the received HMS
  1038      myang  *  address.
  1038      myang  *
  1038      myang  *****************************************************************************/
  1038      myang FPAR
  1038      myang     IN       rack_hms   hms_rack_t,
  1038      myang     IN       subr_hms   hms_subrack_t,
  1038      myang     IN       ppa_hms    hms_ppa_t,
  1038      myang     IN/OUT   piu_name   piuname_t;
  1038      myang 
  1038      myang RETURNS error_t;
  1038      myang 
  1038      myang DCL
  1038      myang     read_status         error_t := success_ec,
  1038      myang     piu_type            piu_type_t,
  1038      myang     dest_hms_addr       hms_address_t;
  1038      myang 
  1038      myang START;
  1038      myang     /*  Get Plug-in unit type according to HMS address. */
  1038      myang 
  1038      myang     TASK hms_address_t_make_r( dest_hms_addr,
  1038      myang                                rack_hms,
  1038      myang                                subr_hms,
  1038      myang                                ppa_hms );
  1038      myang 
  1038      myang 
  1038      myang     TASK read_status := hms_to_piu_type__r( dest_hms_addr, T, piu_type );
  1038      myang     DECISION read_status;
  1038      myang     ( /=success_ec ):
  1038      myang         RETURN read_status;
  1038      myang     ENDDECISION;
  1038      myang 
  1038      myang     /* Get Plug-in unit name by Plug-in unit type */
  1038      myang     TASK read_status := hwi_piu_name_by_type_r ( piu_type, piu_name );
  1038      myang     DECISION read_status;
  1038      myang     ( /=success_ec ):
  1038      myang         TASK dxsyslog_r( log_type_t_text_e_c,
  1454       hhou                          @'JIGDAT: get_piu_name__r(1) failed, status, piu type.'
  1038      myang                           'Procedure: get_piu_name__r'
  1038      myang                           'Status:    0x%X'
  1038      myang                           'PIU type:  0x%X',
  1038      myang                           read_status, piu_type );
  1038      myang         RETURN read_status;
  1038      myang     ENDDECISION;
  1038      myang 
  1038      myang     /*  Nil is set as last charachter of piu name   */
  1038      myang     DECISION piu_name.string_len;
  1038      myang     ( <8 ): TASK piu_name.piu_name( piu_name.string_len ) := ascii_t_nul_c;
  1038      myang     ENDDECISION;
  1038      myang     RETURN success_ec;
  1038      myang 
  1038      myang ENDPROCEDURE get_piu_name__r;
  1038      myang 
  1038      myang /****************************************************************************/
  1038      myang PROCEDURE is_piu_type_cdsp_dh__r;
  1038      myang /*
  1038      myang  *  Returns T if PIU type is CDSP_DH
  1038      myang  *  
  1038      myang  *
  1038      myang  *****************************************************************************/
  1038      myang FPAR
  1038      myang     IN       p_hms       hms_address_t;    
  1038      myang     
  1038      myang RETURNS bool;
  1038      myang 
  1038      myang DCL
  1038      myang   	piu_name    piuname_t,
  1038      myang   	err_stat   error_t := success_ec;
  1038      myang 
  1038      myang START;
  1038      myang 
  1038      myang 	TASK err_stat := get_piu_name__r( word( hms_address_t_rack_r( p_hms )),
  1038      myang                                word( hms_address_t_subrack_r( p_hms )),
  1038      myang                                word( hms_address_t_ppa_r( p_hms)),
  1038      myang                                piu_name );
  1038      myang 	DECISION err_stat;
  1038      myang     ( /=success_ec ):
  1038      myang         TASK dxsyslog_r( log_type_t_text_e_c,
  1454       hhou                          @'JIGDAT: get piu name failed .'
  1038      myang                          'Procedure: get_piu_name__r'
  1038      myang                          'Status:       0x%X ',
  1038      myang                           err_stat );        
  1038      myang         RETURN F;
  1038      myang     ENDDECISION;
  1038      myang     
  1038      myang     DECISION   (strcmp( char_ptr_t( @piu_name.piu_name  ), char_ptr_t( @'CDSP_DH') ) = 0) ;
  1038      myang     ( T ):
  1038      myang         RETURN T;
  1038      myang     ENDDECISION;
  1038      myang 
  1038      myang 	RETURN F;
  1038      myang 	
  1038      myang ENDPROCEDURE is_piu_type_cdsp_dh__r;
  1038      myang 
  1087   huantang PROCEDURE output_release_notify_to_brt__r;
  1087   huantang FPAR
  1087   huantang     IN VIEWED  unit         jiifil__t,
  1087   huantang     IN         proc_idx     byte,
  1087   huantang     IN VIEWED  alp_unit     jiifil__t;
  1180   huantang RETURNS
  1180   huantang 	bool;
  1087   huantang DCL
  1087   huantang     unit_info        unit_it_t,
  1087   huantang     if_list          if_list_t,
  1087   huantang     unit_address     unit_address_t,
  1087   huantang     brt_pid          pid;
  1087   huantang 
  1087   huantang START;
  1087   huantang 	TASK unit_address := alp_unit.procs(0).phys_addr;
  1087   huantang 
  1087   huantang 	DECISION is_unit_in_ex_state__r(unit_address);
  1087   huantang 	( F ):
  1180   huantang 	  RETURN F;
  1087   huantang 	ENDDECISION;
  1087   huantang 
  1087   huantang 	DECISION proc_idx >= jiifil__t_n_comp_per_unit_c;
  1087   huantang 	( T ):
  1180   huantang 	RETURN F;
  1087   huantang 	ENDDECISION;
  1087   huantang 
  1087   huantang 	DECISION unit.procs(proc_idx).interface_index >= jii_interfaces__t_max_c;
  1087   huantang 	( T ):
  1180   huantang 	RETURN F; 
  1087   huantang 	ENDDECISION;
  1087   huantang 
  1087   huantang 	TASK unit_info.ttype := unit.procs(proc_idx).unit_type,
  1180   huantang 	     unit_info.index := unit.procs(proc_idx).unit_index,
  1180   huantang 	     if_list.interfaces(0) := unit.interfaces( unit.procs(proc_idx).interface_index ).intf_id;
  1087   huantang 	   
  1087   huantang 	CALL	get_brt_pid__r(alp_unit.unit_type, unit_address, brt_pid);
  1087   huantang 
  1087   huantang 	OUTPUT unit_release_notify_s( unit_info, if_list ) TO brt_pid;
  1180   huantang 	RETURN T;
  1087   huantang ENDPROCEDURE output_release_notify_to_brt__r;
  1087   huantang 
  1087   huantang /**************************************************************************/
  1087   huantang PROCEDURE notify_brt__r;
  1087   huantang /*
  1087   huantang  * This procedure notify RS3 about the unit and interface before relase
  1087   huantang  * unit.
  1087   huantang 
  1087   huantang **************************************************************************/
  1087   huantang FPAR
  1087   huantang     IN VIEWED  unit         jiifil__t,
  1087   huantang     IN         proc_idx     byte,
  1087   huantang     IN VIEWED  alp_unit     jiifil__t;
  1087   huantang 
  1087   huantang DCL
  1087   huantang     ec               error_t;
  1087   huantang TIMER
  1087   huantang    ack_timer;
  1087   huantang    
  1087   huantang START;
  1087   huantang 
  1180   huantang   DECISION output_release_notify_to_brt__r(unit,proc_idx,alp_unit);
  1180   huantang   ( F ):
  1180   huantang      RETURN;
  1180   huantang   ENDDECISION;
  1087   huantang   SET ( NOW + ack_waiting_time__c, ack_timer );
  1087   huantang   NEXTSTATE wait_acks;
  1087   huantang 
  1087   huantang STATE	wait_acks;
  1087   huantang 	INPUT	unit_release_notify_ack_s( ec );
  1087   huantang 	RESET (ack_timer);
  1087   huantang 	RETURN;
  1087   huantang 	
  1087   huantang 	INPUT	ack_timer;
  1087   huantang 	RETURN;
  1087   huantang ENDSTATE;
  1087   huantang 
  1087   huantang ENDPROCEDURE notify_brt__r;
  1087   huantang 
  1087   huantang 
  1087   huantang /**************************************************************************/
  1087   huantang PROCEDURE dmpg_seou_notify_brt__r;
  1087   huantang /*
  1087   huantang  * This procedure notify RS3 about the unit and interface when unit state
  1087   huantang  * change to SE-OU
  1087   huantang 
  1087   huantang **************************************************************************/
  1087   huantang FPAR
  1087   huantang 	IN     unit_type    unit_type_t,
  1087   huantang     IN     unit_index   unit_index_t,
  1087   huantang     IN     unit_state   unit_state_t;
  1087   huantang 
  1087   huantang DCL
  1087   huantang 	unit          jiifil_ptr__t,
  1087   huantang     comp          jii_comp_ptr__t,
  1087   huantang     alp_unit      jiifil_ptr__t,
  1180   huantang     ret           bool,
  1087   huantang     real_ustate   unit_state_t;
  1087   huantang 
  1087   huantang START;
  1087   huantang 	DECISION unit_type = unit_type_t_dmpg_c AND unit_state = unit_state_t_se_c;
  1087   huantang 	( T ):
  1091   huantang 		DECISION jii_find_unit__r(unit_type,unit_index,unit,comp,alp_unit);
  1091   huantang 		( T ):        
  1091   huantang 			DECISION ( (app_mxu_unit_check__r( $alp_unit ) ) AND
  1091   huantang 			        (unit_state_by_phys_addr__r( comp->phys_addr, real_ustate ) = success_ec)  AND
  1091   huantang 			        (real_ustate = unit_state_t_seou_c));
  1091   huantang 			(T):
  1180   huantang 				TASK ret := output_release_notify_to_brt__r($unit,comp->proc_index,$alp_unit);
  1087   huantang 			ENDDECISION;
  1091   huantang 	   ENDDECISION;
  1087   huantang 	ENDDECISION;
  1087   huantang 	
  1087   huantang ENDPROCEDURE dmpg_seou_notify_brt__r;
  1087   huantang 
  1462       hhou PROCEDURE if_rnc_support_this_piu__r;
  1462       hhou FPAR
  1462       hhou     IN p_hms    hms_address_t;
  1462       hhou RETURNS bool;
  1462       hhou DCL
  1462       hhou     err_stat    error_t,
  1462       hhou     piuname     piuname_t;
  1087   huantang 
  1462       hhou START;
  1462       hhou     TASK err_stat := get_piu_name__r( word( hms_address_t_rack_r( p_hms )),
  1462       hhou                                word( hms_address_t_subrack_r( p_hms )),
  1462       hhou                                word( hms_address_t_ppa_r( p_hms)),
  1462       hhou                                piuname );
  1462       hhou 	DECISION err_stat;
  1462       hhou     ( /=success_ec ):
  1462       hhou         TASK dxsyslog_r( log_type_t_text_e_c,
  1462       hhou                          @'JIGDAT: get piu name failed .'
  1462       hhou                          'Procedure: get_piu_name__r'
  1462       hhou                          'HMS addr: 0x%X'
  1462       hhou                          'Status:   0x%X ',
  1462       hhou                          p_hms,
  1462       hhou                          err_stat );        
  1462       hhou         RETURN F;
  1462       hhou     ENDDECISION;
  1314   chunchen 
  1462       hhou     /*FIXME: This hard code need to update when UAM is update forbidden PIUs*/
  1462       hhou     DECISION (nw_element = nw_elem_t_rnc_c AND
  1462       hhou             ( ( strcmp( char_ptr_t( @piuname.piu_name ), char_ptr_t(@'NP2GE'))   = 0 )   OR
  1462       hhou               ( strcmp( char_ptr_t( @piuname.piu_name ), char_ptr_t(@'NP8S1'))   = 0 )   OR
  1462       hhou               ( strcmp( char_ptr_t( @piuname.piu_name ), char_ptr_t(@'NP8S1_A')) = 0 )   OR
  1462       hhou               ( strcmp( char_ptr_t( @piuname.piu_name ), char_ptr_t(@'NP2GE_A')) = 0 )   OR
  1462       hhou               ( strcmp( char_ptr_t( @piuname.piu_name ), char_ptr_t(@'CDSP_C'))  = 0 )   ));
  1462       hhou     (T):
  1462       hhou         RETURN F;
  1462       hhou     ENDDECISION;
  1314   chunchen 
  1462       hhou     RETURN T;
  1462       hhou ENDPROCEDURE if_rnc_support_this_piu__r;
  1462       hhou 
  1038      myang /****************************************************************************/
   216      h10hu ENDIMPLEMENTATION jigdatgx;
   359    lifsong 
     2     yanzuo /*
     2     yanzuo  *  PROGRAMBLOCK SYNCHRONOUS SERVICE DEFINITION
     2     yanzuo  *
   644    lifsong  *  $Id$
     2     yanzuo  *
     2     yanzuo  *  Description:
     2     yanzuo  *  JIGGER's data management module interface.
     2     yanzuo  *  This module covers the handling of JIIFIL, JICFIL and JIAFIL.
     2     yanzuo  *
     2     yanzuo  *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo CONSTANT
     2     yanzuo     /* Following error codes are reserved from VARKI.
     2     yanzuo        with single underscore (_ec)                 */
     2     yanzuo     alp_sfu_cabling_error__ec = 0x408D;
     2     yanzuo     alp_cluster_missing__ec   = 0x408E;
     2     yanzuo     out_of_cluster_ids__ec    = 0x4090;
     2     yanzuo     alp_tributary_exists__ec  = 0x4091;
     2     yanzuo 
     2     yanzuo     jiifil_file_fn = 0xA290000;
     2     yanzuo     jicfil_file_fn = 0xA2A0000;
     2     yanzuo     jiafil_file_fn = 0xB590000;
     2     yanzuo     jibfil_file_fn = 0xB5A0000;
     2     yanzuo 
     2     yanzuo     /* internal service codes: */
     2     yanzuo     central_cac__c           = 1; /* KARJAA */
     2     yanzuo     central_cac_tp_to_tmp__c = 2; /* KARJAA */
     2     yanzuo     atm_config_params__c     = 3; /* XVALUE */
     2     yanzuo     utopia_addr_inq__c       = 4; /* UAMPRB */
     2     yanzuo     atm_inter_notif__c       = 5; /* PIGPRB */
     2     yanzuo     intconn_topology_mgr__c  = 6; /* TOMPRB */
     2     yanzuo     port_configurator__c     = 7; /* UAMPRB */
     2     yanzuo     atm_res_broker__c        = 8; /* RBROKE */
     2     yanzuo     atm_log_res_handling__c  = 9; /* RUGGER */
     2     yanzuo     hms_forwarding__c        = 10; /* HMS hand */
     2     yanzuo     apc_handling__c          = 11; /* simulated WHISKY */
     2     yanzuo     max_service__c           = 12; /* Used to initialize sercvice table */
     2     yanzuo 
     2     yanzuo     re_notif_tmo__c      = 300; /* time limit for handling recovery
     2     yanzuo                                    notifications. */
     2     yanzuo 
     2     yanzuo     not_app_unit__c         = 0;
     2     yanzuo     app_mxu__c              = 1;
     2     yanzuo     app_eipu__c             = 2;
     2     yanzuo 
    38    lifsong     SFPIF2G5__c             = 0xD;
    38    lifsong     SFPIF__c                = 0x6;
     2     yanzuo 
     2     yanzuo /* Service table definitions */
     2     yanzuo 
     2     yanzuo TYPE service_information__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo       service_name          service_name_t;
     2     yanzuo       service_provider      pid;
     2     yanzuo       service_attr          attr_group_t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE service_information__t;
     2     yanzuo 
  1222      tinyu TYPE jig_dbglog_msk__t
  1125   huantang CONSTANT
  1222      tinyu 	jii_mdf__c      = 1;
  1222      tinyu 	rcv_msg__c    = 1<<1;
  1289      tinyu 	clu_task__c    = 1<<2; /*normal */
  1222      tinyu 	kp_op__c    = 1<<3;
  1289      tinyu 	err_log__c       = 1<<4;
  1222      tinyu 	clu_task_ab__c = 1<<5;	
  1222      tinyu 	fre_msg__c   = 1<<6; /* fig_ser,res_pqii,int_xcon create/release */
  1125   huantang 	send_msg__c        = 1<<7;
  1222      tinyu 	memfile_op__c  = 1<<8;
  1222      tinyu 	fun_entry__c = 1<<9;
  1222      tinyu 	default__c    = jii_mdf__c | rcv_msg__c | clu_task__c ;
  1125   huantang REPRESENTATION
  1125   huantang     dword;
  1222      tinyu ENDTYPE jig_dbglog_msk__t;
  1125   huantang 
  1125   huantang TYPE test_msg_info__t
  1125   huantang REPRESENTATION ARRAY (128) OF byte;
  1125   huantang ENDTYPE test_msg_info__t;
  1125   huantang 
     2     yanzuo TYPE serv_table__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo       service ARRAY ( max_service__c ) OF service_information__t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE serv_table__t;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * Reference types needed in actual data type definitions.
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo TYPE jig_limits__t
     2     yanzuo   CONSTANT
     2     yanzuo     /* Max number of (top-level) functional units.
     2     yanzuo      * Rationale: 3-cabinet RNC/MGW has 12 subracks and each
     2     yanzuo      * of them has 17 slots usable for computing units.
     2     yanzuo      */
     2     yanzuo     n_funits_c = 12 * 17;
     2     yanzuo 
     2     yanzuo     /* Max number of computers. A top-level functional unit
     2     yanzuo      * may have up to 4 computers inside. */
     2     yanzuo     n_comps_c  = n_funits_c * 4;
     2     yanzuo     n_vci_bm_c = n_comps_c;
     2     yanzuo 
     4     yanzuo     /* TOELIB connection id is dword now.
     4     yanzuo      *for normal connections, id <0x100000
   843    lifsong      *for dsp connections, 80000 reserved in toelib
   843    lifsong      * so total reserved shall be 65535+80000 = 145535
     2     yanzuo      */
   843    lifsong     n_conns_c = 145535;
     2     yanzuo 
     4     yanzuo     /*TOELIB dsp connection id start point*/
     4     yanzuo     n_dsp_conns_min_c = 0x100000;
     4     yanzuo 
     4     yanzuo     /*Number to mask TOELIB dsp connection id's high bit,
     4     yanzuo      *to calculate the offset to n_dsp_conns_min_c
     4     yanzuo      */
   216      h10hu     n_dsp_conns_msk_c = 0xFFEFFFFF;
     4     yanzuo 
   843    lifsong     /*jicfil dsp connection start point, 65536,  toelib uses <=65535 for non-dsp connections.*/
   843    lifsong     jic_dsp_con_min_c = 0x10000;
     4     yanzuo 
   579     z7zhou     /* dsp vci mask*/
   579     z7zhou     n_dsp_vci_mask_c = 0x3FFF;
   579     z7zhou     n_dsp_vci_even_min_c = 0x4000;
   579     z7zhou     n_dsp_vci_odd_min_c  = 0x8000;
   579     z7zhou 
     2     yanzuo     /* Number of ALP clusters. Note that this is also the largest
     2     yanzuo      * allowed ALP cluster index (the valid range starts from 1),
     2     yanzuo      * and the number of cluster hands created by the master.
     2     yanzuo      */
   367    lifsong     n_clus_c = 32;
     2     yanzuo 
     2     yanzuo     /* interface id range managed by JIGGER. */
     2     yanzuo     min_if_id_c = atm_interface_id_t_min_int_c;
     2     yanzuo     max_if_id_c = atm_interface_id_t_max_int_c;
     2     yanzuo 
     2     yanzuo     max_phys_addr_c = 0x3FF;
     2     yanzuo 
     2     yanzuo     /* Largest VCI range which can be handled by JIGGER.
     2     yanzuo      * Note: the actual number of VCIs managed by JIGGER is specified
     2     yanzuo      * in ATP-XML file and stored to jii_comp__t; these values
     2     yanzuo      * are used to define VCI allocation bitmap.
     2     yanzuo      */
     2     yanzuo     min_vci_c = 0x20;
   843    lifsong     n_vcis_c = 0x5E3;
     2     yanzuo 
    69     yanzuo     
     2     yanzuo     /* Max number of xconn_ids managed by JIGGER per APC cluster.
     2     yanzuo      * Note: the actual number of xconn_ids available to JIGGER
     2     yanzuo      * might be defined in some XML file; this value just specifies
     2     yanzuo      * the maximum limit value that can be handled by JIGGER.
     2     yanzuo      */
   108    lifsong     min_xcid_c = 0x100; /* originally 1; will be xconn_id_t_imnw_min_c */
   104    lifsong     n_xcids_c = 0x5F00; /* will be xconn_id_t_imnw_max_c + 1 -
   104    lifsong                                    xconn_id_t_imnw_min_c, currently number of xcid
   104    lifsong                                    in one MXU cluster is 23554 = 0X5C02*/
     2     yanzuo 
     2     yanzuo     /* This specifies how many times JIGGER should try to release
     2     yanzuo      * the resources in MXU cluster restart or during unit removal: */
     2     yanzuo     rel_attempts_c = 35;
     2     yanzuo 
     2     yanzuo     /* This tells how many ALP1 unit port configuration tasks
     2     yanzuo        are allowed to run in parallel */
   359    lifsong     max_woalp_prtcfg_c = 3;
     2     yanzuo 
     2     yanzuo     /* maximum number of simultaneous RT conn deletion requests
     2     yanzuo        when removing connections in MXU restart/unit deletion */
   359    lifsong     max_rtdels_c = 2;
     2     yanzuo 
     2     yanzuo     /* max number of attempts to complete certain startup task: */
     2     yanzuo     max_startatt_c = 5;
     2     yanzuo 
     2     yanzuo     /* max safe msg group number in requests */
     2     yanzuo     max_msg_group_c = 99;
     2     yanzuo 
   853       pshu     /* the min num hands of jigcon used for xconn delete*/
   853       pshu     min_xconn_del_hand_num_c = 6;
     2     yanzuo   REPRESENTATION
     2     yanzuo     dword;
     2     yanzuo ENDTYPE jig_limits__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jiifil_idx__t
     2     yanzuo   CONSTANT
     2     yanzuo     invalid_c    = 0xFFFF;
     2     yanzuo     active_omu_c = 0xFFFE;
     2     yanzuo     new_c        = 0xFFFD;
     2     yanzuo   REPRESENTATION
     2     yanzuo     word;
     2     yanzuo ENDTYPE jiifil_idx__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jicfil_idx__t
     2     yanzuo   CONSTANT
     2     yanzuo     invalid_c = 0;
     2     yanzuo   REPRESENTATION
     2     yanzuo     word;
     2     yanzuo ENDTYPE jicfil_idx__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE vci_bitmap_idx__t
     2     yanzuo   CONSTANT
     2     yanzuo     invalid_c = 0;
     2     yanzuo   REPRESENTATION
     2     yanzuo     word;
     2     yanzuo ENDTYPE vci_bitmap_idx__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE alp_cluster_idx__t
     2     yanzuo   CONSTANT
     2     yanzuo     invalid_c = 0;
     2     yanzuo     any_c     = 0xFF;
     2     yanzuo   REPRESENTATION
     2     yanzuo     byte;
     2     yanzuo ENDTYPE alp_cluster_idx__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_nip_ipe__t
     2     yanzuo   CONSTANT
     2     yanzuo     /* Hard-coded values for NIP1/IPE mphy ports
     2     yanzuo      * and subport schedulers
     2     yanzuo      */
     2     yanzuo     nip_a_mphy_c = 1;
     2     yanzuo     nip_b_mphy_c = 0;
     2     yanzuo     nip_b_sch_c  = 30;
     2     yanzuo     ipe_mphy_c   = 15;
     2     yanzuo   REPRESENTATION
     2     yanzuo     word;
     2     yanzuo ENDTYPE jig_nip_ipe__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
   359    lifsong TYPE jig_ss7u__t
   359    lifsong     CONSTANT
   359    lifsong     /* Hard-coded values for ss7u mphy port
   359    lifsong      */
   393      h10hu     ss7u_mphy_c = 1;
   359    lifsong   REPRESENTATION
   359    lifsong     word;
   359    lifsong ENDTYPE jig_ss7u__t
   359    lifsong   COMMENT ' ';
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * The range of xconn_id values managed by JIGGER
     2     yanzuo  * is such that they can be represented by word.
     2     yanzuo  */
     2     yanzuo TYPE jig_xconn_id__t
     2     yanzuo   CONSTANT
     2     yanzuo     invalid__c     = jig_limits__t_min_xcid_c - 1;/*0X0FFF*/
     2     yanzuo     unspecified__c = jig_limits__t_min_xcid_c - 2;/*0X0FFE*/
     2     yanzuo   REPRESENTATION
     2     yanzuo     word;
     2     yanzuo ENDTYPE jig_xconn_id__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * ================================================================
     2     yanzuo  *                     JIIFIL-related definitions.
     2     yanzuo  * ================================================================
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * A bit vector which is used in JIIFIL update operations
     2     yanzuo  * to specify fields to be updated (others will not be touched)
     2     yanzuo  */
     2     yanzuo TYPE jii_field__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ENUM
     2     yanzuo        filler1_c,
     2     yanzuo        filler2_c,
     2     yanzuo        filler3_c,
     2     yanzuo        filler4_c,
     2     yanzuo 
     2     yanzuo        vpi_c,
     2     yanzuo        maxintvci_c,
     2     yanzuo        mphy_port_c,
     2     yanzuo        spi3_port_c,
     2     yanzuo        subport_c,
     2     yanzuo 
    73     jamema        release_mpqu_c,
    73     jamema        reconfig_needed_c,
     2     yanzuo        pconf_need_c,
     2     yanzuo        pconf_compl_c,
     2     yanzuo        pconf_ts_c,
     2     yanzuo        pconf2_need_c,
     2     yanzuo        pconf2_ts_c,
     2     yanzuo 
     2     yanzuo        fpga_need_c,
     2     yanzuo        sym_mxu_c,
     2     yanzuo        tm_fpga_xconn_c,
     2     yanzuo 
     2     yanzuo        if_init_need_c,
     2     yanzuo        if_init_compl_c,
     2     yanzuo        if_init_ts_c,
     2     yanzuo        if_init2_need_c,
     2     yanzuo        if_init2_ts_c,
     2     yanzuo 
     2     yanzuo        vp_exists_c,
     2     yanzuo        vp_rep_need_c,
     2     yanzuo        vp_ext1_rep_need_c,
     2     yanzuo        vp_reported_c,
     2     yanzuo        vp_ext1_reported_c,
     2     yanzuo        hc_need_c,
     2     yanzuo        hc_created_c,
    98    lifsong        hc_ph2_need_c,
    98    lifsong        hc_ph2_created_c,
   617     qinggu        hc_dsp_need_c,
   617     qinggu        hc_dsp_created_c,
    98    lifsong        
     2     yanzuo        apc_init1_need_c,
     2     yanzuo        apc_init2_need_c,
     2     yanzuo        apc_snd_1281,
     2     yanzuo        sd4_init_need_c,
     2     yanzuo 
     2     yanzuo        start_att_c,
     2     yanzuo        warmup_ts_c,
     2     yanzuo 
     2     yanzuo        coalp_upd_c,
     2     yanzuo        alpwrm_need_c,
     2     yanzuo        allow_trib_c,
     2     yanzuo        trib_rst_needed_c,
     2     yanzuo        rdy_for_rep_c,
     2     yanzuo 
     2     yanzuo        res_rel_need_c,
     2     yanzuo        res_rel_att_c,
     2     yanzuo        res_ala_need_c,
     2     yanzuo 
     2     yanzuo        /* NOTE: intf_flag__r requires that each group of interface flags
     2     yanzuo           (i1*, i2* and i3*) is defined in the same order without
     2     yanzuo           any other constants between them! */
     2     yanzuo 
     2     yanzuo        i1_exists_c,
     2     yanzuo        i1_mphy_sch_c,
     2     yanzuo        i1_sup_added_c,
     2     yanzuo        i1_rep_need_c,
     2     yanzuo        i1_reported_c,
     2     yanzuo 
     2     yanzuo        i2_exists_c,
     2     yanzuo        i2_mphy_sch_c,
     2     yanzuo        i2_sup_added_c,
     2     yanzuo        i2_rep_need_c,
     2     yanzuo        i2_reported_c,
     2     yanzuo 
     2     yanzuo        i3_exists_c,
     2     yanzuo        i3_mphy_sch_c,
     2     yanzuo        i3_sup_added_c,
     2     yanzuo        i3_rep_need_c,
     2     yanzuo        i3_reported_c,
     2     yanzuo 
   470    lifsong        i4_exists_c,
   470    lifsong        i4_mphy_sch_c,
   470    lifsong        i4_sup_added_c,
   470    lifsong        i4_rep_need_c,
   470    lifsong        i4_reported_c,       
   470    lifsong 
     2     yanzuo        ipniu_co_upd_c,
     2     yanzuo 
     2     yanzuo        /*
     2     yanzuo         * Special constants for setting global variables
     2     yanzuo         * in the data management module:
     2     yanzuo         */
     2     yanzuo 
     2     yanzuo        setg_sd4_init_c,    /* set sd4_init_done */
     2     yanzuo        setg_symmxu_apc_c,  /* set sym_mxu_apc_init_done */
     2     yanzuo        clus_warmup_on_c,   /* set APC cluster warmup indicator */
     2     yanzuo        clus_warmup_off_c,  /* clear APC cluster warmup indicator */
     2     yanzuo        clus_rst_on_c,      /* set APC cluster restart indicator */
     2     yanzuo        clus_rst_off_c,     /* clear APC cluster restart indicator */
     2     yanzuo 
     2     yanzuo        last_c,             /* this must come after all values in use */
     2     yanzuo        uxhwb_c,
     2     yanzuo        rphase_c,
     2     yanzuo 
     2     yanzuo        longest_allowed__c
     2     yanzuo 
     2     yanzuo     ENDENUM;
     2     yanzuo ENDTYPE jii_field__t;
     2     yanzuo 
     2     yanzuo TYPE jig_globals__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      version_info              byte;
     2     yanzuo      swo_ongoing               bool;
     2     yanzuo      sd4_init_done             bool;
     2     yanzuo      sym_mxu_cluster           byte;
     2     yanzuo      sym_mxu_apc_init_done     bool;
     2     yanzuo      core_ready_for_reporting  bool;
     2     yanzuo      unused                    ARRAY(123) OF byte; /* padding to 128 bytes */
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_globals__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_globals_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( jig_globals__t );
     2     yanzuo ENDTYPE jig_globals_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE jig_var_id__t
     2     yanzuo   CONSTANT
     2     yanzuo     sd4_init_done     = 1;
     2     yanzuo     sym_mxu_clus      = 2;
     2     yanzuo     sym_apc_init_done = 3;
     2     yanzuo     core_ready_rep    = 4;
     2     yanzuo   REPRESENTATION
     2     yanzuo     byte;
     2     yanzuo ENDTYPE jig_var_id__t
     2     yanzuo   COMMENT '#E: ids of JIGGER global variables';
     2     yanzuo 
     2     yanzuo /* time in 10 milliseconds since epoch of time */
     2     yanzuo TYPE jig_timestamp__t
     2     yanzuo   CONSTANT
     2     yanzuo     expiration_c = 500; /* 5 sec */
     2     yanzuo   REPRESENTATION
     2     yanzuo     dword;
     2     yanzuo ENDTYPE jig_timestamp__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jii_fields__t
     2     yanzuo   CONSTANT
     2     yanzuo     n_bytes_c = (dword(jii_field__t_last_c) + 7) / 8;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY ( n_bytes_c ) OF byte;
     2     yanzuo   OPERATORS
     2     yanzuo     PROCEDURE init_r (
     2     yanzuo       IN/OUT  fields  jii_fields__t
     2     yanzuo     ) ->, NEAR =>
     2     yanzuo       COMMENT '#E: ';
     2     yanzuo 
     2     yanzuo     PROCEDURE fset (
     2     yanzuo       IN/OUT  fields  jii_fields__t,
     2     yanzuo       IN      flag    jii_field__t
     2     yanzuo     ) ->, NEAR =>
     2     yanzuo       COMMENT '#E: ';
     2     yanzuo 
     2     yanzuo     PROCEDURE fclear()->,
     2     yanzuo             COMMENT '#E: ';
     2     yanzuo     PROCEDURE ftest()->,
     2     yanzuo             COMMENT '#E: ';
     2     yanzuo 
     2     yanzuo     PROCEDURE first_r (
     2     yanzuo       IN/OUT    fields jii_fields__t
     2     yanzuo     ) -> jii_field__t, NEAR =>
     2     yanzuo       COMMENT '#E: ';
     2     yanzuo 
     2     yanzuo     PROCEDURE next_r (
     2     yanzuo       IN/OUT    fields jii_fields__t,
     2     yanzuo       IN        prev_field jii_field__t
     2     yanzuo     ) -> jii_field__t, NEAR =>
     2     yanzuo       COMMENT '#E: ';
     2     yanzuo 
     2     yanzuo ENDTYPE jii_fields__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jii_comp_data__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        unit_type                 unit_type_t;          /* Type at child level (hierarchical) or unit itself */
     2     yanzuo        unit_index                unit_index_t;         /* Unit Index for parent unit */
     2     yanzuo        proc_index                hms_processor_index_t;/* Index for this proc in jiifil_t.proc  */
     2     yanzuo        phys_addr                 phys_address_t;       /* Physical address of this unit */
     2     yanzuo 
     2     yanzuo        interface_index           byte;                 /* Interface related to this proc in jiifil_t.interfaces */
     2     yanzuo 
     2     yanzuo        vpi                       vpi_t;                /* VPI for this proc */
     2     yanzuo        max_intconn_vci           vci_t;                /* Max VCI that can be used for nrtconn to this proc */
     2     yanzuo 
     2     yanzuo        /* todo: get rid of mphy,subport fields
     2     yanzuo           (this info is already in 'interfaces' array) */
     2     yanzuo        mphy_port                 mphy_port_number_t; /* +50 */
     2     yanzuo        spi3_port                    spi3_port_number_t;
     2     yanzuo        scheduler_subport         scheduler_subport_t; /* +51 */
     2     yanzuo 
     2     yanzuo        has_pqsar                 bool;
     2     yanzuo        boot_loading              bool;
     2     yanzuo 
     2     yanzuo        start_attempts_left       byte;
     2     yanzuo        /* failed                    bool; */
     2     yanzuo 
     2     yanzuo        if_init_needed            bool; /* +55 */
     2     yanzuo        if_init_timestamp         jig_timestamp__t;
     2     yanzuo        if_init_completed         bool;
     2     yanzuo        if_init_ph2_needed        bool;
     2     yanzuo        if_init_ph2_timestamp     jig_timestamp__t;
     2     yanzuo 
     2     yanzuo        vp_exists                 bool;/* for APP unit, vp is created by BRTSEB or not */
     2     yanzuo        vp_reporting_needed       bool; /* +60 */
     2     yanzuo        vp_reported               bool;
     2     yanzuo 
     2     yanzuo        half_conns_needed         bool;
     2     yanzuo        half_conns_created        bool;
     2     yanzuo 
    98    lifsong        half_conns_ph2_needed     bool;
    98    lifsong        half_conns_ph2_created    bool;
    98    lifsong 
   617     qinggu        half_conns_dsp_needed     bool;
   617     qinggu        half_conns_dsp_created    bool;
   617     qinggu 
     2     yanzuo        res_release_needed        bool;
     2     yanzuo        res_release_attempts_left byte;
     2     yanzuo 
     2     yanzuo        /* The remaining fields are metadata which wouldn't
     2     yanzuo         * actually need to be passed back & forth in messages.
     2     yanzuo         */
     2     yanzuo        first_conn_idx            jicfil_idx__t;
     2     yanzuo        last_conn_idx             jicfil_idx__t;
     2     yanzuo        vci_bitmap_idx            vci_bitmap_idx__t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jii_comp_data__t;
     2     yanzuo 
     2     yanzuo TYPE jii_comp_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( jii_comp_data__t );
     2     yanzuo ENDTYPE jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE two_jii_comp_ptrs__t
     2     yanzuo   REPRESENTATION ARRAY(2) OF jii_comp_ptr__t;
     2     yanzuo ENDTYPE two_jii_comp_ptrs__t;
     2     yanzuo 
     2     yanzuo TYPE vci_bitmap__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        owner   phys_address_t;
     2     yanzuo        bitmap  ARRAY(( jig_limits__t_n_vcis_c + 7 ) / 8 ) OF byte;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE vci_bitmap__t;
     2     yanzuo 
     2     yanzuo TYPE vci_bitmap_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( vci_bitmap__t );
     2     yanzuo ENDTYPE vci_bitmap_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE jibfil_ptr__t
     2     yanzuo   REPRESENTATION vci_bitmap_ptr__t;
     2     yanzuo ENDTYPE jibfil_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE interface_id_bitmap__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY(( jig_limits__t_max_if_id_c + 7 ) / 8) OF byte;
     2     yanzuo ENDTYPE interface_id_bitmap__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jii_search_key__t
     2     yanzuo   CONSTANT
     2     yanzuo     base_c = 0x10000;
     2     yanzuo   REPRESENTATION
     2     yanzuo     dword;
     2     yanzuo ENDTYPE jii_search_key__t;
     2     yanzuo 
     2     yanzuo TYPE jii_interface_info__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        intf_exists            bool;                /* Is this jii_interface_info__t in use */
     2     yanzuo        intf_id                atm_interface_id_t;  /* Interface identifier */
     2     yanzuo        mphy_port              mphy_port_number_t;
     2     yanzuo        spi3_port                 spi3_port_number_t;
     2     yanzuo        scheduler_subport      scheduler_subport_t;
     2     yanzuo        support_added          bool;                /* Is scheduler subport known */
     2     yanzuo        intf_reporting_needed  bool;                /* Interface reporting needed */
     2     yanzuo        intf_reported          bool;                /* Interface reported (to AARSEB)*/
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jii_interface_info__t;
     2     yanzuo 
     2     yanzuo TYPE jii_interfaces__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 4;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( max_c ) OF jii_interface_info__t;
     2     yanzuo ENDTYPE jii_interfaces__t;
     2     yanzuo 
     2     yanzuo TYPE jiifil__t
     2     yanzuo   CONSTANT
     2     yanzuo     n_comp_per_unit_c = 4;
   889       pshu     illegal_proc_idx  = n_comp_per_unit_c;
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        rec_idx                   jiifil_idx__t;       /* Index of this record in JIIFIL */
     2     yanzuo        unit_type                 unit_type_t;         /* Unit type at parent level  */
     2     yanzuo        unit_index                unit_index_t;        /* Unit index */
     2     yanzuo        hms_address               hms_address_t;       /* Rack, subrack, ppa, proc idx */
     2     yanzuo        cluster_idx               alp_cluster_idx__t;  /* Index of cluster record in JIAFIL */
     2     yanzuo 
     2     yanzuo        is_app_mxu_or_eipu        byte;
     2     yanzuo        is_level1_alp_unit        bool;                /* Unit has APC-chip (not NIP1) */
     2     yanzuo        is_level2_alp_unit        bool;                /* Unit is NIP1 */
     2     yanzuo        is_ip_niu                 bool;                /* Unit is IPFE(P),IPGE(P),IPGO(P) */
     2     yanzuo        sfu_port_number           fabric_port_number_t;/* SFU port to which unit is connected */
   165    lifsong        sfu_phy_port              fabric_port_number_t;/* SFU physical port to which unit is connected */
     2     yanzuo 
     2     yanzuo        fig_req_uxhwb_type        ux_hw_block_type_t;  /* UX-block type (received in fig_serv_req */
     2     yanzuo        fig_req_rphase            fig_reset_phase_t;   /* DMX: unspec; Chorus flash, leader, unspec */
     2     yanzuo 
     2     yanzuo        is_wo_unit                bool;                /* Is active unit (or single redundant in TE */
     2     yanzuo        co_alp_unit_phys_addr     phys_address_t;      /* Physical address of pair unit */
     2     yanzuo 
     2     yanzuo        co_alp_unit_updated       bool;                /* Is redundant ALP1 unit warmed */
     2     yanzuo        trib_startup_allowed      bool;                /* Tributary startup allowed */
     2     yanzuo 
     2     yanzuo        interfaces                jii_interfaces__t;   /* Interface Information of this unit */
     2     yanzuo 
     2     yanzuo        sd4_init_needed           bool;                /* SD4 init needed (for SFU,ALP1 units only) */
     2     yanzuo 
     2     yanzuo        port_conf_needed          bool;                /* Port configuration needed */
     2     yanzuo        port_conf_completed       bool;                /* Port configuration completed */
     2     yanzuo        port_conf_timestamp       jig_timestamp__t;    /* Timestamp for port configuration */
     2     yanzuo        port_conf_ph2_needed      bool;                /* Port configuratio phase2 needed  */
     2     yanzuo        port_conf_ph2_timestamp   jig_timestamp__t;    /* Timestamp for phase2 port configuration */
     2     yanzuo 
     2     yanzuo        fpga_needed               bool;                /* Indecate FIGSEB has asked fpga parameters*/
     2     yanzuo        tm_fpga_xconn_needed      bool;                /* Indecate if need to create TM FPGA related xconns*/
     2     yanzuo        sym_mxu_flag              bool;                /* Indecate the unit is SYM-WO-APP-MXU*/
     2     yanzuo 
     2     yanzuo        apc_init_needed           bool;                /* Initialization of APC needed */
     2     yanzuo        apc_init_ph2_needed       bool;                /* Initialization of APC phase 2 needed */
     2     yanzuo        apc_snd_1281_timeout      bool;                /* Workaround that 1281 set only two times out later*/
     2     yanzuo 
     2     yanzuo        alp_warmup_needed         bool;                /* Warming of APC needed */
     2     yanzuo        ready_for_reporting       bool;                /* Reporting allowed (for RSMU/CACU and ALP1 units) */
     2     yanzuo        trib_restart_needed       bool;                /* Tributary units of this unit must be restarted */
     2     yanzuo        removing_unit             bool;                /* Unit is being removed from configuration */
     2     yanzuo 
     2     yanzuo        warmup_timestamp          jig_timestamp__t;    /* Timestamp for warming */
     2     yanzuo 
     2     yanzuo        procs   ARRAY(n_comp_per_unit_c) OF jii_comp_data__t; /* Information of subunits */
     2     yanzuo 
  1054    lifsong        reconfig_needed			   bool;		/*if need to reconfig the interface of the unit*/
  1054    lifsong        mphy_count				      byte;	/*the mphy number of the unit, it will be used to check if reconfig the interface is necessary*/
    73     jamema 
  1054    lifsong        is_center_unit            bool; 
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jiifil__t;
     2     yanzuo 
     2     yanzuo TYPE jiifil_ptr__t
     2     yanzuo   REPRESENTATION POINTER( jiifil__t );
     2     yanzuo ENDTYPE jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE two_jiifil_ptrs__t
     2     yanzuo   REPRESENTATION ARRAY(2) OF jiifil_ptr__t;
     2     yanzuo ENDTYPE two_jiifil_ptrs__t;
     2     yanzuo 
   856   huantang TYPE jiifil_index_array__t
   856   huantang   REPRESENTATION ARRAY(computer_t_phys_not_defined_c) OF jiifil_idx__t;
   856   huantang ENDTYPE jiifil_index_array__t;
   856   huantang 
   856   huantang 
   754     yanzuo TYPE rx_bigvcc_param__t
   754     yanzuo   REPRESENTATION STRUCT
   754     yanzuo      enable_flag    bool;
   754     yanzuo      min_vci        vci_t;
   754     yanzuo      sub_vci        vci_t;
   754     yanzuo      max_vci        vci_t;
   754     yanzuo   ENDSTRUCT;
   754     yanzuo ENDTYPE rx_bigvcc_param__t;
   754     yanzuo 
   754     yanzuo SIGNAL jih_get_bigvcc_param_req__s = 0x9400;
   754     yanzuo 
   754     yanzuo SIGNAL jih_get_bigvcc_param_ack__s = 0x9401
   754     yanzuo (
   754     yanzuo        rx_bigvcc_param        rx_bigvcc_param__t;
   754     yanzuo );
   754     yanzuo 
     2     yanzuo /*
     2     yanzuo  * ================================================================
     2     yanzuo  *                     JICFIL definitions.
     2     yanzuo  * ================================================================
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo TYPE jicfil_halfconn__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        comp        phys_address_t;
     2     yanzuo        vci         vci_t;
     2     yanzuo        xconn_id    jig_xconn_id__t;
     2     yanzuo        exists      bool;
   600     qinggu        creat_time  time_of_day_t;
     2     yanzuo        next_conn   jicfil_idx__t;
     2     yanzuo        /* prev_conn   jicfil_idx__t; */
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jicfil_halfconn__t;
     2     yanzuo 
     2     yanzuo TYPE jicfil__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        toelib_conn_id  conn_id_t;
     2     yanzuo        serv_cat        int_serv_cat_t;
     2     yanzuo        half_conn       ARRAY(2) OF jicfil_halfconn__t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jicfil__t;
     2     yanzuo 
     2     yanzuo TYPE jicfil_ptr__t
     2     yanzuo   REPRESENTATION POINTER( jicfil__t );
     2     yanzuo ENDTYPE jicfil_ptr__t;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * ================================================================
     2     yanzuo  *                 APC cluster (JIAFIL?) definitions.
     2     yanzuo  * ================================================================
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo 
     2     yanzuo TYPE alp_unit_info__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      phys_addr        phys_address_t;
     2     yanzuo      jii_idx          jiifil_idx__t;
     2     yanzuo 
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE alp_unit_info__t;
     2     yanzuo 
     2     yanzuo TYPE alp_xconnid_bitmap__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY(( jig_limits__t_n_xcids_c + 7 ) / 8 ) OF byte;
     2     yanzuo ENDTYPE alp_xconnid_bitmap__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE alp_cluster__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        restart_in_progress  bool;
     2     yanzuo        warming_in_progress  bool;
     2     yanzuo        resources_exist      bool;
     2     yanzuo        apc_manager_pid      pid;
     2     yanzuo        alp_unit             ARRAY(2) OF alp_unit_info__t;
     2     yanzuo        res_alp_xcids        alp_xconnid_bitmap__t;
     2     yanzuo        startup_priority     dword;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE alp_cluster__t;
     2     yanzuo 
     2     yanzuo TYPE alp_cluster_ptr__t
     2     yanzuo   REPRESENTATION POINTER( alp_cluster__t );
     2     yanzuo ENDTYPE alp_cluster_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE jiafil_ptr__t
     2     yanzuo   REPRESENTATION alp_cluster_ptr__t;
     2     yanzuo ENDTYPE jiafil_ptr__t;
     2     yanzuo 
     2     yanzuo /* Memory usage estimates:
     2     yanzuo  * assume max configuration is 204 units, 800 computers
     2     yanzuo  * VCIs per computer = 1200
     2     yanzuo  * xconn ids per APC cluster = 8192
     2     yanzuo  *
     2     yanzuo  * 16 ALP clusters
     2     yanzuo  * = 16 * (15 + 8192/8) = 8944 bytes
     2     yanzuo  * 16000 JICFIL records
     2     yanzuo  * = 16000 * (3 + 2*9)  = 336000 bytes
     2     yanzuo  * 204 JIIFIL records
     2     yanzuo  * = 204 * (56 + 4*34)  = 39168 bytes
     2     yanzuo  *
     2     yanzuo  * 800 VCI bitmaps of (1200-32)/8 bytes
     2     yanzuo  * = 800 * 146 = 116800 bytes
     2     yanzuo  */
     2     yanzuo /*
     2     yanzuo  * ================================================================
     2     yanzuo  *                 Interface definitions.
     2     yanzuo  * ================================================================
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* This data type is used to store generic id and address type
     2     yanzuo  * information, such as physical computer addresses, TOELIB
     2     yanzuo  * connection ids, xconn_id_t values of NRT connections,
     2     yanzuo  * fabric port numbers, and VCIs.
     2     yanzuo  */
     2     yanzuo TYPE jig_id_array_item__t
     2     yanzuo   REPRESENTATION
     4     yanzuo     dword;
     2     yanzuo ENDTYPE jig_id_array_item__t;
     2     yanzuo 
     2     yanzuo /* Variable-sized array type, used in messages and procedure interfaces. */
     2     yanzuo 
     2     yanzuo TYPE jig_id_array__t
     2     yanzuo   CONSTANT
     2     yanzuo     size_c = 1000;
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        n_items  word;
     2     yanzuo        item     ARRAY(size_c) OF jig_id_array_item__t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo 
     2     yanzuo   OPERATORS
     2     yanzuo     encode( IN/OUT FAR list jig_id_array__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     decode( IN/OUT FAR list jig_id_array__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     ensize( IN/OUT FAR list jig_id_array__t ) -> dword, NEAR =>;
     2     yanzuo 
     2     yanzuo ENDTYPE jig_id_array__t;
     2     yanzuo 
     2     yanzuo TYPE jig_id_array_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( jig_id_array__t );
     2     yanzuo ENDTYPE jig_id_array_ptr__t;
     2     yanzuo 
     2     yanzuo TYPE jig_two_id_array__t
     2     yanzuo   CONSTANT
     2     yanzuo     size_c = 2;
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        n_items  word;
     2     yanzuo        item     ARRAY(size_c) OF jig_id_array_item__t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE jig_two_id_array__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* data types to help with selection of VCIs and xconn-ids */
     2     yanzuo  TYPE next_vci_table__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( jig_limits__t_max_phys_addr_c+1 ) OF word;
     2     yanzuo ENDTYPE next_vci_table__t
     2     yanzuo   COMMENT '#E: Tells where to start looking for next free VCI'
     2     yanzuo           '    for each computer.';
     2     yanzuo 
     2     yanzuo TYPE next_xconn_id_table__t
     2     yanzuo   REPRESENTATION
    77    lifsong     ARRAY( jig_limits__t_n_clus_c+1 ) OF word;
     2     yanzuo ENDTYPE next_xconn_id_table__t
     2     yanzuo   COMMENT '#E: Tells where to start looking for next free xconn_id'
     2     yanzuo           '    in each APC cluster.';
     2     yanzuo 
     2     yanzuo /* data types for VCC resource queries: */
     2     yanzuo TYPE jig_one_vcc_params__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      conn_id          conn_id_t;
     2     yanzuo      serv_category    int_serv_cat_t;
     2     yanzuo      target_computer  phys_address_t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_one_vcc_params__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_one_vcc_resources__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      conn_id           conn_id_t;
     2     yanzuo      target_comp       phys_address_t;
     2     yanzuo      vci               vci_t;
     2     yanzuo      remote_vci        vci_t;
     2     yanzuo      xconn_id          jig_xconn_id__t;
     2     yanzuo      remote_xconn_id   jig_xconn_id__t;
     2     yanzuo      serv_category     int_serv_cat_t;
     2     yanzuo      dest_fabric_port  fabric_port_number_t;
     2     yanzuo      dest_alp_cluster  alp_cluster_idx__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_one_vcc_resources__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_vcc_res_common__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      alp1_unit_addr   phys_address_t;
     2     yanzuo      co_alp1_addr     phys_address_t;
     2     yanzuo      co_alp1_updated  bool;
     2     yanzuo      mphy_port        mphy_port_number_t;
     2     yanzuo      vpi              vpi_t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_vcc_res_common__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_vccs_params__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 1000;
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      item_count  word;
     2     yanzuo      vcc         ARRAY( max_c ) OF jig_one_vcc_params__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo 
     2     yanzuo   OPERATORS
     2     yanzuo     encode( IN/OUT FAR list jig_vccs_params__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     decode( IN/OUT FAR list jig_vccs_params__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     ensize( IN/OUT FAR list jig_vccs_params__t ) -> dword, NEAR =>;
     2     yanzuo 
     2     yanzuo ENDTYPE jig_vccs_params__t;
     2     yanzuo 
     2     yanzuo TYPE jig_vccs_params_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( jig_vccs_params__t );
     2     yanzuo ENDTYPE jig_vccs_params_ptr__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE jig_vccs_resources__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = jig_vccs_params__t_max_c;
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      common      jig_vcc_res_common__t;
     2     yanzuo      item_count  word;
     2     yanzuo      res         ARRAY( max_c ) OF jig_one_vcc_resources__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo 
     2     yanzuo   OPERATORS
     2     yanzuo     encode( IN/OUT FAR list jig_vccs_resources__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     decode( IN/OUT FAR list jig_vccs_resources__t,
     2     yanzuo             IN starting  bytepointer,
     2     yanzuo             IN limit     bytepointer ) -> bytepointer, NEAR =>;
     2     yanzuo     ensize( IN/OUT FAR list jig_vccs_resources__t ) -> dword, NEAR =>;
     2     yanzuo 
     2     yanzuo ENDTYPE jig_vccs_resources__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
   579     z7zhou TYPE edge_buf__t
   579     z7zhou   CONSTANT
   579     z7zhou     size_c = 1000;
   579     z7zhou   REPRESENTATION
   579     z7zhou     ARRAY( size_c ) OF byte;
   579     z7zhou ENDTYPE edge_buf__t;
   579     z7zhou 
   579     z7zhou TYPE edge_ptr__t
   579     z7zhou   REPRESENTATION
   579     z7zhou     POINTER (edge_t);
   579     z7zhou ENDTYPE edge_ptr__t;
   579     z7zhou 
   600     qinggu TYPE conn_id_buf__t
   600     qinggu   CONSTANT
   600     qinggu     n_ids_c = 2000;
   600     qinggu   REPRESENTATION
   600     qinggu     ARRAY( n_ids_c ) OF conn_id_t;
   600     qinggu ENDTYPE conn_id_buf__t
   600     qinggu   COMMENT ' ';
   579     z7zhou 
   600     qinggu TYPE conn_list_ptr__t
   600     qinggu   REPRESENTATION POINTER (connection_list_t);
   600     qinggu ENDTYPE conn_list_ptr__t
   600     qinggu   COMMENT ' ';
   600     qinggu 
   600     qinggu TYPE computer_buf__t
   600     qinggu   CONSTANT
   660     qinggu     n_comps_c = 768;
   600     qinggu   REPRESENTATION
   600     qinggu     ARRAY (n_comps_c) of computer_t;
   600     qinggu ENDTYPE computer_buf__t
   600     qinggu  COMMENT'';
   600     qinggu 
   600     qinggu TYPE computer_list_ptr__t
   600     qinggu   REPRESENTATION POINTER (computer_list_t);
   600     qinggu ENDTYPE computer_list_ptr__t
   600     qinggu   COMMENT ' ';
   600     qinggu 
   600     qinggu 
     2     yanzuo TYPE jig_vccs_resources_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( jig_vccs_resources__t );
     2     yanzuo ENDTYPE jig_vccs_resources_ptr__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
   223    lifsong TYPE jig_remote_vccs_res_item__t
   223    lifsong   REPRESENTATION STRUCT
   223    lifsong       ec error_t;
   223    lifsong       common jig_vcc_res_common__t;
   223    lifsong       res jig_one_vcc_resources__t;
   223    lifsong   ENDSTRUCT;      
   223    lifsong ENDTYPE jig_remote_vccs_res_item__t
   223    lifsong   COMMENT ' ';
   223    lifsong 
   223    lifsong TYPE jig_remote_vccs_res__t
   223    lifsong   CONSTANT
   223    lifsong     max_c = jig_vccs_params__t_max_c;
   223    lifsong   REPRESENTATION STRUCT
   223    lifsong      item_count  word;  
   223    lifsong      items  ARRAY( max_c) OF jig_remote_vccs_res_item__t;
   223    lifsong   ENDSTRUCT;
   223    lifsong 
   223    lifsong   OPERATORS
   223    lifsong     encode( IN/OUT FAR list jig_remote_vccs_res__t,
   223    lifsong             IN starting  bytepointer,
   223    lifsong             IN limit     bytepointer ) -> bytepointer, NEAR =>;
   223    lifsong     decode( IN/OUT FAR list jig_remote_vccs_res__t,
   223    lifsong             IN starting  bytepointer,
   223    lifsong             IN limit     bytepointer ) -> bytepointer, NEAR =>;
   223    lifsong     ensize( IN/OUT FAR list jig_remote_vccs_res__t ) -> dword, NEAR =>;
   223    lifsong 
   223    lifsong ENDTYPE jig_remote_vccs_res__t
   223    lifsong   COMMENT ' ';
   223    lifsong 
   223    lifsong TYPE jig_remote_vccs_res_ptr__t
   223    lifsong   REPRESENTATION POINTER ( jig_remote_vccs_res__t );
   223    lifsong ENDTYPE jig_remote_vccs_res_ptr__t
   223    lifsong   COMMENT ' ';  
   223    lifsong   
     2     yanzuo TYPE jig_few_vcc_params__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 2;
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      item_count  word;
     2     yanzuo      vcc         ARRAY( max_c ) OF jig_one_vcc_params__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_few_vcc_params__t;
     2     yanzuo 
     2     yanzuo TYPE jig_few_vcc_resources__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 2;
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      common      jig_vcc_res_common__t;
     2     yanzuo      item_count  word;
     2     yanzuo      item        ARRAY( max_c ) OF jig_one_vcc_resources__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_few_vcc_resources__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* connection creator hand parameters. */
     2     yanzuo TYPE conn_hand_data__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     STRUCT
     2     yanzuo        id              conn_id_t;
     2     yanzuo        endpoint        ARRAY(2) OF STRUCT
     2     yanzuo           phys_addr       phys_address_t;
     2     yanzuo           hms_addr        hms_address_t;
     2     yanzuo           unit_info       unit_it_t;
     2     yanzuo           mphy_port       mphy_port_number_t;
     2     yanzuo           mxu_type_index  unit_it_t;
     2     yanzuo           mxu_addr        phys_address_t;
     2     yanzuo           sp_mxu_addr     phys_address_t;
     2     yanzuo           co_unit_addr     phys_address_t;
     2     yanzuo           sfu_port        fabric_port_number_t;
     2     yanzuo           tpi             tpi_t;
     2     yanzuo           xconn_id        jig_xconn_id__t;
     2     yanzuo           exists_in_hw    bool;
     2     yanzuo           alp2_conn       bool;
     2     yanzuo           target_is_app       bool;/*the target unit is app unit or unit connect to APP unit*/
     2     yanzuo           alp_is_app       bool;/*the alp unit is app unit*/
     2     yanzuo           alp2_outw_mphy  mphy_port_number_t;
     2     yanzuo           alp2_inw_mphy   mphy_port_number_t;
     2     yanzuo        ENDSTRUCT;
     2     yanzuo        traf_conf_para  ARRAY(2) OF int_traf_conf_para_t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE conn_hand_data__t;
     2     yanzuo 
     2     yanzuo TYPE jig_alp2_conf_para__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo     alp2_hms_addr    hms_address_t;
     2     yanzuo     alp2_unit_type   unit_type_t;
     2     yanzuo     alp2_unit_index  unit_index_t;
     2     yanzuo     req_mode         request_mode_t;
     2     yanzuo     outw_mphy        mphy_port_number_t;
     2     yanzuo     inw_mphy         mphy_port_number_t;
     2     yanzuo     vpi              vpi_t;
     2     yanzuo     vci              vci_t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE jig_alp2_conf_para__t;
     2     yanzuo 
     2     yanzuo /* Work management: */
     2     yanzuo 
     2     yanzuo TYPE task_type__t
     2     yanzuo   CONSTANT
     2     yanzuo     no_task_c       = 0;
     2     yanzuo     port_conf_c     = 1;
     2     yanzuo     if_init_c       = 2;
     2     yanzuo     port_conf_ph2_c = 3;
     2     yanzuo     if_init_ph2_c   = 4;
     2     yanzuo     hc_create_c     = 5;
     2     yanzuo     apc_init_c      = 6;
     2     yanzuo     apc_init_ph2_c  = 7;
     2     yanzuo     trib_report_c   = 8;
     2     yanzuo     sd4_init_c      = 9;
     2     yanzuo     sp_alp_warmup_c = 10;
     2     yanzuo     trib_restart_c  = 11;
     2     yanzuo     rel_resources_c = 12;
     2     yanzuo     stop_reqs_c     = 13;
     2     yanzuo     max_c           = 14;
     2     yanzuo   REPRESENTATION
     2     yanzuo     byte;
     2     yanzuo ENDTYPE task_type__t;
     2     yanzuo 
     2     yanzuo TYPE generic_params__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      unit_data        jiifil__t;
     2     yanzuo      proc_idx         byte;
     2     yanzuo      alp_unit_data    jiifil__t;
     2     yanzuo      apc_mgr_pid      pid;                      /* WHISKY pid in this ALP cluster */
     2     yanzuo      /* sym_mxu_cluster  alp_cluster_idx__t; */
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE generic_params__t;
     2     yanzuo 
     2     yanzuo TYPE alp_warmup_params__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      wo_unit  jiifil__t;
     2     yanzuo      sp_unit  jiifil__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE alp_warmup_params__t;
     2     yanzuo 
     2     yanzuo TYPE stop_params__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      full_hms_addr  hms_address_t;
     2     yanzuo      sar_type       sar_type_t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE stop_params__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo TYPE comp_params__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      unit_data      jiifil__t;
     2     yanzuo      proc_idx       byte;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE  comp_params__t;
     2     yanzuo 
     2     yanzuo TYPE task_params__t
     2     yanzuo   REPRESENTATION UNION
     2     yanzuo      gen          generic_params__t;
     2     yanzuo      unit_data    jiifil__t;
     2     yanzuo      warmup_data  alp_warmup_params__t;
     2     yanzuo      stop_para    stop_params__t;
     2     yanzuo   ENDUNION;
     2     yanzuo ENDTYPE task_params__t;
     2     yanzuo 
     2     yanzuo TYPE task_data__t
     2     yanzuo   REPRESENTATION STRUCT
     2     yanzuo      task_code        task_type__t;
     2     yanzuo      param_data_size  word;
     2     yanzuo      params           task_params__t;
     2     yanzuo   ENDSTRUCT;
     2     yanzuo ENDTYPE task_data__t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo TYPE stop_units__t
     2     yanzuo   CONSTANT
     2     yanzuo     count_c = 32;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( count_c ) OF fig_msg_header_t;
     2     yanzuo ENDTYPE stop_units__t
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
  1141      tinyu TYPE release_state__t
  1141      tinyu 	CONSTANT
  1141      tinyu 	  count_c = 2;
  1141      tinyu 	REPRESENTATION 
  1141      tinyu 	  ARRAY (count_c) OF atm_cre_state_t;
  1141      tinyu ENDTYPE release_state__t
  1141      tinyu COMMENT ' ';
  1141      tinyu 
  1141      tinyu 
     2     yanzuo TYPE unit_class__t
     2     yanzuo   CONSTANT
     2     yanzuo     alp1_c = 1;
     2     yanzuo     alp2_c = 2;
     2     yanzuo     sp_app_c = 3;
     2     yanzuo     apc_trib_c = 4;
     2     yanzuo     app_trib_c = 5;
   482      h10hu     eipu_trib_c  = 6;
     2     yanzuo   REPRESENTATION byte;
     2     yanzuo ENDTYPE unit_class__t;
     2     yanzuo SERVICES SYNC
     2     yanzuo LIBRARY sync_lib;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * JIIFIL/JICFIL data management services.
     2     yanzuo  * Only the master process is allowed to call these functions.
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo     /* Initialization routine */
     2     yanzuo     PROCEDURE jii_initialize__r (
     2     yanzuo       IN  full_reinit  bool
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Collect information about the given unit
     2     yanzuo      * to the given JIIFIL record. */
     2     yanzuo     PROCEDURE jii_build_record__r (
     2     yanzuo       IN      phys_addr  phys_address_t,
     2     yanzuo       IN      hms_addr   fig_msg_header_t,
     2     yanzuo       IN      alp1_only  bool,
     2     yanzuo       IN/OUT  rec        jiifil__t
     2     yanzuo      ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Delete the specified record and all
     2     yanzuo      * references to it from JIIFIL.
     2     yanzuo      */
     2     yanzuo     PROCEDURE jii_delete_local_record__r (
     2     yanzuo      IN rec_idx  jiifil_idx__t
     2     yanzuo      ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Write the given record to JIIFIL. Allocate a new record
     2     yanzuo      * from JIIFIL if the rec_idx field in the record has
     2     yanzuo      * been initialized to jiifil_idx__t_new_c. */
     2     yanzuo     PROCEDURE jii_write_local_record__r (
     2     yanzuo       IN/OUT rec_data  jiifil__t
     2     yanzuo      ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Update selected fields in the specified JIIFIL record. */
     2     yanzuo     PROCEDURE jii_update_local_record__r (
     2     yanzuo       IN/OUT source    jiifil__t,
     2     yanzuo       IN proc_idx      hms_processor_index_t,
     2     yanzuo       IN fields        jii_fields__t,
     2     yanzuo       IN timestamp     jig_timestamp__t,
     2     yanzuo       IN/OUT clus_idx  alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_clear_sd4_flags__r (
     2     yanzuo       IN/OUT  results  fig_cf_succ_list_t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Locate the JIIFIL record of a unit
     2     yanzuo      * identified by unit type and index.
     2     yanzuo      */
     2     yanzuo     PROCEDURE jii_find_unit__r (
     2     yanzuo       IN utype        unit_type_t,
     2     yanzuo       IN uindex       unit_index_t,
     2     yanzuo       IN/OUT jii_ptr  jiifil_ptr__t,
     2     yanzuo       IN/OUT comp_ptr jii_comp_ptr__t,
     2     yanzuo       IN/OUT alp_ptr  jiifil_ptr__t
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jigclu_find_unit__r (
     2     yanzuo       IN       utype        unit_type_t,
     2     yanzuo       IN       uindex       unit_index_t,
     2     yanzuo       IN/OUT   io_phy_addr  phys_address_t
     2     yanzuo      ) -> bool, FAR =>;
  1141      tinyu      
     2     yanzuo 
   585      h10hu     PROCEDURE jigclu_find_app_spi3__r (
     2     yanzuo       IN       in_phy_addr   phys_address_t,
     2     yanzuo       IN/OUT   io_mphy_port  mphy_port_number_t
     2     yanzuo      ) -> bool, FAR =>;
     2     yanzuo 
   359    lifsong    PROCEDURE get_alp_unit_for_brt__r(
   359    lifsong       IN/OUT  alp_unit    unit_it_t, 
   359    lifsong       IN/OUT  alp_jii      jiifil__t
   359    lifsong      ) ->, FAR =>;
  1141      tinyu      
   359    lifsong 
  1141      tinyu    PROCEDURE check_trib_startup_allowed__r(
  1141      tinyu     IN mxu_addr   phys_address_t
  1141      tinyu     ) -> bool, FAR =>;
  1141      tinyu 
     2     yanzuo     /* Locate the JIIFIL record of a unit
     2     yanzuo      * identified by physical computer address.
     2     yanzuo      */
     2     yanzuo     PROCEDURE jii_find_computer__r (
     2     yanzuo       IN comp          phys_address_t,
     2     yanzuo       IN/OUT jii_ptr   jiifil_ptr__t,
     2     yanzuo       IN/OUT comp_ptr  jii_comp_ptr__t,
     2     yanzuo       IN/OUT alp_ptr   jiifil_ptr__t
     2     yanzuo      ) -> bool, NEAR =>;
  1073   huantang      
  1073   huantang      PROCEDURE jii_find_computer_by_hms__r (
  1073   huantang       IN     hms       hms_address_t,
  1073   huantang       IN/OUT jii_ptr   jiifil_ptr__t,
  1073   huantang       IN/OUT comp_ptr  jii_comp_ptr__t,
  1073   huantang       IN/OUT alp_ptr   jiifil_ptr__t
  1073   huantang      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* Locate the JIIFIL record of a unit
     2     yanzuo      * identified by HMS address.
     2     yanzuo      */
     2     yanzuo     PROCEDURE jii_find_hms__r (
     2     yanzuo       IN fig_hms_addr      fig_msg_header_t,
     2     yanzuo       IN/OUT jii_ptr       jiifil_ptr__t,
     2     yanzuo       IN/OUT comp_ptr      jii_comp_ptr__t,
     2     yanzuo       IN/OUT alp_ptr       jiifil_ptr__t
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo     PROCEDURE jigdat_read_globals__r (
     2     yanzuo       IN/OUT  glob_vars  jig_globals__t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jigdat_set_global__r (
     2     yanzuo       IN var_id  jig_var_id__t,
     2     yanzuo       IN var_value dword
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * Browsing services:
     2     yanzuo  * - find first computer in the given/any cluster
     2     yanzuo  * - find next computer in the given/any cluster
     2     yanzuo  * - find first connection of the given/any computer
     2     yanzuo  * - find next connection of the given/any computer
     2     yanzuo  * - return global state information
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_find_first_comp__r (
     2     yanzuo       IN clus_idx        alp_cluster_idx__t,
     2     yanzuo       IN/OUT search_key  jii_search_key__t,
     2     yanzuo       IN/OUT jii_ptr     jiifil_ptr__t,
     2     yanzuo       IN/OUT comp_ptr    jii_comp_ptr__t,
     2     yanzuo       IN/OUT alp_ptr     jiifil_ptr__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_find_next_comp__r
     2     yanzuo     (
     2     yanzuo       IN clus_idx        alp_cluster_idx__t,
     2     yanzuo       IN/OUT search_key  jii_search_key__t,
     2     yanzuo       IN/OUT jii_ptr     jiifil_ptr__t,
     2     yanzuo       IN/OUT comp_ptr    jii_comp_ptr__t,
     2     yanzuo       IN/OUT alp_ptr     jiifil_ptr__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_find_conn__r (
     2     yanzuo       IN      conn_id  conn_id_t,
     2     yanzuo       IN/OUT  jic_ptr  jicfil_ptr__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jic_find_first_conn__r (
     2     yanzuo       IN addr            phys_address_t,
     2     yanzuo       IN/OUT search_key  jii_search_key__t,
     2     yanzuo       IN/OUT jic_ptr     jicfil_ptr__t
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jic_find_next_conn__r (
     2     yanzuo       IN addr            phys_address_t,
     2     yanzuo       IN/OUT search_key  jii_search_key__t,
     2     yanzuo       IN/OUT jic_ptr     jicfil_ptr__t
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_find_stoppable_comp__r (
     2     yanzuo       IN/OUT  hms_addr  hms_address_t,
     2     yanzuo       IN/OUT  sar_type  sar_type_t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jiafil_ptr__r(
     2     yanzuo       IN rec_idx  dword
     2     yanzuo     ) -> jiafil_ptr__t, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jiifil_ptr__r(
     2     yanzuo       IN rec_idx  dword
     2     yanzuo     ) -> jiifil_ptr__t, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jibfil_ptr__r(
     2     yanzuo       IN rec_idx  dword
     2     yanzuo     ) -> jibfil_ptr__t, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_sd4_init_done__r(
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_sym_mxu_apc_init_done__r(
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE set_sym_mxu_cluster__pv__r(
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_sym_mxu_cluster__r(
     2     yanzuo      ) -> alp_cluster_idx__t, FAR =>;
     2     yanzuo 
   664     qinggu     PROCEDURE jii_is_sym_mxu_app__r(
   664     qinggu     )  -> bool, FAR=>;
   664     qinggu 
     2     yanzuo     PROCEDURE jii_core_ready_for_reporting__r(
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_figseb_req__r (
     2     yanzuo       /* DE71 fig_service_req_msg_s */
     2     yanzuo       IN fig_msg_header      fig_msg_header_t,
     2     yanzuo       IN own_unit            ux_hw_block_type_t,
     2     yanzuo 
     2     yanzuo       /* mphy_port_number_t_min_c indicates Chorus flash boot */
     2     yanzuo       IN utopia_address      mphy_port_number_t,
     2     yanzuo 
     2     yanzuo       /* OUT: cluster where the unit belongs to */
     2     yanzuo       IN/OUT cluster_idx     alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_atm_param_req__r (
     2     yanzuo       /* C57B res_pqii_int_if_param_req_s
     2     yanzuo          C58B res_mssar_int_if_param_req_s */
     2     yanzuo       IN fig_msg_header      fig_msg_header_t,
     2     yanzuo       IN boot_loading        bool,
     2     yanzuo       IN sar_type            sar_type_t,
     2     yanzuo 
     2     yanzuo       /* OUT: cluster where the unit belongs to */
     2     yanzuo       IN/OUT cluster_idx     alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo    PROCEDURE jii_store_fpga_para_req__r (
     2     yanzuo       IN       unit_type      unit_type_t,
     2     yanzuo       IN       unit_index     unit_index_t,
     2     yanzuo       IN/OUT   cluster_idx    alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_apc_init_req__r (
     2     yanzuo       IN      apc_unit     unit_it_t,
     2     yanzuo       IN      whisky_pid   pid,
     2     yanzuo 
     2     yanzuo       /* OUT: cluster where the unit belongs to */
     2     yanzuo       IN/OUT  cluster_idx  alp_cluster_idx__t
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_sp_warmup_req__r (
     2     yanzuo       IN      sp_unit_addr  phys_address_t,
     2     yanzuo       IN/OUT  cluster_idx   alp_cluster_idx__t,
     2     yanzuo       IN/OUT  is_alp1_unit  bool,
     2     yanzuo       IN/OUT  is_app_unit   bool
     2     yanzuo      ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_rugger_readiness__r (
     2     yanzuo       IN      rugger_pid  pid,
     2     yanzuo       IN/OUT  cluster_idx   alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_cac_readiness__r (
     2     yanzuo       IN      ciudad_pid  pid,
     2     yanzuo       IN      ciu_phys_comp  phys_address_t,
     2     yanzuo       IN/OUT  cluster_idx   alp_cluster_idx__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_alp_restart__r (
     2     yanzuo       IN  utype  unit_type_t,
     2     yanzuo       IN  uidx   unit_index_t,
     2     yanzuo       IN  in_alp_restarting    bool
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_store_trial_move__r (
     2     yanzuo       IN  utype  unit_type_t,
     2     yanzuo       IN  uidx   unit_index_t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE jii_setup_unit_removal__r (
     2     yanzuo       IN/OUT     units        conf_units_t,
     2     yanzuo       IN/OUT     cluster_idx  alp_cluster_idx__t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE order_unit_anns__r (
     2     yanzuo       IN  utype  unit_type_t,
     2     yanzuo       IN  is_alp1  bool
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
   655    lifsong 
   655    lifsong     PROCEDURE order_comp_anns_of_unit__r(
   655    lifsong       IN/OUT   unit jiifil__t
   655    lifsong     )  -> error_t, NEAR =>;
   655    lifsong 
     2     yanzuo     PROCEDURE init_service_table__r (
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo /* Other resource management functions */
     2     yanzuo 
     2     yanzuo     /* This function allocates any missing resources for the
     2     yanzuo      * specified connections of the specified computer, updates
     2     yanzuo      * JICFIL, and returns the list of resources to be used
     2     yanzuo      * with the specified connections.
     2     yanzuo      * RT connection ids are also allocated because it's more efficient
     2     yanzuo      * to allocate VCIs for all connections at the same time.
     2     yanzuo      */
     2     yanzuo     PROCEDURE select_vcc_resources__r (
     2     yanzuo       /* input parameters: */
     2     yanzuo       /*   the computer whose connections need resources */
     2     yanzuo       IN         src_addr           phys_address_t,
     2     yanzuo 
     2     yanzuo       /*   do we want existing or not-existing connections: */
     2     yanzuo       IN         conn_exist_status  bool,
     2     yanzuo 
     2     yanzuo       /*   do we want only NRT connections: */
     2     yanzuo       IN         nrt_conns_only     bool,
     2     yanzuo 
     2     yanzuo       /*   the connections of the source unit: */
     2     yanzuo       IN/OUT   vccs_params        jig_vccs_params__t,
     2     yanzuo 
     2     yanzuo       /* output parameters: */
     2     yanzuo       /*   vcc resources (filtered by the above conditions):
     2     yanzuo        */
     2     yanzuo       IN/OUT     vccs_resources     jig_vccs_resources__t
     2     yanzuo 
     2     yanzuo      ) -> error_t, NEAR =>;
     2     yanzuo 
   223    lifsong     PROCEDURE get_one_exist_vcc_res__r(
   223    lifsong     IN         src_addr            phys_address_t,
   223    lifsong     IN         nrt_conns_only      bool,
   223    lifsong     IN/OUT  vccs_param        jig_one_vcc_params__t,
   223    lifsong     IN/OUT  common jig_vcc_res_common__t,
   223    lifsong     IN/OUT  res jig_one_vcc_resources__t
   223    lifsong     ) -> error_t, NEAR =>;
   223    lifsong     
     2     yanzuo     /*Return if the unit is ONE PQU or not*/
     2     yanzuo     PROCEDURE one_pqu_check__r (
     2     yanzuo       IN       in_unit_type      unit_type_t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
   773   huantang     PROCEDURE flexi_mqpu_check__r (
   702    lifsong       IN       in_unit_type      unit_type_t
   702    lifsong     ) -> bool, FAR =>;
   702    lifsong 
     2     yanzuo     /*Return if the unit is MPQU or not*/
     2     yanzuo     PROCEDURE mpqu_check__r (
     2     yanzuo       IN       in_unit_type      unit_type_t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
     2     yanzuo     /* Return the connections of the given unit from JICFIL. */
     2     yanzuo     PROCEDURE jii_list_vccs__r (
     2     yanzuo       IN      src_addr            phys_address_t,
     2     yanzuo       IN      wanted_exist_status bool,
     2     yanzuo       IN      nrt_conns_only      bool,
     2     yanzuo       IN/OUT  vccs_res            jig_vccs_resources__t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo    PROCEDURE jic_tm_same_vci__r(
     2     yanzuo    IN/OUT   vcc_res           jig_vccs_resources__t,
     2     yanzuo    IN/OUT   tm_fpga_vcc_idx   dword
     2     yanzuo    ) -> error_t, NEAR =>;
     2     yanzuo      /*
     2     yanzuo       * Update the 'exists' flag of the specified half-connections.
     2     yanzuo       * The first half-connection is determined by the first entries
     2     yanzuo       * in the 'conn_ids' and 'phys_addrs' table, the second by the
     2     yanzuo       * second entries, etc.
     2     yanzuo       */
     2     yanzuo     PROCEDURE jii_update_half_conn_states__r (
     2     yanzuo       IN/OUT  conn_ids           jig_id_array__t,
     2     yanzuo       IN/OUT  phys_addrs         jig_id_array__t,
     2     yanzuo       IN/OUT  xconn_ids          jig_id_array__t,
     2     yanzuo       IN      exist_state        bool,
     2     yanzuo       IN      orig_conn_id       conn_id_t,
     2     yanzuo       IN/OUT  jic_ptr            jicfil_ptr__t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
   876       pshu 
   876       pshu     /**************************************************************************/
   876       pshu     PROCEDURE write_jicfil_resdata__r(
     2     yanzuo     /*
   876       pshu      * Write the resources selected for the specified connection
   876       pshu      * to JICFIL and JIAFIL and JIBFIL (VCI bitmaps).
   876       pshu      **************************************************************************/
   876       pshu         IN         src_comp  phys_address_t,
   876       pshu         IN/OUT     res       jig_one_vcc_resources__t
   876       pshu     ) -> ,FAR =>;
   876       pshu 
   876       pshu 
   876       pshu     /*
     2     yanzuo      * Remove deleted connection from JICFIL and free its resources.
     2     yanzuo      */
     2     yanzuo     PROCEDURE jii_wipe_conn_rec__r (
     2     yanzuo       IN      jicfil_ptr   jicfil_ptr__t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE select_interface_ids__r (
     2     yanzuo       IN/OUT  rec_in_file  jiifil__t,
     2     yanzuo       IN      mphy_number  byte,
     2     yanzuo       IN/OUT  result       error_t
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     /* common connection setup/delete functions.
     2     yanzuo        Move these into separate module?? */
     2     yanzuo     PROCEDURE create_halfconns_in_hw__r (
     2     yanzuo       IN      mxu_addr     computer_t,
     2     yanzuo       IN      sp_mxu_addr  computer_t,
     2     yanzuo       IN      update_sp    bool,
     2     yanzuo       IN/OUT  tm_params    alp_tp_streams_t,
     2     yanzuo       IN      vpi          vpi_t,
     2     yanzuo       IN      mphy_port    mphy_port_number_t,
     2     yanzuo       IN      n_hconns     dword,
     2     yanzuo       IN/OUT  res          jig_vccs_resources__t,
     2     yanzuo       IN      res_pos      dword
     2     yanzuo     ) -> error_t, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE get_traf_manag_params__r (
     2     yanzuo       /* input parameters: */
  1222      tinyu      /* IN      comp_type          unit_type_t,*/
     2     yanzuo       IN      comp_index         unit_index_t,
     2     yanzuo       IN      comp_vpi           vpi_t,
     2     yanzuo       IN      comp_mphy          mphy_port_number_t,
     2     yanzuo       IN      alp_unit_type      unit_type_t,
     2     yanzuo       IN      alp_unit_index     unit_index_t,
     2     yanzuo 
     2     yanzuo       /* output parameters: */
     2     yanzuo       IN/OUT  tm_params_apc      alp_tp_streams_t,
     2     yanzuo       IN/OUT  tm_params_apc_inw  alp_tp_streams_t
     2     yanzuo     ) -> error_t, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE hconns_operation__r (
     2     yanzuo       IN      mxu_addr     computer_t,
     2     yanzuo       IN      sp_mxu_addr  computer_t,
     2     yanzuo       IN      update_sp    bool,
     2     yanzuo       IN      req_mode     request_mode_t,
     2     yanzuo 
     2     yanzuo       IN      mphy_port    mphy_port_number_t,
     2     yanzuo       IN      vpi          vpi_t,
     2     yanzuo 
     2     yanzuo       IN/OUT  hconns       vc_half_conn_array_t,
     2     yanzuo       IN/OUT  tm_params    alp_tp_streams_t
     2     yanzuo     ) -> error_t, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE get_service__r (
     2     yanzuo       IN  service_code  dword,
     2     yanzuo       IN/OUT  server_pid  pid,
     2     yanzuo       IN/OUT  server_attr  attr_group_t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
   120    lifsong     PROCEDURE is_hc_created(
   120    lifsong       IN  comp_ptr     jii_comp_ptr__t
   120    lifsong     ) -> bool, FAR =>;
   120    lifsong 
   216      h10hu     PROCEDURE need_diff_priority_nrt_conns__r(
   120    lifsong       IN  unit_type         unit_type_t
   120    lifsong     ) -> bool, FAR =>;
   120    lifsong 
     2     yanzuo     PROCEDURE app_mxu_unit_check__r (
     2     yanzuo       IN in_alp_unit    jiifil__t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE eipu_unit_check__r (
     2     yanzuo       IN in_alp_unit    jiifil__t
     2     yanzuo     ) -> bool, FAR =>;
   359    lifsong     
   359    lifsong     PROCEDURE iw8s1_unit_check__r (
   359    lifsong       IN unit_type unit_type_t
   359    lifsong     ) -> bool, FAR =>;
   359    lifsong     
     2     yanzuo     PROCEDURE app_unit_check__r (
     2     yanzuo       IN in_alp_unit    jiifil__t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE alp1_unit__r (
     2     yanzuo       IN in_unit_type   unit_type_t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
   359    lifsong     PROCEDURE alp2_unit__r (
   359    lifsong       IN in_unit_type   unit_type_t
   359    lifsong     ) -> bool, FAR =>;    
   359    lifsong 
   359    lifsong     PROCEDURE ip_niu_unit__r (
   359    lifsong       IN in_unit_type   unit_type_t
   359    lifsong     ) -> bool, FAR =>;    
   461     z7zhou 
   461     z7zhou     PROCEDURE ss7u_unit_check__r(
   461     z7zhou       IN in_unit_type   unit_type_t
   461     z7zhou     ) -> bool, FAR =>;  
   561    lifsong 
   561    lifsong     PROCEDURE npu_unit_check__r(
   561    lifsong       IN in_unit_type   unit_type_t
   561    lifsong     ) -> bool, FAR =>;  
   359    lifsong     
     2     yanzuo     PROCEDURE classify__r (
     2     yanzuo       IN in_unit        jiifil__t,
   359    lifsong       IN in_proc_index byte,
     2     yanzuo       IN in_alp_unit    jiifil__t
     2     yanzuo     ) -> unit_class__t, FAR =>;
     2     yanzuo 
     2     yanzuo     PROCEDURE get_inq_service__r (
     2     yanzuo       IN  service_code      dword,
     2     yanzuo       IN  inquire_always    bool,
     2     yanzuo       IN/OUT  server_pid    pid,
     2     yanzuo       IN/OUT  server_attr   attr_group_t
     2     yanzuo     ) -> bool, FAR =>;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo     PROCEDURE curr_timestamp__r (
     2     yanzuo     ) -> jig_timestamp__t, NEAR =>;
     2     yanzuo 
     2     yanzuo     init_job_module__r (
     2     yanzuo     ) ->, NEAR =>;
     2     yanzuo 
     2     yanzuo     get_next_task__r (
     2     yanzuo       IN      cluster_idx  alp_cluster_idx__t,
     2     yanzuo       IN/OUT  task_data    task_data__t
     2     yanzuo     ) -> bool, NEAR =>;
     2     yanzuo 
    38    lifsong    atoi__r(
    38    lifsong       IN       num            character_ptr_t
    38    lifsong    )-> dword, NEAR =>;
    38    lifsong 
     2     yanzuo     hms_addr_to_phys_addr__r(
     2     yanzuo       IN hms_addr hms_address_t,
     2     yanzuo       IN/OUT phys_addr unit_address_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     hms_addr_from_phys_addr__r(
     2     yanzuo       IN unit_addr unit_address_t,
     2     yanzuo       IN/OUT hms_addr hms_address_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     unit_state_by_phys_addr__r(
     2     yanzuo       IN phys_addr phys_address_t,
     2     yanzuo       IN/OUT ustate unit_state_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     unit_type_and_index__r(
     2     yanzuo       IN phys_addr phys_address_t,
     2     yanzuo       IN/OUT uinfo unit_it_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     physical_address__r(
     2     yanzuo       IN unit_type unit_type_t,
     2     yanzuo       IN unit_index unit_index_t,
     2     yanzuo       IN/OUT uaddr phys_address_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
     2     yanzuo     get_parent_unit__r(
     2     yanzuo       IN utype1 unit_type_t,
     2     yanzuo       IN uindex1 unit_index_t,
     2     yanzuo       IN/OUT utype2 unit_type_t,
     2     yanzuo       IN/OUT uidx2 unit_index_t
     2     yanzuo     ) -> error_t, NEAR =>;
     2     yanzuo 
   581    jianyxu    get_unit_base_priority__r(
   581    jianyxu       IN jii_ptr     jiifil_ptr__t,
   581    jianyxu       IN comp_ptr    jii_comp_ptr__t
   581    jianyxu    ) -> word, NEAR =>;
   581    jianyxu    
     2     yanzuo    PROCEDURE unit_main_state__r(
     2     yanzuo       IN           in_target_unit        unit_it_t,
     2     yanzuo       IN/OUT       io_unit_main_state    unit_state_t
     2     yanzuo       ) -> error_t, FAR =>;
     2     yanzuo 
     2     yanzuo    PROCEDURE get_path_info__r(
     2     yanzuo       IN       in_unit        jiifil__t,
     2     yanzuo       IN       in_alp_unit    jiifil__t,
     2     yanzuo       IN       in_proc_idx    byte,
     2     yanzuo       IN/OUT   io_path_info   half_cconn_phy_info_t
     2     yanzuo       ) -> , FAR =>;
     2     yanzuo 
     2     yanzuo    PROCEDURE brt_xconn_remove_1__r(
     2     yanzuo       IN/OUT  io_brtpid          pid,
     2     yanzuo       IN      in_path_info       half_cconn_phy_info_t,
     2     yanzuo       IN      dta                conn_hand_data__t,
     2     yanzuo       IN      ep_idx             byte
     2     yanzuo       ) -> error_t, FAR =>;
     2     yanzuo 
     2     yanzuo    PROCEDURE brt_xconn_create__r(
     2     yanzuo       IN/OUT  io_brtpid           pid,
     2     yanzuo       IN      in_tpi              tpi_t,
     2     yanzuo       IN      in_path_info        half_cconn_phy_info_t,
     2     yanzuo       IN      in_one_vcc_res      jig_one_vcc_resources__t
     2     yanzuo    ) -> error_t, FAR =>;
     2     yanzuo 
  1177      myang    PROCEDURE brt_xconns_create__r(
  1177      myang       IN/OUT  io_brtpid           pid,
  1177      myang       IN/OUT   app_half_conns      app_half_conn_array_t,
  1177      myang       IN/OUT    io_vccs  jig_vccs_resources__t,      
  1177      myang       IN      in_path_info        half_cconn_phy_info_t,
  1177      myang       IN    in_start_offset    dword
  1177      myang    ) -> error_t, FAR =>;   
  1177      myang 
  1177      myang   PROCEDURE brt_xconns_remove__r(
  1177      myang      IN/OUT   io_brtpid      pid,
  1177      myang      IN/OUT     app_half_conns                  app_half_conn_array_t,
  1177      myang      IN/OUT    io_vccs  jig_vccs_resources__t,   
  1177      myang      IN 		in_path_info   half_cconn_phy_info_t,
  1177      myang      IN    in_start_offset    dword
  1177      myang    ) -> error_t, FAR =>;   
  1177      myang    
     2     yanzuo    PROCEDURE   get_brt_pid__r(
     2     yanzuo       IN       unit_type      unit_type_t,
     2     yanzuo       IN       unit_addr      phys_address_t,
     2     yanzuo       IN/OUT   l_brtpid       pid
     2     yanzuo    ) -> , FAR =>;
     4     yanzuo    
     4     yanzuo    PROCEDURE jicfil_map_connid__r(
     4     yanzuo       IN       rec_idx  dword
     4     yanzuo    ) -> dword, FAR =>;
   206    lifsong 
   206    lifsong    PROCEDURE is_redundant_ipniu__r(
   206    lifsong       IN/OUT unit_type      unit_type_t
   206    lifsong    )-> bool, FAR =>;
   206    lifsong 
   359    lifsong    PROCEDURE is_redundant_eipu_unit__r(
   206    lifsong       IN/OUT unit_type      unit_type_t
   206    lifsong    )-> bool, FAR =>;
     4     yanzuo    
   227    lifsong    PROCEDURE jii_setup_cluster_restart__r(
   227    lifsong       IN  clus_idx         alp_cluster_idx__t,
   227    lifsong       IN  include_act_sym  bool
   227    lifsong   ) -> , FAR =>;
   359    lifsong 
   571   lingshen 
   571   lingshen   PROCEDURE find_wo_alp_unit__r(
   571   lingshen       IN      jii_ptr      jiifil_ptr__t,
   571   lingshen       IN/OUT  alp_ptr      jiifil_ptr__t 
   571   lingshen   ) ->, FAR =>;
   571   lingshen 
   359    lifsong PROCEDURE set_vpi__r(
   359    lifsong 	IN/OUT io_unit jiifil__t,
   359    lifsong    	IN         proc_idx       byte
   359    lifsong ) -> , FAR =>;   	
   508    lifsong 
  1420       pshu PROCEDURE get_center_node_addr__r(
  1420       pshu 
  1420       pshu     IN      unit_addr   phys_address_t,
  1420       pshu     OUT  active_node    phys_address_t,
  1420       pshu     OUT  standby_node   phys_address_t) -> error_t, FAR =>;
  1420       pshu 
  1420       pshu 
   508    lifsong PROCEDURE is_center_node_unit__r(
   508    lifsong     IN unit_addr  phys_address_t
   508    lifsong ) -> bool, FAR =>;
   508    lifsong 
  1420       pshu PROCEDURE is_to_center_node__r(	
  1420       pshu     IN local_computer  phys_address_t,
  1420       pshu 	IN remot_computer  phys_address_t) ->bool,FAR=>;
  1420       pshu 
   559    lifsong PROCEDURE get_xcon_unit__r(
   559    lifsong 	IN			in_addr	phys_address_t,
   559    lifsong 	IN            manager_pid pid,
   559    lifsong 	IN/OUT	is_app		bool,
   559    lifsong 	IN/OUT	target_unit		jiifil__t,
   559    lifsong 	IN/OUT	alp_unit		jiifil__t
   559    lifsong )-> error_t, FAR =>;
   559    lifsong 
   561    lifsong PROCEDURE  is_unit_in_ex_state__r(
   561    lifsong    IN      phys_addr    phys_address_t
   561    lifsong )-> bool, FAR =>;
   561    lifsong 
  1367       pshu PROCEDURE is_unit_ready_for_nrt_create__r(
  1367       pshu    IN      phys_addr    phys_address_t
  1367       pshu )-> bool, FAR =>;
  1367       pshu 
   733    lifsong PROCEDURE is_dsp_xconn_id__r(
   733    lifsong    IN int_xconn_id  dword
   733    lifsong )-> bool, FAR =>;
   733    lifsong 
   617     qinggu PROCEDURE need_create_dsp_conns__r(
   617     qinggu     IN        phys_addr          computer_t
   617     qinggu )-> bool, FAR=>;
   617     qinggu 
   617     qinggu PROCEDURE set_tomprb_pid__r(
   617     qinggu )->, FAR=>;
   617     qinggu 
  1172   weigchen 
  1172   weigchen PROCEDURE inquire_app_mxu_1g6a_unit__r(
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t
  1172   weigchen )->bool, FAR=>;
  1172   weigchen 
  1217       j2he PROCEDURE inquire_app_mxu_unit__r(
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t
  1217       j2he )->bool, FAR=>;
  1217       j2he 
  1185       j2he PROCEDURE if_bigvcc_bigdma_permit__r(
  1217       j2he    IN    unit_type     unit_type_t,
  1217       j2he    IN	   unit_index	unit_index_t
  1185       j2he )->bool, FAR=>;
  1172   weigchen 
   758     yanzuo PROCEDURE set_rx_bigvcc__r(
   754     yanzuo )->, FAR=>;
   754     yanzuo 
  1038      myang PROCEDURE get_rx_bigvcc_param__r(
   754     yanzuo     IN/OUT    io_rx_bigvcc_param    rx_bigvcc_param__t
   754     yanzuo )->, FAR=>;
   754     yanzuo 
   758     yanzuo PROCEDURE convert_dsp_vci__r(
   758     yanzuo     IN      own_unit     unit_it_t,
   758     yanzuo     IN      vci          vci_t
   758     yanzuo ) -> vci_t, FAR =>;
   759     yanzuo 
   759     yanzuo PROCEDURE rx_bigvcc_enabled__r(
   759     yanzuo )->bool, FAR=>;
   759     yanzuo 
  1120   weigchen PROCEDURE register_type_of_app_mxu__r(
  1120   weigchen )->, FAR=>;
  1120   weigchen 
  1038      myang PROCEDURE select_vci__r(
  1038      myang     IN      comp             phys_address_t,
  1038      myang     IN      own_unit         unit_it_t,
  1038      myang     IN      target_unit      unit_it_t,       
  1038      myang     IN/OUT  next_vcis        next_vci_table__t    
  1038      myang )->vci_t,FAR=>;
  1038      myang 
  1038      myang PROCEDURE update_vcc_bitmap__r(
  1038      myang     IN  target_comp  phys_address_t,
  1038      myang     IN  vci          vci_t,
  1038      myang     IN  new_value    byte
  1038      myang )->,FAR=>;
  1038      myang 
  1115   lishzhan 
  1038      myang PROCEDURE is_piu_type_cdsp_dh__r(
  1038      myang     IN       p_hms       hms_address_t
  1038      myang )->bool,FAR=>;
  1038      myang 
  1087   huantang PROCEDURE dmpg_seou_notify_brt__r(
  1087   huantang 	IN         unit_type      unit_type_t,
  1087   huantang     IN         unit_index     unit_index_t,
  1087   huantang     IN         unit_state     unit_state_t
  1087   huantang )->, FAR=>;
  1087   huantang 
  1087   huantang PROCEDURE notify_brt__r(
  1087   huantang     IN VIEWED  unit         jiifil__t,
  1087   huantang     IN         proc_idx     byte,
  1087   huantang     IN VIEWED  alp_unit     jiifil__t
  1087   huantang )->, FAR=>;
  1087   huantang 
  1104   huantang 
  1104   huantang PROCEDURE jig_debug_log__r(
  1104   huantang     IN level dword ,
  1104   huantang     IN btime bool ,
  1104   huantang     IN fmt characterpointer,...)->,FAR <=;
  1104   huantang 
  1104   huantang PROCEDURE jig_debug_init__r(
  1137   huantang 	IN  omu_addr dword )->,FAR=>;
  1137   huantang 	
  1104   huantang PROCEDURE jig_debug_set_test_level__r(
  1137   huantang     IN level dword  )->,FAR=>;
  1104   huantang 
  1137   huantang PROCEDURE log_file_flush__r()->,FAR=>;
  1104   huantang 
  1327       pshu PROCEDURE jig_debug_set_pid__r(
  1327       pshu     IN in_pid process_id_t )->,FAR=>;
  1327       pshu 
  1213   huantang PROCEDURE is_cdsp_dh__r(
  1213   huantang 	IN      unit_type  unit_type_t,
  1213   huantang 	IN      unit_index unit_index_t
  1213   huantang )->bool, FAR =>;
  1104   huantang 
  1420       pshu PROCEDURE init_proxy_item() ->, FAR =>;
  1420       pshu 
  1420       pshu PROCEDURE add_proxy_item(
  1420       pshu 	IN dest_pid   pid,
  1420       pshu 	IN dest_hms   hms_address_t
  1420       pshu )->,FAR =>;
  1420       pshu 
  1420       pshu 
  1420       pshu 
  1420       pshu PROCEDURE pull_proxy_item(
  1420       pshu 	IN   hms        hms_address_t,
  1420       pshu 	OUT  dest_pid    pid
  1420       pshu ) ->bool,FAR =>;
  1420       pshu 
  1437       pshu PROCEDURE is_ne_rnc__r(
  1437       pshu ) ->bool,FAR =>;
  1420       pshu 
  1465       pshu PROCEDURE get_ne_type__r(
  1465       pshu )-> prm_t, FAR =>;
  1465       pshu 
  1462       hhou PROCEDURE if_rnc_support_this_piu__r(
  1462       hhou 	IN   p_hms      hms_address_t
  1462       hhou ) ->bool,FAR =>;
  1420       pshu 
  1465       pshu PROCEDURE get_ne_cap_upgrade__r(
  1465       pshu ) -> prm_t, FAR =>;
  1465       pshu 
  1465       pshu PROCEDURE get_piu_data_by_fu__r(
  1465       pshu    IN      unit_type     unit_type_t,
  1465       pshu    IN      unit_index    unit_index_t,
  1465       pshu    IN/OUT  piu_data      piu_data_lib_a_t
  1465       pshu ) -> bool,FAR =>;
  1465       pshu 
  1465       pshu 
     2     yanzuo ENDLIBRARY sync_lib;
  1104   huantang /*
  1104   huantang *
  1104   huantang *
  1104   huantang *  Description:
  1104   huantang *
  1104   huantang *  COPYRIGHT (c) 2010 NOKIA NETWORKS 
  1104   huantang *************************************************************************/
  1104   huantang 
  1104   huantang #include <dxsccctr.h> 
  1104   huantang #include "jiggergx.cin"
  1104   huantang #include <string.h>
  1104   huantang #include <stdarg.h>
  1104   huantang #include <stdio.h>
  1104   huantang #include "jigposix.h"
  1104   huantang #include "jigdbggx.h"
  1104   huantang #include "dmxpl0gx.cpd"
  1309       pshu #include "jigmasgx.cdt"
  1137   huantang #include "jigdatgx.cpd"
  1309       pshu #include "jigmixgx.cpd"
  1309       pshu #include "jigmsggx.cdt"
  1104   huantang 
  1125   huantang 
  1174    jinncao 
  1104   huantang /**********************Global variable****************************/
  1104   huantang FILE*   g_file_ptr;
  1321       pshu char    g_file_cache[FILE_CATCH_SIZE__C];
  1104   huantang dword   g_file_cache_index;
  1104   huantang bool    g_log_initialized;
  1104   huantang dword   g_omu_addr;
  1104   huantang file_header__t g_file_header;
  1327       pshu process_id_t g_my_pid;
  1104   huantang 
  1327       pshu 
  1104   huantang /****************************************************************/
  1104   huantang void jig_debug_update_file_header__r();
  1104   huantang 
  1309       pshu 
  1309       pshu int is_log_file__r(){
  1309       pshu 	file_header__t temp;
  1309       pshu 
  1309       pshu 	if(posix_read_file__r(g_file_ptr,(char*)&temp,sizeof(temp))==SUCCESS_EC){
  1319       pshu 		if ( temp.magic == LOG_FILE_MAGIC && 
  1321       pshu 			 temp.version == LOG_FILE_VERSION__C &&
  1319       pshu 			 temp.offset>=sizeof(file_header__t) &&
  1321       pshu 			 temp.offset<=FILE_MAX_SIZE__C)
  1309       pshu 		{
  1309       pshu 			return 1;
  1309       pshu 		}
  1309       pshu 	}
  1309       pshu 
  1309       pshu 	return 0;
  1309       pshu }
  1309       pshu 
  1309       pshu error_t jig_debug_create_log_file__r()
  1104   huantang {
  1309       pshu 
  1309       pshu 	char filename[40];
  1309       pshu 	sprintf(filename,LOG_FILE_NAME_FMT,(int)g_omu_addr);
  1309       pshu 
  1309       pshu     g_file_ptr = posix_open_file__r(filename,"wb+");
  1309       pshu 
  1309       pshu     if ( g_file_ptr != NULL )
  1309       pshu     {
  1309       pshu     	g_file_header.offset = sizeof(file_header__t);
  1309       pshu     	return posix_write_file__r(g_file_ptr,&g_file_header,sizeof(g_file_header));
  1309       pshu     }
  1322       pshu 	return  UNSUCCESSFUL_EC;
  1309       pshu }
  1309       pshu 
  1317      tinyu void jigmix_update_file_mask__r(dword mask)
  1317      tinyu {
  1317      tinyu 
  1322       pshu 	int ret;
  1317      tinyu 	g_file_header.mask = mask;
  1317      tinyu 
  1322       pshu 	posix_seek_file__r(g_file_ptr,0,SEEK_SET);
  1322       pshu 	ret = posix_write_file__r(g_file_ptr,&g_file_header,sizeof(g_file_header));
  1322       pshu 	if(ret!=SUCCESS_EC){
  1322       pshu 		posix_close_file__r(g_file_ptr);
  1317      tinyu 		jig_debug_create_log_file__r();
  1322       pshu 		posix_seek_file__r(g_file_ptr,0,SEEK_SET);
  1322       pshu 		posix_write_file__r(g_file_ptr,&g_file_header,sizeof(g_file_header));		
  1317      tinyu 	}
  1317      tinyu }
  1317      tinyu 
  1309       pshu void jigmix_write_to_file__r(logfile_content_msg__t* log)
  1309       pshu {
  1322       pshu 	int ret;
  1309       pshu 	char filename[40];
  1321       pshu 	if ( (g_file_header.offset  + log->length)> FILE_MAX_SIZE__C )
  1104   huantang 	{
  1309       pshu 		g_file_header.offset = sizeof(g_file_header);
  1104   huantang 	}
  1309       pshu 
  1309       pshu 	posix_seek_file__r(g_file_ptr,g_file_header.offset,SEEK_SET);
  1322       pshu 	ret = posix_write_file__r(g_file_ptr, &(log->content), log->length);
  1322       pshu 	if(ret!=SUCCESS_EC){
  1322       pshu 		posix_close_file__r(g_file_ptr);
  1322       pshu 		jig_debug_create_log_file__r();
  1322       pshu 		posix_seek_file__r(g_file_ptr,g_file_header.offset,SEEK_SET);
  1322       pshu 		ret = posix_write_file__r(g_file_ptr, &(log->content), log->length);
  1322       pshu 		if(ret!=SUCCESS_EC){
  1322       pshu 			return;
  1322       pshu 		}
  1322       pshu 	}
  1322       pshu 	g_file_header.offset += log->length;
  1309       pshu 
  1309       pshu 	posix_seek_file__r(g_file_ptr,0,SEEK_SET);
  1322       pshu 	ret = posix_write_file__r(g_file_ptr,&g_file_header,sizeof(g_file_header));
  1322       pshu 	if(ret != SUCCESS_EC){
  1322       pshu 		posix_close_file__r(g_file_ptr);
  1322       pshu 		jig_debug_create_log_file__r();
  1322       pshu 		posix_seek_file__r(g_file_ptr,0,SEEK_SET);
  1322       pshu 		posix_write_file__r(g_file_ptr,&g_file_header,sizeof(g_file_header));
  1322       pshu 	}	
  1104   huantang }
  1309       pshu 
  1309       pshu void write_to_file__r(){
  1309       pshu 
  1309       pshu 	    jig_update_logfile_content__s log_msg;
  1327       pshu         
  1309       pshu 	    log_msg.msg_header.length = sizeof(jig_update_logfile_content__s);
  1309       pshu 	    log_msg.msg_header.computer = COMPUTER_T_REL_OWN_UNIT_C;
  1309       pshu 	    log_msg.msg_header.family = JIGGER_P;
  1327       pshu 	    log_msg.msg_header.process_id = g_my_pid;
  1309       pshu 	    log_msg.msg_header.focus = FOCUS_T_ZERO_C;
  1309       pshu 	    log_msg.msg_header.attributes = MSG_ATTR_T_NORMAL_PRIORITY_C;
  1309       pshu 	    log_msg.msg_header.group = MESSAGE_GROUP_T_ZERO_C;
  1309       pshu 	    log_msg.msg_header.number = JIG_UPDATE_LOGFILE_CONTENT__SN;
  1309       pshu 
  1309       pshu 	    log_msg.logfile_content.length = g_file_cache_index;
  1309       pshu 	    memcpy(&log_msg.logfile_content.content, g_file_cache, g_file_cache_index);
  1309       pshu 	    send(&log_msg);
  1309       pshu 	    g_file_cache_index = 0;
  1309       pshu 
  1309       pshu }
  1104   huantang int write_to_cache__r(char *buf,int len)
  1104   huantang {
  1174    jinncao 
  1321       pshu 	if ( (g_file_cache_index + len ) > FILE_CATCH_SIZE__C )
  1104   huantang 	{
  1104   huantang 		write_to_file__r();
  1104   huantang 	}
  1104   huantang 	memcpy(&g_file_cache[g_file_cache_index],buf,len);
  1104   huantang 	g_file_cache_index += len;
  1104   huantang 	return len;
  1174    jinncao 
  1104   huantang }
  1174    jinncao 
  1137   huantang void _far_ log_file_flush__r()
  1104   huantang {
  1155   huantang 	posix_sem_wait__r();
  1104   huantang 	if ( g_file_cache_index != 0 ) 
  1104   huantang 	{
  1104   huantang 		write_to_file__r();
  1104   huantang 	}
  1155   huantang 	posix_sem_post__r();
  1174    jinncao 
  1104   huantang }
  1104   huantang 	
  1104   huantang 
  1137   huantang void _far_ jig_debug_log__r(dword mask,bool btime, characterpointer fmt,...)
  1104   huantang {
  1174    jinncao 
  1321       pshu 	 static char buf[MAX_BUF_LEN__C];
  1104   huantang 	 static char stime[50];
  1104   huantang 	 va_list     ap;
  1104   huantang 	 int         len;
  1104   huantang 	 time_of_day_t time_of_day_rw1;
  1104   huantang 	 date_t        date_rw1;
  1104   huantang 	 if ( (!g_log_initialized) || !(mask & g_file_header.mask)) 
  1104   huantang  	 {
  1104   huantang  	 	 return;
  1104   huantang  	 }
  1104   huantang 	 
  1104   huantang 	 posix_sem_wait__r();
  1104   huantang 	 if ( btime )
  1104   huantang   	 {
  1104   huantang   	 	  time_of_day_rw1 = time_of_day_rw;
  1104   huantang 	      date_rw1        = date_rw;
  1154   huantang   	      len = sprintf(stime,"%04X-%02X-%02X %02X:%02X:%02X.%02X :",(unsigned int)(date_rw1>>16),
  1154   huantang 		  	(unsigned int)((date_rw1>>8)&0xFF),  (unsigned int)((date_rw1)&0xFF),
  1154   huantang   	        (unsigned int)(time_of_day_rw1>>24), (unsigned int)((time_of_day_rw1>>16)&0XFF),
  1154   huantang   	        (unsigned int)((time_of_day_rw1>>8)&0XFF), (unsigned int)((time_of_day_rw1)&0XFF));
  1104   huantang   		   write_to_cache__r(stime,len); 
  1104   huantang   	 }
  1104   huantang 	 va_start(ap,fmt);
  1104   huantang 	 len = vsprintf(buf,fmt,ap);
  1104   huantang 	 va_end(ap);
  1104   huantang 	 write_to_cache__r(buf,len);
  1104   huantang 	 posix_sem_post__r();
  1104   huantang 
  1104   huantang }
  1104   huantang 
  1174    jinncao 
  1174    jinncao 
  1153   huantang void jig_debug_init_file_header_variable__r()
  1104   huantang {
  1174    jinncao 
  1309       pshu 	g_file_header.offset  = sizeof(file_header__t);
  1222      tinyu 	g_file_header.mask       = JIG_DBGLOG_MSK__T_DEFAULT__C;
  1321       pshu 	g_file_header.version    = LOG_FILE_VERSION__C;
  1104   huantang 	g_file_header.magic      = LOG_FILE_MAGIC;
  1104   huantang 	strcpy(g_file_header.pad,"   ");
  1104   huantang 	g_file_header.pad[3] = '\n';
  1174    jinncao 
  1153   huantang }
  1153   huantang 
  1309       pshu 
  1309       pshu 
  1309       pshu void jig_debug_init_file__r()
  1153   huantang {
  1174    jinncao 
  1153   huantang 	char filename[40];
  1153   huantang 
  1153   huantang 	jig_debug_init_file_header_variable__r();
  1154   huantang 	sprintf(filename,LOG_FILE_NAME_FMT,(int)g_omu_addr);
  1322       pshu 	g_file_ptr = posix_open_file__r(filename,"rb+");
  1309       pshu 	if(g_file_ptr && is_log_file__r()){
  1309       pshu 		posix_seek_file__r(g_file_ptr,0,SEEK_SET);
  1309       pshu 		posix_read_file__r(g_file_ptr,&g_file_header,sizeof(file_header__t));
  1309       pshu 	}else{
  1309       pshu 		jig_debug_create_log_file__r();
  1104   huantang 	}
  1104   huantang }
  1309       pshu 
  1137   huantang void _far_ jig_debug_init__r(dword omu_addr)
  1104   huantang {
  1174    jinncao 
  1104   huantang 	 error_t  state;
  1161   huantang 	 
  1104   huantang 	 g_log_initialized  = F;
  1104   huantang 	 g_file_ptr         = NULL;
  1104   huantang 	 g_omu_addr         = omu_addr;
  1104   huantang      g_file_cache_index = 0 ;
  1161   huantang 	 memset(g_file_cache,0,sizeof(g_file_cache));
  1104   huantang 	 
  1104   huantang 	 state = posix_sem_init__r();
  1517       pshu      if ( state )
  1104   huantang   	 {
  1104   huantang   	 	dxsyslog_r( LOG_TYPE_T_TEXT_I_C,"JIGDBG: JIGGER debug semaphore initialize failed,status=%d\n",state);
  1104   huantang 		return;
  1104   huantang  	 }
  1309       pshu 	 jig_debug_init_file__r();
  1104   huantang 	 g_log_initialized = T;
  1309       pshu }
  1174    jinncao 
  1327       pshu void _far_ jig_debug_set_pid__r(process_id_t in_pid )
  1327       pshu {
  1327       pshu     g_my_pid = in_pid ;      
  1327       pshu }
  1174    jinncao 
  1327       pshu 
  1104   huantang #ifndef JIG_DBG_H
  1104   huantang #define JIG_DBG_H
  1104   huantang 
  1104   huantang #ifndef TNSDL_UNIT_TEST
  1153   huantang #define LOG_FILE_NAME_FMT    "/RUNNING/LFILES/JIGDBG_%d.TXT"
  1104   huantang #else
  1104   huantang #define LOG_FILE_NAME_FMT    "JIGDBG_%d.TXT"
  1104   huantang #endif
  1104   huantang 
  1327       pshu 
  1153   huantang void _far_ jig_debug_set_test_level__r(dword mask );
  1153   huantang void _far_ jig_debug_log__r(dword mask,bool btime, characterpointer fmt,...);
  1153   huantang void _far_ log_file_flush__r();
  1153   huantang void _far_ jig_debug_init__r(dword omu_addr);
  1104   huantang 
  1104   huantang 
  1153   huantang #endif
  1104   huantang 
  1104   huantang 
    38    lifsong /* USED DECLARATIONS *********************************************************/
     2     yanzuo 
   645    lifsong /*$Id$ */
     2     yanzuo 
    38    lifsong /* STANDARD LITERALS *********************************************************/
     2     yanzuo 
    38    lifsong #include "dxsstdef.h"
     2     yanzuo 
  1104   huantang /* DATA TYPE  ****************************************************************/
  1104   huantang #include "dty015fc.cdt"
  1104   huantang 
    38    lifsong /* RUNTIME ENVIRONMENT *******************************************************/
     2     yanzuo 
    38    lifsong #include "jiggergx.ccc"
  1104   huantang #include "eiolibgx.cpd"
  1104   huantang 
     2     yanzuo /******************** TNSDL -G SWITCH INCLUDE FILES **************************
     2     yanzuo *
     2     yanzuo *       MODULE NAME: jigger.h
     2     yanzuo *
     2     yanzuo ******************************************************************************
     2     yanzuo *
   645    lifsong * ID:         '$Id$'
     2     yanzuo * Author:     Janne J. Aaltonen
     2     yanzuo *             Jani Koivula
     2     yanzuo *             Jouko Virtanen
     2     yanzuo *
     2     yanzuo * Revised by:
     2     yanzuo *
     2     yanzuo * COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
     2     yanzuo ******************************************************************************
     2     yanzuo This file must be specified for the TNSDL translator with the '-g jiggergx.h'
     2     yanzuo option.
     2     yanzuo */
     2     yanzuo 
     2     yanzuo /* MACRO DEFINITIONS IN THIS MODULE *****************************************/
     2     yanzuo /*
     2     yanzuo  * Only for the use of TNSDL translator.
     2     yanzuo  *
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo #define count_ext_adler32__m(in_buf, len, chk_sum) {\
     2     yanzuo         byte* buf = (byte*)(in_buf);\
     2     yanzuo         dword s1 = 1, s2 = 0, n;\
     2     yanzuo         for (n = 0; n < (len); n++) {\
     2     yanzuo           s1 = (s1 + buf[n]) % 65521;\
     2     yanzuo           s2 = (s2 + s1)     % 65521;\
     2     yanzuo         }\
     2     yanzuo         chk_sum = (byte)((s1&0xff) + ((s1>>8)&0xff) + (s2&0xff) + ((s2>>8)&0xff));\
     2     yanzuo         /*if(own_family_id == 0x3cb){\
     2     yanzuo             write_to_log(0x8001,(log_write_item_t)(&chk_sum),1,"UXMANA:ADLER CHK_SUM");}\
     2     yanzuo         else{\
     2     yanzuo             write_to_log(0x8001,(log_write_item_t)(&chk_sum),1,"JIGGER:ADLER CHK_SUM");}*/}
     2     yanzuo 
     2     yanzuo /* #define number_to_hex_name_r(number,string) ultoa(number,(char *)string,16) */
     2     yanzuo 
     2     yanzuo #define new_line__r(string) strcat((char *)string,"\r\n")
     2     yanzuo 
     2     yanzuo 
   641    lifsong ! $Id$
     2     yanzuo ! JIGGERGX provided services
     2     yanzuo 
     2     yanzuo .so i_sed:sed00b0f.cls ! int_xconn_as
     2     yanzuo .so i_sed:sed0149b.cls ! res_int_if_param_as
     2     yanzuo .so i_sed:sed007a1.cls ! prb_startup_as
     2     yanzuo .so i_sed:sed00C4B.cls ! unit_config_change_as
     2     yanzuo .so i_sed:sed00BFF.cls ! load_int_resource_as
     2     yanzuo .so i_sed:sed014c6.cls ! alp_init_tm_hw_params_as
     2     yanzuo .so i_sed:sed014a8.cls ! inquire_vpi_as
     2     yanzuo 
   641    lifsong ! $Id$
     2     yanzuo ! JIGGERGX used services
     2     yanzuo 
     2     yanzuo .so i_sed:sed00c01.cls     ! initialize_interface_as
     2     yanzuo .so i_sed:sed00aa3.cls     ! utopia_address_inquiry_as
     2     yanzuo .so i_sed:sed00c02.cls     ! create_pre_config_half_xconn_as
     2     yanzuo .so i_sed:sed0072A.cls     ! atm_interface_notif_as
     2     yanzuo .so i_sed:sed00b5b.cls     ! re_process_state_command_ss
     2     yanzuo .so i_sed:sed0121e.cls     ! atm_interf_create_as
     2     yanzuo .so i_sed:sed01221.cls     ! atm_vpltp_create_as
     2     yanzuo .so i_sed:sed01224.cls     ! atm_vcltp_create_as
     2     yanzuo .so i_sed:sed01226.cls     ! atm_xconn_create_as
     2     yanzuo .so i_sed:sed01222.cls     ! atm_vpltp_release_as
     2     yanzuo .so i_sed:sed01225.cls     ! atm_vcltp_release_as
     2     yanzuo .so i_sed:sed01228.cls     ! atm_xconn_release_as
     2     yanzuo .so i_sed:sed0121f.cls     ! atm_interf_release_as
     2     yanzuo .so i_sed:sed01227.cls     ! atm_xconn_modify_as
     2     yanzuo .so i_sed:sed014a0.cls     ! get_interface_param_as
     2     yanzuo .so i_sed:sed0148d.cls     ! central_cac_apc_mapping_as
     2     yanzuo .so i_sed:sed0149f.cls     ! init_if_and_vpctp_as
     2     yanzuo .so i_sed:sed0149c.cls     ! get_sar_param_as
     2     yanzuo .so i_sed:sed0149d.cls     ! get_apc_param_as
     2     yanzuo .so i_sed:sed0149e.cls     ! init_apc_phase1_as
     2     yanzuo .so i_sed:sed0148e.cls     ! central_cac_tp_to_tmp_apc_as
     2     yanzuo .so i_sed:sed01534.cls     ! atm_tpi_rel_inquiry_as
     2     yanzuo 
     2     yanzuo .so i_sed:sed00a8d.cls     ! re_state_change_executed_ss
     2     yanzuo .so i_sed:sed011db.cls     ! re_unit_restart_imminent_ss
     2     yanzuo .so i_sed:sed00a90.cls     ! re_switchover_prepare_ss
     2     yanzuo .so i_sed:sed014c8.cls     ! alp_config_tp_streams_as
     2     yanzuo .so i_sed:sed01b21.cls     ! fig_conn_switchover_as
     2     yanzuo 
     2     yanzuo s_lib:invokegx.spd      ! Name service library
     2     yanzuo s_lib:dmxpl3gx.spd      ! General services etc. sending/receiving messages
     2     yanzuo s_lib:dmxpl0gx.spd      ! Not-so-general DMXRTE services (for msg_state_r)
     2     yanzuo s_lib:clugengx.spd      ! General services etc. log writing
     2     yanzuo s_lib:libgengx.spd      ! General routines etc. hand process handling
     2     yanzuo s_lib:libmscgx.spd      ! LIBGEN MISCELLANEOUS ROUTINES
     2     yanzuo s_lib:hmilibgx.spd      ! HMS interface services
     2     yanzuo s_lib:funlibgx.spd      ! Functional Unit services
     2     yanzuo s_lib:hwilibgx.spd      ! The Hardware Configuration Inquiry Library
     2     yanzuo s_lib:fislibgx.spd      ! Memory file services
     2     yanzuo s_lib:xmllibgx.spd      ! Routines for handling XML files
     2     yanzuo s_lib:riolibgx.spd      ! Recovery Event Announcing Service Subscription
     2     yanzuo s_lib:toelibgx.spd      ! Topology library (PUFFIL handling)
     2     yanzuo s_lib:prslibgx.spd      ! Used to order extra startup_s message
     2     yanzuo s_lib:catlibgx.spd      ! For the logwriting file
     2     yanzuo s_lib:seklibgx.spd      ! For the logwriting file
     2     yanzuo s_dty:funttrgx.sdt      ! process logical addressing formats
     2     yanzuo s_lib:syklib1x.spd      ! Start-up log writing services
    38    lifsong s_lib:xmllibgx.spd      ! character_ptr_t
    98    lifsong s_lib:toecplgx.spd      ! center_nodes_r
  1119       j2he s_lib:pmtlibgx.spd      ! read_parameter
   633    lifsong ! $Id$
     2     yanzuo ! JIGGERGX service independent environment definitions
     2     yanzuo 
  1054    lifsong !######## Internal and not categorized
  1054    lifsong s_dat:dty01681.sdt ! pidptr_t
  1054    lifsong s_dat:dty0371d.sdt ! tpi_t
  1054    lifsong s_dat:dty0276b.sdt ! vpc_max_t
  1054    lifsong s_dat:dty0276c.sdt ! vcc_max_t
  1054    lifsong s_dat:dty03784.sdt ! local_index_t
  1054    lifsong s_dat:dty04293.sdt ! vpltp_usages_t
  1054    lifsong s_dat:dty01c2e.sdt ! string_t
  1054    lifsong s_dat:dty030c0.sdt ! msg_state_t
  1054    lifsong 
  1119       j2he s_dat:dty013ee.sdt ! nw_elem_t
  1119       j2he s_lib:apparagx.spd ! nw_element
  1119       j2he 
  1054    lifsong s_ald:ald01024.sed ! alarm     hand_process_error_a
  1054    lifsong 
     2     yanzuo s_med:med08515.sdt ! in process_frozen_by_dmxrte_s
     2     yanzuo s_med:med07816.sdt ! family internal    hand_supervision_msg_s
     2     yanzuo s_med:med07817.sdt ! family internal    hand_supervision_ack_msg_s
     2     yanzuo s_med:med02070.sdt ! family internal    hand_stopped_s
     2     yanzuo s_med:med06034.sdt ! in         c_test_msg_c
  1054    lifsong 
  1054    lifsong !########AUU related
  1054    lifsong s_med:med0bfbb.sdt ! int_xconns_removed_notif_s ! notify TOM
  1054    lifsong 
  1054    lifsong !########APC related
  1054    lifsong s_dat:dty05bfd.sdt ! apc_eg1_t
  1054    lifsong s_ald:ald03099.sed ! alarm     predetermined_xconn_config_a
  1054    lifsong 
  1054    lifsong 
  1054    lifsong s_med:med0a46f.sdt ! res_pq_mask_int_if_param_ack_s
     2     yanzuo s_med:med0c53c.sdt ! create_predet_half_xconn_req_s
     2     yanzuo s_med:med0c53b.sdt ! create_predet_half_xconn_ack_s
     2     yanzuo s_med:med0c4e4.sdt ! alp_ready_for_phase2_init_s
     2     yanzuo s_med:med0bb93.sdt ! init_apc__eg1_req_s
     2     yanzuo s_med:med0c4f1.sdt ! init_apc_eg1_req_s
     2     yanzuo s_med:med0f9c2.sdt ! interface_setup_s
     2     yanzuo s_med:med0f9c1.sdt ! interface_setup_ack_s
     2     yanzuo s_med:med0c37b.sdt ! alp_init_sp_ph1_s
     2     yanzuo s_med:med0c37c.sdt ! alp_init_sp_ph1_ack_s
     2     yanzuo s_med:med0c4ce.sdt ! alp_map_virtual_phy_s
     2     yanzuo s_med:med0c4cf.sdt ! alp_map_virtual_phy_ack_s
     2     yanzuo s_med:med0debf.sdt ! vpctp_setup_s
     2     yanzuo s_med:med0debe.sdt ! vpctp_setup_ack_s
     2     yanzuo s_med:med0c3ea.sdt ! get_cac_apc_port_param_req_s
     2     yanzuo s_med:med0c3e9.sdt ! get_cac_apc_port_param_ack_s
     2     yanzuo s_med:med0b8cb.sdt ! alp_config_tps_streams_s
     2     yanzuo s_med:med0b8cc.sdt ! alp_config_tps_streams_ack_s
     2     yanzuo 
     2     yanzuo 
  1054    lifsong !##########FIG related
  1054    lifsong s_dat:dty076da.sdt ! sfu_port_info_t
  1054    lifsong s_dat:dty041ad.sdt ! ux_hw_block_type_t
   754     yanzuo 
     2     yanzuo s_ald:ald01227.sed ! alarm     tributary_unit_restart_a
     2     yanzuo s_ald:ald01281.sed ! alarm     unit_configuration_failure_a
   571   lingshen s_ald:ald01277.sed ! alarm     piu_connect_failure_a
     2     yanzuo 
     2     yanzuo s_med:med0ab50.sdt ! get_amd_fpga_param_req_s
     2     yanzuo s_med:med0ab51.sdt ! get_amd_fpga_param_ack_s
     2     yanzuo s_med:med0ab54.sdt ! init_amd_fpga_param_req_s
     2     yanzuo s_med:med0ab55.sdt ! init_amd_fpga_param_ack_s
     2     yanzuo s_med:med0ab56.sdt ! res_pqiii_int_if_param_req_s
     2     yanzuo s_med:med0ab57.sdt ! res_pqiii_int_if_param_ack_s
  1054    lifsong s_med:med0de71.sdt ! fig_service_req_msg_s
  1054    lifsong s_med:med0b9c4.sdt ! fig_init_sd_ports_req_s
  1054    lifsong s_med:med0b9b7.sdt ! sd_ports_configured_s
  1054    lifsong s_med:med0b9c4.sdt ! fig_init_sd_ports_req_s
  1054    lifsong s_med:med0b9b8.sdt ! ux_ports_configured_s
  1054    lifsong s_med:med0b80f.sdt ! fig_sp_unit_updated_s
  1054    lifsong s_med:med0b80e.sdt ! fig_sp_unit_updated_ack_s
     2     yanzuo s_med:med0ab58.sdt ! spi3_address_inquiry_ack_s
     2     yanzuo s_med:med0ab59.sdt ! spi3_address_inquiry_req_s
     2     yanzuo s_med:med0ab5c.sdt ! int_conn_swo_notif_ack_s
     2     yanzuo s_med:med0ab5d.sdt ! int_conn_swo_notif_s
     2     yanzuo s_med:med0ab5a.sdt ! app_pre_half_xconn_ack_s
     2     yanzuo s_med:med0ab5b.sdt ! app_pre_half_xconn_req_s
     2     yanzuo 
  1054    lifsong 
  1054    lifsong !#######RX BigVCC
  1054    lifsong s_med:med0098C.sdt ! get_rx_bigvcc_param_req_s
  1054    lifsong s_med:med0098B.sdt ! get_rx_bigvcc_param_ack_s
  1054    lifsong 
  1054    lifsong !#########BRT related
  1054    lifsong ! BRT messages
  1054    lifsong s_med:med0b8b1.sdt ! alp_ready_for_reporting_s
  1054    lifsong s_med:med0b8b0.sdt ! alp_ready_for_reporting_ack_s
  1054    lifsong 
     2     yanzuo s_med:med0cca7.sdt  ! atm_interf_phy_create_req_s
     2     yanzuo s_med:med0cca6.sdt  ! atm_interf_phy_create_ack_s
  1054    lifsong s_med:med0cc9d.sdt  ! atm_interf_phy_release_req_s
  1054    lifsong s_med:med0cc9c.sdt  ! atm_interf_phy_release_ack_s
  1054    lifsong 
     2     yanzuo s_med:med0cc97.sdt  ! atm_vpltp_phy_create_req_s
     2     yanzuo s_med:med0cc96.sdt  ! atm_vpltp_phy_create_ack_s
  1054    lifsong s_med:med0cc91.sdt  ! atm_vpltp_phy_release_req_s
  1054    lifsong s_med:med0cc90.sdt  ! atm_vpltp_phy_release_ack_s
  1054    lifsong 
     2     yanzuo s_med:med0a93f.sdt  ! int_half_xc_create_req_s
     2     yanzuo s_med:med0a93e.sdt  ! int_half_xc_create_ack_s
     2     yanzuo s_med:med0a93d.sdt  ! int_half_xc_release_req_s
     2     yanzuo s_med:med0a93c.sdt  ! int_half_xc_release_ack_s
   115    lifsong 
  1054    lifsong ! RS3 only
  1054    lifsong s_med:med098a0.sdt ! unit_release_notify_ack_s
  1054    lifsong s_med:med098a1.sdt ! unit_release_notify_s
  1054    lifsong 
  1054    lifsong !#########RBR, RUG related
  1054    lifsong s_med:med0ccab.sdt !atm_interf_create_req_s
  1054    lifsong s_med:med0ccaa.sdt !atm_interf_create_ack_s
  1054    lifsong s_med:med0cca1.sdt !atm_interf_release_req_s
  1054    lifsong s_med:med0cca0.sdt !atm_interf_release_ack_s
  1054    lifsong 
  1054    lifsong s_med:med0cc9b.sdt !atm_vpltp_create_req_s
  1054    lifsong s_med:med0cc9a.sdt !atm_vpltp_create_ack_s
  1054    lifsong s_med:med0cc95.sdt !atm_vpltp_release_req_s
  1054    lifsong s_med:med0cc94.sdt !atm_vpltp_release_ack_s
  1054    lifsong 
  1054    lifsong s_med:med0cc82.sdt !atm_xconn_create_req_s
  1054    lifsong s_med:med0cc81.sdt !atm_xconn_create_ack_s
  1054    lifsong s_med:med0cc78.sdt !atm_xconn_release_req_s
  1054    lifsong s_med:med0cc77.sdt !atm_xconn_release_ack_s
  1054    lifsong 
  1054    lifsong s_med:med0cc89.sdt atm_vcltp_create_req_s
  1054    lifsong s_med:med0cc88.sdt atm_vcltp_create_ack_s
  1054    lifsong s_med:med0cc85.sdt atm_vcltp_release_req_s
  1054    lifsong s_med:med0cc84.sdt atm_vcltp_release_ack_s
  1054    lifsong 
  1054    lifsong !#########RCY related
  1054    lifsong s_dat:dty03a6d.sdt ! rcy_scd_clmode_t
  1054    lifsong s_dat:dty03a6e.sdt ! rcy_scd_flmode_t
  1054    lifsong s_dat:dty03a6c.sdt ! rcy_scd_rst_rp_t
  1235   huantang s_med:med0e2ff.sdt ! re_switchover_executed_s
  1054    lifsong 
   115    lifsong !RXS message
  1257   huantang s_med:med0e1fa.sdt  ! processor_restart_notif_s
  1260   huantang 
    38    lifsong --** PID = '@(#)PID: JIGGERGX.INF                   ';
     2     yanzuo --** TYPE = FAMILY;
     2     yanzuo --  (makeinfo v.0.4)
     2     yanzuo TNBLD;
     2     yanzuo 
     2     yanzuo SEGMENT
     2     yanzuo     CODE32( DPL = 0, BASE = 80000000H ),
     2     yanzuo     DATA( DPL = 0 ),
     2     yanzuo     JIGCLU_DATA( DPL = 0 ),
     2     yanzuo     JIGCON_DATA( DPL = 0 ),
     2     yanzuo     JIGHMS_DATA( DPL = 0 ),
  1283   chunchen     JIGMIX_DATA( DPL = 0 ),
    36    lifsong     STACK( DPL = 0, NOT EXPANDDOWN, LIMIT = 4FFFFH );
     2     yanzuo 
     2     yanzuo TABLE
     2     yanzuo     LDT_TNB( ENTRY = ( 1 : CODE32,
     2     yanzuo                        2 : DATA,
     2     yanzuo                        3 : STACK,
     2     yanzuo                        14 : JIGCLU_DATA,
     2     yanzuo                        15 : JIGCON_DATA,
  1283   chunchen                        16 : JIGHMS_DATA,
  1283   chunchen                        17 : JIGMIX_DATA),
     2     yanzuo              BASE = 74000000H );
     2     yanzuo 
     2     yanzuo TASK
     2     yanzuo     NORMAL_TASK( BASE = 60000000H,
     2     yanzuo                  CODE = JIGMAS,
     2     yanzuo                  LDT  = LDT_TNB,
     2     yanzuo                  DATA = DATA,
     2     yanzuo                  STACKS = ( STACK ));
     2     yanzuo 
     2     yanzuo --** BASE_SEL = 4;
     2     yanzuo --** DYN_SLOTS = 10;
   154    lifsong --** HAND_GROUP( DATA = JIGCLU_DATA, DYN_SLOTS= 10 , ST_LIMIT=FFFFH);
   240     jamema --** HAND_GROUP( DATA = JIGCON_DATA, DYN_SLOTS= 10 , ST_LIMIT=DFFFH);
     2     yanzuo --** HAND_GROUP( DATA = JIGHMS_DATA, DYN_SLOTS= 10 , ST_LIMIT=2FFFH);
  1416       pshu --** HAND_GROUP( DATA = JIGMIX_DATA, DYN_SLOTS= 10 , ST_LIMIT=5FFFH);
     2     yanzuo 
     2     yanzuo END
     2     yanzuo /*
   641    lifsong * $Id$
     2     yanzuo *
     2     yanzuo * Author:      Janne J. Aaltonen
     2     yanzuo *              Jani Koivula
     2     yanzuo *	       Jouko Virtanen
     2     yanzuo *
     2     yanzuo *  Revised by:
     2     yanzuo *
     2     yanzuo *  Environment:
     2     yanzuo *       'jigger' is part of 'jigger' process family and
     2     yanzuo *       belongs to the system block 'phrsyb' and to service block
     2     yanzuo *       'figseb'.
     2     yanzuo *
     2     yanzuo *  Description:
     2     yanzuo *
     2     yanzuo *
     2     yanzuo *  COPYRIGHT (c) 2003 NOKIA NETWORKS OY FINLAND
     2     yanzuo *************************************************************************/
     2     yanzuo 
     2     yanzuo #include "jiggergx.sst"       /* program block definitions       */
     2     yanzuo #include "jigdatgx.sdl"       /* data maintenance module         */
     2     yanzuo #include "jigclugx.sdl"       /* cluster hand sdl                */
     2     yanzuo #include "jigcongx.sdl"       /* connection maintenance hand sdl */
     2     yanzuo #include "jighmsgx.sdl"       /* hms maintenance hand sdl 	 */
  1283   chunchen #include "jigmixgx.sdl"
     2     yanzuo #include "jigmasgx.sdl"       /* master sdl 			 */
  1263    jinncao 
   644    lifsong 
     2     yanzuo /******************************************************************************
     2     yanzuo *
     2     yanzuo *  Dummy block hierarchy file for translator used in service-model programs.
     2     yanzuo *  Tnsdl-translator expects to find block hierarchy definitions in input.
     2     yanzuo *  Because service-model programs don't include conventional .sst files,
     2     yanzuo *  the corresponding block hierarchy is filled manually here.
     2     yanzuo *
   644    lifsong *  FILE: $Id$
     2     yanzuo *
     2     yanzuo *  Author:     Janne J. Aaltonen
     2     yanzuo *	       Jani Koivula
     2     yanzuo *	       Jouko Virtanen
     2     yanzuo *
     2     yanzuo *  Revised by:
     2     yanzuo *
     2     yanzuo *  COPYRIGHT 2003 BY NOKIA NETWORKS OY FINLAND
     2     yanzuo *
     2     yanzuo ******************************************************************************/
     2     yanzuo 
     2     yanzuo IMPLEMENTATION apssys1x OF SYSTEM apssys;
     2     yanzuo 
     2     yanzuo  SYSTEMBLOCK
     2     yanzuo  phrsyb;
     2     yanzuo 
     2     yanzuo /* Runtime environment */
     2     yanzuo 
     2     yanzuo #include "jiggergx.scc"
     2     yanzuo 
     2     yanzuo ENDIMPLEMENTATION apssys1x;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo IMPLEMENTATION phrsyb1x OF SYSTEMBLOCK phrsyb;
     2     yanzuo 
     2     yanzuo  SERVICEBLOCK
     2     yanzuo  figseb;
     2     yanzuo 
     2     yanzuo ENDIMPLEMENTATION phrsyb1x;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo IMPLEMENTATION figseb1x OF SERVICEBLOCK figseb;
     2     yanzuo 
     2     yanzuo  PROGRAMBLOCK
     2     yanzuo  jigger;
     2     yanzuo 
     2     yanzuo ENDIMPLEMENTATION figseb1x;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo IMPLEMENTATION jiggergx OF PROGRAMBLOCK jigger;
     2     yanzuo     MODULE
     2     yanzuo         jigdat;
     2     yanzuo 
     2     yanzuo     MASTER PROCESS
     2     yanzuo         jigmas;
     2     yanzuo 
     2     yanzuo       PROCESS
     2     yanzuo         jigclu;
     2     yanzuo       PROCESS
     2     yanzuo         jigcon;
     2     yanzuo       PROCESS
     2     yanzuo         jighms;
  1283   chunchen       PROCESS
  1283   chunchen       	jigmix;
     2     yanzuo 
     2     yanzuo /* own definitions ***********************************************/
     2     yanzuo 
     2     yanzuo #include "jigdatgx.spd"
  1283   chunchen #include "jigmixgx.spd"
     2     yanzuo #include "jigmasgx.sdt"
     2     yanzuo #include "jigmsggx.sdt"
     2     yanzuo #include "dtocstgx.spd"
     2     yanzuo #include "dtobitgx.spd"
     2     yanzuo #include "dtopidgx.spd"
     2     yanzuo 
     2     yanzuo ENDIMPLEMENTATION jiggergx;
     2     yanzuo PROCESS jighms
   631    lifsong   COMMENT '$Id$';
     2     yanzuo /*
     2     yanzuo  *
     2     yanzuo  *  Environment:
     2     yanzuo  *       'jighms' is part of 'jigger' process family and
     2     yanzuo  *       belongs to the system block 'phrsyb' and to service block
     2     yanzuo  *       'figseb'.
     2     yanzuo  *
     2     yanzuo  *  Description:
     2     yanzuo  *       This is JIGGER's HMS hand process. JIGHMS's prevents possible
     2     yanzuo  *       overload in HMS-bus. All messages that JIGCLU hand processes send
     2     yanzuo  *       and which goes through HMS-bus are routed via this hand process.
     2     yanzuo  *
   632    lifsong  *  COPYRIGHT 2003,2004 BY NOKIA NETWORKS OY FINLAND 
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo CONSTANT
     2     yanzuo     ack_waiting_time__c = 199;
     2     yanzuo 
     2     yanzuo TYPE msg_len_ptr__t
     2     yanzuo   REPRESENTATION POINTER ( message_length_t );
     2     yanzuo ENDTYPE msg_len_ptr__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_clus_hand__pv	pid,	
     2     yanzuo    conversion_ok	   bool,
     2     yanzuo    uxmana_pid__pv	   pid;
     2     yanzuo 
     2     yanzuo 
  1107       pshu 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE find_uxmana__r;
     2     yanzuo /*
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT uxmana_pid__pv 	pid;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL uxmana_ec	error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo     TASK uxmana_ec := hms_get_message_receiver_r(hms_pid_t_ux_mana_c,uxmana_pid__pv)
     2     yanzuo       COMMENT 'UXMANAs PID is not available in name service. It must be inquired through'
     2     yanzuo               'HMILIB.';
     2     yanzuo     DECISION ( uxmana_ec = success_ec );
     2     yanzuo     (T):
     2     yanzuo        TASK conversion_ok := PID_CONVERT_NEAR(uxmana_pid__pv);
     2     yanzuo     ELSE:
     2     yanzuo        TASK write_to_log(log_type_t_dword_e_c,
     2     yanzuo                          log_write_item_t(@uxmana_ec),1,
     2     yanzuo                          log_text_info_t(@'JIGHMS: UNABLE TO FIND UXMANA PID'));	  	
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RETURN uxmana_ec;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE find_uxmana__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* ============================================================ */
     2     yanzuo /* P R O C E S S   B O D Y */
     2     yanzuo /* ============================================================ */
     2     yanzuo START;
     2     yanzuo     /* TASK uxmana_available := find_uxmana__r( uxmana_pid__pv )
     2     yanzuo        COMMENT 'Find uxmana provided service pid'; */
     2     yanzuo     TASK make_pid_r( uxmana_pid__pv, 0xC000, 0x3CB, 1, 0 );
     2     yanzuo     NEXTSTATE working;
     2     yanzuo 
     2     yanzuo STATE working
     2     yanzuo   COMMENT 'Own comment';
     2     yanzuo 
     2     yanzuo   /* Receive init_apc_ig1_req_s message */
     2     yanzuo   /* Receive init_apc_eg1_req_s message */
     2     yanzuo   /* Receive init_if_and_vpctp_req_s message */
     2     yanzuo   /* Receive create_predet_half_xconn_req_s message */
     2     yanzuo   /* Receive res_pqii_int_if_param_ack_s message */
     2     yanzuo   /* Receive res_mssar_int_if_param_ack_s message */
     2     yanzuo   /* Receive alp_config_tp_s (NIP) */
     2     yanzuo   /* Receive alp_config_stream_s (NIP)  */
     2     yanzuo   /* Receive vpctp_setup_s (NIP)  */		        	
     2     yanzuo   INPUT init_apc_ig1_req_s( * ),
     2     yanzuo         init_apc_eg1_req_s( * ),
     2     yanzuo         init_apc__eg1_req_s( * ),
     2     yanzuo         res_pqii_int_if_param_ack_s( * ),
     2     yanzuo         res_pqiii_int_if_param_ack_s( * ),
     2     yanzuo         res_pq_mask_int_if_param_ack_s( * ),
     2     yanzuo         res_mssar_int_if_param_ack_s( * ),
     2     yanzuo         init_if_and_vpctp_req_s( * ),
     2     yanzuo         create_predet_half_xconn_req_s ( * ),
     2     yanzuo         alp_config_tp_s           ( * ),
     2     yanzuo         alp_config_stream_s       ( * ),
     2     yanzuo         vpctp_setup_s             ( * ),
     2     yanzuo         app_pre_half_xconn_req_s ( * );
     2     yanzuo     DCL
     2     yanzuo        delay_length  dword;
     2     yanzuo 
     2     yanzuo     TASK l_clus_hand__pv := SENDER;
     2     yanzuo 
     2     yanzuo #if (F)
     2     yanzuo     /* HMS throughput is about 220 msg/sec (POHEXT measurement);
     2     yanzuo        let's assume that JIGGER can safely use 40% of that,
     2     yanzuo        ie. 80 msg/sec = 400 bytes/sec.
     2     yanzuo        Thus
     2     yanzuo        delay = 1.25 ticks * ceiling(msg payload length / 5)
     2     yanzuo        = 5 * ((msg length - 16 + 4) / 5) / 4 clock ticks
     2     yanzuo        = (msg length - 12) / 4 */
     2     yanzuo 
     2     yanzuo     TASK delay_length := message_length_t( $msg_len_ptr__t(
     2     yanzuo                                               UNINTERPRETED_SIGNAL_HEADER )
     2     yanzuo                                            - 12 ) / 2;
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo     TASK delay_length := 10; /* this seems to work.. */
     2     yanzuo 
     2     yanzuo     /*	DECISION ( uxmana_available /= success_ec )
     2     yanzuo        COMMENT 'If uxmana provided service is not known, then it is tried to inquire again';
     2     yanzuo        ( T ):
     2     yanzuo        TASK uxmana_available := find_uxmana__r( uxmana_pid__pv )
     2     yanzuo        COMMENT 'Find uxmana provided service pid';
     2     yanzuo        DECISION ( uxmana_available /= success_ec ) ;
     2     yanzuo        ( T ):
     2     yanzuo        NEXTSTATE -;	
     2     yanzuo        ENDDECISION;
     2     yanzuo        ENDDECISION; */
     2     yanzuo 
     2     yanzuo     OUTPUT INPUT TO uxmana_pid__pv;
     2     yanzuo 
     2     yanzuo     TASK delay( delay_length );
     2     yanzuo     OUTPUT hms_ack_s TO l_clus_hand__pv;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   INPUT hand_supervision_msg_s;
     2     yanzuo 
     2     yanzuo     OUTPUT hand_supervision_ack_s TO SENDER,
     2     yanzuo            SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
     2     yanzuo 
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT c_test_msg_s(*);
     2     yanzuo     TASK write_to_log(log_type_t_empty_t_c,
     2     yanzuo                       NIL, 0,
     2     yanzuo                       log_text_info_t(@'JIGHMS: c_test_msg_s received'));
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo ENDSTATE working;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo ENDPROCESS jighms;
     2     yanzuo MASTER PROCESS jigmas
   641    lifsong   COMMENT '$Id$';
     2     yanzuo /*
     2     yanzuo *  Description:
     2     yanzuo *       'jigmas' implements the master process of JIGGER.
     2     yanzuo *
     2     yanzuo *  COPYRIGHT (c) 2004 NOKIA NETWORKS OY FINLAND
     2     yanzuo *************************************************************************/
     2     yanzuo 
     2     yanzuo CONSTANT
     2     yanzuo     jigcon_alive_time__c = 999;
     2     yanzuo     new_wo_activation_delay__c = 400; /* grace period for old WO/new SP OMU
     2     yanzuo                                          to finish tasks started before
     2     yanzuo                                          OMU switchover. */
     2     yanzuo     swo_max_tmo__c       = 6000; /* Maximum time of blocking new tasks
     2     yanzuo                                     during switchover: */
     2     yanzuo     act_delay__c  = 1; /* delay before starting tasks after startup */
     2     yanzuo     sysres_act_delay__c = 6000;
     2     yanzuo     hand_supervision__c = 6000;   /* The time master send the hand_supervision_msg_s
     2     yanzuo                                      to JIGCLU and JIGHMS hand */
     2     yanzuo     unreachable_family__c = 0;    /* unreachable family id which prevent invalid message*/
   227    lifsong     
   227    lifsong     tributary_restart_time__c = 300;    /* wait 3 seconds and check the MXUs' state. If no WO-EX MXU, wait another 5 seconds*/
   227    lifsong     tributary_restart_retry_time__c = 500; /*wait another 5 seconds and check the MXUs' state. If no WO-EX MXU, restart the tributary units*/
   361    lifsong     unit_remove_delay__c = 600; /*NOTE: it's temp solution!
   223    lifsong                                                 if the the other end hc of the unit to remove is to create 
   223    lifsong                                                 when res release of the unit is executing in its own cluster hand,
   223    lifsong                                                 then after unit remove some half-xc will left created. and later if the unit is re-add,
   223    lifsong                                                 some hc will be overwrite on other end's MXU, add delay in master hand to avoid this.
   223    lifsong                                                 if the other end unit hc create starts before the unit remove, the delay will let it complete 1st.
   223    lifsong                                                 And then the other end hc will be released in res release, if the hc starts after RXE unit remove msg,
   223    lifsong                                                 as TOM will remove the connections in TOE lib, the hc create won't get the connections, also no problem*/
   223    lifsong 
     2     yanzuo TYPE uam_pids_array__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( jig_limits__t_n_clus_c+1 ) OF pid;
     2     yanzuo ENDTYPE uam_pids_array__t;
     2     yanzuo 
     2     yanzuo TYPE handled_conn_ids__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 100;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( max_c ) OF
     2     yanzuo     STRUCT
     2     yanzuo        conn_id  conn_id_t;
     2     yanzuo        timestamp  clock_t;
     2     yanzuo     ENDSTRUCT;
     2     yanzuo ENDTYPE handled_conn_ids__t;
     2     yanzuo 
   223    lifsong TYPE removing_unit__t
   223    lifsong   REPRESENTATION
   223    lifsong     STRUCT
   223    lifsong        req_sender        pid;
   223    lifsong        units                conf_units_t;
   223    lifsong        unit_type          unit_type_t;
   223    lifsong        unit_index         unit_index_t;
   223    lifsong     ENDSTRUCT;
   223    lifsong ENDTYPE removing_unit__t;
   223    lifsong 
  1527       pshu TYPE unit_it_array__t
  1527       pshu   CONSTANT
  1527       pshu     max_c = 8;
  1527       pshu 
  1527       pshu   REPRESENTATION
  1527       pshu     ARRAY( max_c ) OF unit_it_t;
  1527       pshu ENDTYPE unit_it_array__t;
  1527       pshu 
  1527       pshu 
     2     yanzuo DCL WITHWARMING
     2     yanzuo     uam_pids__pv         uam_pids_array__t,
  1317      tinyu     
     2     yanzuo     /* ongoing configuration change operations. */
     2     yanzuo     config_changes__pv   config_change_table__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     action_enabled__pv   bool,
     2     yanzuo     hand_states__pv      hand_states__t,
     2     yanzuo     n_handled_conns__pv  dword,
     2     yanzuo     handled_conns__pv    handled_conn_ids__t,
     2     yanzuo     gn_time__pv          dword,
     2     yanzuo     gn_count__pv         dword,
     2     yanzuo     swo_ongoing__pv      bool,
     2     yanzuo     own_unit_info__pv    unit_it_t,
     2     yanzuo 
  1317      tinyu     hms_hand__pv         pid,
  1317      tinyu     mix_hand__pv         pid,
     2     yanzuo     far_self__pv         pid,
     2     yanzuo 
     2     yanzuo     /* common scratchpad variables for short-term needs */
     2     yanzuo     clus_idx             alp_cluster_idx__t,
     2     yanzuo     task_data            task_data__t,
     2     yanzuo     ec                   error_t,
     2     yanzuo     clus_hand_ack__pv    clus_hands_ack__t,
   223    lifsong     hms_hand_ack__pv     bool,
  1263    jinncao     mix_hand_ack__pv    bool,
   853       pshu     removing_unit_bak    removing_unit__t,
   853       pshu     jigcon_hand_num      word;
     2     yanzuo 
     2     yanzuo TIMER
     2     yanzuo     SET single_tl,
     2     yanzuo     wo_activation_timer,
     2     yanzuo     action_timer,
   227    lifsong     unit_restart_action_timer( unit_it_t ),
   227    lifsong     unit_restart_retry_timer( unit_it_t ),
   223    lifsong     hand_supervision_timer,
   223    lifsong     unit_remove_delay_timer;
     2     yanzuo 
     2     yanzuo PROCEDURE cluster_hands_created_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: Cluster hands created
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec    error_t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec:=  write_stup_log_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Cluster hands created'));
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE cluster_hands_created_log__r;
     2     yanzuo 
     2     yanzuo PROCEDURE units_added_to_jiifil_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: units added to JIIFIL
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec    error_t;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec:=  write_stup_log_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Units added to JIIFIL'));
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE units_added_to_jiifil_log__r;
     2     yanzuo 
     2     yanzuo PROCEDURE services_registered_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: Provided services registered to name service
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec    error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec:=  write_stup_log_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Services registered to name service'));
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE services_registered_log__r;
     2     yanzuo 
     2     yanzuo PROCEDURE cluster_configured_log__r;
     2     yanzuo /*
     2     yanzuo  * Start-up instrumentation log: fig service_req
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN    clus_idx    alp_cluster_idx__t,
     2     yanzuo     IN    phys_addr   phys_address_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec    error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
     2     yanzuo        stup_writer_ptr_t(@'JIG'),
     2     yanzuo        phys_addr,
     2     yanzuo        stup_sw_layer_t_spl_c,
     2     yanzuo        stup_lib_ptr_t(
     2     yanzuo        @'EV51: Alp ready for reporting: cluster index: 0x%X '),
     2     yanzuo        clus_idx );
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE cluster_configured_log__r;
     2     yanzuo 
  1072   huantang PROCEDURE send_xconn_create_ack_s;
  1072   huantang FPAR
  1072   huantang 	IN    client pid,
  1072   huantang 	IN    status error_t,
  1072   huantang 	IN    hms_address1 hms_address_t,
  1072   huantang 	IN    hms_address2 hms_address_t,
  1072   huantang 	IN    int_xconn_id conn_id_t, 
  1072   huantang 	IN    vpi_1 vpi_t,
  1072   huantang 	IN    vci_1 vci_t,
  1072   huantang 	IN    vpi_2 vpi_t,
  1072   huantang 	IN    vci_2 vci_t;
  1072   huantang START;
  1072   huantang        OUTPUT int_xconn_create_ack_s( status,
  1072   huantang                                       hms_address1, hms_address2,
  1072   huantang                                       int_xconn_id,
  1072   huantang                                       vpi_1, vci_1,
  1072   huantang                                       vpi_2, vci_2 ) TO client,
  1072   huantang               SET DESTROY_MSG_IF_NOT_WO_STATE = NOT swo_ongoing__pv,
  1072   huantang                   DONT_CARE = T;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu        @'JIGMAS: Send int_xconn_create_ack_s , status=%d, hms_addr1=%X, hms_addr2=%X'n'r',status,hms_address1, hms_address2);
  1072   huantang ENDPROCEDURE send_xconn_create_ack_s;
  1072   huantang 
  1072   huantang PROCEDURE send_xconn_create_ack_s_failed;
  1072   huantang FPAR
  1072   huantang 	IN    client pid,
  1072   huantang 	IN    status error_t,
  1072   huantang 	IN    hms_address1 hms_address_t,
  1072   huantang 	IN    hms_address2 hms_address_t,
  1072   huantang 	IN    int_xconn_id conn_id_t;
  1072   huantang START;
  1072   huantang 	CALL send_xconn_create_ack_s(client, status, hms_address1, hms_address2, int_xconn_id, 0xFFFF, 0, 0xFFFF, 0 );
  1072   huantang ENDPROCEDURE send_xconn_create_ack_s_failed;
  1072   huantang 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE cluster_hand_pid__r;
     2     yanzuo /*
     2     yanzuo  * This procedure returns the pid of the cluster hand which
     2     yanzuo  * manages the given alp cluster.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN  cluster_idx      alp_cluster_idx__t;
     2     yanzuo RETURNS
     2     yanzuo     pid;
     2     yanzuo DCL
     2     yanzuo     hand_pid  pid;
     2     yanzuo START;
     2     yanzuo     /* preliminary version: */
     2     yanzuo     TASK make_pid_r( hand_pid,
     2     yanzuo                      own_unit_phys_addr,
     2     yanzuo                      own_family_id,
     2     yanzuo                      cluster_idx,
     2     yanzuo                      0 );
     2     yanzuo     RETURN hand_pid;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE cluster_hand_pid__r;
     2     yanzuo 
  1462       hhou 
   929    lifsong PROCEDURE conf_change_item_init__r;
   929    lifsong FPAR
   929    lifsong     IN  idx          dword;
   929    lifsong 
   929    lifsong START;
   929    lifsong 
   929    lifsong     DECISION idx >= 0 AND idx < config_change_table__t_max_c;
   929    lifsong     ( T ):
   929    lifsong         TASK config_changes__pv( idx ).client_pid := NULL,
   929    lifsong              config_changes__pv( idx ).unit_type := unit_type_t_any_type_c,
   929    lifsong              config_changes__pv( idx ).unit_index := unit_index_t_any_index_c;
   929    lifsong     ENDDECISION;   
   929    lifsong ENDPROCEDURE conf_change_item_init__r;
   929    lifsong 
   929    lifsong PROCEDURE conf_change_pv_init__r;
   929    lifsong START;
   929    lifsong     TASK memset( bytepointer( @config_changes__pv ), 0,
   929    lifsong                 SIZEOF( config_changes__pv ));
   929    lifsong ENDPROCEDURE conf_change_pv_init__r;
   929    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE find_conf_change__r;
     2     yanzuo /*
     2     yanzuo  * Find the operation concerning given unit from the global
     2     yanzuo  * config change table, OR find a free record in the table.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      unit_type    unit_type_t,
     2     yanzuo     IN      unit_index   unit_index_t,
     2     yanzuo     IN      find_free    bool,
     2     yanzuo     IN/OUT  idx          dword;
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo START;
     2     yanzuo     TASK idx := 0;
     2     yanzuo     WHILE idx < config_change_table__t_max_c;
     2     yanzuo        DECISION find_free;
     2     yanzuo        ( T ):
     2     yanzuo           DECISION config_changes__pv( idx ).client_pid = NULL;
     2     yanzuo           ( T ):
     2     yanzuo              RETURN T;
   929    lifsong           ELSE:
   929    lifsong              DECISION config_changes__pv( idx ).unit_type = unit_type AND
   929    lifsong                       config_changes__pv( idx ).unit_index = unit_index;
   929    lifsong              ( T ):
   929    lifsong                 RETURN T;
   929    lifsong              ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ELSE:
     2     yanzuo           DECISION( config_changes__pv( idx ).client_pid /= NULL ) AND
     2     yanzuo                   ( config_changes__pv( idx ).unit_type = unit_type ) AND
     2     yanzuo                   ( config_changes__pv( idx ).unit_index = unit_index );
     2     yanzuo           ( T ):
     2     yanzuo              RETURN T;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK idx := idx + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo 
     2     yanzuo     DECISION find_free;
     2     yanzuo     ( T ):
   929    lifsong        TASK idx := 0;
   929    lifsong        CALL conf_change_pv_init__r();
     2     yanzuo        RETURN T;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     RETURN F;
     2     yanzuo ENDPROCEDURE find_conf_change__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE add_units_to_jiifil__r;
     2     yanzuo /*
     2     yanzuo  * Find units present in SCDFLE and (try to) add them to JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo DCL
     2     yanzuo     slice                slice_id_t := slice_id_t_own_slice_c,
     2     yanzuo     paddr                phys_address_t,
     2     yanzuo     fig_hdr              fig_msg_header_t,
     2     yanzuo     dummy_jptr           jiifil_ptr__t,
     2     yanzuo     dummy_jcptr          jii_comp_ptr__t,
     2     yanzuo     uidx                 unit_index_t,
     2     yanzuo     rec                  jiifil__t,
   165    lifsong     ustate               unit_state_t,
     2     yanzuo     ec                   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     /* Adding is done in two phases: first MXUs, then the rest. */
     2     yanzuo     TASK fig_hdr.extended_addr := 0;
     2     yanzuo     TASK uidx := 0;
     2     yanzuo     WHILE uidx < jig_limits__t_n_clus_c * 2;
     2     yanzuo        DECISION physical_address_trial_r( slice, unit_type_t_mxu_c, uidx,
     2     yanzuo                                           paddr ) = success_ec
     2     yanzuo                 AND
     2     yanzuo                 hms_slv_addr_from_phys_addr_r( paddr,
     2     yanzuo                                                fig_hdr.hms_address )
     2     yanzuo                 = success_ec
     2     yanzuo                 AND
     2     yanzuo                 jii_find_computer__r( paddr, dummy_jptr, dummy_jcptr,
     2     yanzuo                                       dummy_jptr ) = F
     2     yanzuo                 AND
     2     yanzuo                 jii_build_record__r( paddr, fig_hdr, T, rec )
     2     yanzuo                 = success_ec;
     2     yanzuo        ( T ):
     2     yanzuo           TASK rec.rec_idx := jiifil_idx__t_new_c;
   165    lifsong           
   165    lifsong           TASK rec.is_wo_unit :=
   165    lifsong              ( unit_state_by_phys_addr__r( paddr, ustate ) = success_ec )
   165    lifsong              AND (( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c );
     2     yanzuo           CALL jii_write_local_record__r( rec );
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK uidx := uidx + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo 
     2     yanzuo     TASK ec := get_next_phys_addr_trial_r( slice, computer_t_phys_not_defined_c, paddr );
     2     yanzuo     WHILE ec = success_ec AND paddr /= computer_t_phys_invalid_c;
     2     yanzuo        DECISION hms_slv_addr_from_phys_addr_r( paddr, fig_hdr.hms_address )
     2     yanzuo                 = success_ec
     2     yanzuo                 AND
     2     yanzuo                 /* slaves get added with the master */
     2     yanzuo                 hms_address_t_proc_idx_r( fig_hdr.hms_address ) = 0
     2     yanzuo                 AND
     2     yanzuo                 jii_find_computer__r( paddr, dummy_jptr, dummy_jcptr,
     2     yanzuo                                       dummy_jptr ) = F
     2     yanzuo                 AND
     2     yanzuo                 jii_build_record__r( paddr, fig_hdr, F, rec ) = success_ec;
     2     yanzuo        ( T ):
     2     yanzuo           TASK rec.rec_idx := jiifil_idx__t_new_c;
     2     yanzuo           CALL jii_write_local_record__r( rec );
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        TASK ec := get_next_phys_addr_trial_r( slice, paddr, paddr );
     2     yanzuo     ENDWHILE;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE add_units_to_jiifil__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE order_jiifil_units_anns__r;
     2     yanzuo /*
     2     yanzuo  * Order state change notifications for all units in JIIFIL.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo TYPE ordered_types__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 200;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( max_c ) OF unit_type_t;
     2     yanzuo ENDTYPE ordered_types__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     found                bool,
     2     yanzuo     idx                  dword,
     2     yanzuo     search_pos           jii_search_key__t,
     2     yanzuo     jii_ptr, alp_ptr     jiifil_ptr__t,
     2     yanzuo     comp_ptr             jii_comp_ptr__t,
     2     yanzuo     ordered              ordered_types__t,
     2     yanzuo     n_ordered            dword := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     TASK found := jii_find_first_comp__r( alp_cluster_idx__t_any_c,
     2     yanzuo                                           search_pos,
     2     yanzuo                                           jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo     WHILE found;
     2     yanzuo        /* check if we already ordered notifications about these units. */
     2     yanzuo        TASK idx := 0;
     2     yanzuo        WHILE idx < n_ordered;
     2     yanzuo           DECISION comp_ptr->unit_type;
     2     yanzuo           ( = ordered( idx )):
     2     yanzuo              OUT;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK idx := idx + 1;
     2     yanzuo        ENDWHILE;
     2     yanzuo 
     2     yanzuo        DECISION idx;
     2     yanzuo        ( >= n_ordered ):
     2     yanzuo           TASK ec := order_unit_anns__r( comp_ptr->unit_type,
     2     yanzuo                                          jii_ptr->is_level1_alp_unit OR
     2     yanzuo                                          jii_ptr->is_level2_alp_unit );
     2     yanzuo           DECISION n_ordered;
     2     yanzuo           ( < ordered_types__t_max_c ):
     2     yanzuo              TASK ordered( n_ordered ) := comp_ptr->unit_type;
     2     yanzuo              TASK n_ordered := n_ordered + 1;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        TASK found := jii_find_next_comp__r( alp_cluster_idx__t_any_c,
     2     yanzuo                                             search_pos,
     2     yanzuo                                             jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo     ENDWHILE;
     2     yanzuo     RETURN ec;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE order_jiifil_units_anns__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE order_events_and_notifs__r;
     2     yanzuo /*
     2     yanzuo  * Order events and recovery announcements that JIGGER needs.
     2     yanzuo  * E.g. OMU switchover notification
     2     yanzuo  *      unit_restart_notice_s
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     result, retval       error_t := success_ec,
     2     yanzuo     my_local_pid         pid;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     TASK my_local_pid := SELF;
     2     yanzuo     TASK set_pid_computer_r( my_local_pid, computer_t_rel_own_unit_c );
     2     yanzuo 
     2     yanzuo     TASK result := unit_type_and_index_r( computer_t_rel_own_unit_c,
     2     yanzuo                                           own_unit_info__pv );
     2     yanzuo 
     2     yanzuo     /* Order state change notifications. */
     2     yanzuo 
     2     yanzuo     /* Order OMU switchover preparatory notification to WO unit. */
     2     yanzuo     DECISION IS_IN_WO_STATE;
     2     yanzuo     ( T ):
     2     yanzuo        TASK retval := re_event_subscribe_r( own_unit_info__pv.ttype,
     2     yanzuo                                             own_unit_info__pv.index,
     2     yanzuo                                             pidptr_t( @my_local_pid ),
     2     yanzuo                                             re_service_t_switchover_prep_c,
     2     yanzuo                                             swover_step_t_before_hw_c,
     2     yanzuo                                             re_ann_priority_t_normal_c,
     2     yanzuo                                             re_distr_width_t_single_unit_c,
     2     yanzuo                                             re_notif_tmo__c );
     2     yanzuo        DECISION retval;
     2     yanzuo        ( success_ec ):
     2     yanzuo           TASK retval := order_jiifil_units_anns__r();
     2     yanzuo           DECISION retval;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo              TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                               @'JIGMAS: FAILED TO ORDER NOTIFS TO JIIFIL UNITS'
     2     yanzuo                                ' status=%XH', retval );
     2     yanzuo           ENDDECISION;
     2     yanzuo        ELSE:
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                            @'JIGMAS:FAILED TO ORDER OMU SWO NOTIFICATION:'
     2     yanzuo                             ' unit_type=%XH, unit_index=%XH, status=%XH',
     2     yanzuo                            own_unit_info__pv.ttype,
     2     yanzuo                            own_unit_info__pv.index,
     2     yanzuo                            retval );
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo #if (test_logs)
     2     yanzuo     DECISION retval;
     2     yanzuo     ( success_ec ):
     2     yanzuo        TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                         @'JIGMAS: OMU SWITCHOVER PREP.MSG ORDERED'
     2     yanzuo                          'unit_type=%XH, unit_index=%XH',
     2     yanzuo                         own_unit_info__pv.ttype,
     2     yanzuo                         own_unit_info__pv.index );
     2     yanzuo     ENDDECISION;
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo     /* Order own unit state change notification */
     2     yanzuo     TASK result := re_event_subscribe_r ( own_unit_info__pv.ttype,
     2     yanzuo                                           own_unit_info__pv.index,
     2     yanzuo                                           pidptr_t(@my_local_pid),
     2     yanzuo                                           re_service_t_state_ch_exec_c,
     2     yanzuo                                           swover_step_t_not_applicable_c,
     2     yanzuo                                           re_ann_priority_t_normal_c,
     2     yanzuo                                           re_distr_width_t_single_unit_c,
     2     yanzuo                                           re_notif_tmo__c );
     2     yanzuo     DECISION result;
     2     yanzuo     ( success_ec ):
     2     yanzuo #if (test_logs)
     2     yanzuo        TASK write_to_log( log_type_t_dword_t_c,
     2     yanzuo                           log_write_item_t(@result), 1,
     2     yanzuo                           log_text_info_t(
     2     yanzuo                             @'JIGMAS: OMU STATE CHANGE MSG ORDERED:'));
     2     yanzuo #endif
     2     yanzuo     ELSE:
     2     yanzuo        TASK retval := result;
     2     yanzuo        TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                         @'JIGMAS: FAILED TO ORDER OMU STATE CHANGE MSG:'
     2     yanzuo                          ' unit_type=%XH, unit_index=%XH, status=%XH',
     2     yanzuo                         own_unit_info__pv.ttype,
     2     yanzuo                         own_unit_info__pv.index,
     2     yanzuo                         retval );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1235   huantang     TASK result := re_event_subscribe_r ( own_unit_info__pv.ttype,
  1235   huantang                                           own_unit_info__pv.index,
  1235   huantang                                           pidptr_t(@my_local_pid),
  1235   huantang                                           re_service_t_switchover_exec_c,
  1235   huantang                                           swover_step_t_not_applicable_c,
  1235   huantang                                           re_ann_priority_t_normal_c,
  1235   huantang                                           re_distr_width_t_single_unit_c,
  1235   huantang                                           re_notif_tmo__c );
  1235   huantang     DECISION result;
  1235   huantang     ( /= success_ec ):
  1235   huantang     	  TASK retval := result;
  1235   huantang         TASK dxsyslog_r( log_type_t_text_e_c,
  1237   huantang                         @'JIGMAS: FAILED TO ORDER OMU SWO EXECUTED:'
  1235   huantang                          ' unit_type=%XH, unit_index=%XH, status=%XH',
  1235   huantang                         own_unit_info__pv.ttype,
  1235   huantang                         own_unit_info__pv.index,
  1235   huantang                         retval );
  1235   huantang     ENDDECISION;
  1235   huantang 
     2     yanzuo     RETURN retval;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE order_events_and_notifs__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE add_services__r;
     2     yanzuo /*
     2     yanzuo  * Register services provided by JIGGER to the name service.
     2     yanzuo  *
     2     yanzuo  **************************************************************************/
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     serv_info            service_information_t,
     2     yanzuo     r1, r2, r3, r4       error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     TASK memset( bytepointer( @serv_info ), 0, SIZEOF( serv_info ));
     2     yanzuo 
     2     yanzuo     TASK serv_info.server                   := far_self__pv,
     2     yanzuo          serv_info.service_attr.replaceable := T,
     2     yanzuo          serv_info.msg_attr.delivery        := computer_t_width_wosp_c,
     2     yanzuo          serv_info.msg_attr.attr            :=
     2     yanzuo              msg_attr_t_normal_priority_c + msg_attr_t_destroy_if_not_wo_c;
     2     yanzuo 
     2     yanzuo     /* resource loading initiation service for RUGGER */
     2     yanzuo     TASK serv_info.service_name := 'load_int_resource_as';
     2     yanzuo     TASK r1 := add_service_r( serv_info );
     2     yanzuo 
     2     yanzuo     /* Configuration change service for adding/deleting FUs */
     2     yanzuo     TASK serv_info.service_name := 'unit_config_change_as';
     2     yanzuo     TASK r2 := add_service_r( serv_info );
     2     yanzuo 
     2     yanzuo     /* APC phase 2 init service for WHISKY */
     2     yanzuo     TASK serv_info.service_name := 'alp_ready_ph2_notification_as';
     2     yanzuo     TASK r3 := add_service_r( serv_info );
     2     yanzuo 
     2     yanzuo     /* VPI inquiry service for RUGGER */
     2     yanzuo     TASK serv_info.service_name := 'inquire_vpi_as';
     2     yanzuo     TASK r4 := add_service_r( serv_info );
     2     yanzuo 
     2     yanzuo     DECISION r1;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo        RETURN r1;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION r2;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo        RETURN r2;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION r3;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo        RETURN r3;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN r4;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE add_services__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE is_conn_oper_active__r;
     2     yanzuo /*
     2     yanzuo  * This procedure checks whether the given connection is already
     2     yanzuo  * being created or deleted by a JIGCON hand process.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      conn_id      conn_id_t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword := 0;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     WHILE idx < n_handled_conns__pv;
     2     yanzuo        DECISION handled_conns__pv(idx).conn_id;
     2     yanzuo        ( /= 0 ):
     2     yanzuo           DECISION dword( clock - handled_conns__pv(idx).timestamp );
     2     yanzuo           ( > jigcon_alive_time__c ):
     2     yanzuo              /* remove expired record from the table: */
     2     yanzuo              DECISION idx+1 < n_handled_conns__pv;
     2     yanzuo              ( T ):
   120    lifsong                 /*Better to use memmove, but memcpy is fine here as copies from back to front*/
     2     yanzuo                 TASK memcpy( bytepointer( @handled_conns__pv( idx )),
     2     yanzuo                              bytepointer( @handled_conns__pv( idx+1 )),
     2     yanzuo                              dword( dword( n_handled_conns__pv-1 ) - idx )
     2     yanzuo                              * SIZEOF( handled_conns__pv( 0 )));
     2     yanzuo              ENDDECISION;
     2     yanzuo              TASK n_handled_conns__pv := dword( n_handled_conns__pv - 1 );
     2     yanzuo              TASK idx := dword( idx - 1 );
     2     yanzuo           ELSE:
     2     yanzuo              DECISION handled_conns__pv(idx).conn_id;
     2     yanzuo              ( conn_id ):
     2     yanzuo                 OUT search_id;
     2     yanzuo              ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK idx := idx + 1;
     2     yanzuo     ENDWHILE search_id;
     2     yanzuo 
     2     yanzuo     RETURN idx < n_handled_conns__pv;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE is_conn_oper_active__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE set_conn_oper_active__r;
     2     yanzuo /*
     2     yanzuo  * This procedure either adds the given connection to the table of
     2     yanzuo  * connections being handled by JIGCON hand processes, or removes
     2     yanzuo  * it from there (depending on the 2nd parameter).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN conn_id conn_id_t,
     2     yanzuo     IN active  bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx  dword;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     DECISION active;
     2     yanzuo     ( T ):
     2     yanzuo        DECISION n_handled_conns__pv;
     2     yanzuo        ( < handled_conn_ids__t_max_c ):
     2     yanzuo           TASK idx := n_handled_conns__pv;
     2     yanzuo           TASK n_handled_conns__pv := idx + 1;
     2     yanzuo           TASK handled_conns__pv( idx ).conn_id := conn_id,
     2     yanzuo                handled_conns__pv( idx ).timestamp := clock;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo        TASK idx := 0;
     2     yanzuo        WHILE idx < n_handled_conns__pv;
     2     yanzuo           DECISION handled_conns__pv( idx ).conn_id;
     2     yanzuo           ( = conn_id ):
     2     yanzuo              DECISION idx+1 < n_handled_conns__pv;
     2     yanzuo              ( T ):
   120    lifsong                 /*Better to use memmove, but memcpy is fine here as copies from back to front*/
     2     yanzuo                 TASK memcpy( bytepointer( @handled_conns__pv( idx )),
     2     yanzuo                              bytepointer( @handled_conns__pv( idx+1 )),
     2     yanzuo                              dword( dword( n_handled_conns__pv-1 ) - idx )
     2     yanzuo                              * SIZEOF( handled_conns__pv( 0 )));
     2     yanzuo              ENDDECISION;
     2     yanzuo              TASK n_handled_conns__pv := dword( n_handled_conns__pv - 1 );
     2     yanzuo              OUT search_id;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK idx := idx + 1;
     2     yanzuo        ENDWHILE search_id;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE set_conn_oper_active__r;
     2     yanzuo 
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE give_out_task__r;
     2     yanzuo /*
     2     yanzuo  * Find & dole out tasks for hands managing given (or any) clusters.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN alp_clus_idx alp_cluster_idx__t;
     2     yanzuo START;
     2     yanzuo     DECISION IS_IN_WO_STATE AND (NOT swo_ongoing__pv) AND action_enabled__pv;
     2     yanzuo     ( T ):
  1124   huantang         OUTPUT jig_give_out_task__s( alp_clus_idx ) TO SELF;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN;
     2     yanzuo ENDPROCEDURE give_out_task__r;
     2     yanzuo 
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE is_jihext__r;
     2     yanzuo /*
     2     yanzuo  * Tell if the given process is JIHEXT (OSITUS).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN sender_pid  pid;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     bool;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     RETURN get_pid_family_r( sender_pid ) >= 0xBE
     2     yanzuo            AND
     2     yanzuo            get_pid_family_r( sender_pid ) <= 0xC1;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE is_jihext__r;
  1462       hhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE create_clus_hand__r;
     2     yanzuo /*
     2     yanzuo  * Recreate clus hand after it is frozen or no ack hand supervision msg.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN in_clus_idx  alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo    l_status   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
     2     yanzuo    CREATE jigclu( in_clus_idx, far_self__pv, far_self__pv, hms_hand__pv ),
     2     yanzuo           PROCESS = in_clus_idx;
     2     yanzuo 
     2     yanzuo    DECISION STATUS;
     2     yanzuo    ( SUCCESS ):
     2     yanzuo       TASK hand_states__pv( in_clus_idx )    := hand_state__t_idle_c,
     2     yanzuo            clus_hand_ack__pv ( in_clus_idx ) := T,
     2     yanzuo            l_status                          := success_ec;
     2     yanzuo 
     2     yanzuo    ELSE:
     2     yanzuo       TASK l_status := lib_create_failure_reason_r( own_family_id );
     2     yanzuo 
     2     yanzuo    ENDDECISION;
     2     yanzuo 
     2     yanzuo    RETURN l_status;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE create_clus_hand__r;
     2     yanzuo 
  1263    jinncao /**************************************************************************/
  1283   chunchen PROCEDURE create_mix_hand__r;
  1283   chunchen /*
  1283   chunchen  * Recreate clus hand after it is frozen or no ack hand supervision msg.
  1283   chunchen  **************************************************************************/
  1283   chunchen 
  1283   chunchen RETURNS
  1283   chunchen    error_t;
  1283   chunchen 
  1283   chunchen DCL
  1283   chunchen 	l_status   error_t;
  1283   chunchen 
  1283   chunchen START;
  1283   chunchen 
  1283   chunchen 	CREATE jigmix;
  1283   chunchen 	DECISION STATUS;
  1283   chunchen 	( SUCCESS ):
  1317      tinyu 		TASK mix_hand__pv     := OFFSPRING;
  1317      tinyu 		TASK set_pid_computer_r( mix_hand__pv, computer_t_rel_own_unit_c );
  1327       pshu 		CALL jig_debug_set_pid__r(get_pid_process_id_r(mix_hand__pv));
  1283   chunchen 		TASK mix_hand_ack__pv := T,
  1327       pshu 		     l_status         := success_ec;
  1283   chunchen 	ELSE:
  1317      tinyu 	 TASK dxsyslog_r( log_type_t_text_i_c,
  1317      tinyu                      @'JIGMAS: create JIGMIX hand failed! status = 0X%X,',STATUS);
  1283   chunchen 		TASK l_status := lib_create_failure_reason_r( own_family_id );
  1283   chunchen 	ENDDECISION;
  1283   chunchen 
  1283   chunchen 	RETURN l_status;
  1283   chunchen 
  1283   chunchen ENDPROCEDURE create_mix_hand__r;
  1283   chunchen 
  1283   chunchen /**************************************************************************/
     2     yanzuo PROCEDURE create_hms_hand__r;
     2     yanzuo /*
     2     yanzuo  * Recreate clus hand after it is frozen or no ack hand supervision msg.
     2     yanzuo  **************************************************************************/
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo    error_t;
     2     yanzuo 
     2     yanzuo DCL
  1263    jinncao 	l_status   error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
  1263    jinncao 	CREATE jighms;
  1263    jinncao 	DECISION STATUS;
  1263    jinncao 	( SUCCESS ):
  1263    jinncao 		TASK hms_hand__pv     := OFFSPRING;
  1263    jinncao 		TASK set_pid_computer_r( hms_hand__pv, computer_t_rel_own_unit_c );
  1263    jinncao 		TASK hms_hand_ack__pv := T,
  1263    jinncao 		l_status         := success_ec;
     2     yanzuo 
  1263    jinncao 	ELSE:
  1263    jinncao 		TASK l_status := lib_create_failure_reason_r( own_family_id );
  1263    jinncao 		TASK dxsyslog_r( log_type_t_text_e_c,
  1263    jinncao 			@'JIGMAS: create hms hand failed!:'
  1263    jinncao 			'status = 0X%X',
  1263    jinncao 			l_status );
  1263    jinncao 	ENDDECISION;
     2     yanzuo 
  1263    jinncao 	RETURN l_status;
     2     yanzuo 
     2     yanzuo ENDPROCEDURE create_hms_hand__r;
     2     yanzuo 
     2     yanzuo 
   733    lifsong /**************************************************************************/
   733    lifsong PROCEDURE is_dsp_hc_created__r;
   733    lifsong /*
   733    lifsong  * 
   733    lifsong   **************************************************************************/
   733    lifsong 
   733    lifsong FPAR 
   733    lifsong     IN      comp_ptr     jii_comp_ptr__t;
   733    lifsong     
   733    lifsong RETURNS
   733    lifsong     bool;
   733    lifsong 
   733    lifsong START;
   733    lifsong     DECISION comp_ptr = NIL;
   733    lifsong     ( T ):
   733    lifsong       RETURN F;
   733    lifsong     ENDDECISION;
   733    lifsong     
   733    lifsong       RETURN  (comp_ptr->half_conns_dsp_created);
   733    lifsong  
   733    lifsong ENDPROCEDURE is_dsp_hc_created__r;
   733    lifsong 
  1257   huantang /**************************************************************************/
  1257   huantang PROCEDURE handle_rcy_trial_cutover__r;
  1257   huantang /**************************************************************************/
   733    lifsong 
  1257   huantang DCL
  1257   huantang     comp_ptr          jii_comp_ptr__t,
  1257   huantang     alp_ptr           jiifil_ptr__t,
  1527       pshu     jii_ptr           jiifil_ptr__t,
  1527       pshu     index             word,
  1527       pshu     center_units unit_it_array__t := unit_it_array__t(.
  1527       pshu         unit_it_t(. unit_type_t_omu_c ,0 .) ,
  1527       pshu         unit_it_t(. unit_type_t_omu_c ,1 .) ,
  1527       pshu         unit_it_t(. unit_type_t_rsmu_c,0 .) ,
  1527       pshu         unit_it_t(. unit_type_t_rsmu_c,1 .) ,
  1527       pshu         unit_it_t(. unit_type_t_cacu_c,0 .) ,
  1527       pshu         unit_it_t(. unit_type_t_cacu_c,1 .) ,
  1527       pshu         unit_it_t(. unit_type_t_cm_c  ,0 .) ,
  1527       pshu         unit_it_t(. unit_type_t_cm_c  ,1 .) .);
   733    lifsong 
  1257   huantang START;
  1257   huantang     CALL add_units_to_jiifil__r();
  1527       pshu    
  1527       pshu     TASK index:=0;
  1527       pshu     WHILE( index <unit_it_array__t_max_c   );
  1257   huantang 
  1527       pshu         DECISION jii_find_unit__r( center_units(index).ttype, center_units(index).index,
  1527       pshu               jii_ptr, comp_ptr, alp_ptr );
  1527       pshu         ( T ):
  1527       pshu             TASK comp_ptr->half_conns_needed := T;
  1527       pshu             CALL give_out_task__r( jii_ptr->cluster_idx );
  1527       pshu         ENDDECISION;  
  1527       pshu       
  1527       pshu         TASK index := index +1;
  1527       pshu     ENDWHILE;
  1527       pshu 
  1257   huantang ENDPROCEDURE handle_rcy_trial_cutover__r;
  1257   huantang 
  1257   huantang 
  1257   huantang 
  1257   huantang 
     2     yanzuo /************** p r o c e s s  b o d y ********************************/
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo     TASK swo_ongoing__pv := F;
     2     yanzuo 
  1104   huantang     
  1104   huantang     
     2     yanzuo     TASK far_self__pv := SELF;
     2     yanzuo     TASK set_pid_computer_r( far_self__pv, own_unit_log_addr );
   924       pshu     TASK jigcon_hand_num := lib_hand_process_count_r(jigger_p,NUMBER_FROM(jigcon));
     2     yanzuo     /* create HMS hand. */
  1283   chunchen     TASK ec := create_hms_hand__r();
     2     yanzuo 
  1283   chunchen     DECISION ( ec /= success_ec );
  1283   chunchen        ( T ):
  1283   chunchen             TASK dxsyslog_r( log_type_t_text_e_c,
  1309       pshu                           @'JIGMAS: create JIGHMS hand failed! status = 0X%X,',ec);
  1283   chunchen     ENDDECISION;
  1309       pshu     
  1309       pshu     TASK ec:= create_mix_hand__r();
  1309       pshu     DECISION(ec /= success_ec);
  1309       pshu     (T):
  1309       pshu         TASK dxsyslog_r( log_type_t_text_i_c,
  1309       pshu                      @'JIGMAS: create JIGMIX hand failed! status = 0X%X,',ec);
  1309       pshu     ENDDECISION;
  1309       pshu     
   929    lifsong     CALL conf_change_pv_init__r();
     2     yanzuo     CALL jii_initialize__r( T );
     2     yanzuo     TASK init_job_module__r();
     2     yanzuo 
     2     yanzuo     /* create cluster hands. */
     2     yanzuo     TASK clus_idx := 1;
     2     yanzuo     WHILE clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo        TASK ec := create_clus_hand__r( clus_idx );
     2     yanzuo        DECISION ( ec /= success_ec );
     2     yanzuo        ( T ):
     2     yanzuo           TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                           @'JIGMAS: create clu hand failed!:'n'r'\
     2     yanzuo                            'status = 0X%X, clus idx = 0X%X',
     2     yanzuo                             ec, clus_idx );
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK clus_idx := clus_idx + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo 
  1420       pshu     CALL init_proxy_item;
  1420       pshu 
     2     yanzuo     CALL cluster_hands_created_log__r();
     2     yanzuo 
   617     qinggu     TASK set_tomprb_pid__r();
   617     qinggu 
  1317      tinyu    
  1104   huantang 
     2     yanzuo     SET (NOW + hand_supervision__c, hand_supervision_timer);
     2     yanzuo 
     2     yanzuo     NEXTSTATE starting;
     2     yanzuo 
     2     yanzuo STATE starting
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo #if (F) /* (rdox) */
     2     yanzuo   /* in RDOX, stop startup at JIGGER */
     2     yanzuo #else
     2     yanzuo   INPUT startup_s( mstate, startinfo );
     2     yanzuo     DCL
     2     yanzuo        mstate  unit_state_t,
     2     yanzuo        status  error_t,
     2     yanzuo        sndr    pid,
     2     yanzuo        startinfo  startup_info_t;
     2     yanzuo 
     2     yanzuo     TASK sndr := SENDER;
  1222      tinyu 	CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS: Receive startup_s message , mstate=%d'n'r',mstate);
     2     yanzuo     DECISION mstate;
     2     yanzuo     ( unit_state_t_wo_c ):
     2     yanzuo        DECISION startinfo.family_restarted;
     2     yanzuo        ( F ):
     2     yanzuo           CALL add_units_to_jiifil__r();
     2     yanzuo           CALL units_added_to_jiifil_log__r();
     2     yanzuo        ENDDECISION;
   464       p5li        CALL init_service_table__r();
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* Order state change notifications. In WO unit, this should
     2     yanzuo        be done after JIIFIL has been populated. */
     2     yanzuo     TASK status := order_events_and_notifs__r();
     2     yanzuo 
     2     yanzuo     DECISION mstate;
     2     yanzuo     ( /= unit_state_t_wo_c ):
     2     yanzuo 
     2     yanzuo        /* be ready to serve as soon as warming is done */
     2     yanzuo        TASK action_enabled__pv := T;
     2     yanzuo 
     2     yanzuo        /* Go wait for warm-up */
     2     yanzuo        OUTPUT startup_ack_s( status ) TO sndr;
     2     yanzuo        NEXTSTATE cold;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION status;
     2     yanzuo     ( success_ec ):
     2     yanzuo        TASK status := add_services__r();
   604    lifsong        CALL services_registered_log__r(  );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION status;
     2     yanzuo       ( /= success_ec):
  1029    lifsong         TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                      @'JIGGER: startup status = %X',
     2     yanzuo                      status );
     2     yanzuo 
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK status := success_ec;
     2     yanzuo 
     2     yanzuo     OUTPUT startup_ack_s( status ) TO sndr;
     2     yanzuo     SET( NOW + act_delay__c, action_timer );
     2     yanzuo #endif
  1104   huantang 	
     2     yanzuo     NEXTSTATE working;
     2     yanzuo 
     2     yanzuo ENDSTATE starting COMMENT ' ';
     2     yanzuo 
  1462       hhou 
     2     yanzuo STATE cold
     2     yanzuo   COMMENT '#E: Waiting for warming to change state to working';
     2     yanzuo 
     2     yanzuo    INPUT supervision_msg_s( * );
     2     yanzuo       OUTPUT supervision_ack_s( INPUT ) TO SENDER;
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT hand_supervision_timer;
     2     yanzuo       SET (NOW + hand_supervision__c, hand_supervision_timer);
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo ENDSTATE cold;
     2     yanzuo 
     2     yanzuo STATE working;
     2     yanzuo 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* Task management.                                              */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT action_timer;
     2     yanzuo     TASK action_enabled__pv := T;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_task_completed__s( clus_idx ),
     2     yanzuo         jig_task_inquiry__s( clus_idx );
     2     yanzuo 
     2     yanzuo     TASK hand_states__pv( clus_idx ) := hand_state__t_idle_c;
     2     yanzuo     CALL give_out_task__r( clus_idx );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   INPUT jig_hand_state_update__s( clus_idx, hand_states__pv( clus_idx ));
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   /*
     2     yanzuo    * This is where the master actually gives out tasks to cluster hands.
     2     yanzuo    * This code could also be in give_out_tasks__r. But for now, it's
     2     yanzuo    * nice to be able to follow master's activities via message monitoring.
     2     yanzuo    */
     2     yanzuo   INPUT jig_give_out_task__s( clus_idx );
     2     yanzuo     DCL
     2     yanzuo        curr_clus  alp_cluster_idx__t,
     2     yanzuo        end_limit  alp_cluster_idx__t,
     2     yanzuo        found      bool,
     2     yanzuo        rt0        run_time_t;
     2     yanzuo 
     2     yanzuo     DECISION clus_idx;
     2     yanzuo     ( alp_cluster_idx__t_any_c ):
     2     yanzuo        TASK curr_clus := 1,
     2     yanzuo             end_limit := jig_limits__t_n_clus_c;
     2     yanzuo     ELSE:
     2     yanzuo        TASK curr_clus := clus_idx,
     2     yanzuo             end_limit := clus_idx;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     WHILE curr_clus <= end_limit;
     2     yanzuo        DECISION (( curr_clus = clus_idx ) OR
     2     yanzuo                  ( clus_idx = alp_cluster_idx__t_any_c ))
     2     yanzuo                 AND
     2     yanzuo                 ( hand_states__pv( curr_clus ) = hand_state__t_idle_c );
     2     yanzuo        ( T ):
     2     yanzuo           TASK rt0 := get_own_run_time_r();
     2     yanzuo           TASK found := get_next_task__r( curr_clus, task_data );
     2     yanzuo           TASK gn_time__pv := gn_time__pv +
     2     yanzuo                    dword( get_own_run_time_r() - rt0 );
     2     yanzuo           TASK gn_count__pv := gn_count__pv + 1;
     2     yanzuo 
     2     yanzuo           DECISION found;
     2     yanzuo           ( T ):
  1124   huantang 				OUTPUT jig_task_msg__s( task_data ) TO
  1124   huantang 				       cluster_hand_pid__r( curr_clus );
     2     yanzuo              TASK hand_states__pv( curr_clus ) := hand_state__t_busy_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo        TASK curr_clus := curr_clus + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* Port configuration requests.                                  */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT fig_service_req_msg_s( fig_msg_header, uxhwb, reset_phase );
     2     yanzuo     DCL
     2     yanzuo        fig_msg_header    fig_msg_header_t,
     2     yanzuo        uxhwb             ux_hw_block_type_t,
   216      h10hu        reset_phase       fig_reset_phase_t;
  1104   huantang     
  1481       pshu     CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS:fig_service_req_msg_s arrived HMS=%04X 'n'r',fig_msg_header.hms_address);
     2     yanzuo     DECISION jii_store_figseb_req__r( fig_msg_header, uxhwb, reset_phase,
     2     yanzuo                                       clus_idx );
     2     yanzuo     ( T ):
  1481       pshu        CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS:fig_service_req_msg_s stored HMS=%04X 'n'r',fig_msg_header.hms_address);
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo #if (F)
     2     yanzuo   INPUT unit_restart_notice_s ( unit_type, unit_index, ?, ? );
     2     yanzuo     DCL
     2     yanzuo        unit_type         unit_type_t,
     2     yanzuo        unit_index        unit_index_t,
     2     yanzuo        jii_ptr, alp_ptr  jiifil_ptr__t,
     2     yanzuo        comp_ptr          jii_comp_ptr__t;
     2     yanzuo 
     2     yanzuo     DECISION jii_find_unit__r( unit_type, unit_index,
     2     yanzuo                                jii_ptr, comp_ptr, alp_ptr )
     2     yanzuo              AND
     2     yanzuo              jii_ptr->is_level1_alp_unit;
     2     yanzuo     ( T ):
     2     yanzuo        /* The unit may have gotten a spontaneous restart.
     2     yanzuo         * Clear the APC init flag to prevent cluster hand from
     2     yanzuo         * starting APC init task too early.
     2     yanzuo         */
     2     yanzuo        TASK jii_ptr->apc_ph1_init_needed := F;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo #endif
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* ATM interface parameter requests.                             */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT res_mssar_int_if_param_req_s(ex_hms_address,boot_loading)
     2     yanzuo     COMMENT 'Local internal interface parameter request from DMX unit.';
     2     yanzuo     DCL
     2     yanzuo        ex_hms_address  fig_msg_header_t,
     2     yanzuo        boot_loading    bool;
     2     yanzuo 
     2     yanzuo     DECISION jii_store_atm_param_req__r( ex_hms_address, boot_loading,
     2     yanzuo                                          sar_type_t_mssar_c, clus_idx );
     2     yanzuo     ( T ):
  1222      tinyu 	    CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS:res_mssar_int_if_param_req_s HMS=%04X EXT=%d'n'r',ex_hms_address.hms_address,ex_hms_address.extended_addr);
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT res_pqii_int_if_param_req_s( ex_hms_address, boot_loading )
     2     yanzuo     COMMENT 'Local internal interface parameter request from Chorus unit.';
     2     yanzuo     DCL
     2     yanzuo        ex_hms_address  fig_msg_header_t,
     2     yanzuo        boot_loading    bool;
     2     yanzuo 
     2     yanzuo     DECISION jii_store_atm_param_req__r( ex_hms_address, boot_loading,
     2     yanzuo                                          sar_type_t_pqii_sar_c, clus_idx );
     2     yanzuo     ( T ):
  1222      tinyu 	    CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS:res_pqii_int_if_param_req_s HMS=%04X EXT=%d'n'r',ex_hms_address.hms_address,ex_hms_address.extended_addr);
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT init_amd_fpga_param_req_s (unit_type, unit_index)
     2     yanzuo    COMMENT 'UAMPRB want MD FPGA parameters';
     2     yanzuo    DCL
     2     yanzuo       unit_type      unit_type_t,
     2     yanzuo       unit_index     unit_index_t;
     2     yanzuo    DECISION jii_store_fpga_para_req__r(unit_type, unit_index, clus_idx);
     2     yanzuo    (T):
     2     yanzuo       CALL give_out_task__r( clus_idx );
     2     yanzuo    ENDDECISION;
     2     yanzuo    NEXTSTATE -;
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* APC initialization requests.                                  */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT alp_ready_for_phase2_init_s( unit_info )
     2     yanzuo     COMMENT 'Request to initialize the 2nd phase of the APC chip of the unit defined in message.';
     2     yanzuo     DCL
     2     yanzuo        unit_info unit_it_t;
     2     yanzuo 
     2     yanzuo     DECISION jii_store_apc_init_req__r( unit_info, SENDER, clus_idx );
     2     yanzuo     ( T ):
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* Reporting requests/notifications.                             */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT load_int_resource_req_s
     2     yanzuo     COMMENT 'Request from RUGGER to start resource loading.';
     2     yanzuo 
     2     yanzuo     DECISION jii_store_rugger_readiness__r( SENDER, clus_idx );
     2     yanzuo     ( T ):
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /*                                                               */
     2     yanzuo   /* BRTSEB ready notification.                                    */
     2     yanzuo   /*                                                               */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT alp_ready_for_reporting_s
   359    lifsong     COMMENT 'Request from CIUDAD, RS2PRB, RS3PRB, KREIVI AND RSKPRB to start reporting.';
     2     yanzuo       DCL
     2     yanzuo        sender_pid   pid,
     2     yanzuo        sender_comp  phys_address_t,
     2     yanzuo        ec               error_t;
     2     yanzuo 
     2     yanzuo     TASK sender_comp := SENDER_PHYS_COMPUTER;
     2     yanzuo     TASK sender_pid  := SENDER;
     2     yanzuo 
  1222      tinyu 	 CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,@'JIGMAS:alp_ready_for_reporting_s COMP=%04X'n'r',sender_comp);
     2     yanzuo     /* get the notification from CIUDAD OR RS3PRB/KREIVI */
  1153   huantang     DECISION jii_store_cac_readiness__r( SENDER, SENDER_PHYS_COMPUTER,clus_idx );
     2     yanzuo     ( T ):
     2     yanzuo        DECISION get_pid_family_r( sender_pid );
     2     yanzuo        ( ciudad_p ):
     2     yanzuo           CALL give_out_task__r( clus_idx );
     2     yanzuo           CALL cluster_configured_log__r( clus_idx, sender_comp );
     2     yanzuo 
   361    lifsong        ( rs3prb_p, kreivi_p, rskprb_p ):
     2     yanzuo           /* need not assign task for app unit or eipu unit */
     2     yanzuo           TASK ec:=  write_stup_log_with_addr_r( stup_granularity_t_third_c,
     2     yanzuo                           stup_writer_ptr_t(@'JIG'),
     2     yanzuo                           sender_comp,
     2     yanzuo                           stup_sw_layer_t_spl_c,
     2     yanzuo                          stup_lib_ptr_t(
     2     yanzuo                          @'EV51: BRT ready for create xconn: cluster index: 0x%X '),
     2     yanzuo                           clus_idx );
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION ;
     2     yanzuo 
     2     yanzuo     OUTPUT alp_ready_for_reporting_ack_s TO sender_pid;
  1317      tinyu     CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send alp_ready_for_reporting_ack_s 'n'r');
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /* ======================================================
     2     yanzuo    * VPI inquiry from RUGGER
     2     yanzuo    * ====================================================== */
     2     yanzuo 
     2     yanzuo   INPUT inquire_vpi_value_req_s( unit_index, unit_type )
     2     yanzuo     COMMENT 'Client inquires the VPI value of the given unit.';
     2     yanzuo     DCL
     2     yanzuo        unit_type         unit_type_t,
     2     yanzuo        unit_index        unit_index_t,
     2     yanzuo        jii_ptr, alp_ptr  jiifil_ptr__t,
     2     yanzuo        comp_ptr          jii_comp_ptr__t,
   666    lifsong        vpi                    vpi_t   := vpi_t_unspecified_c,
   666    lifsong        proc_idx            byte,
   666    lifsong        ec                      error_t := illegal_unit_ec;
  1379       pshu        
   666    lifsong     DECISION jii_find_unit__r( unit_type, unit_index, jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo     ( T ):
   666    lifsong  
  1379       pshu        TASK ec := jig_vp_reporting_not_done_ec;
   666    lifsong        DECISION comp_ptr->vp_reported;
   666    lifsong        ( T ):
   666    lifsong           TASK vpi := comp_ptr->vpi;
   666    lifsong           TASK ec := success_ec;
   666    lifsong           
   666    lifsong        ELSE:
   666    lifsong     
   666    lifsong           DECISION mpqu_check__r(jii_ptr->unit_type);
   666    lifsong           ( T ):
   666    lifsong              TASK proc_idx := 0;
   666    lifsong              WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
   666    lifsong                 DECISION jii_ptr->procs(proc_idx).vp_reported = T AND jii_ptr->procs(proc_idx).interface_index = comp_ptr->interface_index;
   666    lifsong                 ( T ):
   666    lifsong                    TASK vpi := jii_ptr->procs(proc_idx).vpi;
   666    lifsong                    TASK ec := success_ec;
   666    lifsong                    OUT;
   666    lifsong                 ENDDECISION;
   666    lifsong                 TASK proc_idx := proc_idx + 1;
   666    lifsong              ENDWHILE;
   666    lifsong           ENDDECISION;
   666    lifsong           
   666    lifsong        ENDDECISION;
   666    lifsong     ENDDECISION;      
   666    lifsong 
     2     yanzuo     OUTPUT inquire_vpi_value_ack_s( ec, vpi, unit_index, unit_type) TO SENDER;
  1317      tinyu     CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send inquire_vpi_value_ack_s, status=%d, unit_type=%X, unit_index=%d'n'r',ec,unit_type,unit_index);
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
   666    lifsong 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /* JIIFIL/JICFIL read/update requests from hand processes.       */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT jig_update_jiifil__s( rec, proc_idx, fields, req_idx,
     2     yanzuo                               timestamp, ack_wanted );
     2     yanzuo     DCL
     2     yanzuo        rec               jiifil__t,
     2     yanzuo        proc_idx          hms_processor_index_t,
     2     yanzuo        fields            jii_fields__t,
     2     yanzuo        req_idx           dword,
     2     yanzuo        timestamp         jig_timestamp__t,
     2     yanzuo        ack_wanted        bool,
     2     yanzuo        sndr              pid;
     2     yanzuo 
     2     yanzuo     TASK sndr := SENDER;
     2     yanzuo 
     2     yanzuo     DECISION jii_update_local_record__r( rec, proc_idx, fields,
     2     yanzuo                                          timestamp, clus_idx );
     2     yanzuo     ( T ):
     2     yanzuo        CALL give_out_task__r( clus_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ack_wanted;
     2     yanzuo     ( T ):
     2     yanzuo        OUTPUT jig_update_jiifil_ack__s( success_ec, req_idx ) TO sndr;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo   INPUT jig_vcc_resource_req__s( src_addr, exist_status, nrt_only,
     2     yanzuo                                  vccs_params );
     2     yanzuo     DCL
     2     yanzuo        src_addr        phys_address_t,
     2     yanzuo        exist_status    bool,
     2     yanzuo        nrt_only        bool,
     2     yanzuo        vccs_params     jig_vccs_params__t,
     2     yanzuo        vccs_resources  jig_vccs_resources__t,
     2     yanzuo        ec              error_t,
     2     yanzuo        sndr            pid;
     2     yanzuo 
     2     yanzuo     TASK sndr := SENDER;
     2     yanzuo     DECISION vccs_params.item_count;
     2     yanzuo     ( /= 0 ):
     2     yanzuo        TASK ec := select_vcc_resources__r( src_addr, exist_status, nrt_only,
     2     yanzuo                                            vccs_params, vccs_resources );
     2     yanzuo     ELSE:
     2     yanzuo        TASK ec := jii_list_vccs__r( src_addr, exist_status, nrt_only,
     2     yanzuo                                     vccs_resources );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     OUTPUT jig_vcc_resource_ack__s( ec,
     2     yanzuo                                     src_addr,
     2     yanzuo                                     vccs_resources ) TO sndr;
     2     yanzuo     NEXTSTATE -;
   223    lifsong     
   223    lifsong   INPUT jig_remote_vcc_res_req__s( src_addr, exist_status, nrt_only,
   223    lifsong                                  vccs_params );
   223    lifsong     DCL
   223    lifsong        src_addr        phys_address_t,
   223    lifsong        exist_status    bool,
   223    lifsong        nrt_only        bool,
   223    lifsong        vccs_params     jig_vccs_params__t,
   223    lifsong        remote_vcc_res_ptr jig_remote_vccs_res_ptr__t,
   223    lifsong        pah                ptr_and_handle_t,       
   223    lifsong        idx              word,
   223    lifsong        sndr            pid;
   223    lifsong        
   223    lifsong     TASK sndr := SENDER, idx:= 0;
   223    lifsong     DECISION allocate_buffer_r( SIZEOF( $remote_vcc_res_ptr ), 0, pah );
   223    lifsong     ( F ):
   223    lifsong       NEXTSTATE -;
   223    lifsong     ENDDECISION;
   223    lifsong     TASK remote_vcc_res_ptr := jig_remote_vccs_res_ptr__t( pah.use_ptr.ptr ),
   223    lifsong             remote_vcc_res_ptr->item_count := vccs_params.item_count;
     2     yanzuo 
   223    lifsong     DECISION exist_status;/*only service existing vcc_res inquiry currently*/
   223    lifsong     ( F ):
   223    lifsong         TASK dxsyslog_r( log_type_t_text_e_c,
   223    lifsong                        @'JIGMAS: Wrong parameter jig_remote_vcc_resource_req__s'
   223    lifsong                        ' src_addr=%XH',src_addr );
   223    lifsong         WHILE idx < vccs_params.item_count;
   223    lifsong             TASK remote_vcc_res_ptr->items(idx).ec := invalid_param_ec;
   223    lifsong             TASK idx := idx + 1;            
   223    lifsong         ENDWHILE;        
   223    lifsong         OUTPUT jig_remote_vcc_res_ack__s(src_addr,
   223    lifsong                                                                  $remote_vcc_res_ptr ) TO sndr;
   223    lifsong         TASK free_buffer_r( pah.use_handle.handle );           
   223    lifsong         NEXTSTATE -;        
   223    lifsong     ENDDECISION;     
   223    lifsong     
   223    lifsong     WHILE idx < vccs_params.item_count;
   223    lifsong         TASK remote_vcc_res_ptr->items(idx).ec := get_one_exist_vcc_res__r( vccs_params.vcc(idx).target_computer, 
   223    lifsong                                                                                                             nrt_only, 
   223    lifsong                                                                                                             vccs_params.vcc(idx), 
   223    lifsong                                                                                                             remote_vcc_res_ptr->items(idx).common,
   223    lifsong                                                                                                             remote_vcc_res_ptr->items(idx).res);
   223    lifsong        TASK idx := idx + 1;
   223    lifsong     ENDWHILE;
   223    lifsong 
   223    lifsong     OUTPUT jig_remote_vcc_res_ack__s(src_addr,
   223    lifsong                                                              $remote_vcc_res_ptr ) TO sndr;
   223    lifsong     TASK free_buffer_r( pah.use_handle.handle );                                                       
   223    lifsong     NEXTSTATE -;
   223    lifsong 
     2     yanzuo  INPUT jig_vcc_tm_fpga_req__s (vcc_res, tm_fpga_vcc_idx);
     2     yanzuo  DCL
     2     yanzuo 	vcc_res      		jig_vccs_resources__t,
     2     yanzuo 	tm_fpga_vcc_idx	dword,
     2     yanzuo     	sndr            		pid,
     2     yanzuo     	ec				error_t := unsuccessful_ec;
     2     yanzuo 
     2     yanzuo 	TASK sndr := SENDER;
     2     yanzuo 	TASK ec := jic_tm_same_vci__r (vcc_res,tm_fpga_vcc_idx);
     2     yanzuo  	OUTPUT jig_vcc_tm_fpga_ack__s (ec, 	vcc_res) TO sndr;
     2     yanzuo  	NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /*
     2     yanzuo    * Cluster hand or connection hand asks the master to modify
     2     yanzuo    * states of one or more half-connections in JICFIL.
     2     yanzuo    * Cluster hand sends this request when it has created one or more
     2     yanzuo    * NRT half-connections for a computer which is being restarted.
     2     yanzuo    * Connection hand sends the message at the end of connection
     2     yanzuo    * creation or deletion task.
     2     yanzuo    */
     2     yanzuo   INPUT jig_update_half_conn_states__s( conn_ids, comps, xconn_ids,
     2     yanzuo                                         exist_state,
     2     yanzuo                                         create_client_pid,
     2     yanzuo                                         delete_client_pid,
     2     yanzuo                                         op_status,
     2     yanzuo                                         conn_id,
     2     yanzuo                                         comp1,
     2     yanzuo                                         comp2 );
     2     yanzuo     DCL
     2     yanzuo        conn_ids                jig_id_array__t,
     2     yanzuo        comps                   jig_id_array__t,
     2     yanzuo        xconn_ids               jig_id_array__t,
     2     yanzuo        exist_state             bool,
     2     yanzuo        units_found             bool := F,
     2     yanzuo        create_client_pid       pid,
     2     yanzuo        delete_client_pid       pid,
     2     yanzuo        ec, op_status           error_t,
     2     yanzuo        conn_id                 conn_id_t,
     2     yanzuo        comp1, comp2            computer_t,
   145    lifsong        jic_ptr                 jicfil_ptr__t := NIL,
     2     yanzuo        jii_ptr_1, jii_ptr_2, d jiifil_ptr__t,
     2     yanzuo        comp_ptr_1, comp_ptr_2  jii_comp_ptr__t,
     2     yanzuo        hms1                    hms_address_t := hms_address_t_not_defined_c,
     2     yanzuo        hms2                    hms_address_t := hms_address_t_not_defined_c;
     2     yanzuo 
     2     yanzuo     CALL set_conn_oper_active__r( conn_id, F );
     2     yanzuo 
     2     yanzuo     CALL jii_update_half_conn_states__r( conn_ids, comps, xconn_ids,
     2     yanzuo                                          exist_state,
     2     yanzuo                                          conn_id,
     2     yanzuo                                          jic_ptr );
     2     yanzuo 
     2     yanzuo     /* We need to dig out the HMS addresses of the two computers
     2     yanzuo      * for the create/delete ack to be sent to TOMPRB. */
     2     yanzuo     DECISION jii_find_computer__r( comp1, jii_ptr_1, comp_ptr_1, d )
     2     yanzuo              AND
     2     yanzuo              jii_find_computer__r( comp2, jii_ptr_2, comp_ptr_2, d );
     2     yanzuo      ( T ):
     2     yanzuo         TASK units_found := T;
     2     yanzuo         TASK hms_address_t_make_ext_r( hms1,
     2     yanzuo                                        comp_ptr_1->proc_index,
     2     yanzuo                                        hms_address_t_rack_r (
     2     yanzuo                                          jii_ptr_1->hms_address ),
     2     yanzuo                                        hms_address_t_subrack_r (
     2     yanzuo                                          jii_ptr_1->hms_address ),
     2     yanzuo                                        hms_address_t_ppa_r(
     2     yanzuo                                          jii_ptr_1->hms_address ));
     2     yanzuo 
     2     yanzuo         TASK hms_address_t_make_ext_r( hms2,
     2     yanzuo                                        comp_ptr_2->proc_index,
     2     yanzuo                                        hms_address_t_rack_r (
     2     yanzuo                                          jii_ptr_2->hms_address ),
     2     yanzuo                                        hms_address_t_subrack_r (
     2     yanzuo                                          jii_ptr_2->hms_address ),
     2     yanzuo                                        hms_address_t_ppa_r(
     2     yanzuo                                          jii_ptr_2->hms_address ));
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION units_found AND ( create_client_pid /= NULL );
   617     qinggu     ( T ):
   617     qinggu         DECISION op_status = success_ec;
   617     qinggu         ( T ):
   617     qinggu             DECISION ( jic_ptr = NIL );
   617     qinggu             ( T ):
   617     qinggu                 TASK op_status := unit_not_found_ec;
   617     qinggu             ELSE:
   617     qinggu                 DECISION jic_ptr->half_conn(0).exists AND
   617     qinggu                          jic_ptr->half_conn(1).exists;
   617     qinggu                 ( F ):
   617     qinggu                     TASK op_status := prereq_of_conn_not_fulfilled_ec;
   617     qinggu                 ELSE:
   624     qinggu                     /* successful status, ack is needless. 
   624     qinggu                        ack is in jii_update_half_conn_states__r */
   624     qinggu                     NEXTSTATE -;
   617     qinggu                 ENDDECISION;
     2     yanzuo             ENDDECISION;
     2     yanzuo 
   617     qinggu         /*ELSE:
   617     qinggu           op_status is the return code already.
   617     qinggu          */
   617     qinggu         ENDDECISION;
     2     yanzuo 
   617     qinggu         OUTPUT int_xconn_create_ack_s( op_status, hms1, hms2,
   624     qinggu                                        conn_id,
   617     qinggu                                        vpi_t_unspecified_c,
   617     qinggu                                        vci_t_unspecified_c,
   617     qinggu                                        vpi_t_unspecified_c,
   617     qinggu                                        vci_t_unspecified_c ) TO create_client_pid,
   617     qinggu               SET DESTROY_MSG_IF_NOT_WO_STATE = NOT swo_ongoing__pv,
   617     qinggu                   DONT_CARE = T;
  1317      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_create_ack_s, status=%d, hms_addr1=%X, hms_addr2=%X, conn_id=%d'n'r',
  1317      tinyu     	op_status, hms1, hms2,conn_id);
  1317      tinyu         
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION ( delete_client_pid /= NULL );
     2     yanzuo      ( T ):
     2     yanzuo         /* If the connection was removed successfully by AUUSEB request,
     2     yanzuo            or by the master's own request, wipe the JICFIL record. */
     2     yanzuo         DECISION ( op_status = success_ec ) AND
     2     yanzuo                  ( jic_ptr /= NIL ) AND
     2     yanzuo                  ( get_pid_family_r( delete_client_pid ) /= own_family_id
     2     yanzuo                    OR
     2     yanzuo                    get_pid_process_id_r( delete_client_pid ) = 0 );
     2     yanzuo          ( T ):
     2     yanzuo             CALL jii_wipe_conn_rec__r( jic_ptr );
     2     yanzuo         ENDDECISION;
     2     yanzuo 
     2     yanzuo         /* Note: if we didn't find one or both endpoint computers
     2     yanzuo            from JIIFIL, one or both HMS address will be
     2     yanzuo            hms_address_t_not_defined_c. */
     2     yanzuo         DECISION hms1;
     2     yanzuo          ( hms_address_t_not_defined_c ):
     2     yanzuo             TASK ec := hms_slv_addr_from_phys_addr_r( comp1, hms1 );
     2     yanzuo         ENDDECISION;
     2     yanzuo         DECISION hms2;
     2     yanzuo          ( hms_address_t_not_defined_c ):
     2     yanzuo             TASK ec := hms_slv_addr_from_phys_addr_r( comp2, hms2 );
     2     yanzuo         ENDDECISION;
     2     yanzuo 
     2     yanzuo         OUTPUT int_xconn_delete_ack_s( op_status,
     2     yanzuo                                        conn_id,
     2     yanzuo                                        hms1,
     2     yanzuo                                        hms2 )
     2     yanzuo                TO delete_client_pid,
     2     yanzuo                SET DESTROY_MSG_IF_NOT_WO_STATE = T;
  1317      tinyu          CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_delete_ack_s, status=%d, conn_id=%d'n'r',
  1317      tinyu     	op_status, conn_id);
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT jig_alloc_interf_id_s( utype, uindex, unit_addr, mphy_number );
     2     yanzuo     DCL
     2     yanzuo        sndr              pid,
     2     yanzuo        utype             unit_type_t,
     2     yanzuo        uindex            unit_index_t,
     2     yanzuo        unit_addr         computer_t,
     2     yanzuo        unit_ptr, alp_ptr jiifil_ptr__t,
     2     yanzuo        comp_ptr          jii_comp_ptr__t,
     2     yanzuo        mphy_number       byte,
  1433    jinncao        result            error_t := success_ec;
     2     yanzuo 
     2     yanzuo     TASK sndr := SENDER;
     2     yanzuo     DECISION jii_find_computer__r( unit_addr, unit_ptr, comp_ptr, alp_ptr )
     2     yanzuo              AND
    73     jamema              (unit_ptr->interfaces(0).intf_id = atm_interface_id_t_unspecif_c OR
    73     jamema               unit_ptr->reconfig_needed);
     2     yanzuo     ( T ):
     2     yanzuo        CALL select_interface_ids__r( $unit_ptr, mphy_number, result );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* Tilly: workaround for exist interface */
  1433    jinncao     DECISION result;
  1433    jinncao     (success_ec):
  1433    jinncao     	DECISION unit_ptr->interfaces(0).intf_id;
  1433    jinncao     	( /= atm_interface_id_t_unspecif_c ):
  1433    jinncao        		TASK result := success_ec;
  1433    jinncao     	ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     OUTPUT jig_alloc_interf_id_ack_s( utype, uindex,
     2     yanzuo                                       unit_ptr->procs(0).interface_index,
     2     yanzuo                                       unit_ptr->procs(1).interface_index,
     2     yanzuo                                       unit_ptr->procs(2).interface_index,
     2     yanzuo                                       unit_ptr->procs(3).interface_index,
     2     yanzuo                                       unit_ptr->interfaces(0).intf_id,
     2     yanzuo                                       unit_ptr->interfaces(1).intf_id,
     2     yanzuo                                       unit_ptr->interfaces(2).intf_id,
   470    lifsong                                       unit_ptr->interfaces(3).intf_id,
     2     yanzuo                                       result ) TO sndr;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /* Warming of SP-ALP units.                                      */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   /* UAMPRB informs JIGGER that it has warmed up SP unit
     2     yanzuo    * from port configuration viewpoint. Now it is JIGGER's
     2     yanzuo    * turn to execute its own warm-up tasks for the spare unit. */
     2     yanzuo 
     2     yanzuo   INPUT fig_sp_unit_updated_s( sp_unit_addr, conf_stat );
     2     yanzuo     DCL
     2     yanzuo        sp_unit_addr      phys_address_t,
     2     yanzuo        conf_stat         error_t,
     2     yanzuo        uam_pid           pid,
    38    lifsong        ustate            unit_state_t,
     2     yanzuo        is_alp1_unit      bool,
   361    lifsong        is_app_unit       bool,
   361    lifsong        dummy_comp_ptr    jii_comp_ptr__t,
   361    lifsong        alp_ptr           jiifil_ptr__t := NIL,
   361    lifsong        jii_ptr           jiifil_ptr__t := NIL;
     2     yanzuo 
     2     yanzuo     TASK uam_pid := SENDER;
     2     yanzuo     TASK clus_idx:= alp_cluster_idx__t_invalid_c;
     2     yanzuo     DECISION conf_stat;
     2     yanzuo     ( /= success_ec ):
     2     yanzuo     	NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
   361    lifsong     DECISION ( jii_find_computer__r( sp_unit_addr,
   361    lifsong            jii_ptr, dummy_comp_ptr, alp_ptr ) = T ) AND  
   361    lifsong            ( jii_ptr /= NIL ) AND
   361    lifsong            (jii_ptr->co_alp_unit_updated OR jii_ptr->alp_warmup_needed);
   361    lifsong     ( T ):
   361    lifsong         NEXTSTATE -;
   361    lifsong     ENDDECISION;
   361    lifsong 
   361    lifsong 
    38    lifsong     DECISION unit_state_by_phys_addr__r( sp_unit_addr, ustate ) /= success_ec;
    38    lifsong     ( T ):
    38    lifsong        NEXTSTATE -;
    38    lifsong     ENDDECISION;
    38    lifsong 
    38    lifsong     TASK ustate := (ustate | unit_state_t_mainstate_bm_c);
    38    lifsong     DECISION ustate/=unit_state_t_sp_c;
    38    lifsong     ( T ):
    38    lifsong        OUTPUT fig_sp_unit_updated_ack_s( sp_unit_addr ) TO uam_pid,
    38    lifsong                  SET DELIVERY_RANGE = 1 /* WO */;
  1317      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send fig_sp_unit_updated_ack_s, sp_unit_addr=%X'n'r',
  1317      tinyu     	sp_unit_addr);
    38    lifsong        NEXTSTATE -;
    38    lifsong     ENDDECISION;
    38    lifsong 
     2     yanzuo     DECISION jii_store_sp_warmup_req__r( sp_unit_addr, clus_idx, is_alp1_unit, is_app_unit);
     2     yanzuo     ( T ):
     2     yanzuo 
     2     yanzuo        DECISION clus_idx;
     2     yanzuo        ( = alp_cluster_idx__t_invalid_c ):
     2     yanzuo           NEXTSTATE -;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /*fill uam_pid table only for alp1 unit type so that when a SP
     2     yanzuo        tributary unit (for example SFU) request comes,uam_pid will not
     2     yanzuo        be replaced when new SP alp1 unit request with same cluster index comes.*/
     2     yanzuo        DECISION is_alp1_unit;
     2     yanzuo        ( T ):
     2     yanzuo        TASK uam_pids__pv( clus_idx ) := uam_pid;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /*For APP unit,before ack uam,mark unreachable pid so that jigger will prohibit redundant
     2     yanzuo          ack message to uam when cluster hand finished sp unit update(jig_sp_unit_updated__s)*/
     2     yanzuo        DECISION is_app_unit;
     2     yanzuo        ( T ):
     2     yanzuo        TASK set_pid_family_r(uam_pids__pv( clus_idx ),unreachable_family__c);
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /*For APP ALP1 unit, send ack message firstly to let RS3 do APP init.
     2     yanzuo        For APC ALP1 unit,ack would not be sent until cluster hand finished sp unit update
     2     yanzuo        For other unit,just send ack to UAM*/
     2     yanzuo        DECISION is_app_unit OR ( NOT is_alp1_unit );
     2     yanzuo        ( T ):
     2     yanzuo        OUTPUT fig_sp_unit_updated_ack_s( sp_unit_addr ) TO uam_pid,
     2     yanzuo                  SET DELIVERY_RANGE = 1 /* WO */;
     2     yanzuo        ENDDECISION;
  1317      tinyu        
  1317      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send fig_sp_unit_updated_ack_s, sp_unit_addr=%X'n'r',
  1317      tinyu     	sp_unit_addr);
     2     yanzuo 
     2     yanzuo        /*For APP&APC ALP1 SP unit,give out warmup task,other kinds of SP unit won't do this */
     2     yanzuo        DECISION is_alp1_unit;
     2     yanzuo        ( T ):
     2     yanzuo     	 CALL give_out_task__r( clus_idx );
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* If errer happened,we log it and send ack message to UAM anyway*/
     2     yanzuo     ELSE:
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                        @'JIGMAS: FAILED TO STORE SP WARMUP REQUEST'
     2     yanzuo                        ' sp_unit_addr=%XH',sp_unit_addr );
     2     yanzuo       OUTPUT fig_sp_unit_updated_ack_s( sp_unit_addr ) TO uam_pid,
     2     yanzuo                  SET DELIVERY_RANGE = 1 /* WO */;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send fig_sp_unit_updated_ack_s, sp_unit_addr=%X'n'r',
  1317      tinyu     	sp_unit_addr);
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /* Cluster hand tells that it has warmed up a SP-ALP1 unit. */
     2     yanzuo   INPUT jig_sp_unit_updated__s( sp_unit_addr, clus_idx );
     2     yanzuo     DCL
     2     yanzuo        sp_unit_addr  phys_address_t,
     2     yanzuo        clus_idx      alp_cluster_idx__t;
     2     yanzuo 
     2     yanzuo     DECISION IS_IN_WO_STATE
     2     yanzuo              AND
     2     yanzuo              ( get_pid_family_r(uam_pids__pv( clus_idx ))/=unreachable_family__c );
     2     yanzuo     ( T ):
     2     yanzuo        OUTPUT fig_sp_unit_updated_ack_s( sp_unit_addr )
     2     yanzuo               TO uam_pids__pv( clus_idx ),
     2     yanzuo               SET DELIVERY_RANGE = 1 /* WO */;
  1317      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send fig_sp_unit_updated_ack_s, sp_unit_addr=%X'n'r',
  1317      tinyu     	sp_unit_addr);
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /* Unit state change messages.                                   */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   /* ALP1 unit restart -- clear any flags needed (e.g. warming
     2     yanzuo      in progress, co_unit_updated */
     2     yanzuo    INPUT re_unit_restart_imminent_s( obj_unit_type, obj_unit_index,
     2     yanzuo                                     activation, rst_width, cntrl_status );
     2     yanzuo    DCL
     2     yanzuo       obj_unit_type           unit_type_t,
     2     yanzuo       obj_unit_index          unit_index_t,
     2     yanzuo       activation              cmd_act_t,
     2     yanzuo       rst_width               restart_width_t,
     2     yanzuo       cntrl_status            cmd_ctrl_t,
     2     yanzuo       jii_ptr                 jiifil_ptr__t,
     2     yanzuo       comp_ptr                jii_comp_ptr__t,
   227    lifsong       alp_ptr                 jiifil_ptr__t,
   227    lifsong       unit_info               unit_it_t;
     2     yanzuo 
     2     yanzuo     /* JIGGER orders this notification in WO unit only, but
     2     yanzuo        it must be handled in both units. */
     2     yanzuo       DECISION get_pid_family_r( SENDER );
     2     yanzuo       ( /= own_family_id ):
     2     yanzuo          OUTPUT INPUT TO far_self__pv;
  1317      tinyu           CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send re_unit_restart_imminent_s, unit_type=%X, unit_index=%d, activation=%X, rst_width=%X, status=%d'n'r',
  1317      tinyu          obj_unit_type, obj_unit_index,activation, rst_width, cntrl_status);
     2     yanzuo       ELSE:
     2     yanzuo          DECISION obj_unit_type;
     2     yanzuo          ( unit_type_t_any_type_c ):
     2     yanzuo              /* system restart -- do not service any more requests
     2     yanzuo                 unless the system restart gets halted somehow.. */
     2     yanzuo             SET( NOW + sysres_act_delay__c, action_timer );
     2     yanzuo             TASK action_enabled__pv := F;
     2     yanzuo          ELSE:
   227    lifsong             
   593    lifsong             CALL jii_store_alp_restart__r( obj_unit_type, obj_unit_index, T);
     2     yanzuo             /*
     2     yanzuo                Cluser hand need to know the unit is restarted and stop waiting APC init acks, and 1281 alam wont be set too*/
     2     yanzuo             DECISION jii_find_unit__r(obj_unit_type, obj_unit_index,jii_ptr,comp_ptr,alp_ptr);
     2     yanzuo             (T):
     2     yanzuo                OUTPUT INPUT TO cluster_hand_pid__r(jii_ptr->cluster_idx);
  1317      tinyu                CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send re_unit_restart_imminent_s, unit_type=%X, unit_index=%d, activation=%X, rst_width=%X, status=%d'n'r',
  1317      tinyu          obj_unit_type, obj_unit_index,activation, rst_width, cntrl_status);
   597     z7zhou                DECISION jii_ptr->is_level1_alp_unit AND jii_ptr->is_wo_unit AND (comp_ptr = @jii_ptr->procs(0));
   236     jamema                ( T ):
   236     jamema                 
   236     jamema                    TASK unit_info.ttype := obj_unit_type;
   236     jamema                    TASK unit_info.index := obj_unit_index;
   236     jamema                 
   236     jamema                    SET (NOW + tributary_restart_time__c, unit_restart_action_timer(unit_info));
   236     jamema                ENDDECISION;
     2     yanzuo             ENDDECISION;
     2     yanzuo          ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo    NEXTSTATE -;
     2     yanzuo 
   227    lifsong INPUT unit_restart_action_timer(unit_info);
   227    lifsong DCL
   227    lifsong    unit_info                       unit_it_t,
   227    lifsong    jii_ptr                           jiifil_ptr__t,
   227    lifsong    comp_ptr                      jii_comp_ptr__t,
   227    lifsong    alp_ptr                         jiifil_ptr__t,
   227    lifsong    ustate                          unit_state_t,
   227    lifsong    allow_act_sym_restart   bool := T;
   227    lifsong 
   227    lifsong    DECISION jii_find_unit__r(unit_info.ttype, unit_info.index, jii_ptr, comp_ptr, alp_ptr);
   227    lifsong    ( T ):
   227    lifsong       /* if WO-MXU gets restarted before tributary startup
   227    lifsong          is allowed, there is no need to restart A-SYM unit
   227    lifsong          since nothing has been reported yet and other units
   227    lifsong          haven't gotten their message connections yet. */
   227    lifsong 
  1303      tinyu       TASK allow_act_sym_restart := NOT(jii_ptr->sd4_init_needed);
  1303      tinyu 
   227    lifsong       DECISION ( unit_state_by_phys_addr__r( jii_ptr->procs(0).phys_addr, ustate ) = success_ec ) AND
   227    lifsong              ( ustate = unit_state_t_woex_c);
   227    lifsong      ( F ):
   227    lifsong          DECISION ( unit_state_by_phys_addr__r( jii_ptr->co_alp_unit_phys_addr, ustate ) = success_ec ) AND
   227    lifsong           ( ustate = unit_state_t_woex_c );
   227    lifsong             ( F ):
   227    lifsong                  CALL jii_setup_cluster_restart__r( jii_ptr->cluster_idx, allow_act_sym_restart );
   227    lifsong                  NEXTSTATE -;
   227    lifsong          ENDDECISION;   
   227    lifsong      ENDDECISION;       
   227    lifsong 
   567    lifsong      SET (NOW + tributary_restart_retry_time__c, unit_restart_retry_timer(unit_info));     
   227    lifsong   ENDDECISION;        
   567    lifsong   NEXTSTATE -;
   227    lifsong 
   227    lifsong INPUT unit_restart_retry_timer(unit_info);
   227    lifsong DCL
   227    lifsong    unit_info                       unit_it_t,
   227    lifsong    jii_ptr                           jiifil_ptr__t,
   227    lifsong    comp_ptr                      jii_comp_ptr__t,
   227    lifsong    alp_ptr                         jiifil_ptr__t,
   227    lifsong    ustate                          unit_state_t,
   227    lifsong    allow_act_sym_restart   bool := T;
   227    lifsong 
   227    lifsong    DECISION jii_find_unit__r(unit_info.ttype, unit_info.index, jii_ptr, comp_ptr, alp_ptr);
   227    lifsong    ( T ):
   227    lifsong 
  1303      tinyu       TASK allow_act_sym_restart := NOT jii_ptr->sd4_init_needed;
   227    lifsong       DECISION ( unit_state_by_phys_addr__r( jii_ptr->procs(0).phys_addr, ustate ) = success_ec ) AND
   227    lifsong              ( ustate = unit_state_t_woex_c);
   227    lifsong      ( F ):
   227    lifsong          DECISION ( unit_state_by_phys_addr__r( jii_ptr->co_alp_unit_phys_addr, ustate ) = success_ec ) AND
   227    lifsong           ( ustate = unit_state_t_woex_c );
   227    lifsong             ( F ):
   227    lifsong                  CALL jii_setup_cluster_restart__r( jii_ptr->cluster_idx, allow_act_sym_restart );
   227    lifsong          ENDDECISION;   
   227    lifsong      ENDDECISION;       
   567    lifsong   ENDDECISION;    
   567    lifsong   NEXTSTATE -;
   227    lifsong 
   227    lifsong /***********************************************************************************/
     2     yanzuo   /* Unit state has changed. Catch when unit moves over trial
     2     yanzuo    * boundary to the other slice.
     2     yanzuo    */
     2     yanzuo 
     2     yanzuo   INPUT re_state_change_executed_s( obj_unit_type,
     2     yanzuo                                     obj_unit_index,
  1107       pshu                                     old_state,
     2     yanzuo                                     new_state,
  1107       pshu                                     activation, cntrl_status );
     2     yanzuo     DCL
     2     yanzuo        obj_unit_type     unit_type_t,
     2     yanzuo        obj_unit_index    unit_index_t,
  1107       pshu        old_state         unit_state_t,
     2     yanzuo        new_state         unit_state_t,
  1107       pshu        activation             cmd_act_t,
  1107       pshu        cntrl_status           cmd_ctrl_t,
  1100   huantang        jii_ptr                 jiifil_ptr__t,
  1100   huantang        comp_ptr                jii_comp_ptr__t,
  1100   huantang        alp_ptr                 jiifil_ptr__t,
     2     yanzuo        status            error_t;
     2     yanzuo 
     2     yanzuo     DECISION get_pid_family_r( SENDER );
     2     yanzuo     ( /= own_family_id ):
     2     yanzuo        OUTPUT INPUT TO far_self__pv;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send re_state_change_executed_s, unit_type=%X, unit_index=%d, old_state=%X, new_state=%X,activation=%X, status=%d'n'r',
  1317      tinyu          obj_unit_type, obj_unit_index,old_state, new_state,activation,  cntrl_status);
     2     yanzuo        NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION new_state | unit_state_t_mainstate_bm_c;
     2     yanzuo     ( unit_state_t_tr_c ):
     2     yanzuo        CALL jii_store_trial_move__r( obj_unit_type, obj_unit_index );
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1087   huantang 	CALL dmpg_seou_notify_brt__r(obj_unit_type,obj_unit_index,new_state);
  1100   huantang 
  1124   huantang 	DECISION jii_find_unit__r(obj_unit_type, obj_unit_index,jii_ptr,comp_ptr,alp_ptr) AND 
  1124   huantang 			cntrl_status /= cmd_ctrl_t_controlled_c;
  1100   huantang     (T):
  1107       pshu 	    OUTPUT re_state_change_executed_s( obj_unit_type,
  1107       pshu                                     obj_unit_index,
  1107       pshu                                     old_state,
  1107       pshu                                     new_state,
  1107       pshu                                     activation, cntrl_status ) TO cluster_hand_pid__r(jii_ptr->cluster_idx);
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send re_state_change_executed_s, unit_type=%X, unit_index=%d, old_state=%X, new_state=%X,activation=%X, status=%d'n'r',
  1317      tinyu          obj_unit_type, obj_unit_index,old_state, new_state,activation,  cntrl_status);
  1317      tinyu        
  1100   huantang 	ENDDECISION;
  1087   huantang 	
     2     yanzuo     DECISION ( obj_unit_type = own_unit_info__pv.ttype ) AND
     2     yanzuo              ( obj_unit_index = own_unit_info__pv.index );
     2     yanzuo     ( T ):
     2     yanzuo        /* state of own unit has changed.. */
     2     yanzuo        DECISION new_state | unit_state_t_mainstate_bm_c;
     2     yanzuo        ( unit_state_t_wo_c ):
     2     yanzuo #if (test_logs)
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo                      @'JIGMAS: unit_state_t_wo_c set_sym_mxu_cluster__pv__r:');
     2     yanzuo #endif	
     2     yanzuo           DECISION set_sym_mxu_cluster__pv__r;
     2     yanzuo           (T):
     2     yanzuo #if (test_logs) /* (test_logs) */
     2     yanzuo       TASK dxsyslog_r( log_type_t_text_t_c,
     2     yanzuo            @'JIGMAS:Change SYM CLUSTER ID SUCCESS ' );
     2     yanzuo #endif
     2     yanzuo           ELSE:
     2     yanzuo                       TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                         @'JIGMAS: Change SYM CLUSTER ID FAILED');
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK status := order_events_and_notifs__r();
     2     yanzuo           SET( NOW + new_wo_activation_delay__c, wo_activation_timer );
     2     yanzuo        ELSE:
     2     yanzuo           RESET( wo_activation_timer );
     2     yanzuo           TASK swo_ongoing__pv := F;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
  1341       pshu     DECISION jii_find_unit__r(obj_unit_type, obj_unit_index,jii_ptr,comp_ptr,alp_ptr);
  1341       pshu     (T):
  1341       pshu           TASK jii_ptr->is_wo_unit := (unit_state_t_wo_c =(new_state | unit_state_t_mainstate_bm_c));
  1341       pshu           CALL jii_write_local_record__r($jii_ptr);
  1341       pshu     ENDDECISION;
  1341       pshu 
  1341       pshu 
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /* ============================================================
     2     yanzuo      OMU switchover related notifications
     2     yanzuo      ============================================================ */
     2     yanzuo 
     2     yanzuo   /* OMU switchover starts. Block new tasks. Existing tasks are
     2     yanzuo      still allowed to continue. */
     2     yanzuo   /* These messages are ordered in both WO and SP OMUs, so
     2     yanzuo      they do not need to be forwarded. */
     2     yanzuo 
     2     yanzuo   INPUT re_switchover_prepare_s( * );
     2     yanzuo     TASK swo_ongoing__pv := T;
     2     yanzuo 
     2     yanzuo     /* set timer to make sure that swo flag gets cleared eventually
     2     yanzuo        even if switchover cancellation or state change message
     2     yanzuo        never arrives for some reason. */
     2     yanzuo     OUTPUT re_switchover_prepare_ack_s( success_ec ) TO SENDER;
  1317      tinyu      CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send re_switchover_prepare_ack_s, status=success'n'r');
  1317      tinyu      
     2     yanzuo     SET( NOW + swo_max_tmo__c, wo_activation_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1235   huantang   INPUT re_switchover_executed_s( * );
  1235   huantang   	  TASK swo_ongoing__pv := F;
  1237   huantang   	  CALL give_out_task__r(alp_cluster_idx__t_any_c);
  1235   huantang   	  NEXTSTATE -;
     2     yanzuo   /* If OMU switchover gets cancelled, remove blocking of start tasks. */
     2     yanzuo 
     2     yanzuo   INPUT re_switchover_cancelled_s( * );
     2     yanzuo     TASK swo_ongoing__pv := F;
     2     yanzuo     NEXTSTATE -;
  1235   huantang   
  1235   huantang 	
     2     yanzuo   INPUT wo_activation_timer;
     2     yanzuo     TASK swo_ongoing__pv := F;
  1237   huantang     CALL give_out_task__r(alp_cluster_idx__t_any_c);
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /* Configuration change messages.                                */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT config_change_ann_s( unit_type, unit_index, pair_exists, units, config_task, ?, ?, req_sender )
     2     yanzuo     COMMENT 'Request to add or remove FU from RXEPRB(RECOVERY).';
     2     yanzuo     DCL
     2     yanzuo        unit_type    unit_type_t,
     2     yanzuo        unit_index   unit_index_t,
     2     yanzuo        pair_exists  bool,
     2     yanzuo        units        conf_units_t,
     2     yanzuo        config_task  config_task_t,
   359    lifsong        req_sender   pid;
     2     yanzuo 
     2     yanzuo     DECISION config_task;
     2     yanzuo     ( config_task_t_add_unit_c ):
     2     yanzuo        /* Adding always succeeds. We do not do anything; unit
     2     yanzuo         * is added to JIIFIL when it sends the first
     2     yanzuo         * fig_service_req_msg_s message. */
   359    lifsong         OUTPUT config_change_ann_ack_s( success_ec ) TO req_sender;
  1317      tinyu          CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send config_change_ann_ack_s, status=success'n'r');
     2     yanzuo     ( config_task_t_remove_unit_c ):
   223    lifsong        /*Temp solution, read more in unit_remove_delay__c's discription*/
   223    lifsong        TASK removing_unit_bak.req_sender := req_sender;
   223    lifsong        TASK removing_unit_bak.units :=  units;
   223    lifsong        TASK removing_unit_bak.unit_type := unit_type;
   223    lifsong        TASK removing_unit_bak.unit_index := unit_index;
   223    lifsong        SET (NOW + unit_remove_delay__c, unit_remove_delay_timer);
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
   223    lifsong     
   223    lifsong   INPUT unit_remove_delay_timer;
   223    lifsong     DCL 
   223    lifsong     idx          dword,    
   223    lifsong     clus         alp_cluster_idx__t := alp_cluster_idx__t_invalid_c,    
   223    lifsong     ec           error_t := success_ec;
   223    lifsong     
   223    lifsong     TASK ec := jii_setup_unit_removal__r( removing_unit_bak.units, clus );
   223    lifsong     DECISION clus;
   223    lifsong     ( /= alp_cluster_idx__t_invalid_c ):
   223    lifsong        DECISION find_conf_change__r( removing_unit_bak.unit_type, removing_unit_bak.unit_index, T, idx );
   223    lifsong        ( T ):
   223    lifsong           TASK config_changes__pv(idx).client_pid := removing_unit_bak.req_sender,
   223    lifsong                config_changes__pv(idx).unit_type  := removing_unit_bak.unit_type,
   223    lifsong                config_changes__pv(idx).unit_index := removing_unit_bak.unit_index;
   223    lifsong        ELSE:
   223    lifsong           TASK write_to_log(log_type_t_byte_e_c,
   223    lifsong                      log_write_item_t(@clus),1,
   223    lifsong                      log_text_info_t(@'JIGMAS: no room for conf change'));
   223    lifsong        ENDDECISION;
   223    lifsong        CALL give_out_task__r( clus );
   223    lifsong     ELSE:
   223    lifsong        OUTPUT config_change_ann_ack_s( ec ) TO removing_unit_bak.req_sender;
  1317      tinyu         CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send config_change_ann_ack_s, status=%d'n'r',ec);
   223    lifsong     ENDDECISION;       
   223    lifsong     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   /* Cluster hand informs master that it has removed unit.
     2     yanzuo    * Master can now send a config change ack message to
     2     yanzuo    * recovery program block.
     2     yanzuo    */
     2     yanzuo   INPUT jig_unit_removed__s( jiifil_index, unit_type, unit_idx, status );
     2     yanzuo     DCL
     2     yanzuo        jiifil_index      jiifil_idx__t,
     2     yanzuo        unit_type         unit_type_t,
     2     yanzuo        unit_idx          unit_index_t,
     2     yanzuo        status            error_t,
     2     yanzuo        idx               dword;
     2     yanzuo 
     2     yanzuo     DECISION find_conf_change__r( unit_type, unit_idx, F, idx );
     2     yanzuo     ( T ):
     2     yanzuo        OUTPUT config_change_ann_ack_s( status ) TO
     2     yanzuo               config_changes__pv(idx).client_pid;
  1317      tinyu               CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send config_change_ann_ack_s, status=%d'n'r',status);
     2     yanzuo 
   929    lifsong        CALL conf_change_item_init__r(idx);
     2     yanzuo     ENDDECISION;
   929    lifsong     /*delete even not found in conf change list to help recover from wrong state*/
   929    lifsong     CALL jii_delete_local_record__r( jiifil_index );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo INPUT	jig_xcon_unit_req__s(comp);
     2     yanzuo DCL
     2     yanzuo      comp          	phys_address_t,
   147    lifsong      jii_ptr   		jiifil_ptr__t := NIL,
   147    lifsong      comp_ptr  	jii_comp_ptr__t,
   147    lifsong      alp_ptr   		jiifil_ptr__t := NIL,
   147    lifsong      tmp_jii            jiifil__t,
   147    lifsong      is_app		bool:=F,
     2     yanzuo      l_status		error_t:=unsuccessful_ec;
     2     yanzuo 	DECISION	jii_find_computer__r(comp, jii_ptr, comp_ptr, alp_ptr);
     2     yanzuo 	(T):
     2     yanzuo 		TASK is_app := app_unit_check__r($jii_ptr);
     2     yanzuo 		TASK l_status	:= success_ec;
     2     yanzuo 	ENDDECISION;
   147    lifsong     	/*avoid exception when jii_ptr or alp_ptr = NIL*/
   147    lifsong     	DECISION jii_ptr = NIL;
   147    lifsong     	( T ):
   147    lifsong     	    TASK jii_ptr := @tmp_jii, l_status := unsuccessful_ec;
   147    lifsong     	ENDDECISION;
   147    lifsong     	DECISION alp_ptr = NIL;
   147    lifsong     	( T ):
   147    lifsong     	    TASK alp_ptr := @tmp_jii, l_status := unsuccessful_ec;
   147    lifsong     	ENDDECISION;	
     2     yanzuo 	OUTPUT	jig_xcon_unit_ack__s(is_app, $jii_ptr, $alp_ptr, l_status) to SENDER;
     2     yanzuo 	NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /*****************************************************************/
     2     yanzuo   /* Connection creation and deletion requests from AUUSEB. */
     2     yanzuo   /*****************************************************************/
     2     yanzuo 
     2     yanzuo   INPUT int_xconn_create_req_s( hms_address1,
     2     yanzuo                                 hms_address2,
     2     yanzuo                                 int_xconn_id,
     2     yanzuo                                 traf_para1,
     2     yanzuo                                 traf_para2 );
     2     yanzuo     DCL
     2     yanzuo        hms_address1, hms_address2 hms_address_t,
     2     yanzuo        int_xconn_id               conn_id_t,
     2     yanzuo        traf_para1, traf_para2     int_traf_conf_para_t,
     2     yanzuo 
     2     yanzuo        client                     pid,
     2     yanzuo        status                     error_t := prereq_of_conn_not_fulfilled_ec,
     2     yanzuo        vpi_1, vpi_2               vpi_t := 0xFFFF,
     2     yanzuo        vci_1, vci_2               vci_t := 0,
     2     yanzuo 
     2     yanzuo        rbroke_pid                 pid,
     2     yanzuo        rbroke_serv_attr           attr_group_t,
     2     yanzuo        rbroke_serv_ok             bool,
     2     yanzuo        vcc_para                   jig_few_vcc_params__t,
     2     yanzuo        vcc_res                    jig_few_vcc_resources__t,
     2     yanzuo        cont                       bool := T,
   508    lifsong        towards_center_node_only           bool := F,
   508    lifsong        endpoint_in_center_node            bool := F,
     2     yanzuo        idx, ep_idx                byte,
     2     yanzuo        rev_order                  byte,
     2     yanzuo        jii_ptr, alp_ptr           two_jiifil_ptrs__t,
     2     yanzuo        comp_ptr                   two_jii_comp_ptrs__t,
     2     yanzuo        ok_alp_ptr                 two_jiifil_ptrs__t,
     2     yanzuo        ustate                     unit_state_t,
     2     yanzuo        jic_ptr                    jicfil_ptr__t,
  1073   huantang        cur_hms_address            hms_address_t,
     2     yanzuo        found                      bool,
     2     yanzuo        conn                       conn_hand_data__t,
   780    lifsong        co_alp_jii_ptr				jiifil_ptr__t,
   733    lifsong        co_comp_ptr			        jii_comp_ptr__t,
   733    lifsong        co_alp_ptr			           jiifil_ptr__t,
   733    lifsong        jii_ptr_1                   jiifil_ptr__t,
   733    lifsong        comp_ptr_1                  jii_comp_ptr__t,
   733    lifsong        alp_ptr_1                   jiifil_ptr__t,
   733    lifsong        jicfil_idx                  dword;
     2     yanzuo 
   834    lifsong     /* SP-master ignores this message. */
   834    lifsong     DECISION IS_IN_WO_STATE;
   834    lifsong     ( F ):
   834    lifsong        NEXTSTATE -;
   834    lifsong     ENDDECISION;
  1420       pshu 
  1420       pshu     TASK client := SENDER;
  1420       pshu     TASK set_pid_computer_r( client, SENDER_PHYS_COMPUTER );
  1388       pshu     
     4     yanzuo     /*Check if conn_id from tomprb is legal, if illegal, write error log and ack error to sender*/
     4     yanzuo     TASK jicfil_idx := jicfil_map_connid__r( int_xconn_id );
     4     yanzuo     DECISION ( jicfil_idx < jig_limits__t_n_conns_c );
     4     yanzuo        ( F ):
     4     yanzuo        TASK dxsyslog_r( log_type_t_text_e_c,
     4     yanzuo                              @'JIGMAS: In int_xconn_create_req_s, int_xconn_id illegal'
     4     yanzuo                               'hms_address1 = %X'
     4     yanzuo                               'hms_address2 = %X'
     4     yanzuo                               'int_xconn_id = %X',
     4     yanzuo                               hms_address1,
     4     yanzuo                               hms_address2,
     4     yanzuo                               int_xconn_id );
  1072   huantang        CALL send_xconn_create_ack_s_failed(client, invalid_param_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang        NEXTSTATE -;
     4     yanzuo     ENDDECISION;
     4     yanzuo 
  1073   huantang 	/* Do not create new hands during OMU switchover. */
  1073   huantang 	DECISION swo_ongoing__pv OR ( NOT action_enabled__pv );
  1073   huantang 	( T ):
  1073   huantang 		CALL send_xconn_create_ack_s_failed(client, jig_swo_ongoing_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang 		NEXTSTATE -;
  1073   huantang 	ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* If this connection is already being created/deleted,
     2     yanzuo        do not create new hand. */
     2     yanzuo     DECISION is_conn_oper_active__r( int_xconn_id );
     2     yanzuo     ( T ):
  1072   huantang        CALL send_xconn_create_ack_s_failed(client, jig_conn_oper_active_ec, hms_address1, hms_address2, int_xconn_id);
  1072   huantang        NEXTSTATE -; 
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1420       pshu     
  1073   huantang     TASK idx := 0, cur_hms_address := hms_address1;
   429    lifsong     WHILE idx < 2;
   429    lifsong        TASK jii_ptr(idx) := NIL;
   429    lifsong        TASK alp_ptr(idx) := NIL;
  1073   huantang 	   DECISION (jii_find_computer_by_hms__r(cur_hms_address,jii_ptr(idx), comp_ptr(idx),alp_ptr(idx)));
  1073   huantang 	   ( F ):
  1073   huantang 	       CALL send_xconn_create_ack_s_failed(client, jig_computer_is_not_found_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang        	   NEXTSTATE -;
  1073   huantang        ENDDECISION; 
  1420       pshu        TASK idx := idx + 1, cur_hms_address := hms_address2;
  1420       pshu     ENDWHILE;
  1420       pshu     /* Check the states of both endpoint computers
  1420       pshu        and their ALP1 unit(s). */
  1420       pshu     TASK idx := 0;
  1420       pshu     WHILE idx < 2;
  1073   huantang        DECISION (traf_para1.category = int_serv_cat_t_i_rt_mnw_c OR traf_para2.category = int_serv_cat_t_i_rt_mnw_c);
     2     yanzuo        (T):
   401     yanzuo             /*FOR SP-APP unit, not reach SP-EX, RT xconn creation can not be allowed*/
     2     yanzuo             DECISION app_unit_check__r($jii_ptr(idx)) AND
     2     yanzuo                      unit_state_by_phys_addr__r( jii_ptr(idx)->procs( 0 ).phys_addr, ustate) = success_ec AND
     2     yanzuo                      NOT(( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c OR
   799     z7zhou                      ( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_bl_c OR
   590       p5li                      ustate = unit_state_t_spex_c OR 
   590       p5li                      ((ustate = unit_state_t_spup_c) AND (jii_ptr(idx)->unit_type = unit_type_t_npgep_c OR jii_ptr(idx)->unit_type = unit_type_t_nps1p_c )));
     2     yanzuo             (T):
  1072   huantang                CALL send_xconn_create_ack_s_failed(client, jig_start_up_unit_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1072   huantang        		   NEXTSTATE -; 
     2     yanzuo             ENDDECISION;
   401     yanzuo 
   401     yanzuo             /* For APP trib units, RT xconn not created in TE-RE phase */
   401     yanzuo             DECISION app_unit_check__r($alp_ptr(idx)) AND
   401     yanzuo                      unit_state_by_phys_addr__r( jii_ptr(idx)->procs( 0 ).phys_addr, ustate) = success_ec AND
   401     yanzuo                      ustate = unit_state_t_tere_c ;
   401     yanzuo             ( T ):
  1072   huantang                 CALL send_xconn_create_ack_s_failed(client, jig_start_up_unit_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1072   huantang        		    NEXTSTATE -; 
   401     yanzuo             ENDDECISION;
  1006       pshu 
  1006       pshu             /* in 46889ESPE01 , for APC MXU , don't create RT Channel when unit 
  1006       pshu                is in flash booting phase. this can make release task willn't be 
  1006       pshu                blocked by other MXU warming process. 
  1006       pshu             */
  1155   huantang             DECISION(comp_ptr(idx)->boot_loading);
  1155   huantang             (T):
  1155   huantang                  CALL send_xconn_create_ack_s_failed(client, jig_start_up_unit_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1155   huantang    		         NEXTSTATE -; 
  1006       pshu             ENDDECISION;
  1155   huantang 
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /* a TE-ALP1 unit without pair can act as its own ALP1-unit */
  1073   huantang        DECISION alp_ptr(idx) = NIL AND
     2     yanzuo                 jii_ptr(idx)->is_level1_alp_unit AND
     2     yanzuo                 jii_ptr(idx)->is_wo_unit;
     2     yanzuo        ( T ):
     2     yanzuo           TASK alp_ptr(idx) := jii_ptr(idx);
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        TASK ok_alp_ptr(idx) := alp_ptr(idx);
     2     yanzuo 
     2     yanzuo        /* Preconditions for returning information on existing
     2     yanzuo         * connections and for creating new connections:
     2     yanzuo         * - both units must exist in JIIFIL
    73     jamema         * - neither unit is being removed or reconfiged
     2     yanzuo         * - alp1 units exist for both units
     2     yanzuo         * - alp1 cluster restart (=releasing of resources) not in progress
     2     yanzuo         */
  1155   huantang        DECISION comp_ptr(idx)->res_release_needed OR jii_ptr(idx)->reconfig_needed
     2     yanzuo                 OR ( alp_ptr(idx) = NIL )
     2     yanzuo                 OR jiafil_ptr__r( jii_ptr(idx)->cluster_idx )
     2     yanzuo                 ->restart_in_progress;
     2     yanzuo        ( T ):
  1072   huantang            CALL send_xconn_create_ack_s_failed(client, jig_start_up_unit_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1072   huantang        	   NEXTSTATE -; 
  1073   huantang        ENDDECISION;
  1073   huantang       TASK endpoint_in_center_node := (endpoint_in_center_node OR jii_ptr(idx)->is_center_unit);
  1073   huantang       
  1073   huantang       /* do not create connections in alp2 unit (or its MXU)
     2     yanzuo              until it is in WO-EX or TE-EX state. */
  1073   huantang       DECISION jii_ptr(idx)->is_level2_alp_unit
  1073   huantang                AND
  1073   huantang                ((NOT comp_ptr(idx)->half_conns_created)
  1073   huantang                 OR
  1073   huantang                 (NOT comp_ptr(idx)->if_init_completed)
  1073   huantang                 OR
  1073   huantang                 (unit_state_by_phys_addr_r(comp_ptr(idx)->phys_addr,
  1073   huantang                                            ustate) = success_ec
  1073   huantang                  AND
  1073   huantang                  ustate /= unit_state_t_woex_c
  1073   huantang                  AND
  1073   huantang                  ustate /= unit_state_t_teex_c));
  1073   huantang       ( T ):
  1073   huantang          TASK ok_alp_ptr(idx) := NIL;
  1073   huantang          TASK status := jig_alp2_unit_in_wrong_state_ec;
  1073   huantang       ENDDECISION;
     2     yanzuo 
  1073   huantang        DECISION is_dsp_xconn_id__r( int_xconn_id );
  1073   huantang        (T): 
  1073   huantang        		  DECISION (is_dsp_hc_created__r(comp_ptr(idx)));
  1073   huantang        		  (F):
  1073   huantang        			  CALL send_xconn_create_ack_s_failed(client, jig_dsp_hc_created_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang        		  	  NEXTSTATE -;
  1073   huantang        		  ENDDECISION;
  1073   huantang        ENDDECISION;
  1073   huantang       
  1073   huantang       DECISION traf_para1.category;
  1073   huantang       ( int_serv_cat_t_i_rt_mnw_c ):
  1073   huantang          /* Cannot create RT connections until both endpoints
     2     yanzuo                 have passed VP reporting and half-conn creation steps.
     2     yanzuo                 If warming is in progress in either ALP1 cluster, we
     2     yanzuo                 cannot create new connection (but we can return info
     2     yanzuo                 on it if it already exists). */
  1073   huantang          DECISION (is_hc_created( comp_ptr(idx) )
  1073   huantang                   AND comp_ptr(idx)->vp_reported
  1073   huantang                   AND (NOT jiafil_ptr__r(jii_ptr(idx)->cluster_idx)->warming_in_progress));
  1073   huantang          (F):
  1073   huantang        			  CALL send_xconn_create_ack_s_failed(client, jig_rt_hc_created_not_ready_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang        		  	  NEXTSTATE -;
  1073   huantang          ENDDECISION;
  1073   huantang       ELSE:
  1073   huantang          DECISION jiafil_ptr__r(jii_ptr(idx)->cluster_idx)->warming_in_progress;
  1073   huantang          ( T ):
  1073   huantang             /* Cannot create any new NRT connections to this ALP1 unit. */
  1073   huantang             TASK ok_alp_ptr(idx) := NIL;
  1073   huantang             TASK status := jig_nrt_alp_unit_in_warming_ec;
  1073   huantang          ELSE:
  1420       pshu             DECISION ( jii_ptr(idx)->is_level1_alp_unit OR
  1420       pshu                        jii_ptr(idx)->is_level2_alp_unit);
  1073   huantang             ( T ):
  1073   huantang                DECISION comp_ptr(idx)->half_conns_created;
  1073   huantang                ( F ):
  1073   huantang                   TASK status := jig_nrt_alp_hc_created_not_ready_toward_center_ec;
  1401       pshu                   DECISION comp_ptr(idx)->vp_exists;
  1420       pshu                   (T):
  1420       pshu        		  	     DECISION is_to_center_node__r(comp_ptr(idx)->phys_addr,
  1420       pshu        		  	                                   comp_ptr(idx^1)->phys_addr);
  1420       pshu        		  	     (T):
  1420       pshu        		  	         /* continue  but BRT prbs maynot be a live */
  1420       pshu        		  	     ELSE:
  1420       pshu        		  	      	 TASK ok_alp_ptr(idx) := NIL;
  1420       pshu        		  	     ENDDECISION;
  1420       pshu        		  	  ELSE:
  1420       pshu        		  	     CALL send_xconn_create_ack_s_failed(client, jig_nrt_alp_hc_not_created_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang        		  	  	 NEXTSTATE -;
  1073   huantang                   ENDDECISION;
  1073   huantang                   TASK towards_center_node_only := T;
  1073   huantang                ENDDECISION;
  1073   huantang             ELSE:
  1073   huantang                /* We can create NRT connections for SP-ALP or
     2     yanzuo                       trib units if their half-conn creation task is over. */
  1073   huantang                DECISION  is_hc_created( comp_ptr(idx) );
  1073   huantang                ( F ) :
  1222      tinyu                    CALL send_xconn_create_ack_s_failed(client, jig_nrt_hc_not_created_ec, hms_address1, hms_address2, int_xconn_id);
  1073   huantang            		   NEXTSTATE -;
  1073   huantang            	   ENDDECISION;
  1073   huantang             ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
  1420       pshu        TASK idx := idx + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo 
   508    lifsong     DECISION towards_center_node_only AND NOT endpoint_in_center_node;
     2     yanzuo     ( T ):
  1073   huantang        CALL send_xconn_create_ack_s_failed(client, status, hms_address1, hms_address2, int_xconn_id);
  1073   huantang 	   NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1073   huantang     TASK found := jii_find_conn__r( int_xconn_id, jic_ptr );
     2     yanzuo 
  1073   huantang     /* Set rev_order to 1 if connection endpoints are stored in
  1073   huantang            JICFIL in reverse order compared to the request message,
  1073   huantang            and to 0 if they are in the same order. */
  1073   huantang     TASK rev_order := byte( found AND jic_ptr->half_conn(0).comp = comp_ptr(1)->phys_addr );
  1073   huantang  
  1073   huantang     /* if one of the half-connections is missing, and the
  1073   huantang            corresponding ALP1 unit is unable to handle normal
  1073   huantang            connection requests yet, do not try to create the connection */
  1073   huantang     DECISION ( (ok_alp_ptr(0) = NIL) AND ( found = F OR jic_ptr->half_conn(0 ^ rev_order).exists = F ))
  1073   huantang              OR
  1073   huantang              ( (ok_alp_ptr(1) = NIL) AND ( found = F OR jic_ptr->half_conn(1 ^ rev_order).exists = F ));
     2     yanzuo     ( T ):
  1073   huantang         CALL send_xconn_create_ack_s_failed(client, status, hms_address1, hms_address2, int_xconn_id);
  1073   huantang         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
  1073   huantang      DECISION found AND (jic_ptr->half_conn(0).vci = 0 OR jic_ptr->half_conn(1).vci = 0);
  1073   huantang 	  ( T ):
  1073   huantang 		  	TASK found := F;
  1073   huantang 	  ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* If the connection does not exists in JICFIL, but
     2     yanzuo        it's possible to create it:
     2     yanzuo        - add it there
     2     yanzuo        - select VCC resources
     2     yanzuo      */
  1073   huantang      
  1073   huantang     DECISION NOT found;
     2     yanzuo     ( T ):
  1073   huantang       TASK vcc_para.vcc(0).conn_id         := int_xconn_id,
  1073   huantang            vcc_para.vcc(0).serv_category   := traf_para1.category,
  1073   huantang            vcc_para.vcc(0).target_computer := comp_ptr(1)->phys_addr,
  1073   huantang            vcc_para.item_count             := 1;
     2     yanzuo 
  1073   huantang       DECISION select_vcc_resources__r( comp_ptr(0)->phys_addr,
  1073   huantang                                         F, F,
  1073   huantang                                         $jig_vccs_params_ptr__t(
  1073   huantang                                            @vcc_para ),
  1073   huantang                                         $jig_vccs_resources_ptr__t(
  1073   huantang                                            @vcc_res ))
  1073   huantang                /= success_ec
  1073   huantang                OR
  1073   huantang                vcc_res.item_count < 1;
  1073   huantang       ( T ):
  1362       pshu          CALL send_xconn_create_ack_s_failed(client,jig_computer_no_more_bitmap_ec, hms_address1, hms_address2, int_xconn_id);
  1362       pshu          NEXTSTATE -;
  1073   huantang       ELSE:
  1073   huantang          /* infor jigger@SP OMU */
  1073   huantang          OUTPUT jig_update_vcc_resources__s(comp_ptr(0)->phys_addr,
  1073   huantang                                       $jig_vccs_resources_ptr__t(@vcc_res ))
  1073   huantang                 TO far_self__pv, SET DELIVERY_RANGE=2;
   961    lifsong 
   961    lifsong 
  1073   huantang          /* search the record to initialize jic_ptr: */
  1073   huantang          TASK found := jii_find_conn__r( int_xconn_id, jic_ptr );
  1073   huantang          DECISION found;
  1073   huantang          ( F ):
  1073   huantang             TASK write_to_log( log_type_t_word_e_c,
  1073   huantang                                log_write_item_t(@int_xconn_id), 1,
  1073   huantang                                log_text_info_t(
  1073   huantang                                  @'JIGMAS: xconn not in JICFIL??'));
  1073   huantang             TASK cont := F;
  1073   huantang          ENDDECISION;
  1073   huantang       ENDDECISION;
  1073   huantang        
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION cont;
     2     yanzuo     ( T ):
     2     yanzuo        /* Check the order of endpoints in  JICFIL record,
     2     yanzuo           as compared to the request message: */
     2     yanzuo        TASK rev_order := byte( jic_ptr->half_conn(0).comp =
     2     yanzuo                                comp_ptr(1)->phys_addr );
     2     yanzuo        /*
     2     yanzuo           if conn already exists in hw --> return info
     2     yanzuo         */
     2     yanzuo        DECISION jic_ptr->half_conn(0).exists AND
     2     yanzuo                 jic_ptr->half_conn(1).exists AND
     2     yanzuo                 ( jic_ptr->serv_cat = int_serv_cat_t_i_nrt_mnw_c OR
     2     yanzuo                   /* For RT connections, xconn_ids indicate if
     2     yanzuo                      the cross-connection has been created */
     2     yanzuo                   jic_ptr->half_conn(0).xconn_id /= 0 );
     2     yanzuo        ( T ):
     2     yanzuo           TASK status := success_ec,
     2     yanzuo                cont   := F,
   932   huantang                
     2     yanzuo                vpi_1  := comp_ptr(0)->vpi,
     2     yanzuo                vci_1  := jic_ptr->half_conn(0 ^ rev_order).vci,
     2     yanzuo                vpi_2  := comp_ptr(1)->vpi,
     2     yanzuo                vci_2  := jic_ptr->half_conn(1 ^ rev_order).vci;
   617     qinggu 
   617     qinggu           OUTPUT int_xconn_create_ack_s( status,
   617     qinggu                                       hms_address1, hms_address2,
   617     qinggu                                       int_xconn_id,
   617     qinggu                                       vpi_1, vci_1,
   932   huantang                                       vpi_2, vci_2 ) TO client,
   617     qinggu                    SET DESTROY_MSG_IF_NOT_WO_STATE = NOT swo_ongoing__pv,
   617     qinggu                        DONT_CARE = T;
  1317      tinyu          CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_create_ack_s, status=%d,hms_addr1=%X, hms_addr2=%X, xconn_id=%X'n'r',
  1317      tinyu     	status, hms_address1, hms_address2, int_xconn_id);
   932   huantang               TASK client := NULL;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
   924       pshu     DECISION lib_reserved_hand_count_r(jigger_p,NUMBER_FROM(jigcon));
   871       pshu     (>= word(jigcon_hand_num - jig_limits__t_min_xconn_del_hand_num_c) ):
   871       pshu 
   871       pshu        OUTPUT int_xconn_create_ack_s( prereq_of_conn_not_fulfilled_ec,
   871       pshu                                       hms_address1, hms_address2,
   871       pshu                                       int_xconn_id,
   871       pshu                                       vpi_1, vci_1,
   871       pshu                                       vpi_2, vci_2 ) TO SENDER,
   871       pshu               				SET DESTROY_MSG_IF_NOT_WO_STATE = NOT swo_ongoing__pv,
   871       pshu                   					DONT_CARE = T;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_create_ack_s status=prereq_of_conn_not_fulfilled_ec, hms_addr1=%X,hms_addr2=%X, xconn_id=%X 'n'r',
  1317      tinyu     	 hms_address1, hms_address2, int_xconn_id);
   871       pshu        NEXTSTATE -;   
   871       pshu 
   871       pshu     ENDDECISION;
  1484    jinncao 
  1484    jinncao 		DECISION  (0 = jic_ptr->half_conn(0 ^ rev_order).vci) OR (0 =  jic_ptr->half_conn(1 ^ rev_order).vci);
  1484    jinncao 		( T ):
  1484    jinncao 			CALL send_xconn_create_ack_s_failed(client, prereq_of_conn_not_fulfilled_ec, hms_address1, hms_address2, int_xconn_id);
  1484    jinncao 			NEXTSTATE -;
  1484    jinncao 		ENDDECISION;    
  1073   huantang    
     2     yanzuo     DECISION cont;
     2     yanzuo     ( T ):
     2     yanzuo        /* collect the info needed by connection hand */
     2     yanzuo        TASK idx := 0;
     2     yanzuo        TASK memset( bytepointer( @conn ), 0, SIZEOF( conn ));
     2     yanzuo 
     2     yanzuo        WHILE idx < 2;
     2     yanzuo           TASK ep_idx := idx ^ rev_order;
     2     yanzuo 
     2     yanzuo           TASK conn.endpoint(idx).phys_addr            := comp_ptr(idx)->phys_addr,
     2     yanzuo                conn.endpoint(idx).hms_addr             := jii_ptr(idx)->hms_address,
     2     yanzuo                conn.endpoint(idx).unit_info.ttype      := comp_ptr(idx)->unit_type,
     2     yanzuo                conn.endpoint(idx).unit_info.index      := comp_ptr(idx)->unit_index,
     2     yanzuo                conn.endpoint(idx).mxu_addr             := alp_ptr(idx)->procs(0).phys_addr,
     2     yanzuo                conn.endpoint(idx).sfu_port             := alp_ptr(idx)->sfu_port_number,
     2     yanzuo                conn.endpoint(idx).tpi.level            := tpi_level_t_vc_c,
     2     yanzuo                conn.endpoint(idx).tpi.interf           := jii_ptr(idx)->interfaces(comp_ptr(idx)->interface_index).intf_id,
     2     yanzuo                conn.endpoint(idx).tpi.vpi              := comp_ptr(idx)->vpi,
     2     yanzuo                conn.endpoint(idx).tpi.vci              := jic_ptr->half_conn(ep_idx).vci,
     2     yanzuo                conn.endpoint(idx).mphy_port            := comp_ptr(idx)->mphy_port,
     2     yanzuo                conn.endpoint(idx).xconn_id             := jic_ptr->half_conn(ep_idx).xconn_id,
     2     yanzuo                conn.endpoint(idx).alp2_conn            := jii_ptr(idx)->is_level2_alp_unit,
     2     yanzuo                conn.endpoint(idx).exists_in_hw         := jic_ptr->half_conn(ep_idx).exists,
   780    lifsong                conn.endpoint(idx).co_unit_addr		:= computer_t_phys_invalid_c,
   780    lifsong                conn.endpoint(idx).sp_mxu_addr         := computer_t_phys_invalid_c;
   359    lifsong            TASK get_alp_unit_for_brt__r( conn.endpoint(idx).mxu_type_index, $alp_ptr(idx) );
   359    lifsong            
   780    lifsong                DECISION	jii_find_computer__r(jii_ptr(idx)->co_alp_unit_phys_addr, co_alp_jii_ptr, co_comp_ptr, co_alp_ptr);
   780    lifsong                ( T ):
   780    lifsong                   DECISION co_alp_jii_ptr->ready_for_reporting;
   780    lifsong                   ( T ):
   780    lifsong                      TASK conn.endpoint(idx).co_unit_addr := jii_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong                   ENDDECISION;
   780    lifsong                ENDDECISION;
     2     yanzuo 
   780    lifsong                DECISION jii_find_computer__r(conn.endpoint(idx).mxu_addr, jii_ptr_1, comp_ptr_1, alp_ptr_1);
   780    lifsong                ( T ):
   780    lifsong                   TASK conn.endpoint(idx).alp_is_app := app_unit_check__r($jii_ptr_1);
   780    lifsong                ENDDECISION;
   780    lifsong 	       
   780    lifsong                DECISION alp1_unit__r(conn.endpoint(idx).unit_info.ttype);
   780    lifsong                ( T ):
   780    lifsong                   DECISION jii_find_computer__r(conn.endpoint(idx).phys_addr, jii_ptr_1, comp_ptr_1, alp_ptr_1);
   780    lifsong                   (T):
   780    lifsong                      TASK conn.endpoint(idx).target_is_app := app_unit_check__r($jii_ptr_1);
   780    lifsong                   ENDDECISION;
   780    lifsong                ELSE:
   780    lifsong                   TASK conn.endpoint(idx).target_is_app := F;
   780    lifsong                ENDDECISION;
     2     yanzuo 			
     2     yanzuo           DECISION jii_ptr(idx)->is_level2_alp_unit;
     2     yanzuo           ( T ):
     2     yanzuo              TASK conn.endpoint(idx).alp2_outw_mphy := jii_ptr(idx)->interfaces(1).mphy_port,
     2     yanzuo                   conn.endpoint(idx).alp2_inw_mphy  := jii_ptr(idx)->interfaces(2).mphy_port;
     2     yanzuo           ENDDECISION;
     2     yanzuo 
   780    lifsong          DECISION conn.endpoint(idx).alp_is_app;
   780    lifsong          ( T ):
   780    lifsong             DECISION co_alp_jii_ptr /= NIL AND co_alp_jii_ptr->ready_for_reporting;/*need create ignore channel if co unit is app unit and ready for reporting*/
   780    lifsong             ( T ):
   780    lifsong                TASK conn.endpoint(idx).sp_mxu_addr := alp_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong             ENDDECISION;
   780    lifsong          ELSE: /*target is not app, then it's apc or trib unit, if co alp update done, we need also create xconn via SP whisky*/
   780    lifsong             DECISION alp_ptr(idx)->co_alp_unit_updated;
   780    lifsong             ( T ):
   780    lifsong                TASK conn.endpoint(idx).sp_mxu_addr := alp_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong             ENDDECISION;
   780    lifsong          ENDDECISION;
     2     yanzuo 
     2     yanzuo           /* if the WO (or TE) ALP1 unit is not ready yet, do not send any
     2     yanzuo              messages to WHISKY there: */
     2     yanzuo           DECISION ok_alp_ptr(idx) = NIL;
     2     yanzuo           ( T ):
     2     yanzuo              TASK conn.endpoint(idx).mxu_addr := computer_t_phys_not_defined_c;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK idx := idx + 1;
     2     yanzuo        ENDWHILE;
     2     yanzuo 
     2     yanzuo        TASK conn.id                := int_xconn_id,
     2     yanzuo             conn.traf_conf_para(0) := traf_para1,
     2     yanzuo             conn.traf_conf_para(1) := traf_para2;
     2     yanzuo 
     2     yanzuo        TASK rbroke_serv_ok := get_service__r( atm_res_broker__c,
     2     yanzuo                                               rbroke_pid, rbroke_serv_attr );
     2     yanzuo 
     2     yanzuo        DECISION rbroke_serv_ok;
     2     yanzuo        ( T ):
  1071   huantang           CREATE jigcon( conn, client, NULL,
  1071   huantang                          rbroke_pid, rbroke_serv_attr,
  1420       pshu                          hms_hand__pv ), TIMER = jigcon_alive_time__c;
  1071   huantang           DECISION STATUS;
  1071   huantang           ( SUCCESS ):
  1071   huantang              CALL set_conn_oper_active__r( int_xconn_id, T);
  1071   huantang              TASK client := NULL; /* no ack from master yet */
     2     yanzuo           ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* if we didnt create a hand to service the request, send ack: */
     2     yanzuo     DECISION client /= NULL;
     2     yanzuo     ( T ):
  1072   huantang        CALL send_xconn_create_ack_s (client, status, hms_address1, hms_address2, int_xconn_id, vpi_1, vci_1, vpi_2, vci_2 );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1462       hhou 
     2     yanzuo   /* connection deletion request from TOMPRB or JIGCLU. */
     2     yanzuo 
     2     yanzuo   INPUT int_xconn_delete_req_s( hms_addr1, hms_addr2, conn_id );
     2     yanzuo     DCL
     2     yanzuo        hms_addr1, hms_addr2  hms_address_t,
     2     yanzuo        addr1, addr2          phys_address_t,
     2     yanzuo        conn_id               conn_id_t,
     2     yanzuo        status                error_t := prereq_of_conn_not_fulfilled_ec,
     2     yanzuo        ustate                unit_state_t,
     2     yanzuo        client                pid,
     2     yanzuo        cont                  bool := F,
     2     yanzuo        idx, ep_idx           byte,
     2     yanzuo        rev_order             byte := 0,
     2     yanzuo        can_delete            bool := T,
     2     yanzuo        found                 bool,
     2     yanzuo        conn_found            bool := F,
     2     yanzuo        dummy_alp             jiifil__t,
     2     yanzuo        rbroke_pid            pid,
     2     yanzuo        rbroke_serv_attr      attr_group_t,
     2     yanzuo        rbroke_serv_ok        bool,
     2     yanzuo        jii_ptr, alp_ptr      two_jiifil_ptrs__t,
     2     yanzuo        comp_ptr              two_jii_comp_ptrs__t,
     2     yanzuo        jic_ptr               jicfil_ptr__t,
     2     yanzuo        hdr                   fig_msg_header_t,
     2     yanzuo        conn                  conn_hand_data__t,
     2     yanzuo        no_items              jig_id_array__t,
   780    lifsong        co_alp_jii_ptr				jiifil_ptr__t,
     2     yanzuo        co_comp_ptr			jii_comp_ptr__t,
     2     yanzuo        co_alp_ptr			jiifil_ptr__t,
     2     yanzuo        jii_ptr_1             jiifil_ptr__t,
     2     yanzuo        comp_ptr_1            jii_comp_ptr__t,
     4     yanzuo        alp_ptr_1              jiifil_ptr__t,
     4     yanzuo        jicfil_idx			dword;
     2     yanzuo 
   834    lifsong     /* SP-master ignores deletion requests for now. In the future, we
   834    lifsong      * might want to create hands synchronously in both units.
   834    lifsong      */
   834    lifsong     DECISION ( NOT IS_IN_WO_STATE ) OR swo_ongoing__pv;
   834    lifsong     ( T ):
   834    lifsong        NEXTSTATE -;
   834    lifsong     ENDDECISION;
   834    lifsong     
     4     yanzuo      /*Check if conn_id from tomprb is legal, if illegal, write error log and ack error to sender*/
     4     yanzuo     TASK jicfil_idx := jicfil_map_connid__r( conn_id );
     4     yanzuo     DECISION ( jicfil_idx < jig_limits__t_n_conns_c );
     4     yanzuo        ( F ):
     4     yanzuo        TASK dxsyslog_r( log_type_t_text_e_c,
     4     yanzuo                              @'JIGMAS: In int_xconn_delete_req_s, conn_id illegal'
     4     yanzuo                               'hms_addr1 = %X'
     4     yanzuo                               'hms_addr2 = %X'
     4     yanzuo                               'int_xconn_id = %X',
     4     yanzuo                               hms_addr1,
     4     yanzuo                               hms_addr2,
     4     yanzuo                               conn_id );
     4     yanzuo        TASK status := invalid_param_ec;
     4     yanzuo        OUTPUT int_xconn_delete_ack_s( status, conn_id, hms_addr1, hms_addr2 )
     4     yanzuo               				TO SENDER,
     4     yanzuo               				SET DESTROY_MSG_IF_NOT_WO_STATE = T;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_delete_ack_s, status=%d, hms_addr1=%X,hms_addr2=%X, xconn_id=%X 'n'r',
  1317      tinyu     	 status, hms_addr1, hms_addr2 ,conn_id);
     4     yanzuo         NEXTSTATE -;
     4     yanzuo     ENDDECISION;
     4     yanzuo     
     2     yanzuo     TASK client := SENDER;
     2     yanzuo     TASK set_pid_computer_r( client, SENDER_PHYS_COMPUTER );
     2     yanzuo 
     2     yanzuo     /* If this connection is being created/deleted,
     2     yanzuo        do not create new hand. */
     2     yanzuo     DECISION is_conn_oper_active__r( conn_id );
     2     yanzuo     ( T ):
     2     yanzuo        TASK can_delete := F;
     2     yanzuo        DECISION get_pid_family_r( client );
     2     yanzuo        ( own_family_id ):
     2     yanzuo           /* return special error code to JIGCLU hand so that
     2     yanzuo              it knows to try again after a short while */
     2     yanzuo           TASK status := process_already_exists_ec;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* find connection */
     2     yanzuo     DECISION jii_find_conn__r( conn_id, jic_ptr );
     2     yanzuo     ( T ):
     2     yanzuo        TASK cont := T;
     2     yanzuo     ELSE:
     2     yanzuo        /* connection does not exist in JICFIL, so we have
     2     yanzuo           no reason to complain. */
     2     yanzuo        TASK status := success_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION cont;
     2     yanzuo     ( T ):
     2     yanzuo        TASK conn_found := T;
     2     yanzuo        TASK idx := 0, hdr.hms_address := hms_addr1;
     2     yanzuo        WHILE idx < 2;
     2     yanzuo           TASK addr1 := addr2,
     2     yanzuo                addr2 := computer_t_phys_invalid_c;
     2     yanzuo 
     2     yanzuo           /* cluster hand gives computer address instead of HMS
     2     yanzuo            * address in its deletion requests. */
     2     yanzuo 
     2     yanzuo           DECISION hdr.hms_address;
     2     yanzuo            ( < computer_t_phys_not_defined_c ):
     2     yanzuo               TASK addr2 := hdr.hms_address,
     2     yanzuo                    found := T;
     2     yanzuo           ELSE:
     2     yanzuo              TASK found := hms_addr_to_phys_addr_r( hdr.hms_address, addr2 )
     2     yanzuo                            = success_ec; /* return value not used */
     2     yanzuo           ENDDECISION;
     2     yanzuo 
     2     yanzuo           TASK found := found AND
     2     yanzuo                         jii_find_computer__r( addr2,
     2     yanzuo                                               jii_ptr(idx), comp_ptr(idx),
     2     yanzuo                                               alp_ptr(idx) );
     2     yanzuo 
     2     yanzuo           /* verify that the unit and its ALP1 unit exist in JIIFIL */
     2     yanzuo           DECISION found;
     2     yanzuo           ( F ):
     2     yanzuo              TASK cont := F;
     2     yanzuo           ELSE:
     2     yanzuo              /* if ALP unit does not exist, or is not in WO state.. */
     2     yanzuo              DECISION alp_ptr(idx) = NIL;
     2     yanzuo              ( T ):
     2     yanzuo                 /* ..set up dummy ALP unit for this endpoint. */
     2     yanzuo                 TASK memset( bytepointer(@dummy_alp), 0, SIZEOF( dummy_alp ));
     2     yanzuo                 TASK dummy_alp.procs(0).phys_addr := computer_t_phys_invalid_c;
     2     yanzuo                 TASK alp_ptr(idx) := @dummy_alp;
     2     yanzuo              ELSE:
     2     yanzuo                 /* cannot delete connections while MXU is being warmed */
     2     yanzuo                 DECISION jiafil_ptr__r(jii_ptr(idx)->cluster_idx)
     2     yanzuo                          ->warming_in_progress;
     2     yanzuo                 ( T ):
     2     yanzuo                    TASK can_delete := F;
     2     yanzuo                 ENDDECISION;
     2     yanzuo                 /* Refuse deletion requests sent by non-JIGGER processes
     2     yanzuo                    while resource releasing is going on. */
     2     yanzuo                 DECISION get_pid_family_r( SENDER ) /= own_family_id
     2     yanzuo                          AND
     2     yanzuo                          jiafil_ptr__r(jii_ptr(idx)->cluster_idx)
     2     yanzuo                          ->restart_in_progress;
     2     yanzuo                 ( T ):
     2     yanzuo                    TASK can_delete := F;
   853       pshu 
     2     yanzuo                 ENDDECISION;
     2     yanzuo              ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo           TASK idx := idx + 1, hdr.hms_address := hms_addr2;
     2     yanzuo        ENDWHILE;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* if the connection does not exist in hw, do not create hand. */
     2     yanzuo     DECISION conn_found AND
     2     yanzuo              ( NOT jic_ptr->half_conn(0).exists ) AND
     2     yanzuo              ( NOT jic_ptr->half_conn(1).exists );
     2     yanzuo     ( T ):
     2     yanzuo        /* Clear the connection from JICFIL before returning. NOTE: This
     2     yanzuo           must be done in such a way that the connection is deleted in both
     2     yanzuo           OMUs (even though only WO-OMU handles the original request) */
     2     yanzuo        TASK cont := F;
     2     yanzuo 
     2     yanzuo        TASK no_items.n_items := 0;
     2     yanzuo        OUTPUT jig_update_half_conn_states__s( no_items, no_items, no_items,
     2     yanzuo                                               F, NULL, client,
     2     yanzuo                                               success_ec,
     2     yanzuo                                               conn_id,
     2     yanzuo                                               addr1,
     2     yanzuo                                               addr2 ) TO far_self__pv;
     2     yanzuo        TASK client := NULL;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     DECISION cont AND can_delete;
     2     yanzuo     ( T ):
     2     yanzuo        DECISION jic_ptr->half_conn(0).comp = comp_ptr(1)->phys_addr;
     2     yanzuo        ( T ):
     2     yanzuo           /* The order of units in the JICFIL record is opposite
     2     yanzuo              to the order in the request message: */
     2     yanzuo           TASK rev_order := 1;
     2     yanzuo        ENDDECISION;
     2     yanzuo 
     2     yanzuo        /* collect the required info for connection hand */
     2     yanzuo        TASK memset( bytepointer( @conn ), 0, SIZEOF( conn ));
     2     yanzuo        TASK idx := 0;
     2     yanzuo        WHILE idx < 2;
     2     yanzuo           TASK ep_idx := idx ^ rev_order;
     2     yanzuo 
     2     yanzuo           TASK conn.endpoint(idx).phys_addr            := comp_ptr(idx)->phys_addr,
     2     yanzuo                conn.endpoint(idx).hms_addr             := jii_ptr(idx)->hms_address,
     2     yanzuo                conn.endpoint(idx).unit_info.ttype      := comp_ptr(idx)->unit_type,
     2     yanzuo                conn.endpoint(idx).unit_info.index      := comp_ptr(idx)->unit_index,
     2     yanzuo                conn.endpoint(idx).mxu_addr             := alp_ptr(idx)->procs(0).phys_addr,
     2     yanzuo                conn.endpoint(idx).sp_mxu_addr          := computer_t_phys_invalid_c,
     2     yanzuo                conn.endpoint(idx).co_unit_addr				 := computer_t_phys_invalid_c,
     2     yanzuo                conn.endpoint(idx).sfu_port             := alp_ptr(idx)->sfu_port_number,
     2     yanzuo                conn.endpoint(idx).tpi.level            := tpi_level_t_vc_c,
     2     yanzuo                conn.endpoint(idx).tpi.interf           := jii_ptr(idx)->interfaces(comp_ptr(idx)->interface_index).intf_id,
     2     yanzuo                conn.endpoint(idx).tpi.vpi              := comp_ptr(idx)->vpi,
     2     yanzuo                conn.endpoint(idx).tpi.vci              := jic_ptr->half_conn(ep_idx).vci,
     2     yanzuo                conn.endpoint(idx).mphy_port            := comp_ptr(idx)->mphy_port,
     2     yanzuo                conn.endpoint(idx).xconn_id             := jic_ptr->half_conn(ep_idx).xconn_id,
     2     yanzuo                conn.endpoint(idx).alp2_conn            := F,
     2     yanzuo                conn.endpoint(idx).exists_in_hw         := jic_ptr->half_conn(ep_idx).exists;
   359    lifsong            TASK get_alp_unit_for_brt__r( conn.endpoint(idx).mxu_type_index, $alp_ptr(idx) );
     2     yanzuo 
   780    lifsong          DECISION jii_find_computer__r(jii_ptr(idx)->co_alp_unit_phys_addr, co_alp_jii_ptr, co_comp_ptr, co_alp_ptr);
   780    lifsong          (T):
   780    lifsong             DECISION co_alp_jii_ptr->ready_for_reporting;
   780    lifsong             (T):
   780    lifsong             	TASK	conn.endpoint(idx).co_unit_addr := jii_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong             ENDDECISION;
   780    lifsong          ENDDECISION;
   780    lifsong 
   780    lifsong          DECISION jii_find_computer__r(conn.endpoint(idx).mxu_addr, jii_ptr_1, comp_ptr_1, alp_ptr_1);
   780    lifsong          (T):
   780    lifsong             TASK conn.endpoint(idx).alp_is_app := app_unit_check__r($jii_ptr_1);
   780    lifsong          ENDDECISION;
   780    lifsong          
   780    lifsong          DECISION alp1_unit__r(conn.endpoint(idx).unit_info.ttype);
   780    lifsong          ( T ):
   780    lifsong             DECISION jii_find_computer__r(conn.endpoint(idx).phys_addr, jii_ptr_1, comp_ptr_1, alp_ptr_1);
   780    lifsong             (T):
   780    lifsong                TASK conn.endpoint(idx).target_is_app := app_unit_check__r($jii_ptr_1);
   780    lifsong             ENDDECISION;
   780    lifsong          ELSE:
   780    lifsong             TASK conn.endpoint(idx).target_is_app := F;
   780    lifsong          ENDDECISION;
     2     yanzuo           /* Should we try to remove the connection from NIP1 internal APC? */
     2     yanzuo           DECISION jii_ptr(idx)->is_level2_alp_unit
     2     yanzuo                    AND
     2     yanzuo                    comp_ptr(idx)->if_init_completed
     2     yanzuo                    AND
     2     yanzuo                    unit_state_by_phys_addr_r( comp_ptr(idx)->phys_addr,
     2     yanzuo                                               ustate ) = success_ec
     2     yanzuo                    AND
     2     yanzuo                    ( ustate = unit_state_t_woex_c OR
     2     yanzuo                      ustate = unit_state_t_teex_c );
     2     yanzuo           ( T ):
     2     yanzuo              TASK conn.endpoint(idx).alp2_conn      := T,
     2     yanzuo                   conn.endpoint(idx).alp2_outw_mphy := jii_ptr(idx)->interfaces(1).mphy_port,
     2     yanzuo                   conn.endpoint(idx).alp2_inw_mphy  := jii_ptr(idx)->interfaces(2).mphy_port;
     2     yanzuo           ENDDECISION;
     2     yanzuo 
   780    lifsong          DECISION conn.endpoint(idx).alp_is_app;
   780    lifsong          ( T ):
   780    lifsong             DECISION co_alp_jii_ptr /= NIL AND co_alp_jii_ptr->ready_for_reporting;/*need create ignore channel if co unit is app unit and ready for reporting*/
   780    lifsong             ( T ):
   780    lifsong                TASK conn.endpoint(idx).sp_mxu_addr := alp_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong             ENDDECISION;
   780    lifsong          ELSE: /*target is not app, then it's apc or trib unit, if co alp update done, we need also create xconn via SP whisky*/
   780    lifsong             DECISION alp_ptr(idx)->co_alp_unit_updated;
   780    lifsong             ( T ):
   780    lifsong                TASK conn.endpoint(idx).sp_mxu_addr := alp_ptr(idx)->co_alp_unit_phys_addr;
   780    lifsong             ENDDECISION;
   780    lifsong          ENDDECISION;
     2     yanzuo           TASK idx := idx + 1;
     2     yanzuo        ENDWHILE;
     2     yanzuo 
     2     yanzuo        TASK conn.traf_conf_para(0).category := jic_ptr->serv_cat,
     2     yanzuo             conn.traf_conf_para(1).category := jic_ptr->serv_cat,
     2     yanzuo             conn.id                         := conn_id;
     2     yanzuo 
     2     yanzuo        TASK rbroke_serv_ok := get_service__r( atm_res_broker__c,
     2     yanzuo                                               rbroke_pid, rbroke_serv_attr );
     2     yanzuo        DECISION rbroke_serv_ok;
     2     yanzuo        ( T ):
  1124   huantang 			CREATE jigcon( conn, NULL, client,
  1124   huantang 			            rbroke_pid, rbroke_serv_attr,
  1420       pshu 			            hms_hand__pv ), TIMER = jigcon_alive_time__c;
     2     yanzuo 
  1124   huantang 			DECISION STATUS;
  1124   huantang 			( SUCCESS ):
  1124   huantang 				CALL set_conn_oper_active__r( conn_id, T );
  1124   huantang 				TASK client := NULL;
  1124   huantang 			ENDDECISION;
     2     yanzuo        ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo     	 DECISION can_delete;
     2     yanzuo     	 ( F ):
     2     yanzuo     	 		TASK status := warm_up_in_progress_ec;
     2     yanzuo     	 ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo 
     2     yanzuo     /* if we didnt create a hand to service the request, send ack: */
     2     yanzuo     DECISION client /= NULL;
     2     yanzuo     ( T ):
     2     yanzuo        OUTPUT int_xconn_delete_ack_s( status, conn_id, hms_addr1, hms_addr2 )
     2     yanzuo               TO client,
     2     yanzuo               SET DESTROY_MSG_IF_NOT_WO_STATE = T;
  1317      tinyu        CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send int_xconn_delete_ack_s, status=%d, hms_addr1=%X,hms_addr2=%X, xconn_id=%X 'n'r',
  1317      tinyu     	 status, hms_addr1, hms_addr2 ,conn_id);
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
   961    lifsong     
   961    lifsong    INPUT jig_update_vcc_resources__s( src_addr,vccs_resources );
   961    lifsong     DCL
   961    lifsong        vccs_resources      jig_vccs_resources__t,
   961    lifsong        src_addr            phys_address_t,
   961    lifsong        i                   dword := 0;
   961    lifsong     WHILE i < vccs_resources.item_count;
   961    lifsong       CALL write_jicfil_resdata__r( src_addr, vccs_resources.res( i ));
   961    lifsong       TASK i := i + 1;
   961    lifsong     ENDWHILE;
   961    lifsong 
   961    lifsong     NEXTSTATE -;
   961    lifsong 
   961    lifsong 
   961    lifsong 
     2     yanzuo    INPUT sd_ports_configured_s ( ?, fig_conf_succ_list );
     2     yanzuo       DCL
     2     yanzuo          fig_conf_succ_list       fig_cf_succ_list_t;
     2     yanzuo 
     2     yanzuo       CALL jii_clear_sd4_flags__r( fig_conf_succ_list );
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT hand_supervision_timer;
     2     yanzuo       DCL
     2     yanzuo          l_clus_idx   		 alp_cluster_idx__t,
     2     yanzuo          l_process_id       process_id_t,
     2     yanzuo          l_status         	 error_t;
     2     yanzuo 
     2     yanzuo       TASK l_process_id := get_pid_process_id_r( SENDER );
     2     yanzuo       DECISION ( hms_hand_ack__pv );
     2     yanzuo       ( T ):
     2     yanzuo          TASK hms_hand_ack__pv := F;
     2     yanzuo  	      OUTPUT hand_supervision_msg_s TO hms_hand__pv,
     2     yanzuo  	            SET PRIORITY = msg_attr_t_high_priority_c;
     2     yanzuo 
     2     yanzuo       ELSE:
     2     yanzuo          TASK l_process_id := get_pid_process_id_r( hms_hand__pv );
     2     yanzuo          TASK l_status := restart_hand( l_process_id );
     2     yanzuo          DECISION l_status;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                              @'JIGMAS: restart jighms hand fail after it no'
     2     yanzuo                               'acks hand supervision msg :'
     2     yanzuo                               'status = 0X%X',
     2     yanzuo                               l_status );
     2     yanzuo          ENDDECISION;
     2     yanzuo          TASK l_status := create_hms_hand__r();
     2     yanzuo          DECISION l_status;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                              @'JIGMAS: recreate jighms hand fail after it no'
     2     yanzuo                               'acks hand supervision msg :'
     2     yanzuo                               'status = 0X%X',
     2     yanzuo                               l_status );
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo       ENDDECISION;
  1317      tinyu       
  1317      tinyu       
  1317      tinyu        DECISION ( mix_hand_ack__pv );
  1317      tinyu       ( T ):
  1317      tinyu          TASK mix_hand_ack__pv := F;
  1317      tinyu  	      OUTPUT hand_supervision_msg_s TO mix_hand__pv,
  1317      tinyu  	            SET PRIORITY = msg_attr_t_high_priority_c;
     2     yanzuo 
  1317      tinyu       ELSE:
  1317      tinyu          TASK l_process_id := get_pid_process_id_r( mix_hand__pv );
  1317      tinyu          TASK l_status := restart_hand( l_process_id );
  1317      tinyu          DECISION l_status;
  1317      tinyu          ( /= success_ec ):
  1317      tinyu             TASK dxsyslog_r( log_type_t_text_e_c,
  1317      tinyu                              @'JIGMAS: restart jigmix hand fail after it no'
  1317      tinyu                               'acks hand supervision msg :'
  1317      tinyu                               'status = 0X%X',
  1317      tinyu                               l_status );
  1317      tinyu          ENDDECISION;
  1317      tinyu          TASK l_status := create_mix_hand__r();
  1317      tinyu          DECISION l_status;
  1317      tinyu          ( /= success_ec ):
  1317      tinyu             TASK dxsyslog_r( log_type_t_text_e_c,
  1317      tinyu                              @'JIGMAS: recreate jigmix hand fail after it no'
  1317      tinyu                               'acks hand supervision msg :'
  1317      tinyu                               'status = 0X%X',
  1317      tinyu                               l_status );
  1317      tinyu          ENDDECISION;
  1317      tinyu 
  1317      tinyu       ENDDECISION;
  1317      tinyu       
  1317      tinyu 
     2     yanzuo       /* This while-loop is more future_proof to compare the sender's process_id
     2     yanzuo          against the 'known' cluster hand pid that can be inquired with cluster_
     2     yanzuo          hand_pid__r(). This removes the assumption that cluster index == process id.
     2     yanzuo          It's easier to change the implementation for future development. */
     2     yanzuo       TASK l_clus_idx := 1;
     2     yanzuo       WHILE l_clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo       	DECISION ( clus_hand_ack__pv( l_clus_idx ) );
     2     yanzuo       	( T ):
     2     yanzuo             TASK clus_hand_ack__pv( l_clus_idx ) := F;
     2     yanzuo 
     2     yanzuo 	         OUTPUT hand_supervision_msg_s TO cluster_hand_pid__r( l_clus_idx );
     2     yanzuo 				
     2     yanzuo          ELSE:
     2     yanzuo             TASK l_status := restart_hand( l_clus_idx );
     2     yanzuo             DECISION l_status;
     2     yanzuo             ( /= success_ec ):
     2     yanzuo                TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                                 @'JIGMAS: restart jigclu hand fail after it no'
     2     yanzuo                                  'acks hand supervision msg :'
     2     yanzuo                                  'status = 0X%X, clus idx = 0X%X, process id = 0X%X',
     2     yanzuo                                   l_status, l_clus_idx,
     2     yanzuo                                   get_pid_process_id_r( cluster_hand_pid__r( l_clus_idx )))  ;
     2     yanzuo          	ENDDECISION;
     2     yanzuo             TASK l_status := create_clus_hand__r( l_clus_idx );
     2     yanzuo             DECISION l_status;
     2     yanzuo             ( /= success_ec ):
     2     yanzuo                TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                                 @'JIGMAS: recreate jigclu hand fail after it no'
     2     yanzuo                                  'acks hand supervision msg :'
     2     yanzuo                                  'status = 0X%X, clus idx = 0X%X, process id = 0X%X',
     2     yanzuo                                   l_status, l_clus_idx,
     2     yanzuo                                   get_pid_process_id_r( cluster_hand_pid__r( l_clus_idx )))  ;
     2     yanzuo          	ENDDECISION;
     2     yanzuo 
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          TASK l_clus_idx := l_clus_idx + 1;
     2     yanzuo 
     2     yanzuo       ENDWHILE;
     2     yanzuo 
     2     yanzuo       SET (NOW + hand_supervision__c, hand_supervision_timer);
     2     yanzuo 
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT hand_supervision_ack_s;
     2     yanzuo       DCL
     2     yanzuo          l_process_id    process_id_t,
     2     yanzuo          l_clus_idx      alp_cluster_idx__t,
     2     yanzuo          l_clus_handler  pid;
     2     yanzuo 
     2     yanzuo       TASK l_process_id := get_pid_process_id_r( SENDER );
     2     yanzuo 
     2     yanzuo       DECISION ( l_process_id = get_pid_process_id_r( hms_hand__pv ) );
     2     yanzuo       ( T ): /* hms hand ack */
     2     yanzuo          TASK hms_hand_ack__pv := T;
     2     yanzuo 		
     2     yanzuo 		   NEXTSTATE -;
     2     yanzuo 		
     2     yanzuo       ENDDECISION;
  1317      tinyu       
  1317      tinyu       DECISION ( l_process_id = get_pid_process_id_r( mix_hand__pv ) );
  1317      tinyu       ( T ): /* mix hand ack */
  1317      tinyu          TASK mix_hand_ack__pv := T;
  1317      tinyu 		
  1317      tinyu 		   NEXTSTATE -;
  1317      tinyu 		
  1317      tinyu       ENDDECISION;
     2     yanzuo 
     2     yanzuo       TASK l_clus_idx := 1;
     2     yanzuo       WHILE l_clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo          TASK l_clus_handler := cluster_hand_pid__r( l_clus_idx );
     2     yanzuo 
     2     yanzuo          DECISION ( l_process_id = get_pid_process_id_r( l_clus_handler ) );
     2     yanzuo          ( T ):
     2     yanzuo             TASK clus_hand_ack__pv( l_clus_idx ) := T;
     2     yanzuo             NEXTSTATE -;
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          TASK l_clus_idx := l_clus_idx + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo 
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
   754     yanzuo     INPUT jih_get_bigvcc_param_req__s;
   754     yanzuo       DCL
   754     yanzuo         l_rx_bigvcc_param     rx_bigvcc_param__t;
   754     yanzuo            
  1038      myang         CALL get_rx_bigvcc_param__r( l_rx_bigvcc_param );
   754     yanzuo       
   754     yanzuo         OUTPUT jih_get_bigvcc_param_ack__s( l_rx_bigvcc_param ) TO SENDER;
   754     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1257   huantang     INPUT rcy_sys_trial_cutover_s(*);
  1257   huantang 		 CALL handle_rcy_trial_cutover__r();
  1257   huantang     NEXTSTATE -;
   754     yanzuo 
  1257   huantang 
     2     yanzuo  /* =======================================================
     2     yanzuo   * Messages which need to be forwarded to the appropriate
     2     yanzuo   * cluster manager hand process.
     2     yanzuo   * ======================================================= */
     2     yanzuo 
     2     yanzuo   INPUT init_apc_ig1_ack_s            ( * ),
     2     yanzuo         init_apc_eg1_ack_s            ( * ),
     2     yanzuo         init_if_and_vpctp_ack_s       ( * ),
     2     yanzuo         alp_config_tp_ack_s           ( * ),
     2     yanzuo         alp_config_stream_ack_s       ( * ),
     2     yanzuo         vpctp_setup_ack_s             ( * ),
     2     yanzuo         jig_alp2_conf_req__s          ( * );
     2     yanzuo     DCL
     2     yanzuo        res_hms_address   fig_msg_header_t,
     2     yanzuo        comp_ptr          jii_comp_ptr__t,
     2     yanzuo        alp_ptr           jiifil_ptr__t,
     2     yanzuo        jii_ptr           jiifil_ptr__t;
     2     yanzuo 
     2     yanzuo     TASK memcpy( bytepointer( @res_hms_address ),
     2     yanzuo                  bytepointer( @UNINTERPRETED_SIGNAL_DATA(0)),
     2     yanzuo                  SIZEOF( hms_address_t ));
     2     yanzuo     TASK res_hms_address.extended_addr := 0;
     2     yanzuo 
     2     yanzuo     DECISION jii_find_hms__r( res_hms_address, jii_ptr, comp_ptr, alp_ptr );
     2     yanzuo     ( T ):
     2     yanzuo        OUTPUT INPUT TO cluster_hand_pid__r( jii_ptr->cluster_idx );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
  1257   huantang     
  1420       pshu     INPUT app_pre_half_xconn_ack_s(l_hms_address, ?),
  1420       pshu           create_predet_half_xconn_ack_s( l_hms_address,? );
  1420       pshu        DCL
  1420       pshu           l_hms_address   fig_msg_header_t,
  1420       pshu           l_pid           pid,
  1420       pshu           comp_ptr        jii_comp_ptr__t,
  1420       pshu           alp_ptr         jiifil_ptr__t,
  1420       pshu           jii_ptr         jiifil_ptr__t;
     2     yanzuo 
  1420       pshu        DECISION( pull_proxy_item(l_hms_address.hms_address,l_pid) );
  1420       pshu        (T):
  1420       pshu            OUTPUT INPUT TO l_pid;
  1420       pshu        ELSE:
  1420       pshu            TASK l_hms_address.extended_addr := 0;
  1420       pshu            DECISION jii_find_hms__r( l_hms_address, jii_ptr, comp_ptr, alp_ptr );
  1420       pshu            ( T ):
  1420       pshu                 OUTPUT INPUT TO cluster_hand_pid__r( jii_ptr->cluster_idx );
  1420       pshu            ENDDECISION;
  1420       pshu        ENDDECISION;
  1420       pshu        
  1420       pshu        NEXTSTATE -;
     2     yanzuo ENDSTATE working;
  1462       hhou 
     2     yanzuo STATE * ( cold );
     2     yanzuo 
   595    lifsong   INPUT supervision_msg_s( mstate,  sstate, phase);
   595    lifsong      DCL
   595    lifsong       mstate          unit_state_t,
   595    lifsong       sstate          unit_state_t,
   595    lifsong       phase           byte;
   595    lifsong       OUTPUT supervision_ack_s( mstate, sstate, phase ) TO SENDER;
  1317      tinyu      CALL jig_debug_log__r(jig_dbglog_msk__t_send_msg__c,T,
  1317      tinyu     	@'JIGMAS:send supervision_ack_s, mstate=%X, sstate=%X, phase=%X 'n'r',
  1317      tinyu     	mstate,  sstate, phase);
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT TIME_QUOTA ( in_hand_pid ); /* refresh jigclu and jighms hands while
     2     yanzuo                                         restart jigcon hand */
     2     yanzuo       DCL
     2     yanzuo          in_hand_pid     pid,
     2     yanzuo          l_status        error_t,
     2     yanzuo          l_process_id    process_id_t;
     2     yanzuo 
     2     yanzuo       TASK l_process_id := get_pid_process_id_r( in_hand_pid );
     2     yanzuo       DECISION ( (l_process_id <= jig_limits__t_n_clus_c AND l_process_id >= 1 ) OR
  1317      tinyu                  l_process_id = get_pid_process_id_r( hms_hand__pv ) 
  1317      tinyu                  OR l_process_id = get_pid_process_id_r( mix_hand__pv ) );
     2     yanzuo       ( T ):
     2     yanzuo          TASK l_status := refresh_hand( l_process_id, get_pid_focus_r( in_hand_pid ),
     2     yanzuo                                         time_limit_t_no_time_limit_c );
     2     yanzuo 
     2     yanzuo       ELSE:
     2     yanzuo          TASK l_status := restart_hand( l_process_id );
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
     2     yanzuo    INPUT process_frozen_by_dmxrte_s;
     2     yanzuo       DCL
     2     yanzuo          l_process_id   process_id_t,
     2     yanzuo          l_clus_idx     alp_cluster_idx__t,
     2     yanzuo          l_clus_handler pid,
     2     yanzuo          l_status       error_t;
     2     yanzuo 
     2     yanzuo       TASK l_process_id := get_pid_process_id_r( SENDER );
     2     yanzuo 
     2     yanzuo       TASK l_clus_idx := 1;
     2     yanzuo       WHILE l_clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo          TASK l_clus_handler := cluster_hand_pid__r( l_clus_idx );
     2     yanzuo 
     2     yanzuo          DECISION ( l_process_id = get_pid_process_id_r( l_clus_handler ) );
     2     yanzuo          ( T ): /* JIGCLU hand */
     2     yanzuo             TASK l_status := restart_hand( l_process_id );
     2     yanzuo 
     2     yanzuo             TASK l_status := create_clus_hand__r( l_clus_idx );
     2     yanzuo             DECISION l_status;
     2     yanzuo             ( /= success_ec ):
     2     yanzuo                TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                                 @'JIGMAS: recreate clus hand failed after hand frozen!:'
     2     yanzuo                                  'status = 0X%X, clus idx = 0X%X, process id = 0X%X',
     2     yanzuo                                   l_status, l_clus_idx, l_process_id );
     2     yanzuo             ENDDECISION;
     2     yanzuo 
     2     yanzuo             NEXTSTATE -;
     2     yanzuo 
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          TASK l_clus_idx := l_clus_idx + 1;
     2     yanzuo       ENDWHILE;
     2     yanzuo 
     2     yanzuo       DECISION ( l_process_id );
     2     yanzuo       ( 0 ): /* JIGMAS master */
     2     yanzuo           /* nothing should be done */
     2     yanzuo 
     2     yanzuo       ( get_pid_process_id_r( hms_hand__pv ) ): /* HMS hand */
     2     yanzuo 
     2     yanzuo          TASK l_status := restart_hand ( get_pid_process_id_r( hms_hand__pv ) );
     2     yanzuo 
     2     yanzuo          TASK l_status := create_hms_hand__r();
     2     yanzuo          DECISION l_status;
     2     yanzuo          ( /= success_ec ):
     2     yanzuo             TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                              @'JIGMAS: recreate jighms hand fail after it is frozen :'
     2     yanzuo                               'status = 0X%X, process id = 0X%X',
     2     yanzuo                                l_status, l_process_id );
     2     yanzuo          ENDDECISION;
     2     yanzuo 
     2     yanzuo          NEXTSTATE -;
  1317      tinyu          
  1317      tinyu       ( get_pid_process_id_r( mix_hand__pv ) ): /* MIX hand */
     2     yanzuo 
  1317      tinyu          TASK l_status := restart_hand ( get_pid_process_id_r( mix_hand__pv ) );
  1317      tinyu 
  1317      tinyu          TASK l_status := create_mix_hand__r();
  1317      tinyu          DECISION l_status;
  1317      tinyu          ( /= success_ec ):
  1317      tinyu             TASK dxsyslog_r( log_type_t_text_e_c,
  1317      tinyu                              @'JIGMAS: recreate jigmix hand fail after it is frozen :'
  1317      tinyu                               'status = 0X%X, process id = 0X%X',
  1317      tinyu                                l_status, l_process_id );
  1317      tinyu          ENDDECISION;
  1317      tinyu 
  1317      tinyu          NEXTSTATE -;
  1317      tinyu 
     2     yanzuo       ELSE: /* JIGCON hand */
     2     yanzuo 
     2     yanzuo          TASK l_status := restart_hand( l_process_id );
     2     yanzuo 
     2     yanzuo       ENDDECISION;
     2     yanzuo 
     2     yanzuo       NEXTSTATE -;
     2     yanzuo 
  1137   huantang   INPUT c_test_msg_s( test_id, sub_id, info );
     2     yanzuo     DCL
     2     yanzuo        test_id, sub_id   byte,
  1137   huantang        flag              dword,
  1137   huantang        info              test_msg_info__t,
     2     yanzuo        g_ptr             jig_globals_ptr__t,
     2     yanzuo        clus_idx          alp_cluster_idx__t := 1;
     2     yanzuo 
     2     yanzuo     DECISION test_id;
  1104   huantang     ( 3 ):
  1137   huantang     	TASK memcpy(@flag,@info,SIZEOF(dword));
  1317      tinyu     	OUTPUT jig_set_debug_mask__s(flag) TO mix_hand__pv;
  1317      tinyu     	CALL jig_debug_log__r(jig_dbglog_msk__t_rcv_msg__c,T,
  1317      tinyu     	@'JIGMAS:got new mask from JIH, mask=%04X'n'r',flag);
  1317      tinyu     	
  1317      tinyu     	
     2     yanzuo     ( 5 ):
     2     yanzuo        DECISION sub_id;
     2     yanzuo        ( 1, 2 ):
     2     yanzuo           /* reset JIIFIL and JICFIL and global variables to initial state. */
     2     yanzuo           CALL jii_initialize__r( F ); /* re-initialize files */
     2     yanzuo           TASK init_job_module__r();
     2     yanzuo           WHILE clus_idx <= jig_limits__t_n_clus_c;
     2     yanzuo              TASK hand_states__pv( clus_idx ) := hand_state__t_idle_c;
     2     yanzuo              TASK clus_idx := clus_idx + 1;
     2     yanzuo           ENDWHILE;
     2     yanzuo           TASK memset( bytepointer( @config_changes__pv ), 0,
     2     yanzuo                        SIZEOF( config_changes__pv ));
     2     yanzuo           DECISION sub_id;
     2     yanzuo           ( 2 ):
     2     yanzuo              CALL add_units_to_jiifil__r();
     2     yanzuo           ENDDECISION;
     2     yanzuo 
     2     yanzuo        ( 3 ):
     2     yanzuo           /* read JIGGER's global variables */
     2     yanzuo           TASK g_ptr := jig_globals_ptr__t(@UNINTERPRETED_SIGNAL_DATA(0));
     2     yanzuo           TASK jigdat_read_globals__r( $g_ptr );
     2     yanzuo 
     2     yanzuo           /* add master's global variables */
     2     yanzuo           TASK g_ptr->swo_ongoing := swo_ongoing__pv;
     2     yanzuo 
     2     yanzuo           OUTPUT INPUT TO SENDER;
     2     yanzuo 
     2     yanzuo        ( 4 ):
     2     yanzuo           /* modify JIGGER's global variable */
     2     yanzuo           CALL jigdat_set_global__r(
     2     yanzuo                  jig_var_id__t( UNINTERPRETED_SIGNAL_DATA( 0 )),
     2     yanzuo                  UNINTERPRETED_SIGNAL_DATA( 1 ) +
     2     yanzuo                  (UNINTERPRETED_SIGNAL_DATA( 2 ) << 8) +
     2     yanzuo                  (UNINTERPRETED_SIGNAL_DATA( 3 ) << 16) +
     2     yanzuo                  (UNINTERPRETED_SIGNAL_DATA( 4 ) << 24));
     2     yanzuo 
     2     yanzuo        ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1104   huantang 
     2     yanzuo ENDSTATE * ( cold );
     2     yanzuo 
     2     yanzuo ENDPROCESS jigmas;
     2     yanzuo /* PROGRAMBLOCK CONSTANT AND TYPE DEFINITION
     2     yanzuo  *
   644    lifsong  *  $Id$
     2     yanzuo  *
     2     yanzuo  *
     2     yanzuo  *  Description:
     2     yanzuo  *
     2     yanzuo  *
     2     yanzuo  *  COPYRIGHT (c) 2003 NOKIA NETWORKS OY FINLAND
     2     yanzuo  */
  1071   huantang CONSTANT
  1072   huantang 	jig_start_up_unit_not_ready_ec  = 0x5440;
  1072   huantang 	jig_alp2_unit_in_wrong_state_ec = 0x5441;
  1072   huantang 	jig_dsp_hc_created_not_ready_ec = 0x5442;
  1072   huantang 	jig_rt_hc_created_not_ready_ec  = 0x5443;
  1072   huantang 	jig_nrt_alp_unit_in_warming_ec  = 0x5444;
  1222      tinyu 	jig_nrt_alp_hc_not_created_ec = 0x5445;   
  1073   huantang 	jig_nrt_alp_hc_created_not_ready_toward_center_ec = 0x5446;  
  1222      tinyu 	jig_nrt_hc_not_created_ec  = 0x5447;
  1225      tinyu 	jig_allocate_resource_failed__ec = 0x5448;
  1073   huantang 	jig_computer_is_not_found_ec     = 0x5449;
  1362       pshu 	jig_computer_no_more_bitmap_ec   = 0x5450;
     2     yanzuo 
     2     yanzuo TYPE hand_state__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ENUM
     2     yanzuo        idle_c,
     2     yanzuo        busy_c,
     2     yanzuo        init_if_c,
     2     yanzuo        init_vp_c,
     2     yanzuo        etc
     2     yanzuo     ENDENUM;
  1420       pshu ENDTYPE hand_state__t;
     2     yanzuo 
     2     yanzuo TYPE hand_states__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( jig_limits__t_n_clus_c+1 ) OF hand_state__t;
     2     yanzuo ENDTYPE hand_states__t;
     2     yanzuo 
     2     yanzuo /* used to record clus hand ack the hand_supervison_msg_s or not */
     2     yanzuo TYPE clus_hands_ack__t
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( jig_limits__t_n_clus_c + 1 ) OF bool;
     2     yanzuo ENDTYPE clus_hands_ack__t;
     2     yanzuo 
     2     yanzuo TYPE config_change_table__t
     2     yanzuo   CONSTANT
     2     yanzuo     max_c = 10;
     2     yanzuo   REPRESENTATION
     2     yanzuo     ARRAY( max_c ) OF
     2     yanzuo     STRUCT
     2     yanzuo        client_pid   pid;
     2     yanzuo        unit_type    unit_type_t;
     2     yanzuo        unit_index   unit_index_t;
     2     yanzuo     ENDSTRUCT;
  1420       pshu ENDTYPE config_change_table__t;
     2     yanzuo 
  1420       pshu 
  1283   chunchen PROCESS jigmix
  1283   chunchen   COMMENT '$Id: jigmixgx.sdl 2011-02-25 cao jinnan $';
  1283   chunchen /*
  1283   chunchen *
  1283   chunchen *  Environment:
  1283   chunchen *       'jigmix is part of 'jigger' process family and
  1283   chunchen *       belongs to the system block 'phrsyb' and to service block
  1283   chunchen *       'fobseb'.
  1283   chunchen *
  1283   chunchen *  Description:
  1283   chunchen *
  1283   chunchen *
  1283   chunchen *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
  1283   chunchen **************************************************************************/
  1283   chunchen CONSTANT
  1283   chunchen     ack_waiting_time__c = 199;
  1317      tinyu     log_file_flush_time__c     = 1000;
  1283   chunchen 
  1317      tinyu TIMER
  1317      tinyu     SET  single_tl,  log_file_flush_timer;
  1283   chunchen 
  1283   chunchen /*Process body*/
  1283   chunchen START;
  1509       pshu 
  1509       pshu     CALL jig_debug_init__r(dword(own_unit_phys_addr));
  1317      tinyu     SET (NOW + log_file_flush_time__c,log_file_flush_timer); 
  1309       pshu 
  1283   chunchen 	NEXTSTATE working;
  1283   chunchen 
  1283   chunchen STATE working;
  1283   chunchen         	
  1309       pshu     INPUT hand_supervision_msg_s;
  1309       pshu         OUTPUT hand_supervision_ack_s TO SENDER ,
  1283   chunchen 		   SET SND_MSGCOPY_FROM_WO_TO_SPUP = F;
  1283   chunchen 		NEXTSTATE -;
  1317      tinyu 
  1317      tinyu     INPUT jig_set_debug_mask__s(mask);        
  1317      tinyu     DCL            mask      dword;                
  1317      tinyu         CALL  jigmix_update_file_mask__r(mask);       
  1317      tinyu     NEXTSTATE -;            
  1317      tinyu       
  1317      tinyu     INPUT log_file_flush_timer;    	
  1317      tinyu        CALL log_file_flush__r();    	
  1317      tinyu        SET (NOW + log_file_flush_time__c,log_file_flush_timer);    
  1317      tinyu     NEXTSTATE -;  	   
  1317      tinyu 	
  1309       pshu 	INPUT jig_update_logfile_content__s(log);
  1321       pshu 	   DCL 
  1321       pshu 		   log      logfile_content_msg__t;
  1321       pshu 	   RESET(log_file_flush_timer);
  1321       pshu        CALL jigmix_write_to_file__r(log);
  1321       pshu 	   SET (NOW + log_file_flush_time__c,log_file_flush_timer);    
  1321       pshu 	   NEXTSTATE -;
  1283   chunchen   
  1283   chunchen ENDSTATE working;
  1283   chunchen 
  1283   chunchen ENDPROCESS jigmix;
  1283   chunchen /*
  1283   chunchen  *  PROGRAMBLOCK SYNCHRONOUS SERVICE DEFINITION
  1283   chunchen  *
  1283   chunchen  *  $Id: jigmixgx.spd 1222 2011-01-05 09:04:47Z tinyu $
  1283   chunchen  *
  1283   chunchen  *  Description:
  1283   chunchen  *  
  1283   chunchen  *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
  1283   chunchen  */
  1283   chunchen  
  1283   chunchen CONSTANT 
  1283   chunchen     log_file_version__c = 1;
  1320      tinyu     max_buf_len__c = 1024;
  1283   chunchen     file_catch_size__c = 1024*8;
  1283   chunchen     file_max_size__c = 1024*1024*10;
  1283   chunchen     log_file_magic = 0x4A494747;/*JIGG */
  1283   chunchen     
  1283   chunchen TYPE file_header__t
  1283   chunchen   CONSTANT
  1283   chunchen       size_c = 4;
  1283   chunchen   REPRESENTATION
  1283   chunchen     STRUCT
  1283   chunchen       version          dword;
  1283   chunchen       magic            dword;
  1283   chunchen       mask             dword;
  1283   chunchen       offset           dword;
  1283   chunchen       pad              ARRAY(size_c) OF byte;
  1283   chunchen     ENDSTRUCT;
  1283   chunchen ENDTYPE file_header__t;
  1283   chunchen 
  1283   chunchen TYPE logfile_content_msg__t
  1283   chunchen   REPRESENTATION 
  1283   chunchen     STRUCT 
  1283   chunchen       length          dword;
  1283   chunchen       content         ARRAY (file_catch_size__c) OF byte;
  1283   chunchen     ENDSTRUCT;
  1283   chunchen ENDTYPE logfile_content_msg__t;
  1283   chunchen 
  1283   chunchen TYPE logfile_header_msg__t
  1283   chunchen   CONSTANT
  1283   chunchen     length_c = SIZEOF(file_header__t);
  1283   chunchen   REPRESENTATION 
  1283   chunchen     STRUCT 
  1283   chunchen       header         ARRAY (length_c) OF byte;
  1283   chunchen     ENDSTRUCT;
  1283   chunchen ENDTYPE logfile_header_msg__t;
  1309       pshu 
  1309       pshu SERVICES SYNC
  1309       pshu           
  1309       pshu PROCEDURE jigmix_write_to_file__r(IN/OUT log logfile_content_msg__t)->,FAR=>;
  1317      tinyu PROCEDURE jigmix_update_file_mask__r(IN mask dword)->, FAR=>;
     2     yanzuo /* PROGRAMBLOCK CONSTANT AND TYPE DEFINITION
     2     yanzuo  *
   644    lifsong  *  $Id$
     2     yanzuo  *
     2     yanzuo  *  Author:     Janne J. Aaltonen
     2     yanzuo  *              Jani Koivula
     2     yanzuo  *              Jouko Virtanen
     2     yanzuo  *		Xu Gaoqiang
     2     yanzuo  *  Revised by: Xu Gaoqiang
     2     yanzuo  *
     2     yanzuo  *  Description:
     2     yanzuo  *
     2     yanzuo  *
     2     yanzuo  *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo /* Messages to be handled at the main level of the master process: */
     2     yanzuo 
     2     yanzuo SIGNAL jig_task_inquiry__s = 0x9000
     2     yanzuo (
     2     yanzuo     cluster_idx  alp_cluster_idx__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_task_completed__s = 0x9001
     2     yanzuo (
     2     yanzuo     cluster_idx  alp_cluster_idx__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_update_jiifil__s = 0x9002
     2     yanzuo (
     2     yanzuo     rec                  jiifil__t;
     2     yanzuo     proc_idx             byte;
     2     yanzuo     fields               jii_fields__t;
     2     yanzuo     req_idx              dword;
     2     yanzuo     timestamp            jig_timestamp__t;
     2     yanzuo     ack_needed           bool;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo /* Request from cluster hand or connection hand
     2     yanzuo  * to update half-connection states in JIIFIL
     2     yanzuo  * and send connection creation or deletion ack
     2     yanzuo  * message to original client process.
     2     yanzuo  */
     2     yanzuo SIGNAL jig_update_half_conn_states__s = 0x9005
     2     yanzuo (
     2     yanzuo     conn_ids             jig_id_array__t;
     2     yanzuo     phys_addrs           jig_id_array__t;
     2     yanzuo     xconn_ids            jig_id_array__t;
     2     yanzuo     exist_state          bool;
     2     yanzuo     create_ack_receiver  pid;
     2     yanzuo     delete_ack_receiver  pid;
     2     yanzuo     /* data for the reply to the client */
     2     yanzuo     status               error_t;
     2     yanzuo     conn_id              conn_id_t;
     2     yanzuo     comp1                phys_address_t;
     2     yanzuo     comp2                phys_address_t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_sp_unit_updated__s = 0x9006
     2     yanzuo (
     2     yanzuo     unit_addr            phys_address_t;
     2     yanzuo     clus_idx             alp_cluster_idx__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_unit_removed__s = 0x9007
     2     yanzuo (
     2     yanzuo     jiifil_idx           jiifil_idx__t;
     2     yanzuo     unit_type            unit_type_t;
     2     yanzuo     unit_index           unit_index_t;
     2     yanzuo     status               error_t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_hand_state_update__s = 0x9008
     2     yanzuo (
     2     yanzuo     clus_idx             alp_cluster_idx__t;
     2     yanzuo     hand_state           hand_state__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_vcc_resource_req__s = 0x9011
     2     yanzuo (
     2     yanzuo     /* object computer: */
     2     yanzuo     src_addr             phys_address_t;
     2     yanzuo     existing_conns       bool;
     2     yanzuo     nrt_only             bool;
     2     yanzuo 
     2     yanzuo     /* its NRT connections and their target computers */
     2     yanzuo     vccs_params          jig_vccs_params__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_alloc_interf_id_s = 0x9012
     2     yanzuo (
     2     yanzuo     unit_type   unit_type_t;
     2     yanzuo     unit_index  unit_index_t;
     2     yanzuo     unit_addr   phys_address_t;
     2     yanzuo     mphy_number byte;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_vcc_tm_fpga_req__s = 0x9013
     2     yanzuo (
     2     yanzuo 	vcc_res      		jig_vccs_resources__t;
     2     yanzuo 	tm_fpga_vcc_idx	dword;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo /* Resource query reply from the master to cluster/connection hand.
     2     yanzuo  *
     2     yanzuo  * Maximum size of this message is 16 + 2 + n_computers*12 bytes, assuming
     2     yanzuo  * cluster hand needs to set up a half-xconn to every other computer
     2     yanzuo  * in the system.
     2     yanzuo  * At the moment, practical maximum is 16 + 2 + 319*12 = 3846 bytes
     2     yanzuo  * in case of a SPMU in the biggest 3-cabinet MGW configuration.
     2     yanzuo  * (Optimized version would contain only conn_id, vci, xconn_id,
     2     yanzuo  * remote xconn_id, dest fabric port = savings of 25%.)
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* Responses to messages listed above: */
     2     yanzuo 
     2     yanzuo SIGNAL jig_update_jiifil_ack__s = 0x9021
     2     yanzuo (
     2     yanzuo     status    error_t;
     2     yanzuo     req_idx   dword;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_vcc_resource_ack__s = 0x9022
     2     yanzuo (
     2     yanzuo     status               error_t;
     2     yanzuo     comp_addr            phys_address_t;
     2     yanzuo     vccs_resources       jig_vccs_resources__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_alloc_interf_id_ack_s = 0x9023
     2     yanzuo (
     2     yanzuo     unit_type            unit_type_t;
     2     yanzuo     unit_idx             unit_index_t;
     2     yanzuo 
     2     yanzuo     proc0_intf_index     byte;
     2     yanzuo     proc1_intf_index     byte;
     2     yanzuo     proc2_intf_index     byte;
     2     yanzuo     proc3_intf_index     byte;
     2     yanzuo 
     2     yanzuo     id1                  atm_interface_id_t;
     2     yanzuo     id2                  atm_interface_id_t;
     2     yanzuo     id3                  atm_interface_id_t;
   470    lifsong     id4                  atm_interface_id_t;
     2     yanzuo 
     2     yanzuo     status               error_t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_vcc_tm_fpga_ack__s = 0x9024
     2     yanzuo (
     2     yanzuo     	status		error_t;
     2     yanzuo 	vcc_res      		jig_vccs_resources__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo 
     2     yanzuo SIGNAL jig_task_msg__s = 0x9030
     2     yanzuo (
     2     yanzuo     task_data            task_data__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_give_out_task__s = 0x9080
     2     yanzuo (
     2     yanzuo     clus_idx             alp_cluster_idx__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo /* Internal messages of data management module: */
     2     yanzuo 
     2     yanzuo SIGNAL jig_write_jiifil_rec__s = 0x9100
     2     yanzuo (
     2     yanzuo     rec                  jiifil__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_update_vcc_resources__s = 0x9101
     2     yanzuo (
     2     yanzuo     comp_addr            phys_address_t;
     2     yanzuo     vccs_resources       jig_vccs_resources__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_unknown_unit__s = 0x9102
     2     yanzuo (
     2     yanzuo     figmsghdr            fig_msg_header_t;
     2     yanzuo     uxhwblock            ux_hw_block_type_t;
     2     yanzuo     mphy                 mphy_port_number_t;
     2     yanzuo     sar_type             sar_type_t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_continue__s = 0x9103;
     2     yanzuo 
     2     yanzuo SIGNAL hms_ack_s = 0x9104;
     2     yanzuo 
     2     yanzuo /* interface for executing NIP1 APC configuration tasks
     2     yanzuo    client = JIGCON, server = JIGCLU */
     2     yanzuo 
     2     yanzuo SIGNAL jig_alp2_conf_req__s = 0x9110
     2     yanzuo (
     2     yanzuo     alp2_conf_para   jig_alp2_conf_para__t;
     2     yanzuo     client_pid       pid;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_alp2_conf_ack__s = 0x9111
     2     yanzuo (
     2     yanzuo     status           error_t;
     2     yanzuo     conf_para        jig_alp2_conf_para__t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo SIGNAL jigcon_create__s = 0x9210
     2     yanzuo (
     2     yanzuo     conn_data            conn_hand_data__t;
     2     yanzuo     client               pid;
     2     yanzuo     rbroke_pid           pid;
     2     yanzuo     rbroke_attrs         attr_group_t;
     2     yanzuo );
     2     yanzuo 
     2     yanzuo SIGNAL jig_xcon_unit_req__s = 0x9300
     2     yanzuo (
     2     yanzuo 	in_addr	phys_address_t;
     2     yanzuo );
     2     yanzuo SIGNAL jig_xcon_unit_ack__s = 0x9301
     2     yanzuo (
     2     yanzuo 	is_apc				bool;
     2     yanzuo 	target_unit			jiifil__t;
     2     yanzuo 	alp_unit			jiifil__t;
     2     yanzuo 	status				error_t;
     2     yanzuo );
   223    lifsong 
   223    lifsong SIGNAL jig_remote_vcc_res_req__s = 0x9302
   223    lifsong (
   223    lifsong     comp_addr            phys_address_t;
   223    lifsong     existing_conns       bool;
   223    lifsong     nrt_only                bool;
   223    lifsong     vccs_params          jig_vccs_params__t;
   223    lifsong );
   223    lifsong 
   223    lifsong SIGNAL jig_remote_vcc_res_ack__s = 0x9303
   223    lifsong (
   223    lifsong     comp_addr            phys_address_t;
   223    lifsong     remote_vccs_res      jig_remote_vccs_res__t;
   223    lifsong );
   223    lifsong 
  1283   chunchen SIGNAL jig_update_logfile_content__s = 0x9304
  1283   chunchen (
  1283   chunchen     logfile_content     logfile_content_msg__t;
  1283   chunchen );
  1309       pshu 
  1309       pshu SIGNAL jig_set_debug_mask__s = 0x9305
  1309       pshu (
  1309       pshu     log_mask dword;
  1309       pshu );
  1486    shuocao 
  1486    shuocao SIGNAL jig_start_port_conf__s = 0x9306
  1486    shuocao (
  1486    shuocao    unit_type unit_type_t;
  1486    shuocao    unit_index unit_index_t;
  1486    shuocao );
     2     yanzuo /*
     2     yanzuo *  Author:     Janne J. Aaltonen
     2     yanzuo *	       Jani Koivula
     2     yanzuo *	       Jouko Virtanen
     2     yanzuo *
     2     yanzuo *  Revised by:
     2     yanzuo *
     2     yanzuo *  Description:
     2     yanzuo *  Operators for data types defined in JIGDATGX.SPD
     2     yanzuo *
     2     yanzuo *  COPYRIGHT (c) 2003 NOKIA NETWORKS OY FINLAND
     2     yanzuo *************************************************************************/
     2     yanzuo 
     2     yanzuo #include "dxsccctr.h"
     2     yanzuo 
   641    lifsong static const unsigned char module_identification[] = "@(#)MID: $Id$";
     2     yanzuo 
     2     yanzuo #include "jiggergx.cin"
     2     yanzuo 
     2     yanzuo /* This module is used in JIGGER and JIHEXT. During JIHEXT compilation
     2     yanzuo    jigdatgx definitions have already been included via the .CIN file,
     2     yanzuo    so we cannot include jigdatgx.cpd again. */
    38    lifsong #ifndef JIHEXT
     2     yanzuo #include "jigdatgx.cpd"
    38    lifsong #endif
     2     yanzuo #include "string.h"
     2     yanzuo 
     2     yanzuo dword _near_
     2     yanzuo jig_id_array__t_ensize( jig_id_array__t far * list )
     2     yanzuo {
     2     yanzuo     return sizeof(list->n_items) + list->n_items * sizeof(list->item[0]);
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_id_array__t_encode( jig_id_array__t far * list,
     2     yanzuo                         bytepointer starting,
     2     yanzuo                         bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = jig_id_array__t_ensize( list );
     2     yanzuo     memcpy( starting, (byte *)list, n );
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_id_array__t_decode( jig_id_array__t far * list,
     2     yanzuo                         bytepointer starting,
     2     yanzuo                         bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = sizeof(list->n_items) + *(word *)starting * sizeof(list->item[0]);
     2     yanzuo     memcpy( (byte *)list, starting, n);
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo dword _near_
     2     yanzuo jig_vccs_resources__t_ensize( jig_vccs_resources__t far * list )
     2     yanzuo {
     2     yanzuo     return sizeof(list->common) + sizeof(list->item_count)
     2     yanzuo         + list->item_count * sizeof(list->res[0]);
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_vccs_resources__t_encode( jig_vccs_resources__t far * list,
     2     yanzuo                               bytepointer starting,
     2     yanzuo                               bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = jig_vccs_resources__t_ensize( list );
     2     yanzuo     memcpy(starting, (byte *) list, n);
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_vccs_resources__t_decode( jig_vccs_resources__t far * list,
     2     yanzuo                               bytepointer starting,
     2     yanzuo                               bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = sizeof(list->common) + sizeof(list->item_count)
     2     yanzuo         + (((jig_vccs_resources__t *)starting)->item_count *
     2     yanzuo            sizeof(list->res[0]));
     2     yanzuo     memcpy( (byte *)list, starting, n);
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
   223    lifsong dword _near_
   223    lifsong jig_remote_vccs_res__t_ensize( jig_remote_vccs_res__t far * list )
   223    lifsong {
   223    lifsong     return sizeof(list->item_count)
   223    lifsong         + list->item_count * sizeof(list->items[0]);
   223    lifsong }
     2     yanzuo 
   223    lifsong bytepointer _near_
   223    lifsong jig_remote_vccs_res__t_encode( jig_remote_vccs_res__t far * list,
   223    lifsong                               bytepointer starting,
   223    lifsong                               bytepointer limit )
   223    lifsong {
   223    lifsong     dword n;
   223    lifsong 
   223    lifsong     n = jig_remote_vccs_res__t_ensize( list );
   223    lifsong     memcpy(starting, (byte *) list, n);
   223    lifsong 
   223    lifsong     return starting + n;
   223    lifsong }
   223    lifsong 
   223    lifsong bytepointer _near_
   223    lifsong jig_remote_vccs_res__t_decode( jig_remote_vccs_res__t far * list,
   223    lifsong                               bytepointer starting,
   223    lifsong                               bytepointer limit )
   223    lifsong {
   223    lifsong     dword n;
   223    lifsong 
   223    lifsong     n = sizeof(list->item_count)
   223    lifsong         + (((jig_remote_vccs_res__t *)starting)->item_count *
   223    lifsong            sizeof(list->items[0]));
   223    lifsong     memcpy( (byte *)list, starting, n);
   223    lifsong 
   223    lifsong     return starting + n;
   223    lifsong }
   223    lifsong 
   223    lifsong 
     2     yanzuo dword _near_
     2     yanzuo jig_vccs_params__t_ensize( jig_vccs_params__t far * list )
     2     yanzuo {
     2     yanzuo     return sizeof(list->item_count) + list->item_count * sizeof(list->vcc[0]);
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_vccs_params__t_encode( jig_vccs_params__t far * list,
     2     yanzuo                            bytepointer starting,
     2     yanzuo                            bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = jig_vccs_params__t_ensize( list );
     2     yanzuo     memcpy( starting, (byte *)list, n );
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bytepointer _near_
     2     yanzuo jig_vccs_params__t_decode( jig_vccs_params__t far * list,
     2     yanzuo                            bytepointer starting,
     2     yanzuo                            bytepointer limit )
     2     yanzuo {
     2     yanzuo     dword n;
     2     yanzuo 
     2     yanzuo     n = sizeof(list->item_count) + *(word *)starting * sizeof(list->vcc[0]);
     2     yanzuo     memcpy( (byte *)list, starting, n);
     2     yanzuo 
     2     yanzuo     return starting + n;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo void _near_
     2     yanzuo jii_fields__t_init_r( jii_fields__t fields_array_ptr )
     2     yanzuo {
     2     yanzuo     memset( fields_array_ptr, 0, sizeof( jii_fields__t ));
     2     yanzuo }
     2     yanzuo 
     2     yanzuo void _near_
     2     yanzuo jii_fields__t_fset( jii_fields__t fields_ptr, jii_field__t flag )
     2     yanzuo {
     2     yanzuo     *((byte *)fields_ptr + flag/8) |= (1 << (flag & 7));
     2     yanzuo }
     2     yanzuo 
     2     yanzuo jii_field__t _near_
     2     yanzuo jii_fields__t_next_r( jii_fields__t fields_ptr, jii_field__t field )
     2     yanzuo {
     2     yanzuo     ++field;
     2     yanzuo 
     2     yanzuo     while (field < 8*JII_FIELDS__T_N_BYTES_C &&
     2     yanzuo            ((fields_ptr)[field >> 3] & (1 << (field & 7))) == 0)
     2     yanzuo     {
     2     yanzuo         ++field;
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return (field >= 8*JII_FIELDS__T_N_BYTES_C)
     2     yanzuo         ? JII_FIELD__T_LAST_C : field;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo jii_field__t _near_
     2     yanzuo jii_fields__t_first_r( jii_fields__t fields_ptr )
     2     yanzuo {
     2     yanzuo     return jii_fields__t_next_r( fields_ptr, (jii_field__t) ~0);
     2     yanzuo }
     2     yanzuo 
     2     yanzuo #ifndef JIHEXT
     2     yanzuo 
     2     yanzuo /* wrappers for FUNLIB,HMILIB for testing: */
     2     yanzuo #define noUSE_REAL_LIBS
     2     yanzuo 
     2     yanzuo #ifdef USE_REAL_LIBS
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo hms_addr_to_phys_addr__r( hms_address_t ha, unit_address_t *addr_ptr )
     2     yanzuo {
     2     yanzuo     return hms_addr_to_phys_addr_r( ha, addr_ptr );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo hms_addr_from_phys_addr__r( unit_address_t a, hms_address_t *ha_ptr )
     2     yanzuo {
     2     yanzuo     return hms_slv_addr_from_phys_addr_r( a, ha_ptr );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo unit_state_by_phys_addr__r( phys_address_t a, unit_state_t *ustate )
     2     yanzuo {
     2     yanzuo     return unit_state_by_phys_addr_r( a, ustate );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo unit_type_and_index__r( phys_address_t a, unit_it_t *ui_ptr )
     2     yanzuo {
     2     yanzuo     return unit_type_and_index_r( a, ui_ptr );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo physical_address__r( unit_type_t typ, unit_index_t idx, phys_address_t *a )
     2     yanzuo {
     2     yanzuo     return physical_address_r( typ, idx, a );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo get_parent_unit__r( unit_type_t t1, unit_index_t i1,
     2     yanzuo                     unit_type_t *t2, unit_index_t *i2 )
     2     yanzuo {
     2     yanzuo     return get_parent_unit_r( t1, i1, t2, i2 );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo #else
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo hms_addr_to_phys_addr__r( hms_address_t ha, unit_address_t *addr_ptr )
     2     yanzuo {
     2     yanzuo     *addr_ptr = ha & 0xFF;
     2     yanzuo     if ((ha & 0xFF00) == 0x200) *addr_ptr += 2;
     2     yanzuo     if ((ha & 0xFF00) == 0x300) *addr_ptr += 4;
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo hms_addr_from_phys_addr__r( unit_address_t a, hms_address_t *ha_ptr )
     2     yanzuo {
     2     yanzuo     if (a == 11 || a == 12)
     2     yanzuo         *ha_ptr = 0x010200 + (a-2);
     2     yanzuo     else if (a == 13 || a == 14)
     2     yanzuo         *ha_ptr = 0x010300 + (a-4);
     2     yanzuo     else
     2     yanzuo         *ha_ptr = 0x010100 + a;
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo unit_state_by_phys_addr__r( phys_address_t a, unit_state_t *ustate )
     2     yanzuo {
     2     yanzuo     switch(a)
     2     yanzuo     {
     2     yanzuo     case 10:
     2     yanzuo     case 12:
     2     yanzuo     case 14:
     2     yanzuo         /* mxu-1,3,5 */
     2     yanzuo         *ustate = UNIT_STATE_T_SP_C;
     2     yanzuo         break;
     2     yanzuo     default:
     2     yanzuo         *ustate = UNIT_STATE_T_WO_C;
     2     yanzuo         break;
     2     yanzuo     }
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo unit_type_and_index__r( phys_address_t a, unit_it_t *ui_ptr )
     2     yanzuo {
     2     yanzuo     switch(a)
     2     yanzuo     {
     2     yanzuo     case 0:
     2     yanzuo     case 1:
     2     yanzuo         /* OMUs */
     2     yanzuo         ui_ptr->ttype = 2;
     2     yanzuo         ui_ptr->index = a;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     case 9:
     2     yanzuo     case 10:
     2     yanzuo     case 11:
     2     yanzuo     case 12:
     2     yanzuo     case 13:
     2     yanzuo     case 14:
     2     yanzuo         /* MXU-0/5 */
     2     yanzuo         ui_ptr->ttype = 0x10C;
     2     yanzuo         ui_ptr->index = a - 9;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     case 4:
     2     yanzuo         /* SFU-0 */
     2     yanzuo         ui_ptr->ttype = 0x151;
     2     yanzuo         ui_ptr->index = 0;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     default:
     2     yanzuo         return UNSUCCESSFUL_EC;
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo physical_address__r( unit_type_t typ, unit_index_t idx, phys_address_t *a )
     2     yanzuo {
     2     yanzuo     switch(typ)
     2     yanzuo     {
     2     yanzuo     case 2:
     2     yanzuo         *a = idx;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     case 0x10C:
     2     yanzuo         /* MXU-0..5 */
     2     yanzuo         *a = idx + 9;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     case 0x151:
     2     yanzuo         /* SFU-0 */
     2     yanzuo         *a = idx + 4;
     2     yanzuo         break;
     2     yanzuo 
     2     yanzuo     default:
     2     yanzuo         return UNSUCCESSFUL_EC;
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo error_t _near_
     2     yanzuo get_parent_unit__r( unit_type_t t1, unit_index_t i1,
     2     yanzuo                     unit_type_t *t2, unit_index_t *i2 )
     2     yanzuo {
     2     yanzuo     return UNSUCCESSFUL_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo #endif
     2     yanzuo 
     2     yanzuo #endif /* for #ifndef JIHEXT */
  1104   huantang #include <dxsccctr.h> 
  1104   huantang #include <stdio.h>
  1104   huantang #include <sys/stat.h>
  1104   huantang #include <fcntl.h>
  1104   huantang #include <stdlib.h>
  1104   huantang #include <errno.h>
  1104   huantang #include <semaphore.h>
  1104   huantang #include "jigposix.h"
  1104   huantang 
  1153   huantang #ifndef TNSDL_UNIT_TEST
  1153   huantang 
  1104   huantang sem_t g_log_sem;
  1104   huantang 
  1104   huantang FILE *posix_open_file__r(char *filename,char *mode)
  1104   huantang {
  1104   huantang 	return fopen(filename,mode);
  1104   huantang }
  1104   huantang void posix_close_file__r(FILE *file)
  1104   huantang {
  1104   huantang 	fclose(file);
  1104   huantang }
  1104   huantang int posix_write_file__r(FILE *file,char *buf,int len)
  1104   huantang {
  1104   huantang 	int wlen;
  1104   huantang 	if ( file )
  1104   huantang 	{
  1104   huantang 		wlen = fwrite(buf,1,len,file);
  1104   huantang 		fflush(file);
  1322       pshu 		if ( wlen !=len )
  1104   huantang 		{
  1104   huantang 			return errno;
  1104   huantang 		}
  1104   huantang 	}
  1104   huantang 	return 0;
  1104   huantang }
  1104   huantang int posix_read_file__r(FILE *file,char *buf,int len)
  1104   huantang {
  1104   huantang 	int wlen;
  1104   huantang 	if ( file )
  1104   huantang 	{
  1104   huantang 		wlen = fread(buf,1,len,file);
  1104   huantang 		if ( wlen != len )
  1104   huantang 		{
  1104   huantang 			return errno;
  1104   huantang 		}
  1104   huantang 	}
  1104   huantang 	return 0;
  1104   huantang }
  1104   huantang int posix_seek_file__r(FILE *file,long offset,int fromwhere)
  1104   huantang {
  1104   huantang 	if ( file )
  1104   huantang 	{
  1104   huantang 		fseek(file,offset,fromwhere);
  1104   huantang 	}
  1104   huantang 	return 0;
  1104   huantang }
  1104   huantang 
  1104   huantang 
  1104   huantang int posix_sem_init__r()
  1104   huantang {
  1104   huantang 	 int ec = 0;
  1104   huantang 	 int try_count = TRY_TIMES;
  1104   huantang 	 ec = sem_init(&g_log_sem,0,1);
  1104   huantang 	 while ( (ec != 0) && try_count )
  1104   huantang 	 {
  1104   huantang 		ec = sem_init(&g_log_sem,0,1);
  1104   huantang 		try_count --;
  1104   huantang 	 }
  1104   huantang 	 return ec;
  1104   huantang }
  1104   huantang void posix_sem_wait__r()
  1104   huantang {
  1104   huantang 	 sem_wait(&g_log_sem);
  1104   huantang }
  1104   huantang void posix_sem_post__r()
  1104   huantang {
  1104   huantang 	 sem_post(&g_log_sem);
  1104   huantang }
  1104   huantang 
  1153   huantang #else /* UNIT TEST CODE */
  1104   huantang 
  1153   huantang FILE *posix_open_file__r_impl(char *filename,char *mode)
  1153   huantang {
  1154   huantang 	return (FILE*)1;
  1153   huantang }
  1153   huantang void posix_close_file__r_impl(FILE *file)
  1153   huantang {
  1153   huantang 	return;
  1153   huantang }
  1153   huantang int posix_write_file__r_impl(FILE *file,char *buf,int len)
  1153   huantang {
  1153   huantang 	return 1;
  1153   huantang }
  1153   huantang int posix_read_file__r_impl(FILE *file,char *buf,int len)
  1153   huantang {
  1153   huantang 	return 1;
  1153   huantang }
  1153   huantang int posix_seek_file__r_impl(FILE *file,long offset,int fromwhere)
  1153   huantang {
  1153   huantang 	return 0;
  1153   huantang }
  1104   huantang 
  1153   huantang 
  1153   huantang int posix_sem_init__r_impl()
  1153   huantang {
  1153   huantang 	 return 0;
  1153   huantang }
  1153   huantang void posix_sem_wait__r_impl()
  1153   huantang {
  1153   huantang }
  1153   huantang void posix_sem_post__r_impl()
  1153   huantang {
  1153   huantang }
  1153   huantang 
  1153   huantang 
  1153   huantang FILE *(*posix_open_file__r)(char *filename,char *mode) = posix_open_file__r_impl;
  1153   huantang void (*posix_close_file__r)(FILE *file) = posix_close_file__r_impl;
  1153   huantang int (*posix_write_file__r)(FILE *file,char *buf,int len)  = posix_write_file__r_impl;
  1153   huantang int (*posix_read_file__r)(FILE *file,char *buf,int len) = posix_read_file__r_impl;
  1153   huantang int (*posix_seek_file__r)(FILE *file,long offset,int fromwhere) = posix_seek_file__r_impl;
  1153   huantang 
  1153   huantang int  (*posix_sem_init__r)()  = posix_sem_init__r_impl;
  1153   huantang void (*posix_sem_wait__r)()  = posix_sem_wait__r_impl;
  1153   huantang void (*posix_sem_post__r)()  = posix_sem_post__r_impl;
  1153   huantang 
  1153   huantang #endif
  1153   huantang 
  1104   huantang #ifndef JIG_POSIX_H
  1104   huantang #define JIG_POSIX_H
  1104   huantang 
  1104   huantang #define TRY_TIMES 3
  1319       pshu #include "stdio.h"
  1153   huantang #ifndef TNSDL_UNIT_TEST
  1153   huantang FILE* posix_open_file__r(char *filename,char *mode);
  1153   huantang void  posix_close_file__r(FILE *file);
  1153   huantang int   posix_write_file__r(FILE *file,char *buf,int len);
  1153   huantang int   posix_read_file__r(FILE *file,char *buf,int len);
  1153   huantang int   posix_seek_file__r(FILE *file,long offset,int fromwhere);
  1153   huantang 
  1153   huantang int  posix_sem_init__r();
  1104   huantang void posix_sem_wait__r();
  1104   huantang void posix_sem_post__r();
  1153   huantang 
  1153   huantang #else
  1153   huantang extern FILE *(*posix_open_file__r)(char *filename,char *mode);
  1153   huantang extern void (*posix_close_file__r)(FILE *file);
  1153   huantang extern int (*posix_write_file__r)(FILE *file,char *buf,int len);
  1153   huantang extern int (*posix_read_file__r)(FILE *file,char *buf,int len);
  1153   huantang extern int (*posix_seek_file__r)(FILE *file,long offset,int fromwhere);
  1153   huantang 
  1153   huantang extern int  (*posix_sem_init__r)();
  1153   huantang extern void (*posix_sem_wait__r)();
  1153   huantang extern void (*posix_sem_post__r)();
  1153   huantang 
  1104   huantang #endif
  1104   huantang 
  1153   huantang #endif
  1104   huantang 
  1104   huantang 
  1153   huantang 
     2     yanzuo 
   645    lifsong /*
   645    lifsong   $Id$
   645    lifsong */
   645    lifsong 
     2     yanzuo CONSTANT
     2     yanzuo     NO_ANY_ACK__C = 0;
     2     yanzuo     RUGGER_ACK__C = 1;
     2     yanzuo     RBROKE_ACK__C = 2;
  1219    jinncao     BRTSEB_ACK__C = 3;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo 
     2     yanzuo PROCEDURE remove_ipniu_ipe_if__r;
     2     yanzuo FPAR
     2     yanzuo   IN/OUT    unit      jiifil__t;
     2     yanzuo  RETURNS bool;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo   ustate      unit_state_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION is_redundant_ipniu__r(unit.unit_type);
     2     yanzuo     ( T ):
     2     yanzuo       DECISION (unit_state_by_phys_addr__r( unit.procs( 0 ).phys_addr,
     2     yanzuo                ustate ) = success_ec
     2     yanzuo                AND
     2     yanzuo                ( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_wo_c)
     2     yanzuo                OR
     2     yanzuo                (unit.co_alp_unit_phys_addr = computer_t_phys_invalid_c
     2     yanzuo                AND unit.removing_unit);
     2     yanzuo         ( T ):
     2     yanzuo           RETURN T;
     2     yanzuo         ELSE:
     2     yanzuo           RETURN F;
     2     yanzuo       ENDDECISION;
     2     yanzuo     ELSE:
     2     yanzuo       RETURN T;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE remove_ipniu_ipe_if__r;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE remove_rt_conns__r;
     2     yanzuo /*
     2     yanzuo  * Remove the RT connections of the given unit.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN         object_unit_addr phys_address_t,
     2     yanzuo     IN VIEWED  vccs             jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     first_error          error_t,
     2     yanzuo     vcidx                dword := 0,
     2     yanzuo     pending_acks         byte := 1;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* start the ball rolling */
     2     yanzuo   OUTPUT int_xconn_delete_ack_s( success_ec, conn_id_t_undefined_c,
     2     yanzuo          0, 0 ) TO SELF;
     2     yanzuo   NEXTSTATE wait_deletion_acks;
     2     yanzuo 
     2     yanzuo STATE wait_deletion_acks;
     2     yanzuo 
     2     yanzuo   INPUT int_xconn_delete_ack_s( first_error, conn_id, ?, ? );
     2     yanzuo     DCL
     2     yanzuo        conn_id  conn_id_t;
     2     yanzuo     DECISION first_error;
     2     yanzuo       ( connection_does_not_exist_ec ):
     2     yanzuo       /* no problem if the connection did not exist */
     2     yanzuo       ( process_already_exists_ec ):
     2     yanzuo         /* connection deletion was already in progress by
     2     yanzuo         another JIGCLU hand -- try again after a short while */
     2     yanzuo         SET ( NOW + 4, conn_del_rereq_timer( conn_id ));
     2     yanzuo         NEXTSTATE -;
     2     yanzuo       ( success_ec ):
  1233    jinncao       	RESET(ack_timer);
     2     yanzuo       ELSE:
     2     yanzuo         CALL SAVE_LATEST_INPUT;
  1233    jinncao 	RESET(ack_timer);
     2     yanzuo         NEXTSTATE error_state;
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ( vcidx >= vccs.item_count ) AND ( pending_acks <= 1 );
     2     yanzuo       ( T ):
     2     yanzuo         RETURN success_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK pending_acks := byte( pending_acks - 1 );
     2     yanzuo     /*
     2     yanzuo     * Send deletion requests until all requests have been
     2     yanzuo     * set, or the number of pending acks is maxed.
     2     yanzuo     */
     2     yanzuo     WHILE vcidx < vccs.item_count AND
   359    lifsong           pending_acks < jig_limits__t_max_rtdels_c;
     2     yanzuo       DECISION vccs.res( vcidx ).serv_category;
     2     yanzuo         ( int_serv_cat_t_i_rt_mnw_c ):
     2     yanzuo           OUTPUT int_xconn_delete_req_s(
     2     yanzuo                  object_unit_addr,
     2     yanzuo                  vccs.res( vcidx ).target_comp,
     2     yanzuo                  vccs.res( vcidx ).conn_id
     2     yanzuo                  ) TO manager_pid;
     2     yanzuo           TASK pending_acks := pending_acks + 1;
   897       pshu           SET ( NOW + 3000, ack_timer );
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK vcidx := vcidx + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     /* if we don't have any requests to send or acks to receive.. */
     2     yanzuo     DECISION ( vcidx >= vccs.item_count ) AND ( pending_acks = 0 );
     2     yanzuo       ( T ):
     2     yanzuo         /* ..get out. */
     2     yanzuo         RETURN success_ec;
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT conn_del_rereq_timer( conn_id );
     2     yanzuo     DCL
     2     yanzuo        conn_id  conn_id_t,
     2     yanzuo        search_pos  dword := 0;
     2     yanzuo     WHILE search_pos < vccs.item_count;
     2     yanzuo       DECISION vccs.res( search_pos ).conn_id;
     2     yanzuo         ( conn_id ):
     2     yanzuo           OUTPUT int_xconn_delete_req_s(
     2     yanzuo                  object_unit_addr,
     2     yanzuo                  vccs.res( search_pos ).target_comp,
     2     yanzuo                  vccs.res( search_pos ).conn_id
     2     yanzuo                  ) TO manager_pid;
     2     yanzuo           OUT;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK search_pos := search_pos + 1;
     2     yanzuo     ENDWHILE;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo ENDSTATE wait_deletion_acks;
     2     yanzuo 
     2     yanzuo STATE error_state
     2     yanzuo   COMMENT 'Wait for pending acks, then return error';
     2     yanzuo 
     2     yanzuo   INPUT int_xconn_delete_ack_s( status, conn_id, ?, ? );
     2     yanzuo     DCL
     2     yanzuo        status   error_t,
     2     yanzuo        conn_id  conn_id_t;
     2     yanzuo     DECISION status;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo         DECISION status;
     2     yanzuo         ( /= warm_up_in_progress_ec ):
     2     yanzuo         	 TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo              @'JIGREL: int xconn delete failed:'
     2     yanzuo              'result: 0x%X'
     2     yanzuo              'TOELIB connid: %X',
     2     yanzuo              status, conn_id );
   889       pshu              
     2     yanzuo         ENDDECISION;
   889       pshu 
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION pending_acks;
     2     yanzuo       ( <= 1 ):
     2     yanzuo         /* Wait for a short time before returning so that the
     2     yanzuo         system has time to stabilize before the next attempt. */
     2     yanzuo         SET ( NOW + 20, conn_del_rereq_timer( 0 ));
     2     yanzuo       ELSE:
     2     yanzuo         TASK pending_acks := byte( pending_acks - 1 );
     2     yanzuo     ENDDECISION;
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
     2     yanzuo   INPUT conn_del_rereq_timer( conn_id );
     2     yanzuo     DCL
     2     yanzuo        conn_id  conn_id_t;
     2     yanzuo     DECISION conn_id;
     2     yanzuo       ( /= 0 ):
     2     yanzuo         /* timer was related to collision which occurred before
     2     yanzuo         error -- consume it */
     2     yanzuo         NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RETURN first_error;
     2     yanzuo ENDSTATE error_state;
     2     yanzuo 
     2     yanzuo STATE wait_deletion_acks, error_state
     2     yanzuo   COMMENT ' ';
     2     yanzuo 
     2     yanzuo   INPUT ack_timer;
     2     yanzuo     TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo          @'JIGREL: int xconn delete timeout:'
   917       pshu          'pending ack count: %u unit addr: 0x%x',
   917       pshu          pending_acks,object_unit_addr);
     2     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo ENDSTATE wait_deletion_acks, error_state;
     2     yanzuo ENDPROCEDURE remove_rt_conns__r;
     2     yanzuo /* Control values for nrt_kill__r procedure: */
     2     yanzuo CONSTANT
     2     yanzuo     kill_req_init__c  = 1;
     2     yanzuo     kill_req_add__c   = 2;
     2     yanzuo     kill_req_flush__c = 4;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE nrt_kill__r;
     2     yanzuo /*
     2     yanzuo  * Remove the given half of a NRT connection, or buffer the request
     2     yanzuo  *  for later sending.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      target_addr    phys_address_t,
     2     yanzuo     IN      target_mphy    mphy_port_number_t,
     2     yanzuo     IN      target_vpi     vpi_t,
     2     yanzuo     IN      wo_alp1_addr   phys_address_t,
     2     yanzuo     IN      sp_alp1_addr   phys_address_t,
     2     yanzuo     IN      update_sp_alp1 bool,
     2     yanzuo 
     2     yanzuo     IN      vcc_res        jig_one_vcc_resources__t,
     2     yanzuo     IN      remove_from_hw  bool,
     2     yanzuo     IN      control        byte,
     2     yanzuo     IN/OUT  err            error_t;
     2     yanzuo 
     2     yanzuo DCL SAVE
     2     yanzuo     hconns               vc_half_conn_array_t,
     2     yanzuo     conn_ids             jig_id_array__t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     xcids                jig_two_id_array__t,
     2     yanzuo     addrs                jig_id_array__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION ( control & kill_req_init__c );
     2     yanzuo     ( /= 0 ):
     2     yanzuo       /* initialize internal buffers */
     2     yanzuo       TASK memset( bytepointer( @hconns ), 0, SIZEOF( hconns ));
     2     yanzuo       TASK conn_ids.n_items := 0;
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ( control & kill_req_add__c );
     2     yanzuo     ( /= 0 ):
     2     yanzuo       /* add new item to internal buffers */
     2     yanzuo       TASK hconns.item(hconns.item_count).vci := vcc_res.vci;
     2     yanzuo       TASK hconns.item(hconns.item_count).local_conn_id := vcc_res.xconn_id;
     2     yanzuo       TASK hconns.item(hconns.item_count).xconn_info.remote_connid :=
     2     yanzuo            vcc_res.remote_xconn_id;
     2     yanzuo       TASK hconns.item(hconns.item_count).xconn_info.fabric_port :=
     2     yanzuo            vcc_res.dest_fabric_port;
     2     yanzuo       TASK conn_ids.item(hconns.item_count) := vcc_res.conn_id;
     2     yanzuo       TASK hconns.item_count := hconns.item_count + 1;
     2     yanzuo       TASK conn_ids.n_items := hconns.item_count;
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* if the buffer is full, or caller wants to send the request
     2     yanzuo   immediately, operate on the buffered data. */
     2     yanzuo   DECISION ( hconns.item_count = vc_half_conn_array_t_size_c ) OR
     2     yanzuo            (( hconns.item_count > 0 )
     2     yanzuo            AND
     2     yanzuo            (( control & kill_req_flush__c ) /= 0 ));
     2     yanzuo     ( T ):
     2     yanzuo       TASK err := success_ec;
     2     yanzuo       DECISION remove_from_hw;
     2     yanzuo         ( T ):
     2     yanzuo           TASK memset( bytepointer( @tm_params_dummy ), 0,
     2     yanzuo                SIZEOF( tm_params_dummy ));
     2     yanzuo           TASK err := hconns_operation__r (
     2     yanzuo                wo_alp1_addr,
     2     yanzuo                sp_alp1_addr,
     2     yanzuo                update_sp_alp1,
     2     yanzuo                request_mode_t_delete_c,
     2     yanzuo                target_mphy,
     2     yanzuo                target_vpi,
     2     yanzuo                hconns,
     2     yanzuo                tm_params_dummy );
     2     yanzuo       ENDDECISION;
     2     yanzuo       /* Set the removed half-connections
     2     yanzuo       * to 'not exist' state in JICFIL. */
     2     yanzuo       DECISION err;
     2     yanzuo         ( success_ec ):
     2     yanzuo           TASK addrs.item(0) := target_addr,
     2     yanzuo                addrs.n_items := 1;
     2     yanzuo           TASK xcids.n_items := 0;
     2     yanzuo           OUTPUT jig_update_half_conn_states__s( conn_ids, addrs,
     2     yanzuo                  $jig_id_array_ptr__t(@xcids),
     2     yanzuo                  F, NULL, NULL,
     2     yanzuo                  0,0,0,0 ) TO updater_pid;
     2     yanzuo       ENDDECISION;
     2     yanzuo       TASK hconns.item_count := 0;
     2     yanzuo   ENDDECISION;
     2     yanzuo ENDPROCEDURE nrt_kill__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
   223    lifsong PROCEDURE acquire_remote_vcc_res__r;
     2     yanzuo /*
   223    lifsong  * Acquires resource information for remote vcc res for a comp
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
   223    lifsong     IN                src_addr     phys_address_t,
   223    lifsong     IN VIEWED     vcc_res      jig_vccs_resources__t,
   223    lifsong     IN                serv_cat     int_serv_cat_t,
   223    lifsong     IN/OUT         remote_vcc_res  jig_remote_vccs_res__t;
     2     yanzuo 
     2     yanzuo RETURNS
   223    lifsong     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     err                  error_t,
   223    lifsong     idx, idx1           word := 0,
   223    lifsong     pah                 ptr_and_handle_t,
   223    lifsong     params_ptr       jig_vccs_params_ptr__t;
     2     yanzuo 
     2     yanzuo START;
   223    lifsong   DECISION allocate_buffer_r( SIZEOF( jig_vccs_params__t ),
   223    lifsong                                        0,
   223    lifsong                                        pah );
   223    lifsong     ( F ):
   223    lifsong       RETURN buffer_not_available_ec;
   223    lifsong   ENDDECISION;  
   223    lifsong   TASK params_ptr := jig_vccs_params_ptr__t( pah.use_ptr.ptr );   
   223    lifsong   WHILE idx < vcc_res.item_count;
   223    lifsong      DECISION ( vcc_res.res( idx ).serv_category =
   223    lifsong              int_serv_cat_t_i_nrt_mnw_c ) AND
   223    lifsong              /*( vcc_res.res( idx ).remote_vci /= 0 ) AND 
   223    lifsong               *Removed. we shall not filter these vccs out since remote half may be created when deleting own half*/
   223    lifsong              ( vcc_res.res( idx ).dest_alp_cluster /=
   223    lifsong              alp_cluster_idx__t_invalid_c );
   223    lifsong     ( T ):
   223    lifsong         TASK params_ptr->vcc(idx1).conn_id := vcc_res.res(idx).conn_id,
   223    lifsong                 params_ptr->vcc(idx1).serv_category :=  vcc_res.res(idx).serv_category,
   223    lifsong                 params_ptr->vcc(idx1).target_computer := vcc_res.res(idx).target_comp;
   223    lifsong         TASK idx1 := idx1 + 1;                
   223    lifsong     ENDDECISION;                
   223    lifsong     TASK idx := idx + 1;
   223    lifsong   ENDWHILE;
   223    lifsong   TASK params_ptr->item_count := idx1;
   223    lifsong   DECISION params_ptr->item_count > 0;
   223    lifsong   ( T ):
   223    lifsong     TASK err := get_remote_conn_resources__r( src_addr,
   223    lifsong            T, /* existing conns only */
   223    lifsong            serv_cat = int_serv_cat_t_i_rt_mnw_c,
   223    lifsong            $params_ptr,
   223    lifsong            remote_vcc_res); 
   223    lifsong   ELSE:
   223    lifsong     TASK err := success_ec;
   223    lifsong   ENDDECISION;
   223    lifsong   TASK free_buffer_r( pah.use_handle.handle );                                        
   223    lifsong   RETURN err;
   223    lifsong ENDPROCEDURE acquire_remote_vcc_res__r;
     2     yanzuo 
   559    lifsong 
   223    lifsong /*******************************************************************************************/                                                       
     2     yanzuo PROCEDURE	remove_nrt_other__r;
     2     yanzuo /*This routine make the apc&app related nrt remove functionaly together.
     2     yanzuo *******************************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN      target_addr    phys_address_t,
     2     yanzuo     IN      target_mphy    mphy_port_number_t,
     2     yanzuo     IN      target_vpi     vpi_t,
     2     yanzuo     IN      wo_alp1_addr   phys_address_t,
     2     yanzuo     IN      sp_alp1_addr   phys_address_t,
     2     yanzuo     IN      update_sp_alp1 bool,
     2     yanzuo     IN      vcc_res        jig_one_vcc_resources__t,
     2     yanzuo     IN      remove_from_hw  bool,
     2     yanzuo     IN      control        byte,
   223    lifsong     IN/OUT  err            error_t;
     2     yanzuo 
     2     yanzuo DCL
    73     jamema     is_app        bool,
    73     jamema     l_brtpid      pid,
    73     jamema     target_unit   jiifil__t,
    73     jamema     alp_unit      jiifil__t,
    73     jamema     path_info     half_cconn_phy_info_t,
  1392      tinyu     proc_idx      byte,
  1392      tinyu     ustate        unit_state_t;
   559    lifsong     
     2     yanzuo START;
   559    lifsong 	TASK err := get_xcon_unit__r(target_addr, manager_pid,is_app, target_unit, alp_unit);
     2     yanzuo 	DECISION err;
     2     yanzuo 	(/=success_ec):
     2     yanzuo 		RETURN;
     2     yanzuo 	ENDDECISION;
     2     yanzuo 	
   223    lifsong 	DECISION app_unit_check__r( alp_unit );
     2     yanzuo 	(F):
     2     yanzuo 		CALL nrt_kill__r( target_addr,
     2     yanzuo            				      target_mphy,
     2     yanzuo 				                 target_vpi,
     2     yanzuo 				                 wo_alp1_addr,
     2     yanzuo 				                 sp_alp1_addr,
     2     yanzuo 				                 update_sp_alp1,
     2     yanzuo 				                 vcc_res,
     2     yanzuo 				                 remove_from_hw,
     2     yanzuo 				                 control,
     2     yanzuo 				                 err);
     2     yanzuo             TASK control := 0; /* clear the init bit */
     2     yanzuo 	ELSE:
   223    lifsong 	    TASK err := unsuccessful_ec;
   223    lifsong     	    DECISION (alp_unit.ready_for_reporting);
   223    lifsong     	    (T):
   223    lifsong              /* Get the unit information, if the unit is not able to release the xconns(BRT not ready), then just skip it*/
   223    lifsong              TASK proc_idx := jiifil__t_n_comp_per_unit_c;
   223    lifsong              WHILE( proc_idx > 0 );        
   223    lifsong                 TASK proc_idx := byte(proc_idx - 1);
   223    lifsong                 DECISION target_addr = target_unit.procs(proc_idx).phys_addr;
   223    lifsong                 ( T ):
   223    lifsong                     TASK err := success_ec;
   223    lifsong                     OUT  get_proc_idx_loop;
   223    lifsong                 ENDDECISION;
   223    lifsong              ENDWHILE get_proc_idx_loop;
   223    lifsong              DECISION err;
   223    lifsong              ( success_ec ):
   223    lifsong                 CALL get_path_info__r( target_unit, alp_unit, proc_idx, path_info );
   223    lifsong                 CALL get_brt_pid__r(alp_unit.unit_type, alp_unit.procs(0).phys_addr,l_brtpid);
   559    lifsong                 DECISION get_pid_family_r(l_brtpid) /= 0x0 AND is_unit_in_ex_state__r(alp_unit.procs(0).phys_addr);
   223    lifsong                 ( T ):
   223    lifsong                    TASK err := brt_xconn_remove__r ( target_unit, l_brtpid, path_info, vcc_res,proc_idx);
   223    lifsong                 ENDDECISION;   
   359    lifsong                /*rulitao: to remove the ignore connections for EIPU units and NPU*/
   513      h10hu                 DECISION app_unit_check__r(target_unit);/*here also means ss7u(p) unit because it shares same jii with NPU(P)*/
   359    lifsong                 ( T ):
   559    lifsong                   CALL	get_brt_pid__r(target_unit.unit_type, alp_unit.co_alp_unit_phys_addr,l_brtpid);
   559    lifsong                   DECISION get_pid_family_r(l_brtpid) /= 0x0 AND is_unit_in_ex_state__r(alp_unit.co_alp_unit_phys_addr);
   559    lifsong                   ( T ):
   559    lifsong                      TASK err := brt_xconn_remove__r ( target_unit, l_brtpid, path_info, vcc_res,proc_idx);
   559    lifsong                   ENDDECISION;       
   359    lifsong                 ENDDECISION;
   359    lifsong                 
   223    lifsong              ENDDECISION;                
  1392      tinyu     	    
  1392      tinyu             ELSE:
  1392      tinyu                 DECISION ( unit_state_by_phys_addr__r( wo_alp1_addr,ustate ) = success_ec) 
  1392      tinyu                      AND (( ustate | unit_state_t_mainstate_bm_c ) = unit_state_t_te_c );
  1392      tinyu                 (T):
  1392      tinyu                      TASK err:= success_ec;
  1392      tinyu                  ENDDECISION;
  1392      tinyu             ENDDECISION;
     2     yanzuo 	ENDDECISION;
     2     yanzuo ENDPROCEDURE	remove_nrt_other__r;
   513      h10hu 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE remove_nrt_conns__r;
     2     yanzuo /*
     2     yanzuo  * Send connection removal messages to each ALP cluster in numerical
     2     yanzuo order
     2     yanzuo  * to remove NRT connections of a specific computer.
     2     yanzuo 
     2     yanzuo **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN VIEWED  object_unit  jiifil__t,
     2     yanzuo     IN VIEWED  object_proc  jii_comp_data__t,
     2     yanzuo     IN VIEWED  alp_unit     jiifil__t,
     2     yanzuo     IN VIEWED  vcc_res      jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     vc_idx               dword,
     2     yanzuo     ctrl                 dword,
     2     yanzuo     rm_from_hw           bool,
   223    lifsong     err                  error_t := success_ec,
   223    lifsong     remote_vcc_res_ptr jig_remote_vccs_res_ptr__t,
   223    lifsong     pah                 ptr_and_handle_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   /* The half-connections of the unit can be removed with
     2     yanzuo      list-requests addressed to WHISKYs.
     2     yanzuo      The other ends of the connections need to be removed
     2     yanzuo      with individual requests because the VPIs and
     2     yanzuo      mphy ports will be different for all of them. */
     2     yanzuo 
     2     yanzuo   TASK rm_from_hw := alp_unit.trib_startup_allowed /*AND
     2     yanzuo            (object_unit.removing_unit OR
     2     yanzuo             object_unit.is_level2_alp_unit)*/;
     2     yanzuo 
     2     yanzuo   TASK ctrl := kill_req_init__c;
     2     yanzuo   TASK vc_idx := 0;
     2     yanzuo   WHILE vc_idx < vcc_res.item_count;
     2     yanzuo     DECISION ( vcc_res.res( vc_idx ).serv_category =
     2     yanzuo              int_serv_cat_t_i_nrt_mnw_c )
     2     yanzuo              AND
     2     yanzuo              ( vcc_res.res( vc_idx ).vci /= 0 );
     2     yanzuo       ( T ):
     2     yanzuo         CALL nrt_kill__r( object_proc.phys_addr,
     2     yanzuo              object_proc.mphy_port,
     2     yanzuo              object_proc.vpi,
     2     yanzuo              alp_unit.procs(0).phys_addr,
     2     yanzuo              alp_unit.co_alp_unit_phys_addr,
     2     yanzuo              alp_unit.co_alp_unit_updated,
     2     yanzuo              vcc_res.res( vc_idx ),
     2     yanzuo              rm_from_hw,
     2     yanzuo              ctrl + kill_req_add__c,
     2     yanzuo              err );
     2     yanzuo         TASK ctrl := 0; /* clear the init bit */
     2     yanzuo         DECISION err;
     2     yanzuo           ( /= success_ec ):
     2     yanzuo             OUT local_hconn_loop;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK vc_idx := vc_idx + 1;
     2     yanzuo   ENDWHILE local_hconn_loop;
     2     yanzuo   /* flush the buffered requests for the current ALP1 cluster */
     2     yanzuo   DECISION err;
     2     yanzuo     ( success_ec ):
     2     yanzuo       CALL nrt_kill__r( object_proc.phys_addr,
     2     yanzuo            object_proc.mphy_port,
     2     yanzuo            object_proc.vpi,
     2     yanzuo            alp_unit.procs(0).phys_addr,
     2     yanzuo            alp_unit.co_alp_unit_phys_addr,
     2     yanzuo            alp_unit.co_alp_unit_updated,
     2     yanzuo            vcc_res.res( 0 ),
     2     yanzuo            rm_from_hw,
     2     yanzuo            ctrl + kill_req_flush__c,
     2     yanzuo            err );
     2     yanzuo   ENDDECISION;
     2     yanzuo   /* now remove the other end(s) of the connections
     2     yanzuo   in case the object unit is being removed from configuration */
   223    lifsong   DECISION NOT object_unit.removing_unit;
   223    lifsong   ( T ):
   223    lifsong     RETURN err;
   223    lifsong   ENDDECISION;  
   223    lifsong   DECISION allocate_buffer_r( SIZEOF( jig_remote_vccs_res__t ),
   223    lifsong                                        0,
   223    lifsong                                        pah );
   223    lifsong     ( F ):
   223    lifsong       RETURN buffer_not_available_ec;
   223    lifsong   ENDDECISION;  
   223    lifsong   TASK remote_vcc_res_ptr := jig_remote_vccs_res_ptr__t( pah.use_ptr.ptr );  
   223    lifsong   TASK memset( bytepointer( remote_vcc_res_ptr ), 0, SIZEOF( jig_remote_vccs_res__t ));
   223    lifsong   TASK err := acquire_remote_vcc_res__r(object_proc.phys_addr,
   223    lifsong                                                             vcc_res,
   223    lifsong                                                             int_serv_cat_t_i_nrt_mnw_c,
   223    lifsong                                                             $remote_vcc_res_ptr);        
   223    lifsong   DECISION err /= success_ec;
   223    lifsong   ( T ):
   223    lifsong     TASK free_buffer_r( pah.use_handle.handle );  
   223    lifsong     RETURN err;
   223    lifsong   ENDDECISION;
     2     yanzuo   TASK vc_idx := 0;
   223    lifsong   WHILE vc_idx < remote_vcc_res_ptr->item_count;
   223    lifsong     DECISION remote_vcc_res_ptr->items(vc_idx).ec = success_ec AND remote_vcc_res_ptr->items(vc_idx).res.vci /= 0;
   223    lifsong     ( T ):
   223    lifsong     	CALL remove_nrt_other__r ( remote_vcc_res_ptr->items(vc_idx).res.target_comp,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.mphy_port,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.vpi,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.alp1_unit_addr,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.co_alp1_addr,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.co_alp1_updated,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).res,
     2     yanzuo                  object_unit.removing_unit,
     2     yanzuo                  ctrl + kill_req_add__c + kill_req_flush__c,
   223    lifsong                  err);
   223    lifsong        /*No need to update_half_conn_states__r like in brt_remove_nrt_conns__r, since for apc,  is updated in nrt_kill__r*/
   223    lifsong #if (test_logs)
   223    lifsong 	     	   TASK dxsyslog_r( log_type_t_text_t_c,
   223    lifsong                                      @'remove_nrt_other__r 6'
   223    lifsong                                      ' vci %03X conn_id %08X xconn_id %03X'
   223    lifsong                                      'remote_xconn_id %04X dest_fab_port=%02X',
   223    lifsong                                      remote_vcc_res_ptr->items(vc_idx).res.vci,
   223    lifsong                                      remote_vcc_res_ptr->items(vc_idx).res.conn_id,
   223    lifsong                                      remote_vcc_res_ptr->items(vc_idx).res.xconn_id,
   223    lifsong                                      remote_vcc_res_ptr->items(vc_idx).res.remote_xconn_id,
   223    lifsong                                      remote_vcc_res_ptr->items(vc_idx).res.dest_fabric_port );
   223    lifsong #endif                 
   223    lifsong     	TASK ctrl := 0; /* clear the init bit */
   223    lifsong     	DECISION err;
   223    lifsong     	( /= success_ec ):
   223    lifsong         OUT remote_hconn_loop;
   223    lifsong     	ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo     TASK vc_idx := vc_idx + 1;
     2     yanzuo   ENDWHILE remote_hconn_loop;
   223    lifsong   
   223    lifsong   TASK free_buffer_r( pah.use_handle.handle );
     2     yanzuo   RETURN err;
     2     yanzuo ENDPROCEDURE remove_nrt_conns__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
  1197      tinyu PROCEDURE filter_vcc_res_item;
  1197      tinyu /* move the not-exit conns to the end of the list, 
  1222      tinyu *modify the vcc_res.item_count to the count of the exit conns,
  1222      tinyu *and return the not-exit vcc count.
  1222      tinyu **************************************************************************/
  1197      tinyu FPAR 
  1197      tinyu     IN/OUT vcc_res      jig_vccs_resources__t;
  1197      tinyu RETURNS
  1197      tinyu     word;
  1197      tinyu     
  1197      tinyu DCL
  1197      tinyu    i, n ,not_exit_vcc_count             word,
  1197      tinyu    temp_one_vcc_res    jig_one_vcc_resources__t; 
  1197      tinyu    
  1197      tinyu START;
  1222      tinyu     TASK not_exit_vcc_count :=0,
  1222      tinyu     	 i :=0;
  1222      tinyu 		 
  1197      tinyu     
  1197      tinyu     DECISION vcc_res.item_count /=0;
  1197      tinyu 	(T):
  1222      tinyu 	    TASK n:= word(vcc_res.item_count-1);	
  1197      tinyu 		WHILE i < vcc_res.item_count;
  1197      tinyu        	    DECISION vcc_res.res(i).vci = 0;
  1197      tinyu             ( T ):        		
  1197      tinyu            		WHILE (n > i) AND (vcc_res.res(n).vci = 0);
  1197      tinyu                 	TASK n := word(n-1);
  1197      tinyu             	ENDWHILE;
  1197      tinyu             
  1197      tinyu             	DECISION n = i;
  1197      tinyu             	(T):
  1197      tinyu             		OUT  ;
  1197      tinyu             	(F):
  1197      tinyu             		TASK temp_one_vcc_res := vcc_res.res(i);
  1197      tinyu                 	TASK vcc_res.res(i) := vcc_res.res(n);
  1197      tinyu                 	TASK vcc_res.res(n) := temp_one_vcc_res;
  1197      tinyu                 ENDDECISION;
  1197      tinyu            
  1197      tinyu              ENDDECISION;            
  1197      tinyu              
  1197      tinyu              TASK i := i+1;
  1197      tinyu         	
  1222      tinyu         ENDWHILE;
  1197      tinyu         
  1197      tinyu         DECISION i= vcc_res.item_count;
  1197      tinyu         ( T ):
  1197      tinyu         	TASK not_exit_vcc_count :=0;
  1197      tinyu         ( F ):
  1197      tinyu            	TASK not_exit_vcc_count := word(vcc_res.item_count - i);
  1197      tinyu         	TASK vcc_res.item_count := i;
  1197      tinyu         ENDDECISION;
  1197      tinyu         	        	
  1197      tinyu      ENDDECISION;
  1197      tinyu        
  1197      tinyu      RETURN not_exit_vcc_count;
  1222      tinyu ENDPROCEDURE filter_vcc_res_item;
  1197      tinyu          
  1197      tinyu /**************************************************************************/
     2     yanzuo PROCEDURE brt_remove_nrt_conns__r;
     2     yanzuo /*
     2     yanzuo  * Send connection removal messages to each APP cluster in numerical
     2     yanzuo order to remove NRT connections of a specific computer.
     2     yanzuo Because ignor xconn always create and delete successfully and can be created with one
     2     yanzuo already exist, so it does not need to release the ignor xconn again.
     2     yanzuo **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN		  object_unit  jiifil__t,
     2     yanzuo     IN		  object_proc  byte,
     2     yanzuo     IN/OUT    alp_unit     jiifil__t,
     2     yanzuo     IN/OUT    vcc_res      jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
  1197      tinyu     vc_idx, i, n ,not_exit_vcc_count             word,
   958   huantang     ctrl                 		dword := 0,
     2     yanzuo     rm_from_hw           bool,
     2     yanzuo     l_one_vcc_ptr		jig_vccs_resources_ptr__t,
   889       pshu     l_status            error_t := success_ec,
   889       pshu     dummy_ec            error_t,    
     2     yanzuo     l_brtpid             pid,
     2     yanzuo     l_path_info          half_cconn_phy_info_t,
   223    lifsong     pah                  ptr_and_handle_t,
   559    lifsong     pah1                  ptr_and_handle_t,
   559    lifsong     temp_unit,wo_alp_unit         jiifil__t,
   559    lifsong     is_app          bool,
   223    lifsong     remote_vcc_res_ptr jig_remote_vccs_res_ptr__t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo 
   223    lifsong     /* The half-connections of the unit can be removed by
   223    lifsong     	ask BRTSEB. The other ends of the connections need
   223    lifsong     	to be removed too. */
   559    lifsong     TASK wo_alp_unit := alp_unit;
  1215      tinyu     TASK not_exit_vcc_count :=0;
   559    lifsong     DECISION ss7u_unit_check__r( object_unit.procs(object_proc).unit_type);
   559    lifsong     ( T ):
   559    lifsong    	   TASK l_status := get_xcon_unit__r(object_unit.procs(0).phys_addr,manager_pid, is_app, temp_unit, wo_alp_unit);
   559    lifsong    	   DECISION l_status;
   559    lifsong    	   (/=success_ec):
   559    lifsong    		RETURN l_status;
   559    lifsong    	   ENDDECISION;    
   559    lifsong    ENDDECISION;
   559    lifsong    
   559    lifsong     TASK rm_from_hw := wo_alp_unit.trib_startup_allowed AND
    73     jamema                      (object_unit.removing_unit OR object_unit.reconfig_needed OR
   559    lifsong                       object_unit.is_level2_alp_unit OR app_unit_check__r( object_unit ) ) ;
     2     yanzuo      TASK i := 0, n := 0;
     2     yanzuo      WHILE i < vcc_res.item_count;
   223    lifsong         DECISION vcc_res.res(i).serv_category = int_serv_cat_t_i_nrt_mnw_c;
   223    lifsong         				/*AND ( vcc_res.res( i ).vci /= 0 );  CAN NOT filter out  local half does not exists vcc_res!
   223    lifsong         				    Because still  need vcc_res to find/delete remote half, just need to check while deleting*/
   223    lifsong         ( T ):
   223    lifsong             DECISION n;
   223    lifsong             ( < i ):
   223    lifsong             	TASK vcc_res.res(n) := vcc_res.res(i);
   223    lifsong             ENDDECISION;
   223    lifsong             
   223    lifsong             TASK n := n+1;
   223    lifsong         ENDDECISION;
   223    lifsong         TASK i := i+1;
     2     yanzuo      ENDWHILE;
     2     yanzuo      TASK vcc_res.item_count := n;
   559    lifsong     DECISION (vcc_res.item_count >= 0) AND rm_from_hw AND wo_alp_unit.ready_for_reporting;/*BRTSEB has reported WO-ALP is ready,
   223    lifsong     																	if no we cant not use the BRT Service*/
   223    lifsong     																/*Arthur: Its better add ignor_flag in jicfil for each
   223    lifsong     																1/2 conn*/
   223    lifsong     																/*The HW may support to delete none existance
   223    lifsong     																	ignor xconns*/
   223    lifsong     (T):
   223    lifsong     	/*For SP APP unit, here we also need the xconn created to WO-APP, so still need send request to RS3/KRE
   223    lifsong     	in WO-APP unit*/
   223    lifsong     	/*If the object unit is app unit. The xconnections are not needed to be deleted physically.
   223    lifsong     	But the ignored xconnections in co-unit should be deleted physically.*/
   359    lifsong     	/*If EIPU+NPU*/
   513      h10hu     	DECISION app_unit_check__r( object_unit );/*here also means ss7u(p) unit because it shares same jii with NPU(P)*/
   223    lifsong     	( T ):
   561    lifsong 		CALL	get_brt_pid__r(object_unit.unit_type, object_unit.co_alp_unit_phys_addr,l_brtpid);
   561    lifsong 		DECISION is_unit_in_ex_state__r(object_unit.co_alp_unit_phys_addr);
   561    lifsong 		( F ):
   561    lifsong 		  TASK set_pid_family_r(l_brtpid,0x0);
   561    lifsong 		ENDDECISION;			
   223    lifsong     	ELSE:
   513      h10hu     		/*If other tributary*/  	          
   559    lifsong     		CALL	get_brt_pid__r(wo_alp_unit.unit_type, wo_alp_unit.procs(0).phys_addr,l_brtpid);
   223    lifsong     	ENDDECISION;
   561    lifsong     	DECISION get_pid_family_r(l_brtpid) /= 0x0;
   561    lifsong     	( T ):
  1177      myang     	CALL get_path_info__r( object_unit, wo_alp_unit, object_proc, l_path_info );
  1197      tinyu     	
  1197      tinyu     	TASK not_exit_vcc_count := filter_vcc_res_item(vcc_res);
   889       pshu 
  1177      myang         TASK l_status := brt_batch_xcon_remove__r(object_unit, l_brtpid, object_proc, 
  1177      myang                                                                  vcc_res, l_path_info);
  1177      myang 
  1177      myang 
   561    lifsong        ENDDECISION;
   561    lifsong      ENDDECISION;
   889       pshu      /*
   889       pshu       * update successfully deleted connection jic file.
   889       pshu       */
   889       pshu      DECISION vcc_res.item_count > 0;
   889       pshu      ( T ):
   889       pshu     	TASK dummy_ec := update_half_conn_states__r ( object_unit.procs(object_proc).phys_addr,
   889       pshu     												  vcc_res,F );
   889       pshu      ENDDECISION;
  1197      tinyu      
  1197      tinyu      /*recover the item_count (count not-exit conns in)*/
  1197      tinyu      TASK vcc_res.item_count :=  vcc_res.item_count + not_exit_vcc_count;    
     2     yanzuo 
   889       pshu      DECISION l_status;
   889       pshu      (/= success_ec):
   889       pshu         RETURN l_status;
   889       pshu      ENDDECISION;
  1197      tinyu      
     2     yanzuo /**********************************************************************************************/
     2     yanzuo /*Start to remove the other 1/2 xconn, need to check if the unit is APP one by one*/
     2     yanzuo /**********************************************************************************************/
   223    lifsong       DECISION NOT object_unit.removing_unit;
     2     yanzuo       ( T ):
   223    lifsong         RETURN l_status;
   223    lifsong       ENDDECISION;      
   223    lifsong       DECISION allocate_buffer_r( SIZEOF( jig_remote_vccs_res__t ),
   223    lifsong                                            0,
   223    lifsong                                            pah1 );
   223    lifsong         ( F ):
   223    lifsong           RETURN buffer_not_available_ec;
   223    lifsong       ENDDECISION;  
   223    lifsong       TASK remote_vcc_res_ptr := jig_remote_vccs_res_ptr__t( pah1.use_ptr.ptr );  
   223    lifsong       TASK memset( bytepointer( remote_vcc_res_ptr ), 0, SIZEOF( jig_remote_vccs_res__t ));
   223    lifsong       TASK l_status := acquire_remote_vcc_res__r(object_unit.procs(object_proc).phys_addr,
   223    lifsong                                                                         vcc_res,
   223    lifsong                                                                         int_serv_cat_t_i_nrt_mnw_c,
   223    lifsong                                                                         $remote_vcc_res_ptr);
   223    lifsong       DECISION l_status /= success_ec;
   223    lifsong       ( T ):
   223    lifsong         TASK free_buffer_r( pah1.use_handle.handle );
   223    lifsong         RETURN l_status;
   223    lifsong       ENDDECISION;                                                        
   223    lifsong 
   223    lifsong       DECISION allocate_buffer_r( SIZEOF( jig_vccs_resources__t ) ,0, pah );
   223    lifsong       ( F ):
   223    lifsong         TASK free_buffer_r( pah1.use_handle.handle );
   223    lifsong         RETURN buffer_not_available_ec;
   223    lifsong       ENDDECISION;
   223    lifsong       TASK l_one_vcc_ptr := jig_vccs_resources_ptr__t( pah.use_ptr.ptr );	
   223    lifsong 	TASK vc_idx := 0;      
   223    lifsong 	WHILE vc_idx < remote_vcc_res_ptr->item_count;
   223    lifsong           DECISION remote_vcc_res_ptr->items(vc_idx).ec = success_ec AND remote_vcc_res_ptr->items(vc_idx).res.vci /= 0;
     2     yanzuo           ( T ):
   223    lifsong     		/*Arthur is_apc cant be used here because we dont know which kind of ALP the other side
   223    lifsong     		1/2 xconns are used, they could be APC or APP, need be check case by case*/
   223    lifsong             CALL remove_nrt_other__r ( remote_vcc_res_ptr->items( vc_idx ).res.target_comp,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.mphy_port,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.vpi,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.alp1_unit_addr,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.co_alp1_addr,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).common.co_alp1_updated,
   223    lifsong                  remote_vcc_res_ptr->items(vc_idx).res,                 
     2     yanzuo                  object_unit.removing_unit,
     2     yanzuo                  ctrl + kill_req_add__c + kill_req_flush__c,
   223    lifsong                  l_status);
   223    lifsong             DECISION ( l_status = success_ec );
   223    lifsong             ( T ):
     2     yanzuo #if (test_logs)
   223    lifsong                TASK dxsyslog_r( log_type_t_text_e_c,
   223    lifsong                                  @'brt_remove_nrt_conns__r 6'
   223    lifsong                                  ' vci %03X conn_id %08X xconn_id %03X'
   223    lifsong                                  'remote_xconn_id %04X dest_fab_port=%02X',
   223    lifsong                                  remote_vcc_res_ptr->items(vc_idx).res.vci,
   223    lifsong                                  remote_vcc_res_ptr->items(vc_idx).res.conn_id,
   223    lifsong                                  remote_vcc_res_ptr->items(vc_idx).res.xconn_id,
   223    lifsong                                  remote_vcc_res_ptr->items(vc_idx).res.remote_xconn_id,
   223    lifsong                                  remote_vcc_res_ptr->items(vc_idx).res.dest_fabric_port );
     2     yanzuo #endif
   223    lifsong             TASK	l_one_vcc_ptr->item_count := 1,
   223    lifsong             		l_one_vcc_ptr->res(0) := remote_vcc_res_ptr->items(vc_idx).res;
   223    lifsong             TASK l_status := update_half_conn_states__r ( remote_vcc_res_ptr->items( vc_idx ).res.target_comp,
   223    lifsong             				               			$l_one_vcc_ptr,
   223    lifsong             					          			F );
   223    lifsong             ENDDECISION;
     2     yanzuo 
   223    lifsong             DECISION l_status;
   223    lifsong             ( /= success_ec ):
   223    lifsong                 OUT remote_hconn_loop;
   223    lifsong             ENDDECISION;
   223    lifsong 	  ENDDECISION;
   223    lifsong     	  TASK vc_idx := vc_idx + 1;
     2     yanzuo 	ENDWHILE remote_hconn_loop;
     2     yanzuo 	TASK free_buffer_r( pah.use_handle.handle );
   223    lifsong 	TASK free_buffer_r( pah1.use_handle.handle );
     2     yanzuo   	RETURN l_status;
     2     yanzuo ENDPROCEDURE brt_remove_nrt_conns__r;
     2     yanzuo 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE tomprb_removal_notify__r;
     2     yanzuo /*
     2     yanzuo  * Send connection removal notification to AUUSEB (TOMPRB).
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
   366    lifsong     IN  phys_addr         phys_address_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     tomprb               pid,
     2     yanzuo     serv_attr            attr_group_t,
     2     yanzuo     r_list               xconn_removed_list_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   DECISION get_service__r( intconn_topology_mgr__c, tomprb, serv_attr );
     2     yanzuo     ( T ):
   366    lifsong       TASK r_list.item_list( 0 ) := phys_addr;
   366    lifsong       TASK r_list.item_count := 1;
   366    lifsong       OUTPUT int_xconns_removed_notif_s( r_list ) TO tomprb;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN;
     2     yanzuo ENDPROCEDURE tomprb_removal_notify__r;
     2     yanzuo 
   733    lifsong 
   733    lifsong PROCEDURE clear_hc_needed_flags__r;
   733    lifsong FPAR
   733    lifsong     IN/OUT  unit         jiifil__t,
   733    lifsong     IN      proc_idx     byte,
   733    lifsong     IN/OUT  update       jii_update_info__t;
   733    lifsong 
   733    lifsong START;
   733    lifsong 
   733    lifsong     TASK unit.procs(proc_idx).half_conns_needed := F;
   733    lifsong     TASK unit.procs(proc_idx).half_conns_ph2_needed := F;
   733    lifsong     TASK unit.procs(proc_idx).half_conns_dsp_needed := F;
   733    lifsong     
   733    lifsong     CALL flag__r( update, jii_field__t_hc_need_c );
   733    lifsong     CALL flag__r( update, jii_field__t_hc_ph2_need_c );
   733    lifsong     CALL flag__r( update, jii_field__t_hc_dsp_need_c );
   733    lifsong  
   733    lifsong ENDPROCEDURE clear_hc_needed_flags__r;
   733    lifsong 
   733    lifsong PROCEDURE clear_hc_created_flags__r;
   733    lifsong FPAR
   733    lifsong     IN/OUT  unit         jiifil__t,
   733    lifsong     IN      proc_idx     byte,
   733    lifsong     IN/OUT  update       jii_update_info__t;
   733    lifsong 
   733    lifsong START;
   733    lifsong 
   733    lifsong    TASK unit.procs(proc_idx).half_conns_created := F;
   733    lifsong    TASK unit.procs(proc_idx).half_conns_ph2_created := F;
   733    lifsong    TASK unit.procs(proc_idx).half_conns_dsp_created := F;
   733    lifsong        
   733    lifsong    CALL flag__r( update, jii_field__t_hc_created_c );
   733    lifsong    CALL flag__r( update, jii_field__t_hc_ph2_created_c ); 
   733    lifsong    CALL flag__r( update, jii_field__t_hc_dsp_created_c );
   733    lifsong    
   733    lifsong ENDPROCEDURE clear_hc_created_flags__r;
   733    lifsong 
   733    lifsong 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE remove_conns__r;
     2     yanzuo /*
     2     yanzuo  * This procedure releases the connections of the target unit from hw.
   159    lifsong  *Note:
   159    lifsong  *1. For needed flags,
   159    lifsong  *   In release resource, sure that the needed flags should be F, if not( E.G. if xconn ph2 needed flag is just 
   159    lifsong  *   set to T before res_release task), fix it!
   159    lifsong  *   Otherwise xconn create task may execute after VP and interface are removed.
   159    lifsong  *   We needn't  care the result of get_vcc_res or xconn release result and 
   159    lifsong  *   can simply set the needed flags in the head of  the function;
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      proc_idx     byte,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     err                  error_t,
     2     yanzuo     vcc_params           jig_vccs_params__t,
     2     yanzuo     vcc_resources        jig_vccs_resources__t;
     2     yanzuo 
     2     yanzuo START;
   159    lifsong 
   159    lifsong     /*Clear hc needed flags to avoid creating hc before vp after res released*/
   733    lifsong     TASK  clear_hc_needed_flags__r(unit, proc_idx, update);
   733    lifsong     
   733    lifsong         /* Get connections from JICFIL. */
   159    lifsong     TASK vcc_params.item_count := 0;
   159    lifsong     TASK err := get_conn_resources__r( unit.procs(proc_idx).phys_addr,
     2     yanzuo        T /* existing connections */,
     2     yanzuo        F /* also RT connections */,
     2     yanzuo        vcc_params,
     2     yanzuo        vcc_resources );
   159    lifsong     DECISION err;
     2     yanzuo     ( success_ec ):
   159    lifsong         DECISION unit.removing_unit;
     2     yanzuo         ( F ):
   159    lifsong             /*If not removing unit need to notify xconn removed_c
   159    lifsong             If yes, then TOMPRB wont send request at all, we can ignore it.*/
   366    lifsong             CALL tomprb_removal_notify__r( unit.procs(proc_idx).phys_addr );
   159    lifsong         ENDDECISION;
   159    lifsong         TASK err := remove_rt_conns__r( unit.procs(proc_idx).phys_addr,
   159    lifsong                                                         vcc_resources );
   159    lifsong         DECISION err;
     2     yanzuo         ( success_ec ):
   157    lifsong             DECISION  app_unit_check__r( alp_unit );
   157    lifsong             ( F):
   157    lifsong                 TASK err := remove_nrt_conns__r( unit,
   157    lifsong                                                                     unit.procs(proc_idx),
   157    lifsong                                                                     alp_unit,
   157    lifsong                                                                     vcc_resources);
   157    lifsong             ELSE:
   157    lifsong                 TASK err := brt_remove_nrt_conns__r(unit, proc_idx, alp_unit, vcc_resources);
   157    lifsong             ENDDECISION;
   889       pshu             
   889       pshu             DECISION err;
   889       pshu             (success_ec):
   889       pshu                TASK clear_hc_created_flags__r(unit, proc_idx, update);
   889       pshu             ENDDECISION;    
   159    lifsong         ENDDECISION;            
   159    lifsong     ENDDECISION;
   159    lifsong     RETURN err;
     2     yanzuo ENDPROCEDURE remove_conns__r;
     2     yanzuo 
   726     z7zhou 
   726     z7zhou PROCEDURE get_rel_state__r;
   726     z7zhou FPAR 
   726     z7zhou    IN/OUT unit   jiifil__t;
   726     z7zhou       
   726     z7zhou RETURNS
   726     z7zhou    atm_cre_state_t;
   726     z7zhou 
   726     z7zhou DCL
   726     z7zhou     rel_state            atm_cre_state_t;
   726     z7zhou 
   726     z7zhou START;
   726     z7zhou      DECISION (app_unit_check__r(unit));
   726     z7zhou       (T):
   726     z7zhou          TASK  rel_state := bit_or_r(atm_cre_state_t_hw_c,atm_cre_state_t_cac_c);
   726     z7zhou       ELSE:
   726     z7zhou          TASK  rel_state := atm_cre_state_t_rel_all_c;
   726     z7zhou       ENDDECISION;
   726     z7zhou 
   726     z7zhou     RETURN rel_state;
   726     z7zhou ENDPROCEDURE get_rel_state__r;
   726     z7zhou 
   726     z7zhou PROCEDURE get_igr_cell_rate__r;
   726     z7zhou FPAR 
   726     z7zhou    IN/OUT unit   jiifil__t,
   726     z7zhou    IN         in_if_idx    byte,
   726     z7zhou    IN  in_if_vp_params alp1_intf_vp_params__t;
   726     z7zhou    
   726     z7zhou RETURNS
   726     z7zhou    cell_rate_t;
   726     z7zhou 
   726     z7zhou DCL
   726     z7zhou    igr_cell_rate       cell_rate_t;
   726     z7zhou 
   726     z7zhou START;
   726     z7zhou     DECISION ((unit.is_level2_alp_unit AND in_if_idx=0) OR
   726     z7zhou                (unit.is_ip_niu AND in_if_idx=1));
   726     z7zhou    (T):
   726     z7zhou          TASK igr_cell_rate := in_if_vp_params.subport_params.sp_param.rate__cellps1;
   726     z7zhou     ELSE:
   726     z7zhou          TASK igr_cell_rate := in_if_vp_params.bandwidth;
   726     z7zhou     ENDDECISION;
   726     z7zhou 
   726     z7zhou     RETURN igr_cell_rate;
   726     z7zhou ENDPROCEDURE get_igr_cell_rate__r;
   726     z7zhou 
  1310    jinncao PROCEDURE is_other_vp_exist__r;
   889       pshu FPAR
   889       pshu     IN VIEWED unit      jiifil__t,
   889       pshu     IN        proc  byte;
   891   huantang   
   726     z7zhou 
   891   huantang RETURNS bool;
   889       pshu 
   889       pshu DCL
   891   huantang     proc_idx     byte := 0,
   891   huantang     shared_count byte := 0;
   889       pshu START;
   889       pshu 
   889       pshu    WHILE proc_idx<jiifil__t_n_comp_per_unit_c;
   889       pshu       DECISION unit.procs(proc_idx).interface_index = unit.procs(proc).interface_index
  1168    x2huang                AND proc_idx/= proc 
  1168    x2huang                AND unit.procs(proc_idx).vp_exists = T; 
   889       pshu       (T):
   891   huantang          TASK shared_count := shared_count + 1;
   889       pshu       ENDDECISION;
   889       pshu       TASK proc_idx := proc_idx + 1; 
   889       pshu    ENDWHILE;
   889       pshu 
   891   huantang    RETURN shared_count /= 0;
   889       pshu 
  1310    jinncao ENDPROCEDURE is_other_vp_exist__r;
   889       pshu 
  1230    jinncao PROCEDURE remove_app_trib_phy_vp__r;
  1168    x2huang FPAR
  1168    x2huang 	IN unit         jiifil__t,
  1168    x2huang 	IN alp_unit     jiifil__t,
  1168    x2huang 	IN proc_idx     byte,
  1168    x2huang 	IN tpi           tpi_t;
  1168    x2huang 
  1168    x2huang RETURNS
  1168    x2huang 	error_t;
  1168    x2huang DCL
  1168    x2huang 	path_info 		half_cconn_phy_info_t,
  1168    x2huang 	traf_conf_para		traf_conf_para_t,
  1168    x2huang 	brt_pid			pid,
  1168    x2huang     	update_data		update_list_t;
  1230    jinncao     			
  1168    x2huang START;
  1192    jinncao 	TASK memset( bytepointer( @update_data ), 0, SIZEOF( update_data ));
  1230    jinncao 
  1168    x2huang 	DECISION app_unit_check__r(unit);
  1168    x2huang   	(T):
  1168    x2huang       		CALL	get_brt_pid__r(unit.unit_type, unit.procs(proc_idx).phys_addr,brt_pid);
  1168    x2huang   	ELSE:
  1168    x2huang       		CALL	get_brt_pid__r(alp_unit.unit_type, alp_unit.procs(0).phys_addr,brt_pid);
  1168    x2huang   	ENDDECISION;
  1230    jinncao 
  1230    jinncao   	CALL init_traf_params__r( traf_conf_para );
  1168    x2huang 	CALL get_path_info__r( unit, alp_unit, proc_idx, path_info );
  1230    jinncao        
  1168    x2huang 	OUTPUT atm_vpltp_phy_release_req_s( tpi,
  1168    x2huang                     traf_conf_para,
  1168    x2huang                     traf_conf_para,
  1168    x2huang                     path_info,
  1168    x2huang                     update_data) TO brt_pid;
  1230    jinncao 
  1168    x2huang 	RETURN success_ec;
  1325      tinyu ENDPROCEDURE remove_app_trib_phy_vp__r;
  1168    x2huang 
  1230    jinncao PROCEDURE whisky_delete_vp__r;
  1230    jinncao FPAR
  1230    jinncao 	IN VIEWED     unit    		 jiifil__t,
  1230    jinncao 	IN                  proc_idx            byte,
  1230    jinncao 	IN VIEWED     alp_unit       	 jiifil__t;
  1230    jinncao 
  1230    jinncao RETURNS
  1230    jinncao 	error_t;
  1230    jinncao DCL
  1230    jinncao 	intf_index          	byte,
  1230    jinncao 	hms_address         	fig_msg_header_t,
  1230    jinncao 	vpctp_conf_outw     vpctp_setup_req_t,
  1230    jinncao 	vpctp_conf_inw      	vpctp_setup_req_t,
  1230    jinncao 	whisky              	pid,
  1230    jinncao 	whisky_sp              	pid,
  1230    jinncao 	ack_count           	bool := F,
  1230    jinncao 	status			error_t := success_ec;
  1230    jinncao 
  1230    jinncao 
  1230    jinncao START;
  1230    jinncao 	TASK intf_index := unit.procs(proc_idx).interface_index;
  1230    jinncao   
  1230    jinncao 	TASK hms_address.hms_address := unit.hms_address,
  1230    jinncao 	               hms_address.extended_addr := 0;
  1230    jinncao 	               
  1230    jinncao 	TASK vpctp_conf_outw.request_mode := request_mode_t_delete_c,
  1230    jinncao 	       vpctp_conf_outw.mphy_port_number := unit.interfaces(intf_index).mphy_port,
  1230    jinncao 	       vpctp_conf_outw.vpi := unit.procs(proc_idx).vpi;   
  1230    jinncao 	TASK vpctp_conf_inw.request_mode := request_mode_t_inactive_c;
  1230    jinncao 
  1230    jinncao 	TASK make_pid_r( whisky, alp_unit.procs(0).phys_addr, whisky_p, 0, 0 );
  1230    jinncao 	    
  1230    jinncao 	OUTPUT vpctp_setup_s ( hms_address, vpctp_conf_outw, vpctp_conf_inw ) TO whisky;
  1230    jinncao   	SET ( NOW + ack_waiting_time__c, ack_timer );
  1230    jinncao 	NEXTSTATE waiting_ack;
  1230    jinncao 
  1230    jinncao STATE waiting_ack
  1230    jinncao   COMMENT ' ';
  1230    jinncao 
  1230    jinncao   INPUT vpctp_setup_ack_s ( hms_address, status, vpctp_conf_outw, vpctp_conf_inw );
  1230    jinncao 	DECISION ( vpctp_conf_outw.mphy_port_number = unit.interfaces(intf_index).mphy_port );
  1230    jinncao 		( F ):
  1230    jinncao 	        	NEXTSTATE -;      
  1230    jinncao 		ENDDECISION;
  1230    jinncao 
  1230    jinncao 		decision ack_count;
  1230    jinncao 		(F):
  1230    jinncao 			RESET (ack_timer );
  1230    jinncao 		ELSE:
  1230    jinncao 			RESET (ack_timer2 );
  1230    jinncao 		ENDDECISION;
  1230    jinncao 
  1230    jinncao 		DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
  1230    jinncao 		( T ):
  1230    jinncao 			TASK make_pid_r( whisky_sp, alp_unit.co_alp_unit_phys_addr, whisky_p, 0, 0 );
  1230    jinncao 			OUTPUT vpctp_setup_s ( hms_address, vpctp_conf_outw, vpctp_conf_inw ) TO whisky_sp;
  1230    jinncao 			SET ( NOW + ack_waiting_time__c, ack_timer2 );
  1230    jinncao 			TASK ack_count := T;
  1230    jinncao 			NEXTSTATE -;
  1230    jinncao 		ELSE: 
  1230    jinncao 			RETURN status;
  1230    jinncao 		ENDDECISION;
  1230    jinncao 
  1230    jinncao 	INPUT ack_timer;
  1499       pshu 		TASK dxsyslog_r( log_type_t_text_i_c,
  1230    jinncao 			@'JIGREL: vpctp_setup_s to WO expired: 0x%04x'
  1230    jinncao 			'unit type=%XH index=%d proc_idx=%d',
  1230    jinncao 			message_waiting_timeout_ec,
  1230    jinncao 			unit.unit_type, unit.unit_index,
  1230    jinncao 			proc_idx );
  1230    jinncao 		RETURN message_waiting_timeout_ec;
  1230    jinncao 
  1230    jinncao 	INPUT ack_timer2;
  1230    jinncao 		TASK status := message_waiting_timeout_ec;
  1499       pshu 		TASK dxsyslog_r( log_type_t_text_i_c,
  1230    jinncao 			@'JIGCLU: vpctp_setup_s to SP expired: 0x%04x'
  1230    jinncao 			'unit type=%XH index=%d proc_idx=%d',
  1230    jinncao 			message_waiting_timeout_ec,
  1230    jinncao 			unit.unit_type, unit.unit_index,
  1230    jinncao 			proc_idx );
  1230    jinncao 		RETURN message_waiting_timeout_ec;
  1230    jinncao 	
  1230    jinncao ENDSTATE waiting_ack;
  1230    jinncao 
  1230    jinncao ENDPROCEDURE whisky_delete_vp__r;
  1230    jinncao 
  1230    jinncao PROCEDURE remove_apc_trib_phy_vp__r;
  1230    jinncao FPAR
  1230    jinncao 	IN unit         jiifil__t,
  1230    jinncao 	IN alp_unit     jiifil__t,
  1230    jinncao 	IN proc_idx     byte,
  1325      tinyu 	IN tpi           tpi_t;
  1230    jinncao 
  1230    jinncao RETURNS
  1230    jinncao 	error_t;
  1230    jinncao DCL
  1230    jinncao 	ec				error_t := success_ec,
  1230    jinncao 	traf_para			traf_conf_para_t,
  1230    jinncao     	rel_state            	atm_cre_state_t;
  1230    jinncao     	
  1230    jinncao START;
  1230    jinncao 	TASK rel_state := atm_cre_state_t_log_c;
  1230    jinncao 	CALL init_traf_params__r( traf_para );
  1230    jinncao 
  1230    jinncao 
  1230    jinncao 	TASK ec := whisky_delete_vp__r(unit, proc_idx, alp_unit);
  1230    jinncao 	DECISION ec;
  1230    jinncao 	(success_ec):
  1230    jinncao 		OUTPUT atm_vpltp_phy_release_ack_s( tpi, success_ec ) TO SELF;
  1230    jinncao 	ELSE:
  1230    jinncao 		RETURN ec;
  1230    jinncao 	ENDDECISION;
  1230    jinncao 
  1230    jinncao 	RETURN success_ec;
  1230    jinncao ENDPROCEDURE remove_apc_trib_phy_vp__r;
  1230    jinncao 		
  1219    jinncao PROCEDURE is_phy_vp_remove_needed__r;
  1219    jinncao FPAR
  1219    jinncao     IN/OUT  	unit         jiifil__t,
  1219    jinncao     IN      		proc_idx     byte,
  1219    jinncao     IN/OUT  	alp_unit     jiifil__t,
  1219    jinncao     IN			is_other_vp_exist bool,
  1219    jinncao     IN			is_mpqu bool;
  1219    jinncao 
  1219    jinncao RETURNS
  1219    jinncao 	bool;
  1219    jinncao 
  1219    jinncao DCL
  1219    jinncao 	is_vp_existed	bool := T,
  1219    jinncao 	is_remove_needed bool := F,
  1219    jinncao 	alp_ustate     unit_state_t;
  1219    jinncao START;
  1219    jinncao 	DECISION unit_state_by_phys_addr__r(alp_unit.procs(0).phys_addr, alp_ustate);
  1219    jinncao 	(success_ec):
  1219    jinncao 		TASK is_vp_existed := unit.procs(proc_idx).vp_exists;
  1219    jinncao 		DECISION ((unit.is_level1_alp_unit) OR (NOT(alp_ustate = unit_state_t_woex_c)) OR (NOT is_vp_existed));
  1219    jinncao 		(T):
  1219    jinncao 			TASK is_remove_needed := F;
  1219    jinncao 		ELSE:
  1219    jinncao 			DECISION (is_mpqu AND is_other_vp_exist);
  1219    jinncao 			(T):
  1219    jinncao 				TASK is_remove_needed := F;
  1219    jinncao 			ELSE:
  1219    jinncao 				TASK is_remove_needed := T;
  1219    jinncao 			ENDDECISION;
  1219    jinncao 		ENDDECISION;
  1219    jinncao 	ELSE:
  1219    jinncao 		TASK is_remove_needed := F;
  1219    jinncao 	ENDDECISION;
  1219    jinncao 
  1219    jinncao 	RETURN is_remove_needed;
  1219    jinncao ENDPROCEDURE is_phy_vp_remove_needed__r;
  1219    jinncao 
  1504      tinyu PROCEDURE remove_alp2_phy_vp__r;
  1504      tinyu FPAR 
  1504      tinyu     IN unit         jiifil__t,
  1504      tinyu     IN alp_unit     jiifil__t,
  1504      tinyu     IN proc_idx     byte,
  1504      tinyu     IN tpi          tpi_t;
  1504      tinyu 
  1504      tinyu RETURNS 
  1504      tinyu     error_t;
  1504      tinyu START;
  1504      tinyu     DECISION app_unit_check__r( alp_unit );
  1504      tinyu     (T):
  1504      tinyu         RETURN remove_app_trib_phy_vp__r(unit, alp_unit, proc_idx, tpi);
  1504      tinyu     ELSE:
  1504      tinyu         RETURN remove_apc_trib_phy_vp__r(unit, alp_unit, proc_idx, tpi);
  1504      tinyu     ENDDECISION;
  1504      tinyu ENDPROCEDURE remove_alp2_phy_vp__r;
  1504      tinyu         
  1504      tinyu 
     2     yanzuo /**************************************************************************/
   548     yanzuo PROCEDURE remove_vp__r;
     2     yanzuo /*
   548     yanzuo  * Remove VP as soon as all VCCs under it have been released.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
   548     yanzuo     IN/OUT  unit         jiifil__t,
   548     yanzuo     IN      proc_idx     byte,
   548     yanzuo     IN/OUT  alp_unit     jiifil__t,
   548     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo 
     2     yanzuo RETURNS
   548     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
   548     yanzuo     traf_para            traf_conf_para_t,
   548     yanzuo     rel_state            atm_cre_state_t,
   548     yanzuo     if_idx               dword,
   548     yanzuo     tpi                  tpi_t,
  1168    x2huang     rbr_pid           pid,
  1168    x2huang     rbr_attr         attr_group_t,
  1168    x2huang     rug_pid		pid,
  1168    x2huang     rug_attr         attr_group_t,
  1168    x2huang     server_pid		pid,
   548     yanzuo     service_attr         attr_group_t,
   548     yanzuo     alp_unit_info        unit_it_t,
  1168    x2huang     rbr_status		 bool := T,
  1168    x2huang     rug_status		bool:= T,
  1310    jinncao     if_report_status  bool:=T,
  1168    x2huang     l_ack_status         byte := NO_ANY_ACK__C,
  1168    x2huang     is_mpqu		bool,
  1168    x2huang     is_phy_release_needed	bool,
  1310    jinncao     is_other_vp_exist   bool := T,
  1168    x2huang     ec				error_t,
  1219    jinncao     timer_value		 word := ack_waiting_time__c;
  1168    x2huang    
  1168    x2huang START;
     2     yanzuo 
  1168    x2huang 	
   548     yanzuo   DECISION unit.is_ip_niu
   548     yanzuo            AND
   548     yanzuo            proc_idx = 1
   548     yanzuo            AND
   548     yanzuo            remove_ipniu_ipe_if__r(unit) = F;
   548     yanzuo     ( T ):
   548     yanzuo       RETURN success_ec;
   548     yanzuo   ENDDECISION;
   359    lifsong   
   548     yanzuo   TASK get_alp_unit_for_brt__r( alp_unit_info, alp_unit ); 
   548     yanzuo   
   548     yanzuo   TASK if_idx := unit.procs(proc_idx).interface_index;
   548     yanzuo   TASK tpi.level  := tpi_level_t_vp_c,
   548     yanzuo        tpi.interf := unit.interfaces(if_idx).intf_id,
   548     yanzuo        tpi.vpi    := unit.procs(proc_idx).vpi,
   548     yanzuo        tpi.vci    := vci_t_unspecified_c;
     2     yanzuo 
  1168    x2huang   
  1168    x2huang   TASK rbr_status := get_service__r( atm_res_broker__c,
  1168    x2huang                           rbr_pid, rbr_attr );
  1168    x2huang   TASK rug_status := get_inq_service__r( atm_log_res_handling__c, T,
  1168    x2huang                            rug_pid, rug_attr );
  1310    jinncao   TASK if_report_status := unit.interfaces(if_idx).intf_reported ;
  1230    jinncao   /*
  1168    x2huang   					OR unit.procs(proc_idx).vp_reporting_needed;
  1230    jinncao   */
  1168    x2huang   
  1310    jinncao   TASK is_other_vp_exist := is_other_vp_exist__r(unit,proc_idx); 
  1168    x2huang   TASK is_mpqu := mpqu_check__r(unit.unit_type);
  1168    x2huang 
  1310    jinncao   DECISION if_report_status AND rug_status;
   548     yanzuo   ( T ):
  1255      tinyu      /*vpltp deletion improvement: RUG's removal will always succeed, 
  1255      tinyu        so no need to output inquiry_req anymore*/ 
  1255      tinyu      OUTPUT atm_tpi_rel_inquiry_ack_s( tpi, success_ec ) TO SELF;
  1255      tinyu 
  1255      tinyu     
  1168    x2huang      TASK timer_value := ack_waiting_time__c;
   548     yanzuo   ELSE:
  1222      tinyu 	TASK is_phy_release_needed := is_phy_vp_remove_needed__r(unit, 
  1219    jinncao 														proc_idx, 
  1219    jinncao 														alp_unit, 
  1310    jinncao 														is_other_vp_exist, 
  1219    jinncao 														is_mpqu);
  1219    jinncao 
  1219    jinncao        	DECISION is_phy_release_needed;
  1168    x2huang 	(T):
  1230    jinncao 		DECISION classify__r( unit, proc_idx, alp_unit );
  1504      tinyu 		(unit_class__t_apc_trib_c):
  1325      tinyu 			TASK ec := remove_apc_trib_phy_vp__r(unit, alp_unit, proc_idx, tpi);
  1230    jinncao 			DECISION ec;
  1230    jinncao 			(success_ec):
  1230    jinncao 				TASK l_ack_status := BRTSEB_ACK__C;
  1230    jinncao 				TASK timer_value := 600;
  1230    jinncao 			ELSE:
  1230    jinncao 				RETURN ec;
  1230    jinncao 			ENDDECISION;
  1230    jinncao 		(unit_class__t_app_trib_c, unit_class__t_eipu_trib_c):
  1230    jinncao 			TASK ec := remove_app_trib_phy_vp__r(unit, alp_unit, proc_idx, tpi);
  1230    jinncao 			DECISION ec;
  1230    jinncao 			(success_ec):
  1230    jinncao 				TASK l_ack_status := BRTSEB_ACK__C;
  1230    jinncao 				TASK timer_value := ack_waiting_time__c;
  1230    jinncao 			ELSE:
  1230    jinncao 				RETURN ec;
  1230    jinncao 			ENDDECISION;
  1504      tinyu         (unit_class__t_alp2_c):
  1504      tinyu             TASK ec := remove_alp2_phy_vp__r(unit,  alp_unit,proc_idx, tpi);
  1504      tinyu             DECISION ec;
  1504      tinyu             (success_ec):
  1504      tinyu                 TASK l_ack_status := BRTSEB_ACK__C;
  1504      tinyu                 TASK timer_value := 600;
  1504      tinyu             ELSE:
  1504      tinyu                 RETURN ec;
  1504      tinyu             ENDDECISION;
  1230    jinncao 		ELSE:
  1230    jinncao 			TASK dxsyslog_r( log_type_t_text_e_c,
  1230    jinncao                         			@'JIGREL: unit neither apc trib nor app trib!'
  1338       pshu                         			 'remove_vp__r unit type index : %d  %d' ,
  1338       pshu                         			 unit.unit_type,unit.unit_index );
  1230    jinncao 			RETURN unsuccessful_ec;
  1230    jinncao 		ENDDECISION;
  1168    x2huang 	ELSE:
  1219    jinncao 		TASK  unit.procs(proc_idx).vp_reported := F,
  1219    jinncao                			  unit.procs(proc_idx).vp_reporting_needed := F;
  1219    jinncao 		CALL  flag__r( update, jii_field__t_vp_rep_need_c );
  1219    jinncao 		CALL  flag__r( update, jii_field__t_vp_reported_c );
  1219    jinncao 		OUTPUT atm_vpltp_release_ack_s( tpi, success_ec ) TO SELF;
  1219    jinncao 		TASK server_pid := NULL;
  1219    jinncao 		TASK timer_value := ack_waiting_time__c;
  1168    x2huang 	ENDDECISION;
   548     yanzuo   ENDDECISION;
     2     yanzuo 
  1168    x2huang   SET ( NOW + timer_value, ack_timer );
   548     yanzuo   NEXTSTATE waiting_vp_removal_acks;
     2     yanzuo 
     2     yanzuo STATE waiting_vp_removal_acks;
     2     yanzuo 
   548     yanzuo   INPUT atm_tpi_rel_inquiry_ack_s( tp_identifier, status );
   548     yanzuo     DCL
   548     yanzuo        status              error_t,
   891   huantang        tp_identifier       tpi_t;
     2     yanzuo 
   548     yanzuo     DECISION tpi.level  /= tp_identifier.level OR
   548     yanzuo              tpi.interf /= tp_identifier.interf OR
   548     yanzuo              tpi.vpi    /= tp_identifier.vpi;
     2     yanzuo       ( T ):
   548     yanzuo         NEXTSTATE -;
   548     yanzuo     ENDDECISION;
   548     yanzuo     RESET ( ack_timer );
   548     yanzuo     TASK l_ack_status := RUGGER_ACK__C;
   889       pshu 
  1310    jinncao     DECISION  is_mpqu AND is_other_vp_exist;
   889       pshu     (T):
  1255      tinyu         TASK  unit.procs(proc_idx).vp_reporting_needed := F;
   889       pshu          TASK  unit.procs(proc_idx).vp_reported         := F;
   548     yanzuo          CALL  flag__r( update, jii_field__t_vp_rep_need_c );
   548     yanzuo          CALL  flag__r( update, jii_field__t_vp_reported_c );
  1255      tinyu 
  1255      tinyu         OUTPUT atm_vpltp_release_ack_s( tpi, success_ec )
  1255      tinyu               TO SELF;
  1255      tinyu         SET ( NOW + ack_waiting_time__c, ack_timer );
  1255      tinyu         NEXTSTATE -;
   548     yanzuo     ENDDECISION;
     2     yanzuo 
  1168    x2huang     DECISION rbr_status;
   773   huantang     ( F ):
  1168    x2huang     	RETURN service_not_found_ec;
   773   huantang     ENDDECISION;
   710     z7zhou 
     2     yanzuo 
  1255      tinyu     TASK rel_state := get_rel_state__r(unit);
   773   huantang      
   773   huantang      CALL init_traf_params__r( traf_para );
   773   huantang      OUTPUT atm_vpltp_release_req_s( tpi, alp_unit_info,
   773   huantang                                 b_level_t_vc_c,
   773   huantang                                 traf_para,
   773   huantang                                 traf_para,
  1168    x2huang                                 rel_state) TO rbr_pid,
  1168    x2huang        SET ATTRIBUTES = rbr_attr;
   773   huantang 
   897       pshu     SET ( NOW + 600, ack_timer ); 
   897       pshu     /* origal timer is 5s,rs3 timer is 5s,adjust the timer to 6s */
   548     yanzuo     NEXTSTATE -;
   548     yanzuo 
  1168    x2huang   INPUT atm_vpltp_phy_release_ack_s( tp_identifier, status ),
  1168    x2huang   	     atm_vpltp_release_ack_s( tp_identifier, status );
   548     yanzuo     DCL
   548     yanzuo        tp_identifier     tpi_t,
   548     yanzuo        status            error_t,
   548     yanzuo        sch_path          scheduler_path_t;
   548     yanzuo 
   548     yanzuo     DECISION tpi.interf /= tp_identifier.interf OR
   548     yanzuo              tpi.vpi    /= tp_identifier.vpi;
     2     yanzuo       ( T ):
   548     yanzuo         NEXTSTATE -;
   548     yanzuo     ENDDECISION;
   548     yanzuo     RESET ( ack_timer );
   548     yanzuo     TASK l_ack_status := RBROKE_ACK__C;
   548     yanzuo     DECISION status;
   548     yanzuo     ( success_ec ):
   548     yanzuo 
   548     yanzuo     ( incorrect_unit_state_ec,
   548     yanzuo       if_id_does_not_exist_ec,
   548     yanzuo       vp_id_does_not_exist_ec,
   548     yanzuo       vcltp_exists_ec ):
   548     yanzuo         TASK status := success_ec
   548     yanzuo           COMMENT 'This can be done because the vp does not exist anymore'
   548     yanzuo                   'even though the error code is not success_ec';
   548     yanzuo /*Arthur: need add	TASK	unit.vp_exists here*/
   548     yanzuo     ELSE:
   548     yanzuo        TASK dxsyslog_r( log_type_t_text_e_c,
   548     yanzuo              @'JIGREL: VP release failed! Status = %04XH;'
   548     yanzuo              ' object unit type, index = %04XH %04XH'
   548     yanzuo              '   ALP1 unit type, index = %04XH %04XH'
   548     yanzuo              ' Interface#%d = %04XH  VPI = %04X'
   548     yanzuo              ' Server comp = %04X  family_id = %04X',
   548     yanzuo              status,
   548     yanzuo              unit.unit_type, unit.unit_index,
   548     yanzuo              alp_unit.unit_type, alp_unit.unit_index,
   548     yanzuo              unit.procs(proc_idx).interface_index + 1,
   548     yanzuo              tpi.interf, tpi.vpi,
  1168    x2huang              get_pid_computer_r( rbr_pid ),
  1168    x2huang              get_pid_family_r( rbr_pid ));
   548     yanzuo        RETURN status;
   548     yanzuo     ENDDECISION;
   548     yanzuo 
  1180   huantang     DECISION  /* We do not create the mapping for IPE-interface,
   548     yanzuo                  so we should not try to delete it, either.. */
   548     yanzuo               (if_idx = 0 OR unit.is_ip_niu = F)
   548     yanzuo              AND
   548     yanzuo              get_service__r( central_cac__c, server_pid, service_attr );
   548     yanzuo     ( T ):
   548     yanzuo        DECISION unit.unit_type = unit_type_t_nip1_c AND proc_idx = 1;
   548     yanzuo     	  ( T ):
   548     yanzuo        		OUTPUT central_cac_rem_mapping_s(
   548     yanzuo                 			unit.interfaces(if_idx).mphy_port,
   548     yanzuo                 			unit.procs(proc_idx).vpi,
   548     yanzuo                 			unit.unit_type,
   548     yanzuo                 			unit.unit_index,
   548     yanzuo                 			service_category_t_nrt_vbr_c )
   548     yanzuo               			TO server_pid, SET ATTRIBUTES = service_attr;
   548     yanzuo        ELSE:
   548     yanzuo           DECISION app_unit_check__r( alp_unit );
   548     yanzuo           ( T ):
   548     yanzuo              TASK memset( bytepointer( @sch_path ), 0, SIZEOF( sch_path ));
   548     yanzuo              OUTPUT central_cac_rem_mapping_ack_s( sch_path, success_ec )
   538     yanzuo                       TO SELF;
   548     yanzuo           ELSE:
   548     yanzuo              OUTPUT central_cac_rem_mapping_s(
   548     yanzuo                 			unit.interfaces(if_idx).mphy_port,
   548     yanzuo                 			unit.procs(proc_idx).vpi,
   548     yanzuo                 			alp_unit.unit_type,
   548     yanzuo                 			alp_unit.unit_index,
   548     yanzuo                 			service_category_t_nrt_vbr_c )
   548     yanzuo               			TO server_pid, SET ATTRIBUTES = service_attr;
   548     yanzuo           ENDDECISION;
   548     yanzuo        ENDDECISION;
   548     yanzuo     ELSE:
   548     yanzuo        TASK memset( bytepointer( @sch_path ), 0, SIZEOF( sch_path ));
   548     yanzuo        OUTPUT central_cac_rem_mapping_ack_s( sch_path, success_ec )
   548     yanzuo               TO SELF;
   548     yanzuo     ENDDECISION;
   548     yanzuo     SET( NOW + ack_waiting_time__c, ack_timer );
   548     yanzuo     NEXTSTATE -;
     2     yanzuo 
   548     yanzuo   INPUT central_cac_rem_mapping_ack_s( sch_path, status );
   548     yanzuo     DCL
   548     yanzuo        sch_path          scheduler_path_t,
   548     yanzuo        status            error_t;
     2     yanzuo 
   548     yanzuo     RESET( ack_timer );
     2     yanzuo 
   548     yanzuo     DECISION status;
   548     yanzuo     ( success_ec ,
   548     yanzuo       search_key_not_found_ec ):
   548     yanzuo        TASK unit.procs(proc_idx).vp_reported := F,
   548     yanzuo             unit.procs(proc_idx).vp_reporting_needed := F;
   548     yanzuo        CALL flag__r( update, jii_field__t_vp_rep_need_c );
   548     yanzuo        CALL flag__r( update, jii_field__t_vp_reported_c );
  1303      tinyu        TASK status := success_ec;
   548     yanzuo     ELSE:
   548     yanzuo        TASK dxsyslog_r(
     2     yanzuo               log_type_t_text_e_c,
     2     yanzuo               @'JIGREL: cac_rem_mapping failed! Status = %04XH;'
     2     yanzuo                ' object unit type, index = %04XH %04XH'
     2     yanzuo                '   ALP1 unit type, index = %04XH %04XH'
     2     yanzuo                ' Interface#%d = %04XH  VPI = %04X'
     2     yanzuo                ' Server comp = %04X  family_id = %04X',
     2     yanzuo               status,
     2     yanzuo               unit.unit_type, unit.unit_index,
     2     yanzuo               alp_unit.unit_type, alp_unit.unit_index,
     2     yanzuo               unit.procs(proc_idx).interface_index + 1,
     2     yanzuo               tpi.interf, tpi.vpi,
     2     yanzuo               get_pid_computer_r( server_pid ),
     2     yanzuo               get_pid_family_r( server_pid ));
   548     yanzuo     ENDDECISION;
   548     yanzuo     RETURN status;
     2     yanzuo 
   548     yanzuo   INPUT ack_timer;
   548     yanzuo      DECISION l_ack_status;
   548     yanzuo      (NO_ANY_ACK__C):
   548     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
   548     yanzuo                          @'JIGREL: waiting atm_tpi_rel_inquiry_ack_s'
   548     yanzuo                           '        time out!'
   548     yanzuo                           'object unit type, index = %04XH %04XH'
   548     yanzuo                           '  ALP1 unit type, index = %04XH %04XH'
   548     yanzuo                           'tpi: 0X%X, 0X%X, 0X%X, 0X%X',
   548     yanzuo                           unit.unit_type, unit.unit_index,
   548     yanzuo                           alp_unit.unit_type, alp_unit.unit_index,
   548     yanzuo                           tpi.interf, tpi.level, tpi.vpi, tpi.vci);
  1219    jinncao                           
  1219    jinncao      (BRTSEB_ACK__C):
  1219    jinncao         TASK dxsyslog_r( log_type_t_text_e_c,
  1219    jinncao                          @'JIGREL: waiting atm_vpltp_phy_release_req_s'
  1219    jinncao                           '        time out!'
  1219    jinncao                           'object unit type, index = %04XH %04XH'
  1219    jinncao                           '  ALP1 unit type, index = %04XH %04XH'
  1219    jinncao                           'tpi: 0X%X, 0X%X, 0X%X, 0X%X',
  1219    jinncao                           unit.unit_type, unit.unit_index,
  1219    jinncao                           alp_unit.unit_type, alp_unit.unit_index,
  1219    jinncao                           tpi.interf, tpi.level, tpi.vpi, tpi.vci);
     2     yanzuo 
   548     yanzuo      (RUGGER_ACK__C):
   548     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
   548     yanzuo                          @'JIGREL: waiting atm_vpltp_release_ack_s '
   548     yanzuo                           '        time out!'
   548     yanzuo                           'object unit type, index = %04XH %04XH'
   548     yanzuo                           '  ALP1 unit type, index = %04XH %04XH'
   548     yanzuo                           'tpi: 0X%X, 0X%X, 0X%X, 0X%X',
   548     yanzuo                           unit.unit_type, unit.unit_index,
   548     yanzuo                           alp_unit.unit_type, alp_unit.unit_index,
   548     yanzuo                           tpi.interf, tpi.level, tpi.vpi, tpi.vci);
     2     yanzuo 
   548     yanzuo      (RBROKE_ACK__C):
   548     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
   548     yanzuo                          @'JIGREL: waiting central_cac_rem_mapping_s '
   548     yanzuo                           '        time out!'
   548     yanzuo                           'object unit type, index = %04XH %04XH'
   548     yanzuo                           '  ALP1 unit type, index = %04XH %04XH'
   548     yanzuo                           'tpi: 0X%X, 0X%X, 0X%X, 0X%X',
   548     yanzuo                           unit.unit_type, unit.unit_index,
   548     yanzuo                           alp_unit.unit_type, alp_unit.unit_index,
   548     yanzuo                           tpi.interf, tpi.level, tpi.vpi, tpi.vci);
   548     yanzuo      ENDDECISION;
     2     yanzuo 
   548     yanzuo     RETURN message_waiting_timeout_ec;
     2     yanzuo 
     2     yanzuo ENDSTATE waiting_vp_removal_acks;
     2     yanzuo ENDPROCEDURE remove_vp__r;
     2     yanzuo 
   846       pshu PROCEDURE notify_if_remove__r;
   773   huantang FPAR
   846       pshu    IN if_id                atm_interface_id_t,
   846       pshu    IN mxu_info             unit_it_t,
   846       pshu    IN family               family_t;
   773   huantang    
   773   huantang DCL
   846       pshu    dest_pid                pid,
   846       pshu    dummy_igr_cell_rate     cell_rate_t,
   773   huantang    dummy_params            alp1_intf_vp_params__t,
   846       pshu    dummy_rel_state         atm_cre_state_t,
   846       pshu    prbname                 bytepointer;
   773   huantang    
   773   huantang START;
   846       pshu    TASK make_pid_r( dest_pid, 0x7000, family, 0, 0 );
   773   huantang    OUTPUT atm_interf_release_req_s( if_id,
   773   huantang                           mxu_info,
   773   huantang                           dummy_igr_cell_rate,
   773   huantang                           dummy_params.subport_params.sp_param.rate__cellps1,
   773   huantang                           dummy_rel_state )
   846       pshu                           TO dest_pid;
   846       pshu     DECISION STATUS;
   846       pshu     (/= success_ec):
   846       pshu         DECISION family;
   846       pshu         (mnmpro_p):
   846       pshu             TASK prbname := bytepointer(@'MNMPRO');
   846       pshu         (mneipo_p):
   846       pshu             TASK prbname := bytepointer(@'MNEIPO');
   846       pshu         ELSE:
   846       pshu             TASK prbname := bytepointer(@'Unknown');
   846       pshu         ENDDECISION;
   846       pshu         
   846       pshu         TASK dxsyslog_r( log_type_t_text_i_c,
   846       pshu                          @'JIGREL: send interface release message to %s fail'
   846       pshu                          'if: 0X%x, ec : 0X%x',prbname,if_id, STATUS);
   846       pshu     ENDDECISION;
   773   huantang    
   846       pshu ENDPROCEDURE notify_if_remove__r;
     2     yanzuo 
  1437       pshu PROCEDURE notify_uha_if_remove__r;
  1437       pshu 
  1437       pshu FPAR
  1437       pshu    IN if_id                atm_interface_id_t,
  1437       pshu    IN unit                 unit_it_t;
  1437       pshu DCL
  1437       pshu    dest_pid                pid,
  1437       pshu    dummy_igr_cell_rate     cell_rate_t,
  1437       pshu    dummy_params            alp1_intf_vp_params__t,
  1437       pshu    dummy_rel_state         atm_cre_state_t;
  1437       pshu    
  1437       pshu START;
  1437       pshu 
  1437       pshu    DECISION(unit.ttype);
  1437       pshu    (unit_type_t_gtpu_c ,unit_type_t_dmpg_c ,unit_type_t_ipfe_c ,
  1437       pshu     unit_type_t_ipfep_c,unit_type_t_ipgo_c ,unit_type_t_ipgop_c,
  1437       pshu     unit_type_t_ips1_c ,unit_type_t_ips1p_c,unit_type_t_ipge_c,
  1437       pshu     unit_type_t_ipgep_c,unit_type_t_tpg_c):
  1437       pshu       /* continue for notify*/
  1437       pshu    ELSE:
  1437       pshu       RETURN;
  1437       pshu    ENDDECISION;
  1437       pshu    DECISION is_ne_rnc__r();
  1437       pshu    (T):
  1437       pshu       TASK make_pid_r( dest_pid, log_address_t_rsmu_c,uhaprb_p, 0, 0 );
  1437       pshu    ELSE:
  1437       pshu       TASK make_pid_r( dest_pid, log_address_t_cacu_c,uhaprb_p, 0, 0 );
  1437       pshu    ENDDECISION;
  1437       pshu    
  1437       pshu    OUTPUT atm_interf_release_req_s( if_id,
  1437       pshu                           unit,
  1437       pshu                           dummy_igr_cell_rate,
  1437       pshu                           dummy_params.subport_params.sp_param.rate__cellps1,
  1437       pshu                           dummy_rel_state )
  1437       pshu                           TO dest_pid ,SET DELIVERY_RANGE = 3;
  1437       pshu 
  1437       pshu     DECISION STATUS;
  1437       pshu     (/= success_ec):
  1437       pshu         TASK dxsyslog_r( log_type_t_text_i_c,
  1437       pshu                          @'JIGREL: send interface release message to UHA fail'
  1437       pshu                          'if: 0X%x, ec : 0X%x',if_id, STATUS);
  1437       pshu     ENDDECISION;
  1437       pshu ENDPROCEDURE notify_uha_if_remove__r;
  1437       pshu 
  1230    jinncao PROCEDURE whisky_delete_interf__r;
  1168    x2huang FPAR
  1230    jinncao 	IN VIEWED     unit    		 jiifil__t,
  1230    jinncao 	IN                  proc_idx            byte,
  1230    jinncao 	IN VIEWED     alp_unit       	 jiifil__t;
  1230    jinncao 
  1230    jinncao RETURNS
  1230    jinncao 	error_t;
  1230    jinncao DCL
  1230    jinncao 	intf_index          	byte,
  1230    jinncao 	whisky              	pid,
  1230    jinncao 	whisky_sp              	pid,
  1230    jinncao 	ack_count           	bool := F,
  1230    jinncao 	status			error_t := success_ec,
  1230    jinncao 	req_param              interface_setup_req_t;
  1230    jinncao 
  1230    jinncao 
  1230    jinncao START;
  1230    jinncao 	TASK intf_index := unit.procs(proc_idx).interface_index;
  1230    jinncao 	TASK req_param.request_mode := request_mode_t_delete_c,
  1230    jinncao 		req_param.mphy_port_number := unit.interfaces(intf_index).mphy_port;
  1230    jinncao 	TASK make_pid_r( whisky, alp_unit.procs(0).phys_addr, whisky_p, 0, 0 );
  1230    jinncao   
  1230    jinncao 	OUTPUT interface_setup_s (req_param) TO whisky;
  1230    jinncao 
  1230    jinncao   	SET ( NOW + ack_waiting_time__c, ack_timer );
  1230    jinncao 	NEXTSTATE waiting_ack;
  1230    jinncao 
  1230    jinncao STATE waiting_ack
  1230    jinncao   COMMENT ' ';
  1230    jinncao 
  1230    jinncao   INPUT interface_setup_ack_s ( status, req_param );
  1230    jinncao 	DECISION ( req_param.mphy_port_number = unit.interfaces(intf_index).mphy_port );
  1230    jinncao 	( F ):
  1230    jinncao 		NEXTSTATE -;    
  1230    jinncao 	ENDDECISION;
  1230    jinncao 
  1230    jinncao 	DECISION ack_count;
  1230    jinncao 	(F):
  1230    jinncao 		RESET(ack_timer);
  1230    jinncao 	ELSE:
  1230    jinncao 		RESET(ack_timer2);
  1230    jinncao 	ENDDECISION;
  1230    jinncao 		
  1230    jinncao 	DECISION ( ( alp_unit.co_alp_unit_updated = T ) AND ( ack_count = F ) );
  1230    jinncao 	( T ):
  1230    jinncao 		TASK make_pid_r( whisky_sp, alp_unit.co_alp_unit_phys_addr, whisky_p, 0, 0 );
  1230    jinncao 		OUTPUT interface_setup_s ( req_param ) TO whisky_sp;
  1230    jinncao 
  1230    jinncao 		SET ( NOW + ack_waiting_time__c, ack_timer2 );
  1230    jinncao 		TASK ack_count := T;
  1230    jinncao 		NEXTSTATE -;
  1230    jinncao 	ELSE: 
  1230    jinncao 		RETURN status;
  1230    jinncao 	ENDDECISION;
  1230    jinncao 	
  1230    jinncao 	INPUT ack_timer;
  1504      tinyu 		TASK dxsyslog_r( log_type_t_text_i_c,
  1230    jinncao 			@'JIGREL: interface_setup_s to WO expired: 0x%04x'
  1230    jinncao 			'unit type= 0x%x index=%d proc_idx=%d',
  1230    jinncao 			message_waiting_timeout_ec,
  1230    jinncao 			unit.unit_type, unit.unit_index,
  1230    jinncao 			proc_idx );
  1230    jinncao 		RETURN message_waiting_timeout_ec;
  1230    jinncao 
  1230    jinncao 	INPUT ack_timer2;
  1230    jinncao 		TASK status := message_waiting_timeout_ec;
  1504      tinyu 		TASK dxsyslog_r( log_type_t_text_i_c,
  1230    jinncao 			@'JIGCLU: interface_setup_s to SP expired: 0x%04x'
  1230    jinncao 			'unit type=0x%x index=%d proc_idx=%d',
  1230    jinncao 			message_waiting_timeout_ec,
  1230    jinncao 			unit.unit_type, unit.unit_index,
  1230    jinncao 			proc_idx );
  1230    jinncao 		RETURN message_waiting_timeout_ec;
  1230    jinncao ENDSTATE waiting_ack;
  1230    jinncao 
  1230    jinncao ENDPROCEDURE whisky_delete_interf__r;
  1230    jinncao 
  1230    jinncao PROCEDURE remove_apc_trib_phy_interf__r;
  1230    jinncao FPAR
  1230    jinncao 	IN unit		jiifil__t,
  1230    jinncao 	IN alp_unit     	jiifil__t,
  1230    jinncao 	IN proc_idx	byte,
  1325      tinyu 	IN tpi                  tpi_t;
  1230    jinncao 
  1230    jinncao RETURNS
  1230    jinncao 	error_t;
  1230    jinncao DCL
  1429       pshu     ec 				error_t := success_ec;
  1230    jinncao 
  1230    jinncao START;
  1230    jinncao 	TASK ec := whisky_delete_interf__r(unit, proc_idx, alp_unit);
  1230    jinncao 	DECISION ec;
  1230    jinncao 	(success_ec):
  1230    jinncao 		OUTPUT atm_interf_phy_release_ack_s( tpi.interf, success_ec ) TO SELF;
  1230    jinncao 	ELSE:
  1230    jinncao 		RETURN ec;
  1230    jinncao 	ENDDECISION;
  1230    jinncao 	
  1230    jinncao 	RETURN success_ec;
  1230    jinncao ENDPROCEDURE remove_apc_trib_phy_interf__r;
  1230    jinncao 
  1230    jinncao PROCEDURE remove_app_trib_phy_interf__r;
  1230    jinncao FPAR
  1168    x2huang 	IN unit         jiifil__t,
  1168    x2huang 	IN alp_unit     jiifil__t,
  1168    x2huang 	IN intf_idx     byte,
  1168    x2huang 	IN proc_idx     byte;
  1168    x2huang 
  1168    x2huang RETURNS
  1168    x2huang 	error_t;
  1168    x2huang DCL
  1168    x2huang 	path_info 		half_cconn_phy_info_t,
  1168    x2huang 	brt_pid			pid,
  1222      tinyu     	update_data		update_list_t;
  1168    x2huang START;
  1202    jinncao 	TASK memset( bytepointer( @update_data ), 0, SIZEOF( update_data ));
  1168    x2huang 	DECISION app_unit_check__r(unit);
  1168    x2huang   	(T):
  1168    x2huang       		CALL	get_brt_pid__r(unit.unit_type, unit.procs(proc_idx).phys_addr,brt_pid);
  1168    x2huang   	ELSE:
  1168    x2huang       		CALL	get_brt_pid__r(alp_unit.unit_type, alp_unit.procs(0).phys_addr,brt_pid);
  1168    x2huang   	ENDDECISION;
  1168    x2huang 
  1168    x2huang 	CALL get_path_info__r( unit, alp_unit, proc_idx, path_info );
  1168    x2huang 	OUTPUT atm_interf_phy_release_req_s(unit.interfaces(intf_idx).intf_id,
  1168    x2huang 										0,
  1168    x2huang 										0,
  1168    x2huang 										path_info,
  1168    x2huang 										update_data)TO brt_pid;
  1168    x2huang 	RETURN success_ec;
  1230    jinncao ENDPROCEDURE remove_app_trib_phy_interf__r;
  1168    x2huang 
  1504      tinyu PROCEDURE remove_alp2_trib_phy_interf__r;
  1504      tinyu FPAR 
  1504      tinyu     IN unit         jiifil__t,
  1504      tinyu     IN alp_unit     jiifil__t,
  1504      tinyu     IN intf_idx     byte,
  1504      tinyu     IN proc_idx     byte,
  1504      tinyu     IN tpi          tpi_t;
  1504      tinyu 
  1504      tinyu RETURNS 
  1504      tinyu      error_t;
  1504      tinyu START;
  1504      tinyu     DECISION app_unit_check__r( alp_unit );
  1504      tinyu     (T):
  1504      tinyu         RETURN remove_app_trib_phy_interf__r(unit, alp_unit, intf_idx, proc_idx);
  1504      tinyu     ELSE:
  1504      tinyu         RETURN remove_apc_trib_phy_interf__r(unit, alp_unit, proc_idx, tpi);
  1504      tinyu     ENDDECISION;
  1504      tinyu 
  1504      tinyu ENDPROCEDURE remove_alp2_trib_phy_interf__r;
  1504      tinyu 
     2     yanzuo /**************************************************************************/
  1331      tinyu PROCEDURE notify_pig_intf_remove__r;
  1331      tinyu /*
  1331      tinyu *This procedure notifies PIGPRB when the last interface has been removed
  1331      tinyu *
  1331      tinyu ***************************************************************************/
  1331      tinyu FPAR 
  1331      tinyu     IN/OUT  unit          jiifil__t,
  1331      tinyu     IN      alp_unit      jiifil__t;
  1331      tinyu RETURNS 
  1331      tinyu     error_t;
  1331      tinyu 
  1331      tinyu DCL
  1331      tinyu     ec                   error_t := unsuccessful_ec,
  1331      tinyu     i                    byte,
  1331      tinyu     server_pid           pid,
  1331      tinyu     service_attr         attr_group_t,
  1331      tinyu     mphy_type            mphy_type_t,
  1331      tinyu     interface_list       if_list_t,
  1331      tinyu     child_list           child_fu_list_t,
  1331      tinyu     parent_fu_type       unit_it_t,
  1331      tinyu     mxu_info_pig         unit_it_t,
  1335       pshu     port_stage           port_stage_t,
  1335       pshu     has_valid_if         bool;  
  1331      tinyu     
  1331      tinyu START;
  1331      tinyu 
  1331      tinyu     TASK set_port_stage__r(unit, 0, port_stage); 
  1331      tinyu     DECISION get_service__r( atm_inter_notif__c, server_pid, service_attr );
  1331      tinyu     ( F ):
  1331      tinyu          TASK dxsyslog_r( log_type_t_text_e_c,
  1331      tinyu               @'JIGREL: atm_inter_notif__c service not available!!');
  1331      tinyu          RETURN unsuccessful_ec;
  1331      tinyu      ENDDECISION;
  1331      tinyu      DECISION port_stage;
  1331      tinyu           (port_stage_t_s1_s2_c):
  1331      tinyu             TASK mphy_type := mphy_type_t_mxu_c;
  1331      tinyu           (port_stage_t_s2_s1_c):
  1331      tinyu             TASK mphy_type := mphy_type_t_towards_mxu_c;
  1331      tinyu           (port_stage_t_s2_s3_c):
  1331      tinyu             TASK mphy_type := mphy_type_t_towards_pq2_c;
  1331      tinyu           (port_stage_t_ipe_c):
  1331      tinyu             TASK mphy_type := mphy_type_t_ipe_c;
  1331      tinyu       ENDDECISION;
  1331      tinyu 
  1331      tinyu       TASK memset( bytepointer(@interface_list), 0, SIZEOF( interface_list ));
  1331      tinyu       TASK memset( bytepointer(@child_list), 0, SIZEOF( child_list ));
  1331      tinyu       TASK parent_fu_type.ttype := unit.unit_type,
  1331      tinyu            parent_fu_type.index := unit.unit_index;
  1331      tinyu 
  1335       pshu       TASK has_valid_if := F;
  1331      tinyu       TASK i := 0;
  1331      tinyu       WHILE i < if_list_t_size_c;
  1335       pshu          DECISION (unit.interfaces(i).intf_id/=atm_interface_id_t_unspecif_c) 
  1335       pshu                 AND (unit.interfaces(i).intf_id /= 0);
  1335       pshu          (T):
  1335       pshu             TASK has_valid_if := T;
  1335       pshu             OUT;
  1335       pshu          ENDDECISION;
  1335       pshu          TASK i:=i+1;
  1335       pshu       ENDWHILE;
  1335       pshu 
  1335       pshu       DECISION has_valid_if;
  1335       pshu       (F):
  1335       pshu          RETURN success_ec;
  1335       pshu       ENDDECISION;
  1335       pshu 
  1335       pshu       TASK i := 0;
  1335       pshu       WHILE i < if_list_t_size_c;
  1331      tinyu           TASK interface_list.interfaces(i)             := unit.interfaces(i).intf_id,
  1331      tinyu                interface_list.mphys(i).mphy_port_number := unit.interfaces(i).mphy_port,
  1331      tinyu                interface_list.mphys(i).mphy_type        := mphy_type;
  1331      tinyu           TASK i := i + 1;
  1335       pshu       ENDWHILE;
  1331      tinyu 
  1331      tinyu       DECISION unit.unit_type = unit.procs(0).unit_type;
  1331      tinyu           ( T ):
  1331      tinyu             TASK child_list.units(0).ttype := unit.unit_type,
  1331      tinyu                  child_list.units(0).index := unit.unit_index,
  1331      tinyu                  child_list.indices(0)     := unit.procs(0).interface_index;
  1331      tinyu           ELSE:
  1331      tinyu              TASK i := 0;
  1331      tinyu              WHILE i < child_fu_list_t_size_c;
  1331      tinyu                TASK child_list.units(i).ttype    := unit.procs(i).unit_type,
  1331      tinyu                     child_list.units(i).index    := unit.procs(i).unit_index,
  1331      tinyu                     child_list.indices(i)        := unit.procs(i).interface_index;
  1331      tinyu                TASK i := i + 1;
  1331      tinyu              ENDWHILE;
  1331      tinyu         ENDDECISION;
  1331      tinyu 
  1331      tinyu       TASK mxu_info_pig.ttype := alp_unit.unit_type,
  1331      tinyu              mxu_info_pig.index := alp_unit.unit_index;
  1331      tinyu       OUTPUT atm_int_inf_notif_s( msg_op_mode_t_delete_c,
  1331      tinyu                parent_fu_type, interface_list,
  1331      tinyu                child_list, mxu_info_pig )
  1331      tinyu                TO server_pid, SET ATTRIBUTES = service_attr;
  1331      tinyu       SET ( NOW + ack_waiting_time__c, ack_timer );
  1331      tinyu NEXTSTATE waiting_ack;
  1331      tinyu 
  1331      tinyu STATE waiting_ack;
  1331      tinyu 
  1331      tinyu   INPUT atm_int_inf_notif_ack_s( parent_fu, ec );
  1331      tinyu     DCL
  1331      tinyu        parent_fu   unit_it_t;
  1331      tinyu 
  1331      tinyu     DECISION (parent_fu.ttype = parent_fu_type.ttype AND
  1331      tinyu               parent_fu.index = parent_fu_type.index);
  1331      tinyu     ( T ):
  1331      tinyu        RESET ( ack_timer );
  1331      tinyu     ELSE:
  1331      tinyu        NEXTSTATE -;
  1331      tinyu     ENDDECISION;
  1331      tinyu 
  1331      tinyu     DECISION ec;
  1331      tinyu       ( /= success_ec ):
  1331      tinyu         TASK dxsyslog_r( log_type_t_text_e_c,
  1331      tinyu              @'JIGREL: Negative interf notif: %04X'
  1331      tinyu              '  unit type        %04XH'
  1331      tinyu              '  unit index       %d'
  1331      tinyu              '  interface ID %04XH',
  1331      tinyu              ec,
  1331      tinyu              unit.unit_type, unit.unit_index,
  1331      tinyu               unit.interfaces(0).intf_id );
  1331      tinyu     ENDDECISION;
  1331      tinyu     RETURN ec;
  1331      tinyu 
  1331      tinyu   INPUT ack_timer;
  1331      tinyu     TASK dxsyslog_r( log_type_t_text_e_c,
  1331      tinyu          @'JIGREL: No response to intf deletion request!'
  1331      tinyu          ' server pid: %04X %04X %04X %02X'
  1331      tinyu          ' interface id: %04X'
  1331      tinyu          ' obj unit type, index: %04X %04X'
  1331      tinyu          ' ALP unit type, index: %04X %04X',
  1331      tinyu          get_pid_computer_r( server_pid ),
  1331      tinyu          get_pid_family_r( server_pid ),
  1331      tinyu          get_pid_process_id_r( server_pid ),
  1331      tinyu          get_pid_focus_r( server_pid ),
  1331      tinyu          unit.interfaces(0).intf_id,
  1331      tinyu          unit.unit_type, unit.unit_index,
  1331      tinyu          alp_unit.unit_type, alp_unit.unit_index );
  1331      tinyu     RETURN message_waiting_timeout_ec;
  1331      tinyu ENDSTATE waiting_ack;
  1331      tinyu 
  1331      tinyu ENDPROCEDURE notify_pig_intf_remove__r;
  1331      tinyu 
  1331      tinyu /**************************************************************************/
     2     yanzuo PROCEDURE intf_remove__r;
     2     yanzuo /*
     2     yanzuo  * This procedure removes the given interface which can be
     2     yanzuo  * either internal interface or NIP1/IP-NIU extra interface.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      intf_idx     byte,
   650     z7zhou     IN      alp_unit     jiifil__t;
  1168    x2huang     
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := unsuccessful_ec,
     2     yanzuo     proc_idx             byte := 0,
     2     yanzuo     rel_state            atm_cre_state_t,
     2     yanzuo     mxu_info             unit_it_t,
     2     yanzuo     port_stage           port_stage_t,
     2     yanzuo     tpi                  tpi_t,
     2     yanzuo     f_unit               unit_it_t,
     2     yanzuo     rug_pid              pid,
     2     yanzuo     rug_attr             attr_group_t,
     2     yanzuo     server_pid           pid,
  1202    jinncao     service_attr         attr_group_t,
  1252    jinncao     ustate     unit_state_t,
  1252    jinncao     is_if_reported		bool := F;
  1168    x2huang     
     2     yanzuo START;
    73     jamema #if (F)
    73     jamema   TASK dxsyslog_r( log_type_t_text_t_c,
    73     jamema                    @'JIGCLU: intf_remove__r, idx:%04XH', intf_idx);
    84    lifsong #endif 
    84    lifsong 
     2     yanzuo 
  1202    jinncao 	DECISION unit.is_level2_alp_unit OR unit.is_ip_niu;
  1202    jinncao 	( T ):
  1202    jinncao 		TASK ec := success_ec;
  1202    jinncao 	ELSE:
  1202    jinncao 		/* find a processor using this interface: */
  1202    jinncao 		WHILE proc_idx < jiifil__t_n_comp_per_unit_c;
  1202    jinncao 			DECISION unit.procs(proc_idx).interface_index;
  1202    jinncao 			( intf_idx ):
  1202    jinncao 				TASK ec := success_ec; /* ok, found a proc: */
  1202    jinncao 				OUT proc_search;
  1202    jinncao 			ENDDECISION;
  1202    jinncao 			TASK proc_idx := proc_idx + 1;
  1202    jinncao 		ENDWHILE proc_search;
  1202    jinncao 	ENDDECISION;
     2     yanzuo 
  1202    jinncao 	DECISION proc_idx = jiifil__t_n_comp_per_unit_c;
  1202    jinncao 	( T ):
  1202    jinncao 		RETURN success_ec;
  1202    jinncao 	ENDDECISION;
   929    lifsong   
  1202    jinncao 	TASK f_unit.ttype := unit.procs(proc_idx).unit_type,
  1202    jinncao 		f_unit.index := unit.procs(proc_idx).unit_index;
     2     yanzuo 
  1202    jinncao 	TASK get_alp_unit_for_brt__r( mxu_info, alp_unit );
     2     yanzuo 
  1202    jinncao 	TASK tpi.level  := tpi_level_t_interf_c,
  1202    jinncao 		tpi.interf := unit.interfaces(intf_idx).intf_id,
  1202    jinncao 		tpi.vpi    := vpi_t_unspecified_c,
  1202    jinncao 		tpi.vci    := vci_t_unspecified_c;
     2     yanzuo 
  1202    jinncao 	TASK set_port_stage__r(unit, intf_idx, port_stage);
     2     yanzuo 
  1202    jinncao 	DECISION get_service__r( atm_res_broker__c, server_pid, service_attr );
  1202    jinncao 	( F ):
  1202    jinncao 		TASK ec := service_not_found_ec;
  1202    jinncao 	ENDDECISION;
     2     yanzuo 
  1202    jinncao 	DECISION ec;
  1202    jinncao 	( success_ec ):
  1202    jinncao 	/* When releasing resources after MXU/NIP1 restart,
     2     yanzuo           we leave intf_reported flag on to indicate that the interface
     2     yanzuo           has been notified to PIGPRB, and that it must be un-notified
     2     yanzuo           if the FU is deleted before it can start up again. */
  1252    jinncao           	TASK is_if_reported := unit.interfaces(intf_idx).intf_reported;
  1252    jinncao                    
  1202    jinncao 		DECISION unit.removing_unit OR unit.reconfig_needed;
  1202    jinncao 		( T ):
  1202    jinncao 			TASK unit.interfaces(intf_idx).intf_reported := F;
  1202    jinncao 		ELSE:
  1202    jinncao 			TASK unit.interfaces(intf_idx).intf_reported :=
  1202    jinncao 				unit.interfaces(intf_idx).intf_reported OR
  1202    jinncao 				unit.interfaces(intf_idx).intf_exists;
  1202    jinncao 		ENDDECISION;
     2     yanzuo 
  1202    jinncao 		/* We cannot rely on intf_reported flag to decide whether the
  1202    jinncao 	        interface should be released, because reporting attempt
  1202    jinncao 	        may have timed out in such a way that JIGGER considered it
  1202    jinncao 	        failure but RBROKE/RUGGER/co. still got the interface info.
  1202    jinncao 	        We can rely on the intf_exists flag, though.
  1202    jinncao 	        However, we must not try to release the last ALP2 interface
  1202    jinncao 	        because it is never reported. */
  1205    jinncao 		DECISION (unit.is_level2_alp_unit AND intf_idx >= 2);
  1202    jinncao 		( T ):
  1202    jinncao 			OUTPUT atm_interf_release_ack_s(unit.interfaces(intf_idx).intf_id,
  1202    jinncao 										success_ec ) TO SELF;
  1202    jinncao 		ELSE:
  1356       pshu 			/* Ask if we can remove interface */
  1356       pshu 			DECISION is_if_reported AND (get_inq_service__r( atm_log_res_handling__c, T,rug_pid, rug_attr ));
  1356       pshu 			( T ):             
  1356       pshu 				OUTPUT atm_tpi_rel_inquiry_req_s( tpi )
  1356       pshu 						TO rug_pid, SET ATTRIBUTES = rug_attr;
  1356       pshu 			ELSE:
  1356       pshu 				TASK ec := unit_state_by_phys_addr__r(alp_unit.procs(0).phys_addr, ustate);
  1356       pshu 				DECISION ((NOT(unit.is_level1_alp_unit)) AND (success_ec = ec));
  1356       pshu 				(T):
  1356       pshu 					DECISION(ustate = unit_state_t_woex_c);
  1205    jinncao 					(T):
  1356       pshu 						DECISION classify__r( unit, proc_idx, alp_unit );
  1504      tinyu 						(unit_class__t_apc_trib_c):
  1356       pshu 							TASK ec := remove_apc_trib_phy_interf__r(unit, alp_unit, proc_idx, tpi);
  1356       pshu 							DECISION (ec /= success_ec);
  1356       pshu 							(T):
  1356       pshu 								RETURN ec;
  1230    jinncao 							ENDDECISION;
  1356       pshu 						(unit_class__t_app_trib_c, unit_class__t_eipu_trib_c):
  1356       pshu 							TASK ec := remove_app_trib_phy_interf__r(unit, alp_unit, intf_idx, proc_idx);
  1356       pshu 							DECISION (ec /= success_ec);
  1356       pshu 							(T):
  1356       pshu 								RETURN ec;
  1356       pshu 							ENDDECISION;
  1504      tinyu                         (unit_class__t_alp2_c):
  1504      tinyu 
  1504      tinyu                             TASK ec := remove_alp2_trib_phy_interf__r(unit, alp_unit, intf_idx, proc_idx, tpi);
  1504      tinyu                             DECISION (ec /= success_ec);
  1504      tinyu                             (T):
  1504      tinyu                                 RETURN ec;
  1504      tinyu                             ENDDECISION;                          
  1202    jinncao 						ELSE:
  1356       pshu 							TASK dxsyslog_r( log_type_t_text_e_c,
  1356       pshu                     								@'JIGREL: unit neither apc trib nor app trib!'
  1356       pshu                     			 					'intf_remove__r unit type index : %d  %d' ,
  1356       pshu                     			                     unit.unit_type,unit.unit_index);
  1356       pshu                     					RETURN unsuccessful_ec;
  1202    jinncao 						ENDDECISION;
  1202    jinncao 					ELSE:
  1202    jinncao 						OUTPUT atm_interf_release_ack_s(unit.interfaces(intf_idx).intf_id,
  1356       pshu 									success_ec ) TO SELF;
  1202    jinncao 					ENDDECISION;
  1356       pshu 				ELSE:
  1356       pshu 					OUTPUT atm_interf_release_ack_s(unit.interfaces(intf_idx).intf_id,
  1356       pshu 									success_ec ) TO SELF;
  1202    jinncao 				ENDDECISION;
  1202    jinncao 			ENDDECISION;
  1356       pshu 		
  1202    jinncao 		ENDDECISION;
  1202    jinncao 	ENDDECISION;
     2     yanzuo 
  1202    jinncao 	DECISION ec;
  1202    jinncao 	( /= success_ec ):
  1202    jinncao 		RETURN ec;
  1202    jinncao 	ENDDECISION;
  1202    jinncao 	SET ( NOW + ack_waiting_time__c, ack_timer );
  1202    jinncao NEXTSTATE waiting_ack;
     2     yanzuo 
     2     yanzuo STATE waiting_ack;
     2     yanzuo 
     2     yanzuo   INPUT atm_tpi_rel_inquiry_ack_s( tp_identifier, status );
     2     yanzuo     DCL
     2     yanzuo        tp_identifier     tpi_t,
  1410      tinyu        status            error_t;
     2     yanzuo 
     2     yanzuo     DECISION tpi.level /= tp_identifier.level OR
     2     yanzuo              tpi.interf /= tp_identifier.interf;
     2     yanzuo     ( T ):
     2     yanzuo        NEXTSTATE -;
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET( ack_timer );
     2     yanzuo 
   658     z7zhou    DECISION status;
   658     z7zhou    ( if_id_does_not_exist_ec ):
   658     z7zhou    /* interface has not been reported to RUGGER, no need to
   658     z7zhou     try to release it via RBROKE. Proceed phy interface release , then via dummy ack. */
   658     z7zhou     
   710     z7zhou       DECISION (app_unit_check__r(unit));
   710     z7zhou       (T):
   710     z7zhou           OUTPUT atm_interf_release_ack_s(
   710     z7zhou                 unit.interfaces(intf_idx).intf_id,
   710     z7zhou                 success_ec ) TO SELF;
   710     z7zhou       ELSE:
   710     z7zhou          TASK  rel_state := atm_cre_state_t_log_c;
   710     z7zhou          OUTPUT atm_interf_release_req_s( unit.interfaces(intf_idx).intf_id,
   658     z7zhou                                       mxu_info,
  1410      tinyu                                       0,
  1410      tinyu                                       0,
   658     z7zhou                                       rel_state )
   658     z7zhou                                       TO server_pid, SET ATTRIBUTES = service_attr;
   650     z7zhou 
   710     z7zhou       ENDDECISION;
   650     z7zhou 
   710     z7zhou 
   658     z7zhou    ELSE:
   538     yanzuo 
   710     z7zhou       TASK rel_state := get_rel_state__r(unit);
   710     z7zhou       OUTPUT atm_interf_release_req_s( unit.interfaces(intf_idx).intf_id,
   710     z7zhou                              mxu_info,
  1410      tinyu                              0,
  1410      tinyu                              0,
   710     z7zhou                              rel_state )
   710     z7zhou                              TO server_pid, SET ATTRIBUTES = service_attr;
   658     z7zhou    ENDDECISION;
   658     z7zhou 
     2     yanzuo     SET ( NOW + ack_waiting_time__c, ack_timer );
     2     yanzuo     NEXTSTATE -;
     2     yanzuo 
  1168    x2huang   INPUT atm_interf_release_ack_s ( interface_id, ec ),
  1168    x2huang   		atm_interf_phy_release_ack_s( interface_id, ec);
     2     yanzuo     DCL
  1429       pshu        interface_id      atm_interface_id_t;
     2     yanzuo 
     2     yanzuo     DECISION interface_id;
     2     yanzuo       ( /= unit.interfaces(intf_idx).intf_id ):
     2     yanzuo         NEXTSTATE -; /* wrong ack, continue waiting */
     2     yanzuo     ENDDECISION;
     2     yanzuo     RESET ( ack_timer );
     2     yanzuo     DECISION ec;
     2     yanzuo     ( if_id_does_not_exist_ec,
   584    lifsong       cac_mem_ptr_entry_not_found_ec, /*for RS2*/
     2     yanzuo       service_not_found_ec ):
     2     yanzuo         /* we already removed this earlier,
     2     yanzuo            or never reported it, or RUGGER services missing */
     2     yanzuo         TASK ec := success_ec;
   584    lifsong 
     2     yanzuo     ENDDECISION;
     2     yanzuo     DECISION ec;
     2     yanzuo       ( /= success_ec ):
     2     yanzuo         TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo              @'JIGREL: Interface deletion failure: %04X'
     2     yanzuo              ' object unit type+index: %04X %04X'
     2     yanzuo              '   ALP1 unit type+index: %04X %04X'
     2     yanzuo              ' interface #%d ID: %04X',
     2     yanzuo              ec,
     2     yanzuo              f_unit.ttype,
     2     yanzuo              f_unit.index,
     2     yanzuo              alp_unit.unit_type,
     2     yanzuo              alp_unit.unit_index,
     2     yanzuo              intf_idx+1, interface_id );
     2     yanzuo         RETURN ec;
     2     yanzuo     ENDDECISION;
   773   huantang     
   846       pshu     /*CALL notify_mnmpro_if_remove__r(interface_id, mxu_info);*/
   846       pshu     CALL notify_if_remove__r(interface_id,mxu_info,mnmpro_p);
   846       pshu     CALL notify_if_remove__r(interface_id,mxu_info,mneipo_p);
  1437       pshu     CALL notify_uha_if_remove__r(interface_id,f_unit);
   773   huantang              
  1331      tinyu   
     2     yanzuo         RETURN success_ec;
     2     yanzuo 
  1331      tinyu        
     2     yanzuo ENDSTATE waiting_ack;
     2     yanzuo ENDPROCEDURE intf_remove__r;
     2     yanzuo 
   650     z7zhou PROCEDURE intf_flag_update__r;
   650     z7zhou FPAR
   650     z7zhou     IN/OUT  unit         jiifil__t,
   650     z7zhou     IN      idx     byte,
   650     z7zhou     IN/OUT  update       jii_update_info__t;
   650     z7zhou 
   650     z7zhou START;
   650     z7zhou 
   650     z7zhou    TASK unit.interfaces(idx).intf_exists := F;
   650     z7zhou     /* intf_reported field was updated in intf_remove__r */
   650     z7zhou    TASK unit.interfaces(idx).intf_reporting_needed := F;
  1331      tinyu    TASK unit.interfaces(idx).intf_reported := F;
   650     z7zhou 
   650     z7zhou    /* these will flag i1/i2/i3 field, according to 'idx' */
   650     z7zhou    CALL intf_flag__r( update, idx, jii_field__t_i1_exists_c );
   650     z7zhou    CALL intf_flag__r( update, idx, jii_field__t_i1_reported_c );
   650     z7zhou    CALL intf_flag__r( update, idx, jii_field__t_i1_rep_need_c );
   650     z7zhou 
   650     z7zhou    RETURN;
   650     z7zhou ENDPROCEDURE intf_flag_update__r;
   650     z7zhou 
     2     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE remove_interfaces__r;
     2     yanzuo /*
     2     yanzuo  * This procedure removes all reported interfaces of the target unit
     2     yanzuo  * and sets up the JIIFIL update record accordingly.
     2     yanzuo  **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo 
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo 
     2     yanzuo DCL
     2     yanzuo     idx                  dword := jii_interfaces__t_max_c,
   650     z7zhou     ec                   error_t := success_ec;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   WHILE ( idx > 0 ) AND ( ec = success_ec );
     2     yanzuo     TASK idx := dword( idx - 1 );
     2     yanzuo     DECISION unit.interfaces(idx).intf_exists OR
     2     yanzuo              unit.interfaces(idx).intf_reported;
     2     yanzuo       ( T ):
   650     z7zhou                   /*IPE IF has been reported to RUGGER*/
   650     z7zhou            DECISION unit.is_ip_niu
   650     z7zhou                     AND
   650     z7zhou                     idx = 1
   650     z7zhou                     AND
   650     z7zhou                     remove_ipniu_ipe_if__r(unit) = F;
   650     z7zhou              ( T ):
   650     z7zhou                TASK ec := success_ec;
   650     z7zhou             ELSE:
   650     z7zhou                TASK ec := intf_remove__r( unit, idx, alp_unit);
   650     z7zhou 
     2     yanzuo         DECISION ec;
     2     yanzuo           ( success_ec ):
   650     z7zhou                 CALL intf_flag_update__r(unit, idx, update);
    84    lifsong            ENDDECISION;
     2     yanzuo         ENDDECISION;
     2     yanzuo     ENDDECISION;
     2     yanzuo   ENDWHILE;
  1331      tinyu   DECISION ec;
  1331      tinyu   (/=success_ec):
  1331      tinyu       RETURN ec;
  1331      tinyu   ELSE:      
  1331      tinyu       DECISION (unit.removing_unit OR unit.reconfig_needed);
  1331      tinyu       (T):
  1331      tinyu             RETURN notify_pig_intf_remove__r(unit,alp_unit);
  1331      tinyu       ENDDECISION;     
  1331      tinyu   ENDDECISION;
  1331      tinyu         
  1331      tinyu   RETURN success_ec;
  1331      tinyu  
     2     yanzuo ENDPROCEDURE remove_interfaces__r;
     2     yanzuo 
   733    lifsong PROCEDURE is_last_rel_res_in_unit__r;
   733    lifsong FPAR 
   733    lifsong    IN VIEWED    unit  jiifil__t;
   733    lifsong 
   733    lifsong RETURNS
   733    lifsong    bool;
   733    lifsong 
   733    lifsong START;   
   733    lifsong    
   733    lifsong      RETURN ( byte( unit.procs(0).res_release_needed ) +
   733    lifsong                     byte( unit.procs(1).res_release_needed ) +
   733    lifsong                     byte( unit.procs(2).res_release_needed ) +
   733    lifsong                     byte( unit.procs(3).res_release_needed ) = 1 );
   733    lifsong 
   733    lifsong ENDPROCEDURE is_last_rel_res_in_unit__r;
   733    lifsong 
    75     yanzuo 
    75     yanzuo /**************************************************************************/
     2     yanzuo PROCEDURE rel_hw_sw_resources__r;
     2     yanzuo /*
     2     yanzuo  * This procedure releases the VCCs, VPs and interfaces of the
     2     yanzuo  * target unit.
     2     yanzuo 
     2     yanzuo **************************************************************************/
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit         jiifil__t,
     2     yanzuo     IN      proc_idx     byte,
     2     yanzuo     IN/OUT  alp_unit     jiifil__t,
     2     yanzuo     IN/OUT  update       jii_update_info__t;
     2     yanzuo RETURNS
     2     yanzuo     error_t;
     2     yanzuo DCL
     2     yanzuo     ec                   error_t := success_ec,
     2     yanzuo     ustate               unit_state_t,
   541     z7zhou     ust                  unit_status_t,
   542     z7zhou     i                      byte;
     2     yanzuo 
     2     yanzuo START;
    75     yanzuo   
  1168    x2huang                    
    75     yanzuo   DECISION app_mxu_unit_check__r( alp_unit );
    75     yanzuo   ( T ):
   940    lifsong       CALL notify_brt__r( unit, proc_idx, alp_unit );
    75     yanzuo   ENDDECISION;
     2     yanzuo 
     2     yanzuo   TASK ec := remove_conns__r( unit, proc_idx, alp_unit, update );
   882       pshu   DECISION ec;
   882       pshu     ( success_ec ):  
   882       pshu      TASK i := 2;
   882       pshu        WHILE i > 0;
   882       pshu          DECISION unit.is_level2_alp_unit OR unit.is_ip_niu;
   882       pshu           ( T ):
   882       pshu             TASK proc_idx := byte (i  - 1);
   882       pshu          ENDDECISION;
  1168    x2huang                    
   882       pshu          TASK ec := remove_vp__r( unit, proc_idx, alp_unit, update );
   882       pshu          DECISION ec;
   882       pshu          ( success_ec ):
   882       pshu            TASK unit.procs(proc_idx).vp_exists := F;
   882       pshu            CALL flag__r( update, jii_field__t_vp_exists_c );
  1168    x2huang            
   882       pshu          ENDDECISION; 
   882       pshu 
   882       pshu           DECISION unit.is_level2_alp_unit OR unit.is_ip_niu;
   882       pshu           ( F ):
   882       pshu             OUT;
   882       pshu          ENDDECISION;
   882       pshu          TASK i := byte (i - 1);
   882       pshu         ENDWHILE;
   882       pshu   ENDDECISION;
     2     yanzuo   /* if everything ok until now, and removing the last child unit..
     2     yanzuo   */
   733    lifsong   DECISION ( ec = success_ec ) AND is_last_rel_res_in_unit__r(unit);
   876       pshu   ( T ):
     2     yanzuo       /* ..we can remove the interfaces. */
  1168    x2huang       TASK ec := remove_interfaces__r( unit, alp_unit, update);
     2     yanzuo   ENDDECISION;
     2     yanzuo   DECISION ec;
     2     yanzuo     ( success_ec ):
     2     yanzuo       DECISION unit.is_ip_niu;
     2     yanzuo         ( T ):
     2     yanzuo           CALL flag__r(update, jii_field__t_vp_ext1_reported_c);
     2     yanzuo           DECISION unit.is_wo_unit;
     2     yanzuo             ( T ):
     2     yanzuo               CALL flag__r(update, jii_field__t_ipniu_co_upd_c);
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo       DECISION unit.removing_unit = F
     2     yanzuo                AND
     2     yanzuo                unit_state_by_phys_addr__r( unit.procs( proc_idx ).phys_addr,
     2     yanzuo                ustate ) = success_ec
     2     yanzuo                AND
     2     yanzuo                ( ustate | unit_state_t_mainstate_bm_c ) /= unit_state_t_se_c;
     2     yanzuo         ( T ):
     2     yanzuo           TASK ust := unit_status( unit.procs( proc_idx ).unit_type,
     2     yanzuo                unit.procs( proc_idx ).unit_index,
     2     yanzuo                unit_status_t_rcvr_ban_c,
     2     yanzuo                NIL );
     2     yanzuo #if (F)
     2     yanzuo               TASK dxsyslog_r( log_type_t_text_e_c,
     2     yanzuo                    @'JIGREL: inquiring RBAN status for %s'
     2     yanzuo                    'return value=%d',
     2     yanzuo                    unit_name__r( unit.procs( proc_idx ).unit_type,
     2     yanzuo                    unit.procs( proc_idx ).unit_index ),
     2     yanzuo                    ust );
     2     yanzuo #endif
     2     yanzuo           DECISION ust = scd__yes AND
     2     yanzuo                    ( NOT ( unit.is_level1_alp_unit AND unit.is_wo_unit )) AND
     2     yanzuo                          ( NOT app_unit_check__r(unit)) AND
   834    lifsong                          ( NOT app_unit_check__r(alp_unit)) AND 
   834    lifsong                          ( NOT unit.reconfig_needed );
     2     yanzuo             ( T ):
     2     yanzuo               TASK unit.procs( proc_idx ).if_init_needed := T;
     2     yanzuo               CALL flag__r( update, jii_field__t_if_init_need_c );
     2     yanzuo               DECISION proc_idx;
     2     yanzuo                 ( 0 ):
     2     yanzuo                   TASK unit.port_conf_needed := T;
     2     yanzuo                   CALL flag__r( update, jii_field__t_pconf_need_c );
     2     yanzuo               ENDDECISION;
     2     yanzuo           ENDDECISION;
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
     2     yanzuo   RETURN ec;
     2     yanzuo ENDPROCEDURE rel_hw_sw_resources__r;
     2     yanzuo 
     2     yanzuo PROCEDURE rel_resources__r;
     2     yanzuo FPAR
     2     yanzuo     IN/OUT  unit      jiifil__t,
     2     yanzuo     IN      proc_idx  byte,
     2     yanzuo     IN/OUT  alp_unit  jiifil__t,
     2     yanzuo     IN/OUT  update    jii_update_info__t;
  1054    lifsong     
  1054    lifsong RETURNS
  1054    lifsong    error_t;
  1054    lifsong 
     2     yanzuo DCL
     2     yanzuo     ec  error_t;
     2     yanzuo 
     2     yanzuo START;
     2     yanzuo   TASK update.rec_ptr := @unit;
     2     yanzuo   TASK update.proc_idx := proc_idx;
   359    lifsong 
     2     yanzuo   TASK ec := rel_hw_sw_resources__r( unit, proc_idx, alp_unit, update );
     2     yanzuo 
     2     yanzuo   /* if last sub-unit was removed.. */
   733    lifsong   DECISION unit.removing_unit AND ( ec = success_ec ) AND is_last_rel_res_in_unit__r(unit);
   733    lifsong   ( T ):
     2     yanzuo       /* ..inform the master which then erases the JIIFIL record. */
     2     yanzuo       OUTPUT jig_unit_removed__s( unit.rec_idx,
     2     yanzuo              unit.unit_type,
     2     yanzuo              unit.unit_index,
     2     yanzuo              ec ) TO manager_pid;
     2     yanzuo       /* update request not needed: */
     2     yanzuo       TASK update.rec_ptr := NIL;
   876       pshu   ELSE:
     2     yanzuo       /* releasing failed, or there are still some sub-units left: */
     2     yanzuo       DECISION ec;
     2     yanzuo         ( success_ec ):
     2     yanzuo           TASK unit.procs(proc_idx).res_release_needed := F;
     2     yanzuo           CALL flag__r( update, jii_field__t_res_rel_need_c );
     2     yanzuo         ELSE:
     2     yanzuo           TASK unit.procs(proc_idx).res_release_attempts_left :=
     2     yanzuo                byte( unit.procs(proc_idx).res_release_attempts_left
     2     yanzuo                - 1 );
     2     yanzuo           CALL flag__r( update, jii_field__t_res_rel_att_c );
     2     yanzuo       ENDDECISION;
     2     yanzuo   ENDDECISION;
  1054    lifsong   
  1054    lifsong   RETURN ec;
  1054    lifsong 
     2     yanzuo ENDPROCEDURE rel_resources__r;
     2     yanzuo /*
     2     yanzuo *
     2     yanzuo *
     2     yanzuo *  Description:
     2     yanzuo *
     2     yanzuo *  COPYRIGHT (c) 2003,2004 NOKIA NETWORKS OY FINLAND
     2     yanzuo *************************************************************************/
     2     yanzuo 
     2     yanzuo #include "dxsccctr.h"
     2     yanzuo 
     2     yanzuo #include "jiggergx.cin"
   205    lifsong #ifndef TNSDL_UNIT_TEST 
     2     yanzuo #include "stdlib.h"
   205    lifsong #endif
     2     yanzuo #include "string.h"
     2     yanzuo 
     2     yanzuo /* #include "jiggergx.cii" */
     2     yanzuo #include "jigdatgx.cpd"
     2     yanzuo 
   637    lifsong static const unsigned char module_identification[] = "@(#)MID: $Id$";
     2     yanzuo /*
     2     yanzuo  * This module provides 'get next task' procedure for JIGGER's
     2     yanzuo  * work management.
     2     yanzuo  */
     2     yanzuo 
     2     yanzuo /* main priority ranges for different startup tasks: */
     2     yanzuo 
     2     yanzuo /* trib restart tasks of SP/WO/WOALP units    1200, 1400, 1600
     2     yanzuo    res.release tasks of SP/WO/WOALP units     2200, 2400, 2600
     2     yanzuo    startup tasks of WOALP/WO/SP units         3200, 3400, 3600 */
     2     yanzuo 
   617     qinggu #define TRIB_RESTART_BASE_PRI__C 1000
   617     qinggu #define RES_RELEASE_BASE_PRI__C  2000
   617     qinggu #define STARTUP_BASE_PRI__C      3000
     2     yanzuo 
     2     yanzuo /* relative priorities of tasks concerning WO-ALP1 units,
     2     yanzuo    WO-tributary units and other tributary (or SP-ALP) units */
   617     qinggu #define WO_ALP1_PRI__C 200
   761    lifsong #define CENTER_NODE__PRI__C 300
   617     qinggu #define WO_TRIB_PRI__C 400
   617     qinggu #define TRIB_PRI__C    600
     2     yanzuo 
     2     yanzuo typedef  error_t near (*job_setup_fn__t)(void *,   /* ptr to struct to be filled*/
     2     yanzuo                                          dword *,  /* amount of data there */
     2     yanzuo                                          jiifil__t *, /* ALP unit of target unit */
     2     yanzuo                                          jiifil__t *, /* target unit */
     2     yanzuo                                          jii_comp_data__t *); /* target proc */
     2     yanzuo 
     2     yanzuo static job_setup_fn__t job_setup_func_table[ TASK_TYPE__T_MAX_C ];
     2     yanzuo static bool sfu_up__pv;
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /*
     2     yanzuo  * This function takes care that we don't allow an ALP1 unit whose
     2     yanzuo  * port was not configured during the initial SD4 initialization
     2     yanzuo  * to start before SFU is up.
     2     yanzuo  * It also watches that we don't start too many ALP1-unit port
     2     yanzuo  * configuration tasks at the same time.
     2     yanzuo  * (UAMPRB or HMS bus might overload if we hit UAMPRB with
     2     yanzuo  *  16 simultaneous SD port configuration requests.)
     2     yanzuo  */
     2     yanzuo bool port_conf_allowed__r( jiifil__t *jii_ptr )
     2     yanzuo {
     2     yanzuo     byte  pending;
     2     yanzuo     dword n_pending = 0;
     2     yanzuo     dword cl, ui;
     2     yanzuo     phys_address_t ph;
     2     yanzuo     jiifil__t *alp_ptr, *dummy_ptr;
     2     yanzuo     jii_comp_data__t *dummy_comp;
     2     yanzuo 
   653   huantang    
   704   huantang    
     2     yanzuo     if ( jii_ptr->is_level1_alp_unit
   155    lifsong          && ( jii_ptr->is_app_mxu_or_eipu || jii_ptr->is_wo_unit )
  1481       pshu          && !jii_sd4_init_done__r() )
     2     yanzuo     {
     2     yanzuo         return F;
   155    lifsong     }
     2     yanzuo 
   155    lifsong     if ( jii_ptr->is_level1_alp_unit && ( jii_ptr->is_app_mxu_or_eipu || jii_ptr->is_wo_unit ) )
     2     yanzuo     {
     2     yanzuo         /* find out how many WO-alp units with higher
     2     yanzuo            startup priority still wait for port configuration: */
     2     yanzuo 
     2     yanzuo         for( cl = 1; cl <= JIG_LIMITS__T_N_CLUS_C; cl++ )
     2     yanzuo         {
     2     yanzuo             if ( cl == jii_ptr->cluster_idx
     2     yanzuo                  ||
     2     yanzuo                  jiafil_ptr__r(cl)->startup_priority >
     2     yanzuo                  jiafil_ptr__r(jii_ptr->cluster_idx)->startup_priority )
     2     yanzuo             {
     2     yanzuo                 continue;
     2     yanzuo             }
     2     yanzuo 
     2     yanzuo             pending = 0;
     2     yanzuo 
     2     yanzuo             for( ui = 0; ui < 2; ui++ )
     2     yanzuo             {
     2     yanzuo                 ph = jiafil_ptr__r( cl )->alp_unit[ui].phys_addr;
     2     yanzuo                 if (ph < COMPUTER_T_PHYS_NOT_DEFINED_C)
     2     yanzuo                 {
     2     yanzuo                     pending = 1;
     2     yanzuo 
     2     yanzuo                     if ( jii_find_computer__r( ph, &alp_ptr, &dummy_comp,
     2     yanzuo                                                &dummy_ptr ))
     2     yanzuo                     {
     2     yanzuo                         if ( ! alp_ptr->port_conf_needed )
     2     yanzuo                         {
     2     yanzuo                             pending = 0;
     2     yanzuo                             break; /* out of for (ui) */
     2     yanzuo                         }
     2     yanzuo                     }
     2     yanzuo                 }
     2     yanzuo             }
     2     yanzuo             n_pending += pending;
     2     yanzuo         }
     2     yanzuo     }
   359    lifsong     return  n_pending < JIG_LIMITS__T_MAX_WOALP_PRTCFG_C;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bool if_init_allowed__r( jiifil__t *jii_ptr, jii_comp_data__t *comp_ptr )
     2     yanzuo {
     2     yanzuo     return ( jii_ptr->port_conf_completed
     2     yanzuo              &&
     2     yanzuo              ( comp_ptr->proc_index == 0 ||
     2     yanzuo                jii_ptr->procs[0].if_init_completed ));
     2     yanzuo }
     2     yanzuo 
     2     yanzuo bool
     2     yanzuo active_sfu_is_up__r( void )
     2     yanzuo {
     2     yanzuo     unit_index_t  idx;
     2     yanzuo     unit_state_t  ustate;
     2     yanzuo     phys_address_t  paddr;
     2     yanzuo 
     2     yanzuo     for( idx = 0; idx < 2; idx++ )
     2     yanzuo     {
     2     yanzuo         if ( physical_address_r( UNIT_TYPE_T_SFU_C, idx, &paddr ) ==
     2     yanzuo              SUCCESS_EC
     2     yanzuo              &&
     2     yanzuo              unit_state_by_phys_addr__r( paddr, &ustate ) == SUCCESS_EC
     2     yanzuo              &&
     2     yanzuo              ( ustate | UNIT_STATE_T_MAINSTATE_BM_C ) == UNIT_STATE_T_WO_C )
     2     yanzuo         {
     2     yanzuo             return  ustate == UNIT_STATE_T_WOEX_C;
     2     yanzuo         }
     2     yanzuo     }
     2     yanzuo     return F;
     2     yanzuo }
     2     yanzuo 
   799     z7zhou bool is_unit_state_for_trib_report__r(phys_address_t phys_addr)
   799     z7zhou {
   799     z7zhou 	unit_state_t ustate = UNIT_STATE_T_ABNORMAL_STATE_C;
   799     z7zhou 
   799     z7zhou 	if ((unit_state_by_phys_addr_r( phys_addr, &ustate ) == SUCCESS_EC) 
   799     z7zhou 		&& ( ( ustate == UNIT_STATE_T_WOEX_C)
   799     z7zhou 			|| (ustate == UNIT_STATE_T_SPEX_C)
   799     z7zhou 			|| (ustate == UNIT_STATE_T_BLEX_C)
   799     z7zhou 			|| (ustate == UNIT_STATE_T_BLID_C)))
   799     z7zhou 	{
   799     z7zhou 		return  T;
   799     z7zhou 	}
   799     z7zhou 	return F;
   799     z7zhou 
   799     z7zhou  }
   799     z7zhou 
   388    lifsong bool  trib_report_allowed__r(jiifil__t *jii_ptr, jiifil__t *alp_ptr, jii_comp_data__t *comp_ptr )
   359    lifsong {
   388    lifsong    if( !jii_core_ready_for_reporting__r() )
   359    lifsong    {
   359    lifsong       return F;
   359    lifsong    }
   359    lifsong 
   359    lifsong    if ((!alp_ptr->ready_for_reporting) 
   799     z7zhou         ||!is_unit_state_for_trib_report__r(alp_ptr->procs[0].phys_addr))
   359    lifsong    {
   359    lifsong       return F;
   359    lifsong    }
   359    lifsong 
   359    lifsong    if(app_unit_check__r(*jii_ptr) && !jii_ptr->ready_for_reporting)
   359    lifsong    {
   359    lifsong       return F;
   359    lifsong    }
  1305       pshu 
  1305       pshu    if(comp_ptr->boot_loading){
  1305       pshu 	  return F;
  1305       pshu    }
   359    lifsong    
   359    lifsong    return T;
   359    lifsong }
   359    lifsong 
   359    lifsong bool is_trib_comp__r(jiifil__t *jii_ptr, jiifil__t *alp_ptr, jii_comp_data__t *comp_ptr)
   359    lifsong {
   359    lifsong    if( jii_ptr != alp_ptr )
   359    lifsong    {
   359    lifsong       return T;
   359    lifsong    }
   359    lifsong    else if( comp_ptr == &alp_ptr->procs[1] ) /*only SS7U or SS7UP currently*/
   359    lifsong    {
   359    lifsong       return T;
   359    lifsong    }
   359    lifsong    return F;
   359    lifsong }
   359    lifsong 
   359    lifsong bool  trib_task_allowed__r(jiifil__t *jii_ptr, jiifil__t *alp_ptr, jii_comp_data__t *comp_ptr)
   359    lifsong {
   359    lifsong    if( jii_ptr->removing_unit )
   359    lifsong    {
   359    lifsong       return T;
   359    lifsong    }
   359    lifsong 
   359    lifsong    if ( !alp_ptr->trib_startup_allowed )
   359    lifsong    {
   359    lifsong       return F;
   359    lifsong    }
   359    lifsong    
   498      h10hu    if( comp_ptr->unit_type == UNIT_TYPE_T_SS7UP_C  &&
   498      h10hu                !jii_ptr->is_wo_unit && 
   498      h10hu                !jii_ptr->trib_startup_allowed )
   498      h10hu    {
   498      h10hu       return F;
   498      h10hu    }   
   498      h10hu       
   359    lifsong    return T;
   359    lifsong }
   359    lifsong 
    38    lifsong dword _near_ atoi__r(character_ptr_t num )
    38    lifsong {
    38    lifsong     return atoi((char *)num);
    38    lifsong }
    38    lifsong 
     2     yanzuo bool _near_
     2     yanzuo get_next_task__r( alp_cluster_idx__t  cluster,
     2     yanzuo                   task_data__t       *job_data_ptr )
     2     yanzuo {
     2     yanzuo     jiifil__t      *alp_ptr,      *jii_ptr;
  1349       pshu     jiifil__t      *job_alp_unit = NULL, *job_target_unit= NULL;
  1349       pshu     jii_comp_data__t *comp_ptr = NULL,   *job_target_comp = NULL;
     2     yanzuo     jii_search_key__t  skey;
     2     yanzuo     dword           job, next_job = TASK_TYPE__T_NO_TASK_C;
     2     yanzuo     dword           pri, next_jpri = 0xFFFFFFFF;
     2     yanzuo     byte            att_left, next_att_left = 0;
   388    lifsong     bool            found;
     2     yanzuo     alp_cluster_idx__t  sym_mxu_cluster;
     2     yanzuo     bool                sym_mxu_apc_init_done;
     2     yanzuo     bool                sd4_init_done;
     2     yanzuo     stop_params__t  stop_para;
     2     yanzuo     unit_state_t    ustate;
     2     yanzuo 
     2     yanzuo     sym_mxu_cluster          = jii_sym_mxu_cluster__r();
     2     yanzuo     sym_mxu_apc_init_done    = jii_sym_mxu_apc_init_done__r();
     2     yanzuo     sd4_init_done            = jii_sd4_init_done__r();
     2     yanzuo 
     2     yanzuo     if (!sfu_up__pv && sd4_init_done)
     2     yanzuo     {
     2     yanzuo         sfu_up__pv = active_sfu_is_up__r();
     2     yanzuo     }
     2     yanzuo 
   155    lifsong     found = jii_find_first_comp__r( cluster, &skey, &jii_ptr, &comp_ptr, &alp_ptr );
   155    lifsong     
     2     yanzuo     while ( found )
     2     yanzuo     {
     2     yanzuo         pri = 0;
     2     yanzuo         job = 0;
     2     yanzuo         att_left = 0;
     2     yanzuo 
     2     yanzuo         if (0)
     2     yanzuo         {
     2     yanzuo             dword d[5];
     2     yanzuo 
     2     yanzuo             d[0] = jii_ptr->rec_idx; d[1] = (dword) jii_ptr;
     2     yanzuo             d[2] = (dword) comp_ptr; d[3] = (dword) alp_ptr;
     2     yanzuo 
     2     yanzuo             write_to_log(LOG_TYPE_T_DWORD_T_C, &d[0], 4,
     2     yanzuo                          "GET_NEXT_TASK__R: PROCESSING:");
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo         if (jii_ptr->sd4_init_needed
     2     yanzuo             && !jii_ptr->is_level1_alp_unit
     2     yanzuo             /* WO-SYM-MXU must be present, otherwise its
     2     yanzuo                sd4_init_needed flag is not cleared when sd4 init
     2     yanzuo                task is completed, and WO-SYM-MXU startup gets
     2     yanzuo                stuck. */
     2     yanzuo             && sym_mxu_cluster != ALP_CLUSTER_IDX__T_INVALID_C
     2     yanzuo             && alp_ptr != NULL
   165    lifsong             && alp_ptr->sd4_init_needed)
     2     yanzuo         {
     2     yanzuo             next_job = TASK_TYPE__T_SD4_INIT_C;
     2     yanzuo             job_alp_unit    = alp_ptr;
     2     yanzuo             job_target_unit = jii_ptr;
     2     yanzuo             job_target_comp = comp_ptr;
     2     yanzuo 
     2     yanzuo             /* this job has the highest priority possible
     2     yanzuo                so there's no need to continue. */
     2     yanzuo             break;
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo         if (jii_ptr->removing_unit
     2     yanzuo            && comp_ptr->res_release_needed)
     2     yanzuo         {
     2     yanzuo             /* Unit removal must be allowed even though SFU is not configured */
     2     yanzuo             pri = TRIB_PRI__C;
     2     yanzuo         }
   155    lifsong         /* Tilly : only SYM-WO-APP MXU unit can skip over SFU SD initialization work */ 
   155    lifsong         else if (!sd4_init_done
   155    lifsong                  && !( app_mxu_unit_check__r( *jii_ptr ) && jii_ptr->sym_mxu_flag ) )
     2     yanzuo         {
     2     yanzuo             /* Only SFU SD4G init can be done at the moment. */
   155    lifsong         }
     2     yanzuo         else if (jii_ptr->is_wo_unit && jii_ptr->is_level1_alp_unit)
     2     yanzuo         {
     2     yanzuo             if (jii_ptr->cluster_idx == sym_mxu_cluster ||
     2     yanzuo                 sym_mxu_apc_init_done)
     2     yanzuo             {
     2     yanzuo                 /* Ok to check this unit.
     2     yanzuo                    Use higher base priority than for
     2     yanzuo                    tributary units. */
     2     yanzuo                 pri = WO_ALP1_PRI__C;
     2     yanzuo             }
     2     yanzuo 
     2     yanzuo             /* Special handling for ALP1 units without pair in TE state:
     2     yanzuo                they don't send 2nd phase APC init request, so we'll
     2     yanzuo                allow tributary startup tasks once the unit is TE-EX. */
     2     yanzuo 
     2     yanzuo             if (!jii_ptr->trib_startup_allowed &&
     2     yanzuo                 comp_ptr->if_init_completed &&
     2     yanzuo                 unit_state_by_phys_addr__r(comp_ptr->phys_addr, &ustate) ==
     2     yanzuo                 SUCCESS_EC &&
     2     yanzuo                 ustate == UNIT_STATE_T_TEEX_C)
     2     yanzuo             {
     2     yanzuo                 jii_ptr->trib_startup_allowed = T;
     2     yanzuo                 comp_ptr->half_conns_needed = T;
   905     z7zhou 		
     2     yanzuo                 /* do not try to report this since CIUDAD will not be ready */
   905     z7zhou 				
   905     z7zhou                 /*Note: 	Maybe ready_for_reporting  could be setted to T for creating other nRT channel.
   905     z7zhou                     If requirements changed,the part of this should be TODO.		
   905     z7zhou                    *comp_ptr->vp_reporting_needed = F;
   905     z7zhou                    *jii_ptr->interfaces[comp_ptr->interface_index].intf_reporting_needed = F;
   905     z7zhou                 */
   905     z7zhou                 
     2     yanzuo                 /* hard-code WHISKY pid since WHISKY does not send
     2     yanzuo                    APC 2nd phase init request */
     2     yanzuo                 ((pid_struct_t *)
     2     yanzuo                  & jiafil_ptr__r( jii_ptr->cluster_idx )->apc_manager_pid
     2     yanzuo                     )->family = WHISKY_P;
     2     yanzuo             }
     2     yanzuo         }
   761    lifsong         else if(jii_ptr->is_center_unit)
   761    lifsong         {
   761    lifsong            pri = CENTER_NODE__PRI__C;
   761    lifsong         }
     2     yanzuo         else
     2     yanzuo         {
     2     yanzuo             /* Now looking for tributary unit task.
     2     yanzuo                Give higher priority to WO units. */
     2     yanzuo             pri = (jii_ptr->is_wo_unit) ? WO_TRIB_PRI__C : TRIB_PRI__C;
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo         if ( pri != 0 )
     2     yanzuo         {
     2     yanzuo             /* Check MXU restart-related tasks first because
     2     yanzuo                they do not depend on trib_startup_allowed flag */
     2     yanzuo 
     2     yanzuo             if ( jii_ptr->trib_restart_needed ||
     2     yanzuo                  comp_ptr->res_release_needed )
     2     yanzuo             {
     2     yanzuo                 /* Reverse the priorities of tributary and ALP1 units.
     2     yanzuo                    That way SP-tributary units will be restarted
     2     yanzuo                    first and WO-ALP1 unit resources will be released
     2     yanzuo                    last. */
     2     yanzuo 
     2     yanzuo                 switch( pri )
     2     yanzuo                 {
     2     yanzuo                 case WO_ALP1_PRI__C:
     2     yanzuo                 case TRIB_PRI__C:
     2     yanzuo                     pri = (WO_ALP1_PRI__C + TRIB_PRI__C) - pri;
     2     yanzuo                     break;
     2     yanzuo                 }
     2     yanzuo 
     2     yanzuo                 if ( jii_ptr->trib_restart_needed )
     2     yanzuo                 {
     2     yanzuo                     job = TASK_TYPE__T_TRIB_RESTART_C;
     2     yanzuo                     pri += TRIB_RESTART_BASE_PRI__C;
     2     yanzuo                 }
     2     yanzuo                 else
     2     yanzuo                 {
   359    lifsong                    if ( iw8s1_unit_check__r(jii_ptr->unit_type) )
   581    jianyxu                    {
   359    lifsong                    	   if ( (comp_ptr->proc_index == 1 ) ||
   581    jianyxu                             ((comp_ptr->proc_index == 0 ) && !( jii_ptr->procs[1].res_release_needed )))
   581    jianyxu                        {
   359    lifsong                            job = TASK_TYPE__T_REL_RESOURCES_C;
   359    lifsong                            pri += RES_RELEASE_BASE_PRI__C;
  1521       pshu                    	   }else{
  1521       pshu                    	       job = TASK_TYPE__T_REL_RESOURCES_C;
  1521       pshu 						   pri += RES_RELEASE_BASE_PRI__C + 100;
  1521       pshu 					   } 
   581    jianyxu                    }
   359    lifsong                    else 
   359    lifsong                    {
   359    lifsong                         job = TASK_TYPE__T_REL_RESOURCES_C;
   359    lifsong                         pri += RES_RELEASE_BASE_PRI__C;
   581    jianyxu                    }
     2     yanzuo                 }
     2     yanzuo 
     2     yanzuo                 /* 16104ES08P: trigger 'owner_id' releases first after WO-MXU restart */
     2     yanzuo                if (jii_ptr->unit_type == UNIT_TYPE_T_ICSU_C ||
     2     yanzuo                    jii_ptr->unit_type == UNIT_TYPE_T_ISU_C)
     2     yanzuo                {
     2     yanzuo                    --pri;
     2     yanzuo                }
   155    lifsong                if ( alp_ptr == NULL )
   155    lifsong                {
     2     yanzuo                     /* if there's no WO ALP1-unit but the unit itself
     2     yanzuo                        is an ALP1 unit (as in the case
     2     yanzuo                        of removing a SE-NH NIS1), set the unit
     2     yanzuo                        itself as the WO-ALP1 unit. */
     2     yanzuo                     if (jii_ptr->is_level1_alp_unit)
     2     yanzuo                         alp_ptr = jii_ptr;
     2     yanzuo                     else if (jii_ptr->removing_unit)
     2     yanzuo                     /* If ALP1 units of cluster are separated and tributary unit
     2     yanzuo                        is removed, we have to read ALP1 info here
     2     yanzuo                        ( jii_find_first_comp__r returns NULL in alp_ptr
     2     yanzuo                          if ALP1 unit is not in WO-state)                      */
     2     yanzuo                        alp_ptr = jiifil_ptr__r(jiafil_ptr__r(jii_ptr->cluster_idx)->alp_unit[0].jii_idx);
     2     yanzuo                     else
     2     yanzuo                     /* cannot allow this deletion task. */
     2     yanzuo                         job = 0;
   155    lifsong                }
     2     yanzuo             }
     2     yanzuo             else
   617     qinggu                 pri += STARTUP_BASE_PRI__C;
     2     yanzuo 
     2     yanzuo             if ( job != 0 )
     2     yanzuo             {
     2     yanzuo                 /* already found a release task, no need to check more */
     2     yanzuo             }
     2     yanzuo             else if (alp_ptr == 0)
     2     yanzuo             {
     2     yanzuo                 /* Cannot handle unit without WO-ALP unit. */
     2     yanzuo             }
   559    lifsong             else if (jii_ptr == alp_ptr && !jii_ptr->is_wo_unit && comp_ptr->unit_type != UNIT_TYPE_T_SS7UP_C)
     2     yanzuo             {
     2     yanzuo                 /* Unit state changed to WO a short time ago,
     2     yanzuo                    but it has not yet sent FIGSEB service request.
     2     yanzuo                    Do not start to configure it yet. */
     2     yanzuo             }
   359    lifsong             else if( is_trib_comp__r( jii_ptr, alp_ptr, comp_ptr ) 
   359    lifsong                        && !trib_task_allowed__r( jii_ptr, alp_ptr, comp_ptr ) )
     2     yanzuo             {
     2     yanzuo                 /* Tributary or SP-ALP1 unit must wait until
     2     yanzuo                    WO-ALP1 unit makes some progress. */
     2     yanzuo             }
     2     yanzuo 
     2     yanzuo             /* Checking normal startup-related tasks.
     2     yanzuo                If two flags can be on at the same time,
     2     yanzuo                e.g. port_conf_needed and if_init_needed,
     2     yanzuo                they need to be checked here in the order
     2     yanzuo                of the corresponding init tasks. */
     2     yanzuo 
     2     yanzuo             else if ((att_left = comp_ptr->start_attempts_left) < 1)
     2     yanzuo             {
     2     yanzuo                 /* lets not try this unit any more */
     2     yanzuo             }
     2     yanzuo             else if (jii_ptr->port_conf_needed)
     2     yanzuo             {
     2     yanzuo                 if ( comp_ptr->proc_index == 0 &&
     2     yanzuo                      port_conf_allowed__r( jii_ptr ))
   617     qinggu                     job = TASK_TYPE__T_PORT_CONF_C;
     2     yanzuo                 /* no need to check for any other tasks
     2     yanzuo                    if port configuration has not been done */
     2     yanzuo             }
   361    lifsong             else if (jii_ptr->apc_init_needed){
     2     yanzuo                 job = TASK_TYPE__T_APC_INIT_C;
   361    lifsong                 /* prevent SP ALP1 units from being blocked: */
   361    lifsong                 if ( !jii_ptr->is_wo_unit)
   617     qinggu                     pri -= 250;
   617     qinggu             }
     2     yanzuo 
     2     yanzuo             else if (comp_ptr->if_init_needed)
     2     yanzuo             {
     2     yanzuo                 if ( if_init_allowed__r( jii_ptr, comp_ptr ))
   617     qinggu                     job = TASK_TYPE__T_IF_INIT_C,  pri -= 10;
     2     yanzuo                 /* no need to check the remaining task types
     2     yanzuo                    when interface has not been configured yet */
     2     yanzuo             }
   155    lifsong             else if (jii_ptr->port_conf_ph2_needed) 
   155    lifsong             {
   617     qinggu                 job = TASK_TYPE__T_PORT_CONF_PH2_C,  pri -= 40;
   155    lifsong             }
     2     yanzuo 
     2     yanzuo             else if (comp_ptr->if_init_ph2_needed)
   702    lifsong             {
   702    lifsong                   if ( if_init_allowed__r( jii_ptr, comp_ptr ))
   702    lifsong                      job = TASK_TYPE__T_IF_INIT_PH2_C,    pri -= 50;
   702    lifsong             }
     2     yanzuo             else if (jii_ptr->apc_init_ph2_needed)
   617     qinggu                 job = TASK_TYPE__T_APC_INIT_PH2_C;
     2     yanzuo 
     2     yanzuo             /*The sequence of HC create task and TRIB REPORT task is changed.
     2     yanzuo               For EIPU unit, interface is created in HC create task.
   155    lifsong                   If the HC create task is not done before trib report task, trib report task can not be done successfully.
   155    lifsong                   Once the trib report task begin, HC create task has no chance to do for both conditions are ready.
     2     yanzuo               For other unit, the sequence is not important at all for these two task has no relationship.*/
     2     yanzuo 
     2     yanzuo             else if( comp_ptr->half_conns_needed &&
     2     yanzuo                      /* For WO-OMU, this flag gets set and checked
     2     yanzuo                         before SYM-MXU tributary startup is allowed,
     2     yanzuo                         so the trib_startup_allowed flag has to be
     2     yanzuo                         checked too. */
     2     yanzuo                      alp_ptr->trib_startup_allowed )
   617     qinggu                 job = TASK_TYPE__T_HC_CREATE_C, pri -= 35;
     2     yanzuo 
   862     z7zhou             else if( (comp_ptr->vp_reporting_needed || jii_ptr->interfaces[comp_ptr->interface_index].intf_reporting_needed)
   862     z7zhou                         && trib_report_allowed__r(jii_ptr, alp_ptr, comp_ptr))
   862     z7zhou             {
   862     z7zhou                 job = TASK_TYPE__T_TRIB_REPORT_C,    pri -= 20;
   862     z7zhou             }
    98    lifsong             else if( comp_ptr->half_conns_ph2_needed &&
   155    lifsong                      alp_ptr->trib_startup_allowed)
   617     qinggu                 job = TASK_TYPE__T_HC_CREATE_C, pri += 5;   
   665     qinggu 
   665     qinggu             else if ( comp_ptr->half_conns_dsp_needed &&
   665     qinggu                      alp_ptr->trib_startup_allowed)
   890    lifsong                 job = TASK_TYPE__T_HC_CREATE_C, pri += 4;
   665     qinggu 
   862     z7zhou             
     2     yanzuo 
   617     qinggu             else if (jii_ptr->alp_warmup_needed && comp_ptr->half_conns_created){
   617     qinggu                 job = TASK_TYPE__T_SP_ALP_WARMUP_C,  pri -= 50;
   617     qinggu                 /* prevent SP ALP1 units from being blocked: */
   617     qinggu                 if ( !jii_ptr->is_wo_unit)
   617     qinggu                     pri -= 200;
   617     qinggu             }
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo         /* If warming is in progress, block most tasks
     2     yanzuo            in this cluster. */
     2     yanzuo         if ( pri != 0
   155    lifsong              && jiafil_ptr__r( jii_ptr->cluster_idx )->warming_in_progress
   155    lifsong              && job != TASK_TYPE__T_IF_INIT_PH2_C
   155    lifsong              && job != TASK_TYPE__T_PORT_CONF_PH2_C )
     2     yanzuo         {
     2     yanzuo             unit_state_t  l_if_ustate;
     2     yanzuo 
     2     yanzuo             job = 0;
     2     yanzuo             /* When old warming system is used, check if the SP unit
     2     yanzuo                is already in SP-EX state; if so, trigger another
     2     yanzuo                warming task to clear warming_in_progress indicator. */
     2     yanzuo 
     2     yanzuo             if (jii_ptr->is_level1_alp_unit &&
     2     yanzuo                 ! jii_ptr->is_wo_unit &&
   155    lifsong                 unit_state_by_phys_addr_r( comp_ptr->phys_addr,&l_if_ustate ) == SUCCESS_EC &&
  1124   huantang                 ( l_if_ustate == UNIT_STATE_T_SPEX_C))
     2     yanzuo             {
     2     yanzuo                 job = TASK_TYPE__T_SP_ALP_WARMUP_C;
     2     yanzuo             }
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo         if ( job &&
     2     yanzuo              ( pri < next_jpri ||
     2     yanzuo                ( pri == next_jpri && att_left > next_att_left )))
     2     yanzuo         {
     2     yanzuo             next_job        = job;
     2     yanzuo             next_jpri       = pri;
     2     yanzuo             next_att_left   = att_left;
     2     yanzuo             job_alp_unit    = alp_ptr;
     2     yanzuo             job_target_unit = jii_ptr;
     2     yanzuo             job_target_comp = comp_ptr;
     2     yanzuo         }
     2     yanzuo 
     2     yanzuo         found = jii_find_next_comp__r( cluster, &skey,
     2     yanzuo                                        &jii_ptr, &comp_ptr, &alp_ptr );
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo     if ( next_job != TASK_TYPE__T_NO_TASK_C )
     2     yanzuo     {
     2     yanzuo         job_target_comp->start_attempts_left--;
     2     yanzuo     }
     2     yanzuo     else
     2     yanzuo     {
     2     yanzuo         /* check if there is any unit which needs to be silenced
     2     yanzuo            by sending it dummy ATM interface parameters. */
     2     yanzuo         if ( jii_find_stoppable_comp__r( &stop_para.full_hms_addr,
     2     yanzuo                                          &stop_para.sar_type ))
     2     yanzuo         {
     2     yanzuo             next_job = TASK_TYPE__T_STOP_REQS_C;
     2     yanzuo             job_target_unit = (void *) &stop_para;
     2     yanzuo         }
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     if ( next_job != TASK_TYPE__T_NO_TASK_C )
     2     yanzuo     {
     2     yanzuo         job_data_ptr->task_code = next_job;
     2     yanzuo         (*job_setup_func_table[next_job])( (void *)&job_data_ptr->params,
     2     yanzuo                                            &job_data_ptr->param_data_size,
     2     yanzuo                                            job_alp_unit,
     2     yanzuo                                            job_target_unit,
     2     yanzuo                                            job_target_comp );
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return ( next_job != TASK_TYPE__T_NO_TASK_C );
     2     yanzuo }
     2     yanzuo 
     2     yanzuo /* next: functions to set up parameters needed in each job */
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* This setup function copies the JIIFIL records of the target unit
     2     yanzuo    and its active ALP unit to the task data structure. */
     2     yanzuo PRIVATE error_t
     2     yanzuo basic_setup__r( generic_params__t *data_ptr,
     2     yanzuo                 dword             *data_size_ptr,
     2     yanzuo                 jiifil__t         *alp_unit,
     2     yanzuo                 jiifil__t         *target_unit,
     2     yanzuo                 jii_comp_data__t  *target_comp )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( *data_ptr );
     2     yanzuo 
     2     yanzuo     data_ptr->unit_data     = *target_unit;
     2     yanzuo     data_ptr->proc_idx      = target_comp->proc_index;
     2     yanzuo     data_ptr->alp_unit_data = *alp_unit;
     2     yanzuo     data_ptr->apc_mgr_pid   = jiafil_ptr__r( alp_unit->cluster_idx )->apc_manager_pid;
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo PRIVATE error_t
     2     yanzuo if_init_setup__r( generic_params__t *data_ptr,
     2     yanzuo                   dword             *data_size_ptr,
     2     yanzuo                   jiifil__t         *alp_unit,
     2     yanzuo                   jiifil__t         *target_unit,
     2     yanzuo                   jii_comp_data__t  *target_comp )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( *data_ptr );
     2     yanzuo 
     2     yanzuo     data_ptr->unit_data     = *target_unit;
     2     yanzuo     data_ptr->alp_unit_data = *alp_unit;
     2     yanzuo     data_ptr->proc_idx      = target_comp->proc_index;
     2     yanzuo     data_ptr->apc_mgr_pid   = jiafil_ptr__r( alp_unit->cluster_idx )->apc_manager_pid;
     2     yanzuo 
     2     yanzuo     if ( target_unit == alp_unit )
     2     yanzuo     {
     2     yanzuo         if (jii_find_computer__r( own_unit_phys_addr,
     2     yanzuo                                   &target_unit, &target_comp, &alp_unit ))
     2     yanzuo         {
     2     yanzuo             /* pass WO-OMU information in place of ALP unit */
     2     yanzuo             data_ptr->alp_unit_data = *target_unit;
     2     yanzuo         }
     2     yanzuo         else
     2     yanzuo             memset( (byte *)&data_ptr->alp_unit_data,
     2     yanzuo                     0xFF, sizeof( data_ptr->alp_unit_data ));
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo PRIVATE error_t
     2     yanzuo hc_init_setup__r( generic_params__t *data_ptr,
     2     yanzuo                   dword             *data_size_ptr,
     2     yanzuo                   jiifil__t         *alp_unit,
     2     yanzuo                   jiifil__t         *target_unit,
     2     yanzuo                   jii_comp_data__t  *target_comp )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( *data_ptr );
     2     yanzuo 
     2     yanzuo     data_ptr->unit_data     = *target_unit;
     2     yanzuo     data_ptr->alp_unit_data = *alp_unit;
     2     yanzuo     data_ptr->proc_idx      = target_comp->proc_index;
     2     yanzuo     data_ptr->apc_mgr_pid   = jiafil_ptr__r( alp_unit->cluster_idx )->apc_manager_pid;
     2     yanzuo 
     2     yanzuo     if ( (app_mxu_unit_check__r( *target_unit ) && target_unit->sym_mxu_flag) /*||
   155    lifsong       (eipu_unit_check__r( *target_unit ) )*/ )
     2     yanzuo     {
     2     yanzuo         if (jii_find_computer__r( own_unit_phys_addr,
     2     yanzuo                                   &target_unit, &target_comp, &alp_unit ))
     2     yanzuo         {
     2     yanzuo             /* pass WO-OMU information in place of ALP unit */
     2     yanzuo             data_ptr->alp_unit_data = *target_unit;
     2     yanzuo         }
     2     yanzuo         else
     2     yanzuo             memset( (byte *)&data_ptr->alp_unit_data,
     2     yanzuo                     0xFF, sizeof( data_ptr->alp_unit_data ));
     2     yanzuo     }
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo /* This setup function copies only the target unit JIIFIL record
     2     yanzuo    to the task data structure. */
     2     yanzuo PRIVATE error_t
     2     yanzuo target_setup__r( jiifil__t            *data_ptr,
     2     yanzuo                  dword                *data_size_ptr,
     2     yanzuo                  jiifil__t            *alp_unit,
     2     yanzuo                  jiifil__t            *target_unit,
     2     yanzuo                  jii_comp_data__t       *target_comp )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( *data_ptr );
     2     yanzuo 
     2     yanzuo     *data_ptr = *target_unit;
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo PRIVATE error_t
     2     yanzuo stop_req_setup__r( stop_params__t *data_ptr,
     2     yanzuo                    dword          *data_size_ptr,
     2     yanzuo                    void           *dummy_alp_ptr,
     2     yanzuo                    void           *stop_data_ptr,
     2     yanzuo                    void           *dummy_comp_ptr )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( stop_params__t );
     2     yanzuo     memcpy( data_ptr, stop_data_ptr, *data_size_ptr );
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo PRIVATE error_t
     2     yanzuo alp_warmup_setup__r( alp_warmup_params__t *data_ptr,
     2     yanzuo                      dword             *data_size_ptr,
     2     yanzuo                      jiifil__t         *alp_unit,
     2     yanzuo                      jiifil__t         *target_unit,
     2     yanzuo                      jii_comp_data__t  *target_comp )
     2     yanzuo {
     2     yanzuo     *data_size_ptr = sizeof( *data_ptr );
     2     yanzuo 
     2     yanzuo     data_ptr->wo_unit = *alp_unit;
     2     yanzuo     data_ptr->sp_unit = *target_unit;
     2     yanzuo 
     2     yanzuo     return SUCCESS_EC;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo void _near_
     2     yanzuo init_job_module__r(void)
     2     yanzuo {
     2     yanzuo     volatile fardef_t f;
     2     yanzuo 
     2     yanzuo     /* workaround for undersized message queue: */
     2     yanzuo     f.ptr = &fpu_exists; /* pointer to G1 segment */
     2     yanzuo     f.ptr_struct.off = (offset) running_pcb;
   205    lifsong #ifndef TNSDL_UNIT_TEST    
     2     yanzuo     if (((process_record_t *)f.ptr)->max_message_buf_count < 0x800)
     2     yanzuo     {
     2     yanzuo         ((process_record_t *)f.ptr)->max_message_buf_count = 0x800;
     2     yanzuo     }
   205    lifsong #endif
     2     yanzuo 
     2     yanzuo     sfu_up__pv = F;
     2     yanzuo 
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_SD4_INIT_C      ] = target_setup__r;
    73     jamema     job_setup_func_table[ TASK_TYPE__T_PORT_CONF_C     ] = basic_setup__r;
    73     jamema     job_setup_func_table[ TASK_TYPE__T_PORT_CONF_PH2_C ] = basic_setup__r;
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_APC_INIT_C      ] = target_setup__r;
     2     yanzuo 
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_IF_INIT_C       ] = if_init_setup__r;
     2     yanzuo 
   155    lifsong     /* if_init_ph2 and hc_create need OMU rec too */  
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_HC_CREATE_C     ] = hc_init_setup__r;
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_IF_INIT_PH2_C   ] = hc_init_setup__r;
   155    lifsong   
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_APC_INIT_PH2_C  ] = basic_setup__r;
   155    lifsong     job_setup_func_table[ TASK_TYPE__T_REL_RESOURCES_C ] = basic_setup__r;
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_TRIB_REPORT_C   ] = basic_setup__r;
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_TRIB_RESTART_C  ] = basic_setup__r;
     2     yanzuo 
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_STOP_REQS_C     ] = stop_req_setup__r;
     2     yanzuo 
     2     yanzuo     job_setup_func_table[ TASK_TYPE__T_SP_ALP_WARMUP_C ] = alp_warmup_setup__r;
     2     yanzuo }
     2     yanzuo 
     2     yanzuo 
     2     yanzuo /* things to do:
     2     yanzuo    - make sure that the data of each task is what JIGCLUGX.SDL expects
     2     yanzuo */
